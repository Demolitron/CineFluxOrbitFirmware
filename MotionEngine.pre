
# 1 "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"

# 3 "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double);
extern double cos(double);
extern double tan(double);
extern double asin(double);
extern double acos(double);
extern double atan(double);
extern double atan2(double, double);
extern double log(double);
extern double log10(double);
extern double pow(double, double);
extern double exp(double);
extern double sinh(double);
extern double cosh(double);
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 7 "Z:\CineFlux\Dropbox\Orbit\main.h"
typedef union LONG {
unsigned char ub[4];
signed char b[4];
unsigned int ui[2];
signed int i[2];
unsigned long ul;
signed long l;
};

typedef union {
unsigned char ub[4];
signed char b[4];
unsigned int ui[2];
signed int i[2];
unsigned long ul;
signed long l;
float fl;
double dbl;
} MULTI;



void main(void);
void AckCmd(unsigned char CmdID);
void NackCmd(unsigned char CmdID, unsigned char Reason);
void MessageStream_WriteMULTI(MULTI dat, unsigned char CmdID);
void MessageStream_WriteByte(unsigned char dat);
unsigned char MessageStream_ReadByte();
void GoToSleep();
void SetupIO();
void interrupt FastTick(void);
void interrupt low_priority SlowTick();
void SetupHardware();
void Idle(void);
double GetCurrentLinearPosition();
double GetCurrentAngle();

const signed char enc_states[] = {0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0};




unsigned char ReadIdx = 0;
volatile unsigned char TX_Idx = 0;
volatile unsigned char TX_bCount = 0;
volatile unsigned char TXBuffer[255];
volatile bit RX_MsgComplete;
volatile bit RX_InProgress;
volatile unsigned char RX_Idx = 0;
volatile unsigned char RXBuffer[255];
volatile unsigned char MyID = 0xAA;
volatile bit isPendingExternalUIEvent;
volatile char PendingExternalUIEvent;
volatile bit ExtModeActive;




volatile bit ClearUI_Event = 0;
volatile bit bLock_RotaryDetentIntervals = 0;
unsigned char RotaryDetentIntervals[16];
volatile bit ZeroRotaryDetentIntervals = 0;
volatile bit bLock_UI_Event = 0;
volatile char UI_Event;

# 83
volatile bit bLock_BatteryVoltage = 0;
unsigned int BatteryVoltage = 0;
volatile bit bLowVoltageTrip = 0;


volatile bit LCD_BacklightEnabled;


volatile bit bFollowMode = 0;
volatile bit bMove_InProgress = 0;
unsigned long Move_speedQ24 = 0;
union LONG Move_shifted_position;
union LONG Move_position[2];
unsigned long Move_AccelValueQ24 = 0;
unsigned long Move_CoastSpeedQ24 = 0;
unsigned long Move_DecelPosition = 0;
signed long Move_FinalPosition = 0;
signed long Move_Origin = 0;
volatile bit bMove_Neg = 0;



volatile bit bSpeedMode = 0;
unsigned long Speed_SetToThis;
volatile bit Speed_SetPending;
volatile bit Speed_IsAccelerating;



volatile bit bClear_MotorPosition = 0;
signed long Motor_Position = 0;
volatile bit bLock_Motor_Position = 0;


volatile bit bIncrement_PID_Setpoint = 0;
volatile bit bDecrement_PID_Setpoint = 0;
volatile bit bLock_PID_SetPoint = 0;

volatile bit bMotionError = 0;
volatile bit bPowerOff = 0;

# 181
const unsigned char ASCII_HEX_TO_BINARY[128] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0,
0, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0};

const unsigned char BINARY_TO_ASCII_HEX[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

# 2 "Z:\CineFlux\Dropbox\Orbit\settings.h"
typedef struct {
unsigned char Version;
unsigned int BatteryLowVoltageLevel;
unsigned int Battery12V_Q8;
unsigned char PowerResponseLimiter_Slope;
unsigned char PowerResponseLimiter_Intercept;
double Counts_per_Volt;
double Volts_per_Count;
unsigned char BacklightPWM_Duty;
unsigned int BacklightIdleTimeout;
double SystemAcceleration;
double MaxSpeed;
signed int PID_MaxError;
unsigned int PID_Kp;
unsigned int PID_Kd;
double Counts_Per_Degree;
double Degrees_Per_Count;
} ConfigStruct;

typedef struct {
char Type;
unsigned int Origin_deg;
char EndMode;
char IsClockWise;
double ProgramRunTime_sec;
double CycleCount_rev;
double CycleTime_sec;
double Speed_deg_sec;
char SpeedMode;
} OrbitProgramStruct;

typedef struct {
char Type;
unsigned int Origin_deg;
unsigned char PointCount;
unsigned char Bounce;
unsigned int LoopCount;
signed int Distances_deg[18];
unsigned int TravelTimes_sec[18];
unsigned int DwellTimes_sec[19];
} WaypointProgramStruct;

typedef union {
unsigned char ub[120];
WaypointProgramStruct WayPoint;
OrbitProgramStruct Orbit;
} PRESET;

ConfigStruct Config;
WaypointProgramStruct CurrentPath;
OrbitProgramStruct CurrentOrbitProgram;

void FactoryDefault();
void SaveSettings();
void LoadSettings();
void EEprom_write(unsigned int *addr, unsigned char *dat, unsigned char bCount);
void EEprom_read(unsigned int *addr, unsigned char *dat, unsigned char bCount);
unsigned char GetPresetType(char pnum);
void SavePreset(char pnum, unsigned char *dat);
void LoadPreset(char pnum, unsigned char *dat);

# 1 "Z:\CineFlux\Dropbox\Orbit\MotionEngine.h"
char Move(double Distance_deg, double Speed_deg_sec);
char MoveAdvanced(double Distance_deg, double _Speed_Deg_Sec, double _Acceleration_Deg_Sec_Sec);
char MoveToLinear(double DestinationPostion, double Speed_Deg_Sec);
char MoveToAngle(double DestinationAngle, double Speed_Deg_Sec);
double SpeedRequiredToMoveInTime(double Distance, double Time);
double MinTimeToMove(double Distance);

# 6 "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
double MinTimeToMove(double _Distance) {
double D;
double HalfD;

if (_Distance < 0) D = -_Distance;
else D = _Distance;
HalfD = D * 0.5;

double AccelTime = Config.MaxSpeed / Config.SystemAcceleration;
double AccelDist = ((Config.SystemAcceleration * AccelTime) * AccelTime)*0.5;
if (AccelDist > HalfD) {
AccelTime = sqrt(D / Config.SystemAcceleration);
AccelDist = ((Config.SystemAcceleration * AccelTime) * AccelTime)*0.5;
}
double RealSpeed = AccelTime * Config.SystemAcceleration;
double CoastDistance = D - (2 * AccelDist);
double CoastTime = CoastDistance / RealSpeed;
double TotalTime = AccelTime * 2;
TotalTime += CoastTime;
return TotalTime;
}

double SpeedRequiredToMoveInTime(double _Distance, double _Time) {
double D;
double T;

if (_Distance < 0) D = _Distance * -0.5;
else D = _Distance * 0.5;

if (_Time < 0) T = _Time * -0.5;
else T = _Time * 0.5;

if (T > 4096) return D / T;

double RootPrime = (T * T)-(2 * D / Config.SystemAcceleration);
if (RootPrime < 0) return -1;

double AccelTime = T - sqrt(RootPrime);
double Speed = AccelTime*Config.SystemAcceleration;
if (Speed > Config.MaxSpeed) return -2;
return Speed;
}

double GetCurrentLinearPosition() {
double MotorPos;

bLock_Motor_Position = 1;
MotorPos = Motor_Position;
bLock_Motor_Position = 0;

MotorPos *= Config.Degrees_Per_Count;
return MotorPos;
}

double GetCurrentAngle() {
double MotorPos;

bLock_Motor_Position = 1;
MotorPos = Motor_Position;
bLock_Motor_Position = 0;

MotorPos *= Config.Degrees_Per_Count;

if (MotorPos > 0) {
while (MotorPos > 360) MotorPos -= 360;
} else {
while (MotorPos<-360) MotorPos += 360;
MotorPos += 360;
}
return MotorPos;
}

char MoveToLinear(double DestinationPostion, double Speed_Deg_Sec) {
double CurrentPosition = GetCurrentLinearPosition();
double Distance = DestinationPostion - CurrentPosition;
return Move(Distance, Speed_Deg_Sec);
}

char MoveToAngle(double _DestinationAngle, double _Speed_Deg_Sec) {
double DestinationAngle;
double Speed_Deg_Sec;

if (_Speed_Deg_Sec < 0) Speed_Deg_Sec = -_Speed_Deg_Sec;
else Speed_Deg_Sec = _Speed_Deg_Sec;

if (_DestinationAngle < 0) {
DestinationAngle = _DestinationAngle;
while (DestinationAngle<-360) DestinationAngle += 360;
DestinationAngle += 360;
} else {
DestinationAngle = _DestinationAngle;
while (DestinationAngle > 360) DestinationAngle -= 360;
}


double CurrentAngle;
CurrentAngle = GetCurrentAngle();

double CW_Distance;
double CCW_Distance;

if (DestinationAngle > CurrentAngle) {
CW_Distance = DestinationAngle - CurrentAngle;
CCW_Distance = CurrentAngle + (360 - DestinationAngle);
} else {
CW_Distance = (360 - CurrentAngle) + DestinationAngle;
CCW_Distance = CurrentAngle - DestinationAngle;
}

if (CW_Distance < CCW_Distance)
return Move(CW_Distance, Speed_Deg_Sec);
else
return Move(-CCW_Distance, Speed_Deg_Sec);
}

char Move(double Distance_deg, double _Speed_Deg_Sec){
return MoveAdvanced(Distance_deg, _Speed_Deg_Sec, Config.SystemAcceleration);
}

char MoveAdvanced(double Distance_deg, double _Speed_Deg_Sec, double _Acceleration_Deg_Sec_Sec) {
if (bMove_InProgress) return -1;

signed long CurrentPosition_counts;
double Speed_Deg_Sec;
double Accel_Deg_Sec_Sec;

if (_Speed_Deg_Sec < 0) Speed_Deg_Sec = -_Speed_Deg_Sec;
else Speed_Deg_Sec = _Speed_Deg_Sec;

if (_Acceleration_Deg_Sec_Sec < 0) Accel_Deg_Sec_Sec = -_Acceleration_Deg_Sec_Sec;
else Accel_Deg_Sec_Sec = _Acceleration_Deg_Sec_Sec;

signed long Distance_counts = (signed long) (Distance_deg * Config.Counts_Per_Degree);
if (Distance_counts == 0) return 0;

bLock_Motor_Position = 1;
CurrentPosition_counts = Motor_Position;
bLock_Motor_Position = 0;

Move_FinalPosition = CurrentPosition_counts + Distance_counts;
Move_Origin = CurrentPosition_counts;

double DD;
if (Distance_deg < 0) {
DD = -Distance_deg;
bMove_Neg = 1;
} else {
DD = Distance_deg;
bMove_Neg = 0;
}

double AccelTime = Speed_Deg_Sec / Accel_Deg_Sec_Sec;
double AccelDist = (0.5 * Accel_Deg_Sec_Sec * AccelTime * AccelTime);

if ((AccelDist * 2) > DD) {
AccelDist = DD / 2;
}

double DP = (DD - AccelDist) * Config.Counts_Per_Degree;
Move_DecelPosition = (unsigned long) DP;

double AV = Accel_Deg_Sec_Sec * Config.Counts_Per_Degree * 67.1088640;
Move_AccelValueQ24 = (unsigned long) AV;

double CS = Speed_Deg_Sec * Config.Counts_Per_Degree * 33554.4320;
Move_CoastSpeedQ24 = (unsigned long) CS;

Move_shifted_position.ul = 0;
Move_speedQ24 = 0;
Move_position[0].ul = 0;
Move_position[1].ul = 0;

bMove_InProgress = 1;
return 0;
}
