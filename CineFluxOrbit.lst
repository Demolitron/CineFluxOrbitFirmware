

HI-TECH Software PIC18 PRO Macro Assembler V9.80 build 11162 
                                                                                               Wed Jan 08 01:51:56 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 11162
     1                           	processor	18F67K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	idataBANK2,global,class=CODE,delta=1
     9                           	psect	idataBANK4,global,class=CODE,delta=1
    10                           	psect	idataBANK5,global,class=CODE,delta=1
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    28                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    29                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    30                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    32                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    34                           	psect	text0,global,reloc=2,class=CODE,delta=1
    35                           	psect	text1,global,reloc=2,class=CODE,delta=1
    36                           	psect	text2,global,reloc=2,class=CODE,delta=1
    37                           	psect	text3,global,reloc=2,class=CODE,delta=1
    38                           	psect	text4,global,reloc=2,class=CODE,delta=1
    39                           	psect	text5,global,reloc=2,class=CODE,delta=1
    40                           	psect	text6,global,reloc=2,class=CODE,delta=1
    41                           	psect	text7,global,reloc=2,class=CODE,delta=1
    42                           	psect	text8,global,reloc=2,class=CODE,delta=1
    43                           	psect	text9,global,reloc=2,class=CODE,delta=1
    44                           	psect	text10,global,reloc=2,class=CODE,delta=1
    45                           	psect	text11,global,reloc=2,class=CODE,delta=1
    46                           	psect	text12,global,reloc=2,class=CODE,delta=1
    47                           	psect	text13,global,reloc=2,class=CODE,delta=1
    48                           	psect	text14,global,reloc=2,class=CODE,delta=1
    49                           	psect	text15,global,reloc=2,class=CODE,delta=1
    50                           	psect	text16,global,reloc=2,class=CODE,delta=1
    51                           	psect	text17,global,reloc=2,class=CODE,delta=1
    52                           	psect	text18,global,reloc=2,class=CODE,delta=1
    53                           	psect	text19,global,reloc=2,class=CODE,delta=1
    54                           	psect	text20,global,reloc=2,class=CODE,delta=1
    55                           	psect	text21,global,reloc=2,class=CODE,delta=1
    56                           	psect	text22,global,reloc=2,class=CODE,delta=1
    57                           	psect	text23,global,reloc=2,class=CODE,delta=1
    58                           	psect	text24,global,reloc=2,class=CODE,delta=1
    59                           	psect	text25,global,reloc=2,class=CODE,delta=1
    60                           	psect	text26,global,reloc=2,class=CODE,delta=1
    61                           	psect	text27,global,reloc=2,class=CODE,delta=1
    62                           	psect	text28,global,reloc=2,class=CODE,delta=1
    63                           	psect	text29,global,reloc=2,class=CODE,delta=1
    64                           	psect	text30,global,reloc=2,class=CODE,delta=1
    65                           	psect	text31,global,reloc=2,class=CODE,delta=1
    66                           	psect	text32,global,reloc=2,class=CODE,delta=1
    67                           	psect	text33,global,reloc=2,class=CODE,delta=1
    68                           	psect	text34,global,reloc=2,class=CODE,delta=1
    69                           	psect	text35,global,reloc=2,class=CODE,delta=1
    70                           	psect	text36,global,reloc=2,class=CODE,delta=1
    71                           	psect	text37,global,reloc=2,class=CODE,delta=1
    72                           	psect	text38,global,reloc=2,class=CODE,delta=1
    73                           	psect	text39,global,reloc=2,class=CODE,delta=1
    74                           	psect	text40,global,reloc=2,class=CODE,delta=1
    75                           	psect	text41,global,reloc=2,class=CODE,delta=1
    76                           	psect	text42,global,reloc=2,class=CODE,delta=1
    77                           	psect	text43,global,reloc=2,class=CODE,delta=1
    78                           	psect	text44,global,reloc=2,class=CODE,delta=1
    79                           	psect	text45,global,reloc=2,class=CODE,delta=1
    80                           	psect	text46,global,reloc=2,class=CODE,delta=1
    81                           	psect	text47,global,reloc=2,class=CODE,delta=1
    82                           	psect	text48,global,reloc=2,class=CODE,delta=1
    83                           	psect	text49,global,reloc=2,class=CODE,delta=1
    84                           	psect	text50,global,reloc=2,class=CODE,delta=1
    85                           	psect	text51,global,reloc=2,class=CODE,delta=1
    86                           	psect	text52,global,reloc=2,class=CODE,delta=1
    87                           	psect	text53,global,reloc=2,class=CODE,delta=1
    88                           	psect	text54,global,reloc=2,class=CODE,delta=1
    89                           	psect	text55,global,reloc=2,class=CODE,delta=1
    90                           	psect	text56,global,reloc=2,class=CODE,delta=1
    91                           	psect	text57,global,reloc=2,class=CODE,delta=1
    92                           	psect	text58,global,reloc=2,class=CODE,delta=1
    93                           	psect	text59,global,reloc=2,class=CODE,delta=1
    94                           	psect	text60,global,reloc=2,class=CODE,delta=1
    95                           	psect	text61,global,reloc=2,class=CODE,delta=1
    96                           	psect	text62,global,reloc=2,class=CODE,delta=1
    97                           	psect	text63,global,reloc=2,class=CODE,delta=1
    98                           	psect	text64,global,reloc=2,class=CODE,delta=1
    99                           	psect	text65,global,reloc=2,class=CODE,delta=1
   100                           	psect	text66,global,reloc=2,class=CODE,delta=1
   101                           	psect	text67,global,reloc=2,class=CODE,delta=1
   102                           	psect	text68,global,reloc=2,class=CODE,delta=1
   103                           	psect	text69,global,reloc=2,class=CODE,delta=1
   104                           	psect	text70,global,reloc=2,class=CODE,delta=1
   105                           	psect	text71,global,reloc=2,class=CODE,delta=1
   106                           	psect	text72,global,reloc=2,class=CODE,delta=1
   107                           	psect	text73,global,reloc=2,class=CODE,delta=1
   108                           	psect	text74,global,reloc=2,class=CODE,delta=1
   109                           	psect	text75,global,reloc=2,class=CODE,delta=1
   110                           	psect	text76,global,reloc=2,class=CODE,delta=1
   111                           	psect	text77,global,reloc=2,class=CODE,delta=1
   112                           	psect	text78,global,reloc=2,class=CODE,delta=1
   113                           	psect	text79,global,reloc=2,class=CODE,delta=1
   114                           	psect	text80,global,reloc=2,class=CODE,delta=1
   115                           	psect	text81,global,reloc=2,class=CODE,delta=1
   116                           	psect	text82,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   118                           	psect	text84,global,reloc=2,class=CODE,delta=1
   119                           	psect	text85,global,reloc=2,class=CODE,delta=1
   120                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   121                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   122                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   123                           	psect	param0,global,class=BANK0,space=1,delta=1
   124                           	psect	pa_nodes,global,class=CODE,delta=1
   125  0000                     tblptru	equ	0xFF8
   126                           tblptrh	equ	0xFF7
   127                           tblptrl	equ	0xFF6
   128                           tablat	equ	0xFF5
   129                           prodh	equ	0xFF4
   130                           prodl	equ	0xFF3
   131                           intcon	equ	0xFF2
   132                           intcon2	equ	0xFF1
   133                           wreg	equ	0xFE8
   134                           postinc1	equ	0xFE6
   135                           indf2	equ	0xFDF
   136                           postinc2	equ	0xFDE
   137                           postdec2	equ	0xFDD
   138                           fsr2h	equ	0xFDA
   139                           fsr2l	equ	0xFD9
   140                           status	equ	0xFD8
   141                           
   142                           	psect	idataCOMRAM
   143  007878                     __pidataCOMRAM:
   144                           	opt stack 0
   145                           
   146                           ;initializer for SlowTick@internal_BatteryVoltage
   147  007878  03E8               	dw	1000
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           prodh	equ	0xFF4
   153                           prodl	equ	0xFF3
   154                           intcon	equ	0xFF2
   155                           intcon2	equ	0xFF1
   156                           wreg	equ	0xFE8
   157                           postinc1	equ	0xFE6
   158                           indf2	equ	0xFDF
   159                           postinc2	equ	0xFDE
   160                           postdec2	equ	0xFDD
   161                           fsr2h	equ	0xFDA
   162                           fsr2l	equ	0xFD9
   163                           status	equ	0xFD8
   164                           
   165                           	psect	idataBANK0
   166  00787A                     __pidataBANK0:
   167                           	opt stack 0
   168                           
   169                           ;initializer for FastTick@BacklightPWM_PR
   170  00787A  08                 	db	8
   171                           
   172                           ;initializer for FastTick@LowTrigger
   173  00787B  50                 	db	80
   174                           tblptru	equ	0xFF8
   175                           tblptrh	equ	0xFF7
   176                           tblptrl	equ	0xFF6
   177                           tablat	equ	0xFF5
   178                           prodh	equ	0xFF4
   179                           prodl	equ	0xFF3
   180                           intcon	equ	0xFF2
   181                           intcon2	equ	0xFF1
   182                           wreg	equ	0xFE8
   183                           postinc1	equ	0xFE6
   184                           indf2	equ	0xFDF
   185                           postinc2	equ	0xFDE
   186                           postdec2	equ	0xFDD
   187                           fsr2h	equ	0xFDA
   188                           fsr2l	equ	0xFD9
   189                           status	equ	0xFD8
   190                           
   191                           	psect	idataBANK1
   192  00787C                     __pidataBANK1:
   193                           	opt stack 0
   194                           
   195                           ;initializer for _MyID
   196  00787C  AA                 	db	170
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           prodh	equ	0xFF4
   202                           prodl	equ	0xFF3
   203                           intcon	equ	0xFF2
   204                           intcon2	equ	0xFF1
   205                           wreg	equ	0xFE8
   206                           postinc1	equ	0xFE6
   207                           indf2	equ	0xFDF
   208                           postinc2	equ	0xFDE
   209                           postdec2	equ	0xFDD
   210                           fsr2h	equ	0xFDA
   211                           fsr2l	equ	0xFD9
   212                           status	equ	0xFD8
   213                           
   214                           	psect	idataBANK2
   215  007874                     __pidataBANK2:
   216                           	opt stack 0
   217                           
   218                           ;initializer for FastTick@interal_PID_MeasuredPoint
   219  007874  000A               	dw	10
   220  007876  0000               	dw	0
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           prodh	equ	0xFF4
   226                           prodl	equ	0xFF3
   227                           intcon	equ	0xFF2
   228                           intcon2	equ	0xFF1
   229                           wreg	equ	0xFE8
   230                           postinc1	equ	0xFE6
   231                           indf2	equ	0xFDF
   232                           postinc2	equ	0xFDE
   233                           postdec2	equ	0xFDD
   234                           fsr2h	equ	0xFDA
   235                           fsr2l	equ	0xFD9
   236                           status	equ	0xFD8
   237                           
   238                           	psect	idataBANK4
   239  007846                     __pidataBANK4:
   240                           	opt stack 0
   241                           
   242                           ;initializer for main@F9838
   243  007846  43                 	db	67
   244  007847  49                 	db	73
   245  007848  4E                 	db	78
   246  007849  45                 	db	69
   247  00784A  46                 	db	70
   248  00784B  4C                 	db	76
   249  00784C  55                 	db	85
   250  00784D  58                 	db	88
   251  00784E  20                 	db	32
   252  00784F  4F                 	db	79
   253  007850  52                 	db	82
   254  007851  42                 	db	66
   255  007852  49                 	db	73
   256  007853  54                 	db	84
   257  007854  2E                 	db	46
   258  007855  2E                 	db	46
   259  007856  2E                 	db	46
   260  007857  2E                 	db	46
   261  007858  2E                 	db	46
   262  007859  2E                 	db	46
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           prodh	equ	0xFF4
   268                           prodl	equ	0xFF3
   269                           intcon	equ	0xFF2
   270                           intcon2	equ	0xFF1
   271                           wreg	equ	0xFE8
   272                           postinc1	equ	0xFE6
   273                           indf2	equ	0xFDF
   274                           postinc2	equ	0xFDE
   275                           postdec2	equ	0xFDD
   276                           fsr2h	equ	0xFDA
   277                           fsr2l	equ	0xFD9
   278                           status	equ	0xFD8
   279                           
   280                           	psect	idataBANK5
   281  00785A                     __pidataBANK5:
   282                           	opt stack 0
   283                           
   284                           ;initializer for main@F9840
   285  00785A  48                 	db	72
   286  00785B  2F                 	db	47
   287  00785C  57                 	db	87
   288  00785D  3A                 	db	58
   289  00785E  31                 	db	49
   290  00785F  43                 	db	67
   291  007860  20                 	db	32
   292  007861  53                 	db	83
   293  007862  2F                 	db	47
   294  007863  57                 	db	87
   295  007864  3A                 	db	58
   296  007865  31                 	db	49
   297  007866  41                 	db	65
   298  007867  2E                 	db	46
   299  007868  2E                 	db	46
   300  007869  2E                 	db	46
   301  00786A  2E                 	db	46
   302  00786B  2E                 	db	46
   303  00786C  2E                 	db	46
   304  00786D  2E                 	db	46
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           prodh	equ	0xFF4
   310                           prodl	equ	0xFF3
   311                           intcon	equ	0xFF2
   312                           intcon2	equ	0xFF1
   313                           wreg	equ	0xFE8
   314                           postinc1	equ	0xFE6
   315                           indf2	equ	0xFDF
   316                           postinc2	equ	0xFDE
   317                           postdec2	equ	0xFDD
   318                           fsr2h	equ	0xFDA
   319                           fsr2l	equ	0xFD9
   320                           status	equ	0xFD8
   321                           
   322                           	psect	mediumconst
   323  001944                     __pmediumconst:
   324                           	opt stack 0
   325  001944                     _ASCII_HEX_TO_BINARY:
   326                           	opt stack 0
   327  001944  00                 	db	0
   328  001945  00                 	db	0
   329  001946  00                 	db	0
   330  001947  00                 	db	0
   331  001948  00                 	db	0
   332  001949  00                 	db	0
   333  00194A  00                 	db	0
   334  00194B  00                 	db	0
   335  00194C  00                 	db	0
   336  00194D  00                 	db	0
   337  00194E  00                 	db	0
   338  00194F  00                 	db	0
   339  001950  00                 	db	0
   340  001951  00                 	db	0
   341  001952  00                 	db	0
   342  001953  00                 	db	0
   343  001954  00                 	db	0
   344  001955  00                 	db	0
   345  001956  00                 	db	0
   346  001957  00                 	db	0
   347  001958  00                 	db	0
   348  001959  00                 	db	0
   349  00195A  00                 	db	0
   350  00195B  00                 	db	0
   351  00195C  00                 	db	0
   352  00195D  00                 	db	0
   353  00195E  00                 	db	0
   354  00195F  00                 	db	0
   355  001960  00                 	db	0
   356  001961  00                 	db	0
   357  001962  00                 	db	0
   358  001963  00                 	db	0
   359  001964  00                 	db	0
   360  001965  00                 	db	0
   361  001966  00                 	db	0
   362  001967  00                 	db	0
   363  001968  00                 	db	0
   364  001969  00                 	db	0
   365  00196A  00                 	db	0
   366  00196B  00                 	db	0
   367  00196C  00                 	db	0
   368  00196D  00                 	db	0
   369  00196E  00                 	db	0
   370  00196F  00                 	db	0
   371  001970  00                 	db	0
   372  001971  00                 	db	0
   373  001972  00                 	db	0
   374  001973  00                 	db	0
   375  001974  00                 	db	0
   376  001975  01                 	db	1
   377  001976  02                 	db	2
   378  001977  03                 	db	3
   379  001978  04                 	db	4
   380  001979  05                 	db	5
   381  00197A  06                 	db	6
   382  00197B  07                 	db	7
   383  00197C  08                 	db	8
   384  00197D  09                 	db	9
   385  00197E  00                 	db	0
   386  00197F  00                 	db	0
   387  001980  00                 	db	0
   388  001981  00                 	db	0
   389  001982  00                 	db	0
   390  001983  00                 	db	0
   391  001984  00                 	db	0
   392  001985  0A                 	db	10
   393  001986  0B                 	db	11
   394  001987  0C                 	db	12
   395  001988  0D                 	db	13
   396  001989  0E                 	db	14
   397  00198A  0F                 	db	15
   398  00198B  00                 	db	0
   399  00198C  00                 	db	0
   400  00198D  00                 	db	0
   401  00198E  00                 	db	0
   402  00198F  00                 	db	0
   403  001990  00                 	db	0
   404  001991  00                 	db	0
   405  001992  00                 	db	0
   406  001993  00                 	db	0
   407  001994  00                 	db	0
   408  001995  0A                 	db	10
   409  001996  0B                 	db	11
   410  001997  0C                 	db	12
   411  001998  0D                 	db	13
   412  001999  0E                 	db	14
   413  00199A  0F                 	db	15
   414  00199B  00                 	db	0
   415  00199C  00                 	db	0
   416  00199D  00                 	db	0
   417  00199E  00                 	db	0
   418  00199F  00                 	db	0
   419  0019A0  00                 	db	0
   420  0019A1  00                 	db	0
   421  0019A2  00                 	db	0
   422  0019A3  00                 	db	0
   423  0019A4  00                 	db	0
   424  0019A5  00                 	db	0
   425  0019A6  00                 	db	0
   426  0019A7  00                 	db	0
   427  0019A8  00                 	db	0
   428  0019A9  00                 	db	0
   429  0019AA  00                 	db	0
   430  0019AB  00                 	db	0
   431  0019AC  00                 	db	0
   432  0019AD  00                 	db	0
   433  0019AE  00                 	db	0
   434  0019AF  00                 	db	0
   435  0019B0  00                 	db	0
   436  0019B1  00                 	db	0
   437  0019B2  00                 	db	0
   438  0019B3  00                 	db	0
   439  0019B4  00                 	db	0
   440  0019B5  00                 	db	0
   441  0019B6  00                 	db	0
   442  0019B7  00                 	db	0
   443  0019B8  00                 	db	0
   444  0019B9  00                 	db	0
   445  0019BA  00                 	db	0
   446  0019BB  00                 	db	0
   447  0019BC  00                 	db	0
   448  0019BD  00                 	db	0
   449  0019BE  00                 	db	0
   450  0019BF  00                 	db	0
   451  0019C0  00                 	db	0
   452  0019C1  00                 	db	0
   453  0019C2  00                 	db	0
   454  0019C3  00                 	db	0
   455  0019C4                     _BINARY_TO_ASCII_HEX:
   456                           	opt stack 0
   457  0019C4  30                 	db	48
   458  0019C5  31                 	db	49
   459  0019C6  32                 	db	50
   460  0019C7  33                 	db	51
   461  0019C8  34                 	db	52
   462  0019C9  35                 	db	53
   463  0019CA  36                 	db	54
   464  0019CB  37                 	db	55
   465  0019CC  38                 	db	56
   466  0019CD  39                 	db	57
   467  0019CE  41                 	db	65
   468  0019CF  42                 	db	66
   469  0019D0  43                 	db	67
   470  0019D1  44                 	db	68
   471  0019D2  45                 	db	69
   472  0019D3  46                 	db	70
   473  0019D4                     _enc_states:
   474                           	opt stack 0
   475  0019D4  00                 	db	0
   476  0019D5  FF                 	db	255
   477  0019D6  01                 	db	1
   478  0019D7  00                 	db	0
   479  0019D8  01                 	db	1
   480  0019D9  00                 	db	0
   481  0019DA  00                 	db	0
   482  0019DB  FF                 	db	255
   483  0019DC  FF                 	db	255
   484  0019DD  00                 	db	0
   485  0019DE  00                 	db	0
   486  0019DF  01                 	db	1
   487  0019E0  00                 	db	0
   488  0019E1  01                 	db	1
   489  0019E2  FF                 	db	255
   490  0019E3  00                 	db	0
   491  0000                     _ADCON0	set	4034
   492  0000                     _ADCON2	set	4032
   493  0000                     _ADRESH	set	4036
   494  0000                     _ADRESL	set	4035
   495  0000                     _ANCON0	set	3877
   496  0000                     _ANCON1	set	3876
   497  0000                     _ANCON2	set	3875
   498  0000                     _BAUDCON1bits	set	3941
   499  0000                     _CCP1CON	set	4027
   500  0000                     _CCPR1L	set	4028
   501  0000                     _EEADR	set	3938
   502  0000                     _EEADRH	set	3939
   503  0000                     _EECON1bits	set	3967
   504  0000                     _EECON2	set	3966
   505  0000                     _EEDATA	set	3937
   506  0000                     _INTCONbits	set	4082
   507  0000                     _LATA	set	3977
   508  0000                     _LATB	set	3978
   509  0000                     _LATBbits	set	3978
   510  0000                     _LATC	set	3979
   511  0000                     _LATCbits	set	3979
   512  0000                     _LATD	set	3980
   513  0000                     _LATE	set	3981
   514  0000                     _LATEbits	set	3981
   515  0000                     _LATF	set	3982
   516  0000                     _LATG	set	3983
   517  0000                     _OSCCON	set	4051
   518  0000                     _PORTA	set	3968
   519  0000                     _PORTB	set	3969
   520  0000                     _PORTBbits	set	3969
   521  0000                     _PR2	set	4043
   522  0000                     _RCREG	set	4014
   523  0000                     _RCSTA1bits	set	4011
   524  0000                     _SPBRG1	set	4015
   525  0000                     _SPBRGH1	set	4052
   526  0000                     _T2CONbits	set	4042
   527  0000                     _TMR0H	set	4055
   528  0000                     _TMR0L	set	4054
   529  0000                     _TMR1H	set	4047
   530  0000                     _TMR1L	set	4046
   531  0000                     _TMR2	set	4044
   532  0000                     _TRISA	set	3986
   533  0000                     _TRISB	set	3987
   534  0000                     _TRISC	set	3988
   535  0000                     _TRISCbits	set	3988
   536  0000                     _TRISD	set	3989
   537  0000                     _TRISE	set	3990
   538  0000                     _TRISF	set	3991
   539  0000                     _TRISG	set	3992
   540  0000                     _TXREG	set	4013
   541  0000                     _TXSTA1bits	set	4012
   542  0000                     _ADON	set	32272
   543  0000                     _GIEL	set	32662
   544  0000                     _GO	set	32273
   545  0000                     _IPEN	set	32391
   546  0000                     _PEIE	set	32662
   547  0000                     _PLLEN	set	31966
   548  0000                     _PSA	set	32427
   549  0000                     _RBPU	set	32655
   550  0000                     _RC1IE	set	31981
   551  0000                     _RC1IF	set	31989
   552  0000                     _T08BIT	set	32430
   553  0000                     _T0CS	set	32429
   554  0000                     _TMR0IE	set	32661
   555  0000                     _TMR0IF	set	32658
   556  0000                     _TMR0IP	set	32650
   557  0000                     _TMR0ON	set	32431
   558  0000                     _TMR1IE	set	31976
   559  0000                     _TMR1IF	set	31984
   560  0000                     _TMR1IP	set	31992
   561  0000                     _TMR2ON	set	32338
   562  0000                     _TX1IE	set	31980
   563  0019E4                     STR_9:
   564  0019E4  4D                 	db	77	;'M'
   565  0019E5  4F                 	db	79	;'O'
   566  0019E6  56                 	db	86	;'V'
   567  0019E7  45                 	db	69	;'E'
   568  0019E8  20                 	db	32
   569  0019E9  54                 	db	84	;'T'
   570  0019EA  4F                 	db	79	;'O'
   571  0019EB  20                 	db	32
   572  0019EC  5A                 	db	90	;'Z'
   573  0019ED  45                 	db	69	;'E'
   574  0019EE  52                 	db	82	;'R'
   575  0019EF  4F                 	db	79	;'O'
   576  0019F0  20                 	db	32
   577  0019F1  44                 	db	68	;'D'
   578  0019F2  45                 	db	69	;'E'
   579  0019F3  47                 	db	71	;'G'
   580  0019F4  52                 	db	82	;'R'
   581  0019F5  45                 	db	69	;'E'
   582  0019F6  45                 	db	69	;'E'
   583  0019F7  53                 	db	83	;'S'
   584  0019F8  00                 	db	0
   585  0019F9  00                 	db	0
   586  0019FA                     STR_58:
   587  0019FA  20                 	db	32
   588  0019FB  20                 	db	32
   589  0019FC  20                 	db	32
   590  0019FD  20                 	db	32
   591  0019FE  20                 	db	32
   592  0019FF  20                 	db	32
   593  001A00  20                 	db	32
   594  001A01  20                 	db	32
   595  001A02  20                 	db	32
   596  001A03  20                 	db	32
   597  001A04  20                 	db	32
   598  001A05  20                 	db	32
   599  001A06  20                 	db	32
   600  001A07  20                 	db	32
   601  001A08  20                 	db	32
   602  001A09  20                 	db	32
   603  001A0A  20                 	db	32
   604  001A0B  20                 	db	32
   605  001A0C  20                 	db	32
   606  001A0D  00                 	db	0
   607  001A0E  00                 	db	0
   608  001A0F                     STR_24:
   609  001A0F  52                 	db	82	;'R'
   610  001A10  4F                 	db	79	;'O'
   611  001A11  54                 	db	84	;'T'
   612  001A12  41                 	db	65	;'A'
   613  001A13  54                 	db	84	;'T'
   614  001A14  49                 	db	73	;'I'
   615  001A15  4F                 	db	79	;'O'
   616  001A16  4E                 	db	78	;'N'
   617  001A17  20                 	db	32
   618  001A18  44                 	db	68	;'D'
   619  001A19  49                 	db	73	;'I'
   620  001A1A  52                 	db	82	;'R'
   621  001A1B  45                 	db	69	;'E'
   622  001A1C  43                 	db	67	;'C'
   623  001A1D  54                 	db	84	;'T'
   624  001A1E  49                 	db	73	;'I'
   625  001A1F  4F                 	db	79	;'O'
   626  001A20  4E                 	db	78	;'N'
   627  001A21  3A                 	db	58	;':'
   628  001A22  00                 	db	0
   629  001A23  00                 	db	0
   630  001A24                     STR_45:
   631  001A24  52                 	db	82	;'R'
   632  001A25  55                 	db	85	;'U'
   633  001A26  4E                 	db	78	;'N'
   634  001A27  4E                 	db	78	;'N'
   635  001A28  49                 	db	73	;'I'
   636  001A29  4E                 	db	78	;'N'
   637  001A2A  47                 	db	71	;'G'
   638  001A2B  3A                 	db	58	;':'
   639  001A2C  20                 	db	32
   640  001A2D  54                 	db	84	;'T'
   641  001A2E  2D                 	db	45
   642  001A2F  48                 	db	72	;'H'
   643  001A30  48                 	db	72	;'H'
   644  001A31  3A                 	db	58	;':'
   645  001A32  4D                 	db	77	;'M'
   646  001A33  4D                 	db	77	;'M'
   647  001A34  3A                 	db	58	;':'
   648  001A35  53                 	db	83	;'S'
   649  001A36  53                 	db	83	;'S'
   650  001A37  00                 	db	0
   651  001A38  00                 	db	0
   652  001A39                     STR_33:
   653  001A39  54                 	db	84	;'T'
   654  001A3A  49                 	db	73	;'I'
   655  001A3B  4D                 	db	77	;'M'
   656  001A3C  45                 	db	69	;'E'
   657  001A3D  20                 	db	32
   658  001A3E  46                 	db	70	;'F'
   659  001A3F  4F                 	db	79	;'O'
   660  001A40  52                 	db	82	;'R'
   661  001A41  20                 	db	32
   662  001A42  41                 	db	65	;'A'
   663  001A43  4C                 	db	76	;'L'
   664  001A44  4C                 	db	76	;'L'
   665  001A45  20                 	db	32
   666  001A46  4F                 	db	79	;'O'
   667  001A47  52                 	db	82	;'R'
   668  001A48  42                 	db	66	;'B'
   669  001A49  49                 	db	73	;'I'
   670  001A4A  54                 	db	84	;'T'
   671  001A4B  53                 	db	83	;'S'
   672  001A4C  00                 	db	0
   673  001A4D  00                 	db	0
   674  001A4E                     STR_85:
   675  001A4E  43                 	db	67	;'C'
   676  001A4F  59                 	db	89	;'Y'
   677  001A50  43                 	db	67	;'C'
   678  001A51  4C                 	db	76	;'L'
   679  001A52  45                 	db	69	;'E'
   680  001A53  20                 	db	32
   681  001A54  43                 	db	67	;'C'
   682  001A55  4F                 	db	79	;'O'
   683  001A56  55                 	db	85	;'U'
   684  001A57  4E                 	db	78	;'N'
   685  001A58  54                 	db	84	;'T'
   686  001A59  3A                 	db	58	;':'
   687  001A5A  30                 	db	48	;'0'
   688  001A5B  3D                 	db	61	;'='
   689  001A5C  49                 	db	73	;'I'
   690  001A5D  4E                 	db	78	;'N'
   691  001A5E  46                 	db	70	;'F'
   692  001A5F  2E                 	db	46
   693  001A60  00                 	db	0
   694  001A61  00                 	db	0
   695  001A62                     STR_110:
   696  001A62  44                 	db	68	;'D'
   697  001A63  57                 	db	87	;'W'
   698  001A64  45                 	db	69	;'E'
   699  001A65  4C                 	db	76	;'L'
   700  001A66  4C                 	db	76	;'L'
   701  001A67  20                 	db	32
   702  001A68  4F                 	db	79	;'O'
   703  001A69  4E                 	db	78	;'N'
   704  001A6A  20                 	db	32
   705  001A6B  50                 	db	80	;'P'
   706  001A6C  4F                 	db	79	;'O'
   707  001A6D  49                 	db	73	;'I'
   708  001A6E  4E                 	db	78	;'N'
   709  001A6F  54                 	db	84	;'T'
   710  001A70  20                 	db	32
   711  001A71  23                 	db	35
   712  001A72  30                 	db	48	;'0'
   713  001A73  30                 	db	48	;'0'
   714  001A74  00                 	db	0
   715  001A75  00                 	db	0
   716  001A76                     STR_82:
   717  001A76  4D                 	db	77	;'M'
   718  001A77  41                 	db	65	;'A'
   719  001A78  58                 	db	88	;'X'
   720  001A79  20                 	db	32
   721  001A7A  57                 	db	87	;'W'
   722  001A7B  41                 	db	65	;'A'
   723  001A7C  59                 	db	89	;'Y'
   724  001A7D  50                 	db	80	;'P'
   725  001A7E  4F                 	db	79	;'O'
   726  001A7F  49                 	db	73	;'I'
   727  001A80  4E                 	db	78	;'N'
   728  001A81  54                 	db	84	;'T'
   729  001A82  53                 	db	83	;'S'
   730  001A83  20                 	db	32
   731  001A84  48                 	db	72	;'H'
   732  001A85  41                 	db	65	;'A'
   733  001A86  56                 	db	86	;'V'
   734  001A87  45                 	db	69	;'E'
   735  001A88  00                 	db	0
   736  001A89  00                 	db	0
   737  001A8A                     STR_77:
   738  001A8A  4D                 	db	77	;'M'
   739  001A8B  4F                 	db	79	;'O'
   740  001A8C  56                 	db	86	;'V'
   741  001A8D  45                 	db	69	;'E'
   742  001A8E  20                 	db	32
   743  001A8F  54                 	db	84	;'T'
   744  001A90  4F                 	db	79	;'O'
   745  001A91  20                 	db	32
   746  001A92  4E                 	db	78	;'N'
   747  001A93  45                 	db	69	;'E'
   748  001A94  58                 	db	88	;'X'
   749  001A95  54                 	db	84	;'T'
   750  001A96  20                 	db	32
   751  001A97  50                 	db	80	;'P'
   752  001A98  4F                 	db	79	;'O'
   753  001A99  49                 	db	73	;'I'
   754  001A9A  4E                 	db	78	;'N'
   755  001A9B  54                 	db	84	;'T'
   756  001A9C  00                 	db	0
   757  001A9D  00                 	db	0
   758  001A9E                     STR_8:
   759  001A9E  45                 	db	69	;'E'
   760  001A9F  58                 	db	88	;'X'
   761  001AA0  54                 	db	84	;'T'
   762  001AA1  45                 	db	69	;'E'
   763  001AA2  52                 	db	82	;'R'
   764  001AA3  4E                 	db	78	;'N'
   765  001AA4  41                 	db	65	;'A'
   766  001AA5  4C                 	db	76	;'L'
   767  001AA6  20                 	db	32
   768  001AA7  43                 	db	67	;'C'
   769  001AA8  54                 	db	84	;'T'
   770  001AA9  52                 	db	82	;'R'
   771  001AAA  4C                 	db	76	;'L'
   772  001AAB  20                 	db	32
   773  001AAC  4D                 	db	77	;'M'
   774  001AAD  4F                 	db	79	;'O'
   775  001AAE  44                 	db	68	;'D'
   776  001AAF  45                 	db	69	;'E'
   777  001AB0  00                 	db	0
   778  001AB1  00                 	db	0
   779  001AB2                     STR_90:
   780  001AB2  4D                 	db	77	;'M'
   781  001AB3  4F                 	db	79	;'O'
   782  001AB4  56                 	db	86	;'V'
   783  001AB5  49                 	db	73	;'I'
   784  001AB6  4E                 	db	78	;'N'
   785  001AB7  47                 	db	71	;'G'
   786  001AB8  20                 	db	32
   787  001AB9  54                 	db	84	;'T'
   788  001ABA  4F                 	db	79	;'O'
   789  001ABB  20                 	db	32
   790  001ABC  50                 	db	80	;'P'
   791  001ABD  4F                 	db	79	;'O'
   792  001ABE  49                 	db	73	;'I'
   793  001ABF  4E                 	db	78	;'N'
   794  001AC0  54                 	db	84	;'T'
   795  001AC1  20                 	db	32
   796  001AC2  23                 	db	35
   797  001AC3  00                 	db	0
   798  001AC4  00                 	db	0
   799  001AC5                     STR_78:
   800  001AC5  2B                 	db	43
   801  001AC6  58                 	db	88	;'X'
   802  001AC7  58                 	db	88	;'X'
   803  001AC8  58                 	db	88	;'X'
   804  001AC9  58                 	db	88	;'X'
   805  001ACA  DF                 	db	-33
   806  001ACB  20                 	db	32
   807  001ACC  54                 	db	84	;'T'
   808  001ACD  48                 	db	72	;'H'
   809  001ACE  45                 	db	69	;'E'
   810  001ACF  4E                 	db	78	;'N'
   811  001AD0  20                 	db	32
   812  001AD1  43                 	db	67	;'C'
   813  001AD2  4C                 	db	76	;'L'
   814  001AD3  49                 	db	73	;'I'
   815  001AD4  43                 	db	67	;'C'
   816  001AD5  4B                 	db	75	;'K'
   817  001AD6  00                 	db	0
   818  001AD7  00                 	db	0
   819  001AD8                     STR_81:
   820  001AD8  41                 	db	65	;'A'
   821  001AD9  44                 	db	68	;'D'
   822  001ADA  44                 	db	68	;'D'
   823  001ADB  20                 	db	32
   824  001ADC  41                 	db	65	;'A'
   825  001ADD  4E                 	db	78	;'N'
   826  001ADE  4F                 	db	79	;'O'
   827  001ADF  54                 	db	84	;'T'
   828  001AE0  48                 	db	72	;'H'
   829  001AE1  45                 	db	69	;'E'
   830  001AE2  52                 	db	82	;'R'
   831  001AE3  20                 	db	32
   832  001AE4  50                 	db	80	;'P'
   833  001AE5  4F                 	db	79	;'O'
   834  001AE6  49                 	db	73	;'I'
   835  001AE7  4E                 	db	78	;'N'
   836  001AE8  54                 	db	84	;'T'
   837  001AE9  3F                 	db	63	;'?'
   838  001AEA  00                 	db	0
   839  001AEB                     STR_51:
   840  001AEB  53                 	db	83	;'S'
   841  001AEC  50                 	db	80	;'P'
   842  001AED  45                 	db	69	;'E'
   843  001AEE  45                 	db	69	;'E'
   844  001AEF  44                 	db	68	;'D'
   845  001AF0  3A                 	db	58	;':'
   846  001AF1  20                 	db	32
   847  001AF2  58                 	db	88	;'X'
   848  001AF3  58                 	db	88	;'X'
   849  001AF4  2E                 	db	46
   850  001AF5  58                 	db	88	;'X'
   851  001AF6  58                 	db	88	;'X'
   852  001AF7  DF                 	db	-33
   853  001AF8  2F                 	db	47
   854  001AF9  53                 	db	83	;'S'
   855  001AFA  65                 	db	101	;'e'
   856  001AFB  63                 	db	99	;'c'
   857  001AFC  00                 	db	0
   858  001AFD  00                 	db	0
   859  001AFE                     STR_25:
   860  001AFE  50                 	db	80	;'P'
   861  001AFF  52                 	db	82	;'R'
   862  001B00  4F                 	db	79	;'O'
   863  001B01  47                 	db	71	;'G'
   864  001B02  52                 	db	82	;'R'
   865  001B03  41                 	db	65	;'A'
   866  001B04  4D                 	db	77	;'M'
   867  001B05  20                 	db	32
   868  001B06  45                 	db	69	;'E'
   869  001B07  4E                 	db	78	;'N'
   870  001B08  44                 	db	68	;'D'
   871  001B09  20                 	db	32
   872  001B0A  4D                 	db	77	;'M'
   873  001B0B  4F                 	db	79	;'O'
   874  001B0C  44                 	db	68	;'D'
   875  001B0D  45                 	db	69	;'E'
   876  001B0E  3A                 	db	58	;':'
   877  001B0F  00                 	db	0
   878  001B10  00                 	db	0
   879  001B11                     STR_13:
   880  001B11  43                 	db	67	;'C'
   881  001B12  4F                 	db	79	;'O'
   882  001B13  55                 	db	85	;'U'
   883  001B14  4E                 	db	78	;'N'
   884  001B15  54                 	db	84	;'T'
   885  001B16  45                 	db	69	;'E'
   886  001B17  52                 	db	82	;'R'
   887  001B18  20                 	db	32
   888  001B19  43                 	db	67	;'C'
   889  001B1A  4C                 	db	76	;'L'
   890  001B1B  4F                 	db	79	;'O'
   891  001B1C  43                 	db	67	;'C'
   892  001B1D  4B                 	db	75	;'K'
   893  001B1E  57                 	db	87	;'W'
   894  001B1F  49                 	db	73	;'I'
   895  001B20  53                 	db	83	;'S'
   896  001B21  45                 	db	69	;'E'
   897  001B22  00                 	db	0
   898  001B23  00                 	db	0
   899  001B24                     STR_94:
   900  001B24  44                 	db	68	;'D'
   901  001B25  57                 	db	87	;'W'
   902  001B26  45                 	db	69	;'E'
   903  001B27  4C                 	db	76	;'L'
   904  001B28  4C                 	db	76	;'L'
   905  001B29  20                 	db	32
   906  001B2A  4F                 	db	79	;'O'
   907  001B2B  4E                 	db	78	;'N'
   908  001B2C  20                 	db	32
   909  001B2D  50                 	db	80	;'P'
   910  001B2E  4F                 	db	79	;'O'
   911  001B2F  49                 	db	73	;'I'
   912  001B30  4E                 	db	78	;'N'
   913  001B31  54                 	db	84	;'T'
   914  001B32  20                 	db	32
   915  001B33  23                 	db	35
   916  001B34  00                 	db	0
   917  001B35  00                 	db	0
   918  001B36                     STR_106:
   919  001B36  4D                 	db	77	;'M'
   920  001B37  4F                 	db	79	;'O'
   921  001B38  56                 	db	86	;'V'
   922  001B39  49                 	db	73	;'I'
   923  001B3A  4E                 	db	78	;'N'
   924  001B3B  47                 	db	71	;'G'
   925  001B3C  20                 	db	32
   926  001B3D  54                 	db	84	;'T'
   927  001B3E  4F                 	db	79	;'O'
   928  001B3F  20                 	db	32
   929  001B40  4F                 	db	79	;'O'
   930  001B41  52                 	db	82	;'R'
   931  001B42  49                 	db	73	;'I'
   932  001B43  47                 	db	71	;'G'
   933  001B44  49                 	db	73	;'I'
   934  001B45  4E                 	db	78	;'N'
   935  001B46  00                 	db	0
   936  001B47  00                 	db	0
   937  001B48                     STR_53:
   938  001B48  42                 	db	66	;'B'
   939  001B49  41                 	db	65	;'A'
   940  001B4A  54                 	db	84	;'T'
   941  001B4B  54                 	db	84	;'T'
   942  001B4C  45                 	db	69	;'E'
   943  001B4D  52                 	db	82	;'R'
   944  001B4E  59                 	db	89	;'Y'
   945  001B4F  20                 	db	32
   946  001B50  56                 	db	86	;'V'
   947  001B51  4F                 	db	79	;'O'
   948  001B52  4C                 	db	76	;'L'
   949  001B53  54                 	db	84	;'T'
   950  001B54  41                 	db	65	;'A'
   951  001B55  47                 	db	71	;'G'
   952  001B56  45                 	db	69	;'E'
   953  001B57  3A                 	db	58	;':'
   954  001B58  00                 	db	0
   955  001B59  00                 	db	0
   956  001B5A                     STR_22:
   957  001B5A  4D                 	db	77	;'M'
   958  001B5B  4F                 	db	79	;'O'
   959  001B5C  56                 	db	86	;'V'
   960  001B5D  45                 	db	69	;'E'
   961  001B5E  20                 	db	32
   962  001B5F  54                 	db	84	;'T'
   963  001B60  4F                 	db	79	;'O'
   964  001B61  20                 	db	32
   965  001B62  53                 	db	83	;'S'
   966  001B63  54                 	db	84	;'T'
   967  001B64  41                 	db	65	;'A'
   968  001B65  52                 	db	82	;'R'
   969  001B66  54                 	db	84	;'T'
   970  001B67  2E                 	db	46
   971  001B68  2E                 	db	46
   972  001B69  2E                 	db	46
   973  001B6A  00                 	db	0
   974  001B6B  00                 	db	0
   975  001B6C                     STR_47:
   976  001B6C  49                 	db	73	;'I'
   977  001B6D  4E                 	db	78	;'N'
   978  001B6E  46                 	db	70	;'F'
   979  001B6F  49                 	db	73	;'I'
   980  001B70  4E                 	db	78	;'N'
   981  001B71  49                 	db	73	;'I'
   982  001B72  54                 	db	84	;'T'
   983  001B73  45                 	db	69	;'E'
   984  001B74  20                 	db	32
   985  001B75  52                 	db	82	;'R'
   986  001B76  55                 	db	85	;'U'
   987  001B77  4E                 	db	78	;'N'
   988  001B78  54                 	db	84	;'T'
   989  001B79  49                 	db	73	;'I'
   990  001B7A  4D                 	db	77	;'M'
   991  001B7B  45                 	db	69	;'E'
   992  001B7C  00                 	db	0
   993  001B7D  00                 	db	0
   994  001B7E                     STR_91:
   995  001B7E  49                 	db	73	;'I'
   996  001B7F  4E                 	db	78	;'N'
   997  001B80  46                 	db	70	;'F'
   998  001B81  49                 	db	73	;'I'
   999  001B82  4E                 	db	78	;'N'
  1000  001B83  49                 	db	73	;'I'
  1001  001B84  54                 	db	84	;'T'
  1002  001B85  45                 	db	69	;'E'
  1003  001B86  20                 	db	32
  1004  001B87  43                 	db	67	;'C'
  1005  001B88  59                 	db	89	;'Y'
  1006  001B89  43                 	db	67	;'C'
  1007  001B8A  4C                 	db	76	;'L'
  1008  001B8B  45                 	db	69	;'E'
  1009  001B8C  53                 	db	83	;'S'
  1010  001B8D  00                 	db	0
  1011  001B8E  00                 	db	0
  1012  001B8F                     STR_38:
  1013  001B8F  54                 	db	84	;'T'
  1014  001B90  49                 	db	73	;'I'
  1015  001B91  4D                 	db	77	;'M'
  1016  001B92  45                 	db	69	;'E'
  1017  001B93  20                 	db	32
  1018  001B94  50                 	db	80	;'P'
  1019  001B95  45                 	db	69	;'E'
  1020  001B96  52                 	db	82	;'R'
  1021  001B97  20                 	db	32
  1022  001B98  4F                 	db	79	;'O'
  1023  001B99  52                 	db	82	;'R'
  1024  001B9A  42                 	db	66	;'B'
  1025  001B9B  49                 	db	73	;'I'
  1026  001B9C  54                 	db	84	;'T'
  1027  001B9D  3A                 	db	58	;':'
  1028  001B9E  00                 	db	0
  1029  001B9F  00                 	db	0
  1030  001BA0                     STR_44:
  1031  001BA0  4D                 	db	77	;'M'
  1032  001BA1  4F                 	db	79	;'O'
  1033  001BA2  56                 	db	86	;'V'
  1034  001BA3  49                 	db	73	;'I'
  1035  001BA4  4E                 	db	78	;'N'
  1036  001BA5  47                 	db	71	;'G'
  1037  001BA6  20                 	db	32
  1038  001BA7  54                 	db	84	;'T'
  1039  001BA8  4F                 	db	79	;'O'
  1040  001BA9  20                 	db	32
  1041  001BAA  53                 	db	83	;'S'
  1042  001BAB  54                 	db	84	;'T'
  1043  001BAC  41                 	db	65	;'A'
  1044  001BAD  52                 	db	82	;'R'
  1045  001BAE  54                 	db	84	;'T'
  1046  001BAF  00                 	db	0
  1047  001BB0  00                 	db	0
  1048  001BB1                     STR_6:
  1049  001BB1  42                 	db	66	;'B'
  1050  001BB2  41                 	db	65	;'A'
  1051  001BB3  54                 	db	84	;'T'
  1052  001BB4  54                 	db	84	;'T'
  1053  001BB5  45                 	db	69	;'E'
  1054  001BB6  52                 	db	82	;'R'
  1055  001BB7  59                 	db	89	;'Y'
  1056  001BB8  20                 	db	32
  1057  001BB9  56                 	db	86	;'V'
  1058  001BBA  4F                 	db	79	;'O'
  1059  001BBB  4C                 	db	76	;'L'
  1060  001BBC  54                 	db	84	;'T'
  1061  001BBD  41                 	db	65	;'A'
  1062  001BBE  47                 	db	71	;'G'
  1063  001BBF  45                 	db	69	;'E'
  1064  001BC0  00                 	db	0
  1065  001BC1  00                 	db	0
  1066  001BC2                     STR_89:
  1067  001BC2  44                 	db	68	;'D'
  1068  001BC3  57                 	db	87	;'W'
  1069  001BC4  45                 	db	69	;'E'
  1070  001BC5  4C                 	db	76	;'L'
  1071  001BC6  4C                 	db	76	;'L'
  1072  001BC7  20                 	db	32
  1073  001BC8  4F                 	db	79	;'O'
  1074  001BC9  4E                 	db	78	;'N'
  1075  001BCA  20                 	db	32
  1076  001BCB  53                 	db	83	;'S'
  1077  001BCC  54                 	db	84	;'T'
  1078  001BCD  41                 	db	65	;'A'
  1079  001BCE  52                 	db	82	;'R'
  1080  001BCF  54                 	db	84	;'T'
  1081  001BD0  00                 	db	0
  1082  001BD1  00                 	db	0
  1083  001BD2                     STR_34:
  1084  001BD2  54                 	db	84	;'T'
  1085  001BD3  4F                 	db	79	;'O'
  1086  001BD4  54                 	db	84	;'T'
  1087  001BD5  41                 	db	65	;'A'
  1088  001BD6  4C                 	db	76	;'L'
  1089  001BD7  20                 	db	32
  1090  001BD8  52                 	db	82	;'R'
  1091  001BD9  55                 	db	85	;'U'
  1092  001BDA  4E                 	db	78	;'N'
  1093  001BDB  54                 	db	84	;'T'
  1094  001BDC  49                 	db	73	;'I'
  1095  001BDD  4D                 	db	77	;'M'
  1096  001BDE  45                 	db	69	;'E'
  1097  001BDF  3A                 	db	58	;':'
  1098  001BE0  00                 	db	0
  1099  001BE1  00                 	db	0
  1100  001BE2                     STR_32:
  1101  001BE2  54                 	db	84	;'T'
  1102  001BE3  49                 	db	73	;'I'
  1103  001BE4  4D                 	db	77	;'M'
  1104  001BE5  45                 	db	69	;'E'
  1105  001BE6  20                 	db	32
  1106  001BE7  50                 	db	80	;'P'
  1107  001BE8  45                 	db	69	;'E'
  1108  001BE9  52                 	db	82	;'R'
  1109  001BEA  20                 	db	32
  1110  001BEB  4F                 	db	79	;'O'
  1111  001BEC  52                 	db	82	;'R'
  1112  001BED  42                 	db	66	;'B'
  1113  001BEE  49                 	db	73	;'I'
  1114  001BEF  54                 	db	84	;'T'
  1115  001BF0  00                 	db	0
  1116  001BF1  00                 	db	0
  1117  001BF2                     STR_17:
  1118  001BF2  42                 	db	66	;'B'
  1119  001BF3  59                 	db	89	;'Y'
  1120  001BF4  20                 	db	32
  1121  001BF5  4F                 	db	79	;'O'
  1122  001BF6  52                 	db	82	;'R'
  1123  001BF7  42                 	db	66	;'B'
  1124  001BF8  49                 	db	73	;'I'
  1125  001BF9  54                 	db	84	;'T'
  1126  001BFA  20                 	db	32
  1127  001BFB  43                 	db	67	;'C'
  1128  001BFC  4F                 	db	79	;'O'
  1129  001BFD  55                 	db	85	;'U'
  1130  001BFE  4E                 	db	78	;'N'
  1131  001BFF  54                 	db	84	;'T'
  1132  001C00  00                 	db	0
  1133  001C01  00                 	db	0
  1134  001C02                     STR_18:
  1135  001C02  42                 	db	66	;'B'
  1136  001C03  59                 	db	89	;'Y'
  1137  001C04  20                 	db	32
  1138  001C05  54                 	db	84	;'T'
  1139  001C06  4F                 	db	79	;'O'
  1140  001C07  54                 	db	84	;'T'
  1141  001C08  41                 	db	65	;'A'
  1142  001C09  4C                 	db	76	;'L'
  1143  001C0A  20                 	db	32
  1144  001C0B  54                 	db	84	;'T'
  1145  001C0C  49                 	db	73	;'I'
  1146  001C0D  4D                 	db	77	;'M'
  1147  001C0E  45                 	db	69	;'E'
  1148  001C0F  00                 	db	0
  1149  001C10  00                 	db	0
  1150  001C11                     STR_46:
  1151  001C11  4F                 	db	79	;'O'
  1152  001C12  52                 	db	82	;'R'
  1153  001C13  42                 	db	66	;'B'
  1154  001C14  49                 	db	73	;'I'
  1155  001C15  54                 	db	84	;'T'
  1156  001C16  20                 	db	32
  1157  001C17  52                 	db	82	;'R'
  1158  001C18  55                 	db	85	;'U'
  1159  001C19  4E                 	db	78	;'N'
  1160  001C1A  4E                 	db	78	;'N'
  1161  001C1B  49                 	db	73	;'I'
  1162  001C1C  4E                 	db	78	;'N'
  1163  001C1D  47                 	db	71	;'G'
  1164  001C1E  00                 	db	0
  1165  001C1F  00                 	db	0
  1166  001C20                     STR_10:
  1167  001C20  54                 	db	84	;'T'
  1168  001C21  48                 	db	72	;'H'
  1169  001C22  45                 	db	69	;'E'
  1170  001C23  4E                 	db	78	;'N'
  1171  001C24  20                 	db	32
  1172  001C25  43                 	db	67	;'C'
  1173  001C26  4C                 	db	76	;'L'
  1174  001C27  49                 	db	73	;'I'
  1175  001C28  43                 	db	67	;'C'
  1176  001C29  4B                 	db	75	;'K'
  1177  001C2A  2E                 	db	46
  1178  001C2B  2E                 	db	46
  1179  001C2C  2E                 	db	46
  1180  001C2D  00                 	db	0
  1181  001C2E  00                 	db	0
  1182  001C2F                     STR_5:
  1183  001C2F  52                 	db	82	;'R'
  1184  001C30  45                 	db	69	;'E'
  1185  001C31  41                 	db	65	;'A'
  1186  001C32  4C                 	db	76	;'L'
  1187  001C33  54                 	db	84	;'T'
  1188  001C34  49                 	db	73	;'I'
  1189  001C35  4D                 	db	77	;'M'
  1190  001C36  45                 	db	69	;'E'
  1191  001C37  20                 	db	32
  1192  001C38  4D                 	db	77	;'M'
  1193  001C39  4F                 	db	79	;'O'
  1194  001C3A  44                 	db	68	;'D'
  1195  001C3B  45                 	db	69	;'E'
  1196  001C3C  00                 	db	0
  1197  001C3D  00                 	db	0
  1198  001C3E                     STR_3:
  1199  001C3E  57                 	db	87	;'W'
  1200  001C3F  41                 	db	65	;'A'
  1201  001C40  59                 	db	89	;'Y'
  1202  001C41  50                 	db	80	;'P'
  1203  001C42  4F                 	db	79	;'O'
  1204  001C43  49                 	db	73	;'I'
  1205  001C44  4E                 	db	78	;'N'
  1206  001C45  54                 	db	84	;'T'
  1207  001C46  20                 	db	32
  1208  001C47  4D                 	db	77	;'M'
  1209  001C48  4F                 	db	79	;'O'
  1210  001C49  44                 	db	68	;'D'
  1211  001C4A  45                 	db	69	;'E'
  1212  001C4B  00                 	db	0
  1213  001C4C  00                 	db	0
  1214  001C4D                     STR_79:
  1215  001C4D  54                 	db	84	;'T'
  1216  001C4E  52                 	db	82	;'R'
  1217  001C4F  41                 	db	65	;'A'
  1218  001C50  56                 	db	86	;'V'
  1219  001C51  45                 	db	69	;'E'
  1220  001C52  4C                 	db	76	;'L'
  1221  001C53  20                 	db	32
  1222  001C54  54                 	db	84	;'T'
  1223  001C55  49                 	db	73	;'I'
  1224  001C56  4D                 	db	77	;'M'
  1225  001C57  45                 	db	69	;'E'
  1226  001C58  3A                 	db	58	;':'
  1227  001C59  00                 	db	0
  1228  001C5A  00                 	db	0
  1229  001C5B                     STR_65:
  1230  001C5B  50                 	db	80	;'P'
  1231  001C5C  52                 	db	82	;'R'
  1232  001C5D  45                 	db	69	;'E'
  1233  001C5E  53                 	db	83	;'S'
  1234  001C5F  45                 	db	69	;'E'
  1235  001C60  54                 	db	84	;'T'
  1236  001C61  20                 	db	32
  1237  001C62  53                 	db	83	;'S'
  1238  001C63  4C                 	db	76	;'L'
  1239  001C64  4F                 	db	79	;'O'
  1240  001C65  54                 	db	84	;'T'
  1241  001C66  3A                 	db	58	;':'
  1242  001C67  00                 	db	0
  1243  001C68  00                 	db	0
  1244  001C69                     STR_28:
  1245  001C69  4F                 	db	79	;'O'
  1246  001C6A  52                 	db	82	;'R'
  1247  001C6B  42                 	db	66	;'B'
  1248  001C6C  49                 	db	73	;'I'
  1249  001C6D  54                 	db	84	;'T'
  1250  001C6E  20                 	db	32
  1251  001C6F  53                 	db	83	;'S'
  1252  001C70  50                 	db	80	;'P'
  1253  001C71  45                 	db	69	;'E'
  1254  001C72  45                 	db	69	;'E'
  1255  001C73  44                 	db	68	;'D'
  1256  001C74  3A                 	db	58	;':'
  1257  001C75  00                 	db	0
  1258  001C76  00                 	db	0
  1259  001C77                     STR_26:
  1260  001C77  4F                 	db	79	;'O'
  1261  001C78  52                 	db	82	;'R'
  1262  001C79  42                 	db	66	;'B'
  1263  001C7A  49                 	db	73	;'I'
  1264  001C7B  54                 	db	84	;'T'
  1265  001C7C  20                 	db	32
  1266  001C7D  4C                 	db	76	;'L'
  1267  001C7E  49                 	db	73	;'I'
  1268  001C7F  4D                 	db	77	;'M'
  1269  001C80  49                 	db	73	;'I'
  1270  001C81  54                 	db	84	;'T'
  1271  001C82  3A                 	db	58	;':'
  1272  001C83  00                 	db	0
  1273  001C84  00                 	db	0
  1274  001C85                     STR_19:
  1275  001C85  4E                 	db	78	;'N'
  1276  001C86  45                 	db	69	;'E'
  1277  001C87  56                 	db	86	;'V'
  1278  001C88  45                 	db	69	;'E'
  1279  001C89  52                 	db	82	;'R'
  1280  001C8A  20                 	db	32
  1281  001C8B  45                 	db	69	;'E'
  1282  001C8C  4E                 	db	78	;'N'
  1283  001C8D  44                 	db	68	;'D'
  1284  001C8E  49                 	db	73	;'I'
  1285  001C8F  4E                 	db	78	;'N'
  1286  001C90  47                 	db	71	;'G'
  1287  001C91  00                 	db	0
  1288  001C92  00                 	db	0
  1289  001C93                     STR_1:
  1290  001C93  45                 	db	69	;'E'
  1291  001C94  58                 	db	88	;'X'
  1292  001C95  54                 	db	84	;'T'
  1293  001C96  45                 	db	69	;'E'
  1294  001C97  52                 	db	82	;'R'
  1295  001C98  4E                 	db	78	;'N'
  1296  001C99  41                 	db	65	;'A'
  1297  001C9A  4C                 	db	76	;'L'
  1298  001C9B  20                 	db	32
  1299  001C9C  4D                 	db	77	;'M'
  1300  001C9D  4F                 	db	79	;'O'
  1301  001C9E  44                 	db	68	;'D'
  1302  001C9F  45                 	db	69	;'E'
  1303  001CA0  00                 	db	0
  1304  001CA1                     STR_76:
  1305  001CA1  44                 	db	68	;'D'
  1306  001CA2  57                 	db	87	;'W'
  1307  001CA3  45                 	db	69	;'E'
  1308  001CA4  4C                 	db	76	;'L'
  1309  001CA5  4C                 	db	76	;'L'
  1310  001CA6  20                 	db	32
  1311  001CA7  54                 	db	84	;'T'
  1312  001CA8  49                 	db	73	;'I'
  1313  001CA9  4D                 	db	77	;'M'
  1314  001CAA  45                 	db	69	;'E'
  1315  001CAB  3A                 	db	58	;':'
  1316  001CAC  00                 	db	0
  1317  001CAD  00                 	db	0
  1318  001CAE                     STR_49:
  1319  001CAE  53                 	db	83	;'S'
  1320  001CAF  54                 	db	84	;'T'
  1321  001CB0  4F                 	db	79	;'O'
  1322  001CB1  50                 	db	80	;'P'
  1323  001CB2  50                 	db	80	;'P'
  1324  001CB3  49                 	db	73	;'I'
  1325  001CB4  4E                 	db	78	;'N'
  1326  001CB5  47                 	db	71	;'G'
  1327  001CB6  2E                 	db	46
  1328  001CB7  2E                 	db	46
  1329  001CB8  2E                 	db	46
  1330  001CB9  00                 	db	0
  1331  001CBA  00                 	db	0
  1332  001CBB                     STR_23:
  1333  001CBB  54                 	db	84	;'T'
  1334  001CBC  48                 	db	72	;'H'
  1335  001CBD  45                 	db	69	;'E'
  1336  001CBE  4E                 	db	78	;'N'
  1337  001CBF  20                 	db	32
  1338  001CC0  43                 	db	67	;'C'
  1339  001CC1  4C                 	db	76	;'L'
  1340  001CC2  49                 	db	73	;'I'
  1341  001CC3  43                 	db	67	;'C'
  1342  001CC4  4B                 	db	75	;'K'
  1343  001CC5  2E                 	db	46
  1344  001CC6  00                 	db	0
  1345  001CC7  00                 	db	0
  1346  001CC8                     STR_20:
  1347  001CC8  52                 	db	82	;'R'
  1348  001CC9  55                 	db	85	;'U'
  1349  001CCA  4E                 	db	78	;'N'
  1350  001CCB  20                 	db	32
  1351  001CCC  50                 	db	80	;'P'
  1352  001CCD  52                 	db	82	;'R'
  1353  001CCE  4F                 	db	79	;'O'
  1354  001CCF  47                 	db	71	;'G'
  1355  001CD0  52                 	db	82	;'R'
  1356  001CD1  41                 	db	65	;'A'
  1357  001CD2  4D                 	db	77	;'M'
  1358  001CD3  00                 	db	0
  1359  001CD4  00                 	db	0
  1360  001CD5                     STR_48:
  1361  001CD5  20                 	db	32
  1362  001CD6  52                 	db	82	;'R'
  1363  001CD7  45                 	db	69	;'E'
  1364  001CD8  56                 	db	86	;'V'
  1365  001CD9  20                 	db	32
  1366  001CDA  52                 	db	82	;'R'
  1367  001CDB  45                 	db	69	;'E'
  1368  001CDC  4D                 	db	77	;'M'
  1369  001CDD  41                 	db	65	;'A'
  1370  001CDE  49                 	db	73	;'I'
  1371  001CDF  4E                 	db	78	;'N'
  1372  001CE0  00                 	db	0
  1373  001CE1  00                 	db	0
  1374  001CE2                     STR_21:
  1375  001CE2  53                 	db	83	;'S'
  1376  001CE3  41                 	db	65	;'A'
  1377  001CE4  56                 	db	86	;'V'
  1378  001CE5  45                 	db	69	;'E'
  1379  001CE6  20                 	db	32
  1380  001CE7  50                 	db	80	;'P'
  1381  001CE8  52                 	db	82	;'R'
  1382  001CE9  45                 	db	69	;'E'
  1383  001CEA  53                 	db	83	;'S'
  1384  001CEB  45                 	db	69	;'E'
  1385  001CEC  54                 	db	84	;'T'
  1386  001CED  00                 	db	0
  1387  001CEE  00                 	db	0
  1388  001CEF                     STR_7:
  1389  001CEF  47                 	db	71	;'G'
  1390  001CF0  4F                 	db	79	;'O'
  1391  001CF1  20                 	db	32
  1392  001CF2  54                 	db	84	;'T'
  1393  001CF3  4F                 	db	79	;'O'
  1394  001CF4  20                 	db	32
  1395  001CF5  53                 	db	83	;'S'
  1396  001CF6  4C                 	db	76	;'L'
  1397  001CF7  45                 	db	69	;'E'
  1398  001CF8  45                 	db	69	;'E'
  1399  001CF9  50                 	db	80	;'P'
  1400  001CFA  00                 	db	0
  1401  001CFB  00                 	db	0
  1402  001CFC                     STR_84:
  1403  001CFC  4C                 	db	76	;'L'
  1404  001CFD  4F                 	db	79	;'O'
  1405  001CFE  4F                 	db	79	;'O'
  1406  001CFF  50                 	db	80	;'P'
  1407  001D00  20                 	db	32
  1408  001D01  4D                 	db	77	;'M'
  1409  001D02  4F                 	db	79	;'O'
  1410  001D03  44                 	db	68	;'D'
  1411  001D04  45                 	db	69	;'E'
  1412  001D05  3F                 	db	63	;'?'
  1413  001D06  00                 	db	0
  1414  001D07  00                 	db	0
  1415  001D08                     STR_83:
  1416  001D08  42                 	db	66	;'B'
  1417  001D09  45                 	db	69	;'E'
  1418  001D0A  45                 	db	69	;'E'
  1419  001D0B  4E                 	db	78	;'N'
  1420  001D0C  20                 	db	32
  1421  001D0D  41                 	db	65	;'A'
  1422  001D0E  44                 	db	68	;'D'
  1423  001D0F  44                 	db	68	;'D'
  1424  001D10  45                 	db	69	;'E'
  1425  001D11  44                 	db	68	;'D'
  1426  001D12  00                 	db	0
  1427  001D13  00                 	db	0
  1428  001D14                     STR_69:
  1429  001D14  2D                 	db	45
  1430  001D15  4F                 	db	79	;'O'
  1431  001D16  52                 	db	82	;'R'
  1432  001D17  42                 	db	66	;'B'
  1433  001D18  49                 	db	73	;'I'
  1434  001D19  54                 	db	84	;'T'
  1435  001D1A  20                 	db	32
  1436  001D1B  20                 	db	32
  1437  001D1C  20                 	db	32
  1438  001D1D  20                 	db	32
  1439  001D1E  00                 	db	0
  1440  001D1F  00                 	db	0
  1441  001D20                     STR_67:
  1442  001D20  2D                 	db	45
  1443  001D21  45                 	db	69	;'E'
  1444  001D22  4D                 	db	77	;'M'
  1445  001D23  50                 	db	80	;'P'
  1446  001D24  54                 	db	84	;'T'
  1447  001D25  59                 	db	89	;'Y'
  1448  001D26  20                 	db	32
  1449  001D27  20                 	db	32
  1450  001D28  20                 	db	32
  1451  001D29  20                 	db	32
  1452  001D2A  00                 	db	0
  1453  001D2B  00                 	db	0
  1454  001D2C                     STR_68:
  1455  001D2C  2D                 	db	45
  1456  001D2D  57                 	db	87	;'W'
  1457  001D2E  41                 	db	65	;'A'
  1458  001D2F  59                 	db	89	;'Y'
  1459  001D30  50                 	db	80	;'P'
  1460  001D31  4F                 	db	79	;'O'
  1461  001D32  49                 	db	73	;'I'
  1462  001D33  4E                 	db	78	;'N'
  1463  001D34  54                 	db	84	;'T'
  1464  001D35  20                 	db	32
  1465  001D36  00                 	db	0
  1466  001D37  00                 	db	0
  1467  001D38                     STR_2:
  1468  001D38  4F                 	db	79	;'O'
  1469  001D39  52                 	db	82	;'R'
  1470  001D3A  42                 	db	66	;'B'
  1471  001D3B  49                 	db	73	;'I'
  1472  001D3C  54                 	db	84	;'T'
  1473  001D3D  20                 	db	32
  1474  001D3E  4D                 	db	77	;'M'
  1475  001D3F  4F                 	db	79	;'O'
  1476  001D40  44                 	db	68	;'D'
  1477  001D41  45                 	db	69	;'E'
  1478  001D42  00                 	db	0
  1479  001D43  00                 	db	0
  1480  001D44                     STR_4:
  1481  001D44  52                 	db	82	;'R'
  1482  001D45  55                 	db	85	;'U'
  1483  001D46  4E                 	db	78	;'N'
  1484  001D47  20                 	db	32
  1485  001D48  50                 	db	80	;'P'
  1486  001D49  52                 	db	82	;'R'
  1487  001D4A  45                 	db	69	;'E'
  1488  001D4B  53                 	db	83	;'S'
  1489  001D4C  45                 	db	69	;'E'
  1490  001D4D  54                 	db	84	;'T'
  1491  001D4E  00                 	db	0
  1492  001D4F  00                 	db	0
  1493  001D50                     STR_66:
  1494  001D50  50                 	db	80	;'P'
  1495  001D51  52                 	db	82	;'R'
  1496  001D52  45                 	db	69	;'E'
  1497  001D53  53                 	db	83	;'S'
  1498  001D54  45                 	db	69	;'E'
  1499  001D55  54                 	db	84	;'T'
  1500  001D56  20                 	db	32
  1501  001D57  30                 	db	48	;'0'
  1502  001D58  31                 	db	49	;'1'
  1503  001D59  00                 	db	0
  1504  001D5A  00                 	db	0
  1505  001D5B                     STR_70:
  1506  001D5B  4F                 	db	79	;'O'
  1507  001D5C  4E                 	db	78	;'N'
  1508  001D5D  45                 	db	69	;'E'
  1509  001D5E  2D                 	db	45
  1510  001D5F  57                 	db	87	;'W'
  1511  001D60  41                 	db	65	;'A'
  1512  001D61  59                 	db	89	;'Y'
  1513  001D62  00                 	db	0
  1514  001D63  00                 	db	0
  1515  001D64                     STR_43:
  1516  001D64  41                 	db	65	;'A'
  1517  001D65  43                 	db	67	;'C'
  1518  001D66  54                 	db	84	;'T'
  1519  001D67  49                 	db	73	;'I'
  1520  001D68  4F                 	db	79	;'O'
  1521  001D69  4E                 	db	78	;'N'
  1522  001D6A  3A                 	db	58	;':'
  1523  001D6B  00                 	db	0
  1524  001D6C  00                 	db	0
  1525  001D6D                     STR_92:
  1526  001D6D  43                 	db	67	;'C'
  1527  001D6E  59                 	db	89	;'Y'
  1528  001D6F  43                 	db	67	;'C'
  1529  001D70  4C                 	db	76	;'L'
  1530  001D71  45                 	db	69	;'E'
  1531  001D72  20                 	db	32
  1532  001D73  00                 	db	0
  1533  001D74  00                 	db	0
  1534  001D75                     STR_71:
  1535  001D75  42                 	db	66	;'B'
  1536  001D76  4F                 	db	79	;'O'
  1537  001D77  55                 	db	85	;'U'
  1538  001D78  4E                 	db	78	;'N'
  1539  001D79  43                 	db	67	;'C'
  1540  001D7A  45                 	db	69	;'E'
  1541  001D7B  00                 	db	0
  1542  001D7C  00                 	db	0
  1543  001D7D                     STR_54:
  1544  001D7D  20                 	db	32
  1545  001D7E  56                 	db	86	;'V'
  1546  001D7F  4F                 	db	79	;'O'
  1547  001D80  4C                 	db	76	;'L'
  1548  001D81  54                 	db	84	;'T'
  1549  001D82  53                 	db	83	;'S'
  1550  001D83  00                 	db	0
  1551  001D84  00                 	db	0
  1552  001D85                     STR_14:
  1553  001D85  4D                 	db	77	;'M'
  1554  001D86  41                 	db	65	;'A'
  1555  001D87  4E                 	db	78	;'N'
  1556  001D88  55                 	db	85	;'U'
  1557  001D89  41                 	db	65	;'A'
  1558  001D8A  4C                 	db	76	;'L'
  1559  001D8B  00                 	db	0
  1560  001D8C  00                 	db	0
  1561  001D8D                     STR_56:
  1562  001D8D  3C                 	db	60	;'<'
  1563  001D8E  4E                 	db	78	;'N'
  1564  001D8F  4F                 	db	79	;'O'
  1565  001D90  3E                 	db	62	;'>'
  1566  001D91  20                 	db	32
  1567  001D92  00                 	db	0
  1568  001D93  00                 	db	0
  1569  001D94                     STR_55:
  1570  001D94  3C                 	db	60	;'<'
  1571  001D95  59                 	db	89	;'Y'
  1572  001D96  45                 	db	69	;'E'
  1573  001D97  53                 	db	83	;'S'
  1574  001D98  3E                 	db	62	;'>'
  1575  001D99  00                 	db	0
  1576  001D9A  00                 	db	0
  1577  001D9B                     STR_30:
  1578  001D9B  53                 	db	83	;'S'
  1579  001D9C  50                 	db	80	;'P'
  1580  001D9D  45                 	db	69	;'E'
  1581  001D9E  45                 	db	69	;'E'
  1582  001D9F  44                 	db	68	;'D'
  1583  001DA0  00                 	db	0
  1584  001DA1  00                 	db	0
  1585  001DA2                     STR_93:
  1586  001DA2  20                 	db	32
  1587  001DA3  4F                 	db	79	;'O'
  1588  001DA4  46                 	db	70	;'F'
  1589  001DA5  20                 	db	32
  1590  001DA6  00                 	db	0
  1591  001DA7  00                 	db	0
  1592  001DA8                     STR_63:
  1593  001DA8  3C                 	db	60	;'<'
  1594  001DA9  6D                 	db	109	;'m'
  1595  001DAA  73                 	db	115	;'s'
  1596  001DAB  3E                 	db	62	;'>'
  1597  001DAC  00                 	db	0
  1598  001DAD                     STR_57:
  1599  001DAD  3C                 	db	60	;'<'
  1600  001DAE  48                 	db	72	;'H'
  1601  001DAF  3E                 	db	62	;'>'
  1602  001DB0  00                 	db	0
  1603  001DB1                     STR_59:
  1604  001DB1  3C                 	db	60	;'<'
  1605  001DB2  4D                 	db	77	;'M'
  1606  001DB3  3E                 	db	62	;'>'
  1607  001DB4  00                 	db	0
  1608  001DB5                     STR_61:
  1609  001DB5  3C                 	db	60	;'<'
  1610  001DB6  53                 	db	83	;'S'
  1611  001DB7  3E                 	db	62	;'>'
  1612  001DB8  00                 	db	0
  1613  0000                     
  1614                           ; #config settings
  1615  001DB9  00                 	db	0	; dummy byte at the end
  1616  0000                     tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           prodh	equ	0xFF4
  1621                           prodl	equ	0xFF3
  1622                           intcon	equ	0xFF2
  1623                           intcon2	equ	0xFF1
  1624                           wreg	equ	0xFE8
  1625                           postinc1	equ	0xFE6
  1626                           indf2	equ	0xFDF
  1627                           postinc2	equ	0xFDE
  1628                           postdec2	equ	0xFDD
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633                           	psect	cinit
  1634  005E5C                     __pcinit:
  1635                           	opt stack 0
  1636  005E5C                     start_initialization:
  1637                           	opt stack 0
  1638                           
  1639                           ; Clear objects allocated to BANK7 (255 bytes)
  1640  005E5C  EE07  F000         	lfsr	0,__pbssBANK7
  1641  005E60  EE10 F0FF          	lfsr	1,255
  1642  005E64                     clear_0:
  1643  005E64  6AEE               	clrf	postinc0,c
  1644  005E66  50E5               	movf	postdec1,w,c
  1645  005E68  50E1               	movf	fsr1l,w,c
  1646  005E6A  E1FC               	bnz	clear_0
  1647  005E6C  50E2               	movf	fsr1h,w,c
  1648  005E6E  E1FA               	bnz	clear_0
  1649                           
  1650                           ; Clear objects allocated to BANK6 (255 bytes)
  1651  005E70  EE06  F000         	lfsr	0,__pbssBANK6
  1652  005E74  EE10 F0FF          	lfsr	1,255
  1653  005E78                     clear_1:
  1654  005E78  6AEE               	clrf	postinc0,c
  1655  005E7A  50E5               	movf	postdec1,w,c
  1656  005E7C  50E1               	movf	fsr1l,w,c
  1657  005E7E  E1FC               	bnz	clear_1
  1658  005E80  50E2               	movf	fsr1h,w,c
  1659  005E82  E1FA               	bnz	clear_1
  1660                           
  1661                           ; Clear objects allocated to BANK4 (159 bytes)
  1662  005E84  EE04  F000         	lfsr	0,__pbssBANK4
  1663  005E88  0E9F               	movlw	159
  1664  005E8A                     clear_2:
  1665  005E8A  6AEE               	clrf	postinc0,c
  1666  005E8C  06E8               	decf	wreg,f,c
  1667  005E8E  E1FD               	bnz	clear_2
  1668                           
  1669                           ; Clear objects allocated to BANK3 (40 bytes)
  1670  005E90  EE03  F0C8         	lfsr	0,__pbssBANK3
  1671  005E94  0E28               	movlw	40
  1672  005E96                     clear_3:
  1673  005E96  6AEE               	clrf	postinc0,c
  1674  005E98  06E8               	decf	wreg,f,c
  1675  005E9A  E1FD               	bnz	clear_3
  1676                           
  1677                           ; Clear objects allocated to BANK2 (38 bytes)
  1678  005E9C  EE02  F0D2         	lfsr	0,__pbssBANK2
  1679  005EA0  0E26               	movlw	38
  1680  005EA2                     clear_4:
  1681  005EA2  6AEE               	clrf	postinc0,c
  1682  005EA4  06E8               	decf	wreg,f,c
  1683  005EA6  E1FD               	bnz	clear_4
  1684                           
  1685                           ; Clear objects allocated to BANK1 (31 bytes)
  1686  005EA8  EE01  F0E0         	lfsr	0,__pbssBANK1
  1687  005EAC  0E1F               	movlw	31
  1688  005EAE                     clear_5:
  1689  005EAE  6AEE               	clrf	postinc0,c
  1690  005EB0  06E8               	decf	wreg,f,c
  1691  005EB2  E1FD               	bnz	clear_5
  1692                           
  1693                           ; Clear objects allocated to BANK0 (9 bytes)
  1694  005EB4  EE00  F0EA         	lfsr	0,__pbssBANK0
  1695  005EB8  0E09               	movlw	9
  1696  005EBA                     clear_6:
  1697  005EBA  6AEE               	clrf	postinc0,c
  1698  005EBC  06E8               	decf	wreg,f,c
  1699  005EBE  E1FD               	bnz	clear_6
  1700                           
  1701                           ; Clear objects allocated to BITCOMRAM (4 bytes)
  1702  005EC0  6A5A               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  1703  005EC2  6A59               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  1704  005EC4  6A58               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  1705  005EC6  6A57               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1706                           
  1707                           ; Clear objects allocated to COMRAM (38 bytes)
  1708  005EC8  EE00  F031         	lfsr	0,__pbssCOMRAM
  1709  005ECC  0E26               	movlw	38
  1710  005ECE                     clear_7:
  1711  005ECE  6AEE               	clrf	postinc0,c
  1712  005ED0  06E8               	decf	wreg,f,c
  1713  005ED2  E1FD               	bnz	clear_7
  1714                           
  1715                           ; Initialize objects allocated to BANK5 (20 bytes)
  1716                           ; load TBLPTR registers with __pidataBANK5
  1717  005ED4  0E5A               	movlw	low __pidataBANK5
  1718  005ED6  6EF6               	movwf	tblptrl,c
  1719  005ED8  0E78               	movlw	high __pidataBANK5
  1720  005EDA  6EF7               	movwf	tblptrh,c
  1721  005EDC  0E00               	movlw	low (__pidataBANK5 shr (0+16))
  1722  005EDE  6EF8               	movwf	tblptru,c
  1723  005EE0  EE05  F000         	lfsr	0,__pdataBANK5
  1724  005EE4  EE10 F014          	lfsr	1,20
  1725  005EE8                     copy_data0:
  1726  005EE8  0009               	tblrd		*+
  1727  005EEA  CFF5 FFEE          	movff	tablat,postinc0
  1728  005EEE  50E5               	movf	postdec1,w,c
  1729  005EF0  50E1               	movf	fsr1l,w,c
  1730  005EF2  E1FA               	bnz	copy_data0
  1731                           
  1732                           ; Initialize objects allocated to BANK4 (20 bytes)
  1733                           ; load TBLPTR registers with __pidataBANK4
  1734  005EF4  0E46               	movlw	low __pidataBANK4
  1735  005EF6  6EF6               	movwf	tblptrl,c
  1736  005EF8  0E78               	movlw	high __pidataBANK4
  1737  005EFA  6EF7               	movwf	tblptrh,c
  1738  005EFC  0E00               	movlw	low (__pidataBANK4 shr (0+16))
  1739  005EFE  6EF8               	movwf	tblptru,c
  1740  005F00  EE04  F0EA         	lfsr	0,__pdataBANK4
  1741  005F04  EE10 F014          	lfsr	1,20
  1742  005F08                     copy_data1:
  1743  005F08  0009               	tblrd		*+
  1744  005F0A  CFF5 FFEE          	movff	tablat,postinc0
  1745  005F0E  50E5               	movf	postdec1,w,c
  1746  005F10  50E1               	movf	fsr1l,w,c
  1747  005F12  E1FA               	bnz	copy_data1
  1748                           
  1749                           ; Initialize objects allocated to BANK2 (4 bytes)
  1750                           ; load TBLPTR registers with __pidataBANK2
  1751  005F14  0E74               	movlw	low __pidataBANK2
  1752  005F16  6EF6               	movwf	tblptrl,c
  1753  005F18  0E78               	movlw	high __pidataBANK2
  1754  005F1A  6EF7               	movwf	tblptrh,c
  1755  005F1C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1756  005F1E  6EF8               	movwf	tblptru,c
  1757  005F20  EE02  F0F8         	lfsr	0,__pdataBANK2
  1758  005F24  EE10 F004          	lfsr	1,4
  1759  005F28                     copy_data2:
  1760  005F28  0009               	tblrd		*+
  1761  005F2A  CFF5 FFEE          	movff	tablat,postinc0
  1762  005F2E  50E5               	movf	postdec1,w,c
  1763  005F30  50E1               	movf	fsr1l,w,c
  1764  005F32  E1FA               	bnz	copy_data2
  1765                           
  1766                           ; Initialize objects allocated to BANK1 (1 bytes)
  1767                           ; load TBLPTR registers with __pidataBANK1
  1768  005F34  0E7C               	movlw	low __pidataBANK1
  1769  005F36  6EF6               	movwf	tblptrl,c
  1770  005F38  0E78               	movlw	high __pidataBANK1
  1771  005F3A  6EF7               	movwf	tblptrh,c
  1772  005F3C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1773  005F3E  6EF8               	movwf	tblptru,c
  1774  005F40  0009               	tblrd		*+	;fetch initializer
  1775  005F42  CFF5 F1FF          	movff	tablat,__pdataBANK1
  1776                           
  1777                           ; Initialize objects allocated to BANK0 (2 bytes)
  1778                           ; load TBLPTR registers with __pidataBANK0
  1779  005F46  0E7A               	movlw	low __pidataBANK0
  1780  005F48  6EF6               	movwf	tblptrl,c
  1781  005F4A  0E78               	movlw	high __pidataBANK0
  1782  005F4C  6EF7               	movwf	tblptrh,c
  1783  005F4E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1784  005F50  6EF8               	movwf	tblptru,c
  1785  005F52  0009               	tblrd		*+	;fetch initializer
  1786  005F54  CFF5 F0F3          	movff	tablat,__pdataBANK0
  1787  005F58  0009               	tblrd		*+	;fetch initializer
  1788  005F5A  CFF5 F0F4          	movff	tablat,__pdataBANK0+1
  1789                           
  1790                           ; Initialize objects allocated to COMRAM (2 bytes)
  1791                           ; load TBLPTR registers with __pidataCOMRAM
  1792  005F5E  0E78               	movlw	low __pidataCOMRAM
  1793  005F60  6EF6               	movwf	tblptrl,c
  1794  005F62  0E78               	movlw	high __pidataCOMRAM
  1795  005F64  6EF7               	movwf	tblptrh,c
  1796  005F66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1797  005F68  6EF8               	movwf	tblptru,c
  1798  005F6A  0009               	tblrd		*+	;fetch initializer
  1799  005F6C  CFF5 F05B          	movff	tablat,__pdataCOMRAM
  1800  005F70  0009               	tblrd		*+	;fetch initializer
  1801  005F72  CFF5 F05C          	movff	tablat,__pdataCOMRAM+1
  1802  005F76                     end_of_initialization:
  1803                           	opt stack 0
  1804  005F76  0100               	movlb	0
  1805  005F78  EF48  F026         	goto	_main	;jump to C main() function
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           prodh	equ	0xFF4
  1811                           prodl	equ	0xFF3
  1812                           intcon	equ	0xFF2
  1813                           intcon2	equ	0xFF1
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postinc1	equ	0xFE6
  1817                           postdec1	equ	0xFE5
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           indf2	equ	0xFDF
  1821                           postinc2	equ	0xFDE
  1822                           postdec2	equ	0xFDD
  1823                           fsr2h	equ	0xFDA
  1824                           fsr2l	equ	0xFD9
  1825                           status	equ	0xFD8
  1826                           
  1827                           	psect	bitbssCOMRAM
  1828  0002B8                     __pbitbssCOMRAM:
  1829                           	opt stack 0
  1830  0002B8                     SlowTick@isPendingRotaryTick:
  1831                           	opt stack 0
  1832  0002B8                     	ds	1
  1833  0002B9                     SlowTick@isPendingUIEvent:
  1834                           	opt stack 0
  1835  0002B9                     	ds	1
  1836  0002BA                     Wait_ticks@LastFlop:
  1837                           	opt stack 0
  1838  0002BA                     	ds	1
  1839  0002BB                     _ClearUI_Event:
  1840                           	opt stack 0
  1841  0002BB                     	ds	1
  1842  0002BC                     _ExtModeActive:
  1843                           	opt stack 0
  1844  0002BC                     	ds	1
  1845  0002BD                     _LCD_BacklightEnabled:
  1846                           	opt stack 0
  1847  0002BD                     	ds	1
  1848  0002BE                     _RX_InProgress:
  1849                           	opt stack 0
  1850  0002BE                     	ds	1
  1851  0002BF                     _RX_MsgComplete:
  1852                           	opt stack 0
  1853  0002BF                     	ds	1
  1854  0002C0                     _Speed_IsAccelerating:
  1855                           	opt stack 0
  1856  0002C0                     	ds	1
  1857  0002C1                     _Speed_SetPending:
  1858                           	opt stack 0
  1859  0002C1                     	ds	1
  1860  0002C2                     _ZeroRotaryDetentIntervals:
  1861                           	opt stack 0
  1862  0002C2                     	ds	1
  1863  0002C3                     _bClear_MotorPosition:
  1864                           	opt stack 0
  1865  0002C3                     	ds	1
  1866  0002C4                     _bDecrement_PID_Setpoint:
  1867                           	opt stack 0
  1868  0002C4                     	ds	1
  1869  0002C5                     _bFollowMode:
  1870                           	opt stack 0
  1871  0002C5                     	ds	1
  1872  0002C6                     _bIncrement_PID_Setpoint:
  1873                           	opt stack 0
  1874  0002C6                     	ds	1
  1875  0002C7                     _bLock_BatteryVoltage:
  1876                           	opt stack 0
  1877  0002C7                     	ds	1
  1878  0002C8                     _bLock_Motor_Position:
  1879                           	opt stack 0
  1880  0002C8                     	ds	1
  1881  0002C9                     _bLock_PID_SetPoint:
  1882                           	opt stack 0
  1883  0002C9                     	ds	1
  1884  0002CA                     _bLock_RotaryDetentIntervals:
  1885                           	opt stack 0
  1886  0002CA                     	ds	1
  1887  0002CB                     _bLock_Tick500Hz:
  1888                           	opt stack 0
  1889  0002CB                     	ds	1
  1890  0002CC                     _bLock_UI_Event:
  1891                           	opt stack 0
  1892  0002CC                     	ds	1
  1893  0002CD                     _bLowVoltageTrip:
  1894                           	opt stack 0
  1895  0002CD                     	ds	1
  1896  0002CE                     _bMotionError:
  1897                           	opt stack 0
  1898  0002CE                     	ds	1
  1899  0002CF                     _bMove_InProgress:
  1900                           	opt stack 0
  1901  0002CF                     	ds	1
  1902  0002D0                     _bMove_Neg:
  1903                           	opt stack 0
  1904  0002D0                     	ds	1
  1905  0002D1                     _bPowerOff:
  1906                           	opt stack 0
  1907  0002D1                     	ds	1
  1908  0002D2                     _bSpeedMode:
  1909                           	opt stack 0
  1910  0002D2                     	ds	1
  1911  0002D3                     _bTick40Khz:
  1912                           	opt stack 0
  1913  0002D3                     	ds	1
  1914  0002D4                     _bWaiting:
  1915                           	opt stack 0
  1916  0002D4                     	ds	1
  1917  0002D5                     _isPendingExternalUIEvent:
  1918                           	opt stack 0
  1919  0002D5                     	ds	1
  1920                           tblptru	equ	0xFF8
  1921                           tblptrh	equ	0xFF7
  1922                           tblptrl	equ	0xFF6
  1923                           tablat	equ	0xFF5
  1924                           prodh	equ	0xFF4
  1925                           prodl	equ	0xFF3
  1926                           intcon	equ	0xFF2
  1927                           intcon2	equ	0xFF1
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           postinc1	equ	0xFE6
  1931                           postdec1	equ	0xFE5
  1932                           fsr1h	equ	0xFE2
  1933                           fsr1l	equ	0xFE1
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           fsr2h	equ	0xFDA
  1938                           fsr2l	equ	0xFD9
  1939                           status	equ	0xFD8
  1940                           
  1941                           	psect	bssCOMRAM
  1942  000031                     __pbssCOMRAM:
  1943                           	opt stack 0
  1944  000031                     SlowTick@internal_Tick500Hz:
  1945                           	opt stack 0
  1946  000031                     	ds	4
  1947  000035                     _Move_AccelValueQ24:
  1948                           	opt stack 0
  1949  000035                     	ds	4
  1950  000039                     _Move_CoastSpeedQ24:
  1951                           	opt stack 0
  1952  000039                     	ds	4
  1953  00003D                     _Move_Origin:
  1954                           	opt stack 0
  1955  00003D                     	ds	4
  1956  000041                     _Move_shifted_position:
  1957                           	opt stack 0
  1958  000041                     	ds	4
  1959  000045                     _WaitUntil_Tick500Hz:
  1960                           	opt stack 0
  1961  000045                     	ds	4
  1962  000049                     SlowTick@LCD_IdleTimer:
  1963                           	opt stack 0
  1964  000049                     	ds	2
  1965  00004B                     SlowTick@PID_LastError:
  1966                           	opt stack 0
  1967  00004B                     	ds	2
  1968  00004D                     SlowTick@PendingRotaryTick:
  1969                           	opt stack 0
  1970  00004D                     	ds	2
  1971  00004F                     SlowTick@SwitchPressDuration:
  1972                           	opt stack 0
  1973  00004F                     	ds	2
  1974  000051                     SlowTick@PendingUIEvent:
  1975                           	opt stack 0
  1976  000051                     	ds	1
  1977  000052                     SlowTick@RawRotaryEncoder:
  1978                           	opt stack 0
  1979  000052                     	ds	1
  1980  000053                     SlowTick@RotaryDetentIntervalIndex:
  1981                           	opt stack 0
  1982  000053                     	ds	1
  1983  000054                     SlowTick@RotaryEncoder:
  1984                           	opt stack 0
  1985  000054                     	ds	1
  1986  000055                     SlowTick@RotaryTickInterval:
  1987                           	opt stack 0
  1988  000055                     	ds	1
  1989  000056                     _PendingExternalUIEvent:
  1990                           	opt stack 0
  1991  000056                     	ds	1
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           intcon2	equ	0xFF1
  2000                           postinc0	equ	0xFEE
  2001                           wreg	equ	0xFE8
  2002                           postinc1	equ	0xFE6
  2003                           postdec1	equ	0xFE5
  2004                           fsr1h	equ	0xFE2
  2005                           fsr1l	equ	0xFE1
  2006                           indf2	equ	0xFDF
  2007                           postinc2	equ	0xFDE
  2008                           postdec2	equ	0xFDD
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013                           	psect	dataCOMRAM
  2014  00005B                     __pdataCOMRAM:
  2015                           	opt stack 0
  2016  00005B                     SlowTick@internal_BatteryVoltage:
  2017                           	opt stack 0
  2018  00005B                     	ds	2
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           prodh	equ	0xFF4
  2024                           prodl	equ	0xFF3
  2025                           intcon	equ	0xFF2
  2026                           intcon2	equ	0xFF1
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postinc1	equ	0xFE6
  2030                           postdec1	equ	0xFE5
  2031                           fsr1h	equ	0xFE2
  2032                           fsr1l	equ	0xFE1
  2033                           indf2	equ	0xFDF
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040                           	psect	bssBANK0
  2041  0000EA                     __pbssBANK0:
  2042                           	opt stack 0
  2043  0000EA                     FastTick@TimmingError:
  2044                           	opt stack 0
  2045  0000EA                     	ds	2
  2046  0000EC                     FastTick@Motor_Encoder:
  2047                           	opt stack 0
  2048  0000EC                     	ds	1
  2049  0000ED                     _LCD_Col:
  2050                           	opt stack 0
  2051  0000ED                     	ds	1
  2052  0000EE                     _LCD_Row:
  2053                           	opt stack 0
  2054  0000EE                     	ds	1
  2055  0000EF                     _RX_Idx:
  2056                           	opt stack 0
  2057  0000EF                     	ds	1
  2058  0000F0                     _ReadIdx:
  2059                           	opt stack 0
  2060  0000F0                     	ds	1
  2061  0000F1                     _TX_bCount:
  2062                           	opt stack 0
  2063  0000F1                     	ds	1
  2064  0000F2                     _UI_Event:
  2065                           	opt stack 0
  2066  0000F2                     	ds	1
  2067                           tblptru	equ	0xFF8
  2068                           tblptrh	equ	0xFF7
  2069                           tblptrl	equ	0xFF6
  2070                           tablat	equ	0xFF5
  2071                           prodh	equ	0xFF4
  2072                           prodl	equ	0xFF3
  2073                           intcon	equ	0xFF2
  2074                           intcon2	equ	0xFF1
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postinc1	equ	0xFE6
  2078                           postdec1	equ	0xFE5
  2079                           fsr1h	equ	0xFE2
  2080                           fsr1l	equ	0xFE1
  2081                           indf2	equ	0xFDF
  2082                           postinc2	equ	0xFDE
  2083                           postdec2	equ	0xFDD
  2084                           fsr2h	equ	0xFDA
  2085                           fsr2l	equ	0xFD9
  2086                           status	equ	0xFD8
  2087                           
  2088                           	psect	dataBANK0
  2089  0000F3                     __pdataBANK0:
  2090                           	opt stack 0
  2091  0000F3                     FastTick@BacklightPWM_PR:
  2092                           	opt stack 0
  2093  0000F3                     	ds	1
  2094  0000F4                     FastTick@LowTrigger:
  2095                           	opt stack 0
  2096  0000F4                     	ds	1
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           prodh	equ	0xFF4
  2102                           prodl	equ	0xFF3
  2103                           intcon	equ	0xFF2
  2104                           intcon2	equ	0xFF1
  2105                           postinc0	equ	0xFEE
  2106                           wreg	equ	0xFE8
  2107                           postinc1	equ	0xFE6
  2108                           postdec1	equ	0xFE5
  2109                           fsr1h	equ	0xFE2
  2110                           fsr1l	equ	0xFE1
  2111                           indf2	equ	0xFDF
  2112                           postinc2	equ	0xFDE
  2113                           postdec2	equ	0xFDD
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8
  2117                           
  2118                           	psect	bssBANK1
  2119  0001E0                     __pbssBANK1:
  2120                           	opt stack 0
  2121  0001E0                     SlowTick@internal_PID_SetPoint:
  2122                           	opt stack 0
  2123  0001E0                     	ds	4
  2124  0001E4                     _Motor_Position:
  2125                           	opt stack 0
  2126  0001E4                     	ds	4
  2127  0001E8                     _Move_DecelPosition:
  2128                           	opt stack 0
  2129  0001E8                     	ds	4
  2130  0001EC                     _Move_FinalPosition:
  2131                           	opt stack 0
  2132  0001EC                     	ds	4
  2133  0001F0                     _Move_speedQ24:
  2134                           	opt stack 0
  2135  0001F0                     	ds	4
  2136  0001F4                     _Speed_SetToThis:
  2137                           	opt stack 0
  2138  0001F4                     	ds	4
  2139  0001F8                     _Tick500Hz:
  2140                           	opt stack 0
  2141  0001F8                     	ds	4
  2142  0001FC                     _BatteryVoltage:
  2143                           	opt stack 0
  2144  0001FC                     	ds	2
  2145  0001FE                     _TX_Idx:
  2146                           	opt stack 0
  2147  0001FE                     	ds	1
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postinc1	equ	0xFE6
  2159                           postdec1	equ	0xFE5
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169                           	psect	dataBANK1
  2170  0001FF                     __pdataBANK1:
  2171                           	opt stack 0
  2172  0001FF                     _MyID:
  2173                           	opt stack 0
  2174  0001FF                     	ds	1
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           intcon2	equ	0xFF1
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postinc1	equ	0xFE6
  2186                           postdec1	equ	0xFE5
  2187                           fsr1h	equ	0xFE2
  2188                           fsr1l	equ	0xFE1
  2189                           indf2	equ	0xFDF
  2190                           postinc2	equ	0xFDE
  2191                           postdec2	equ	0xFDD
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196                           	psect	bssBANK2
  2197  0002D2                     __pbssBANK2:
  2198                           	opt stack 0
  2199  0002D2                     SlowTick@LastMotorPosition:
  2200                           	opt stack 0
  2201  0002D2                     	ds	4
  2202  0002D6                     _Config:
  2203                           	opt stack 0
  2204  0002D6                     	ds	34
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           intcon	equ	0xFF2
  2212                           intcon2	equ	0xFF1
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           postinc1	equ	0xFE6
  2216                           postdec1	equ	0xFE5
  2217                           fsr1h	equ	0xFE2
  2218                           fsr1l	equ	0xFE1
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           fsr2h	equ	0xFDA
  2223                           fsr2l	equ	0xFD9
  2224                           status	equ	0xFD8
  2225                           
  2226                           	psect	dataBANK2
  2227  0002F8                     __pdataBANK2:
  2228                           	opt stack 0
  2229  0002F8                     FastTick@interal_PID_MeasuredPoint:
  2230                           	opt stack 0
  2231  0002F8                     	ds	4
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           prodh	equ	0xFF4
  2237                           prodl	equ	0xFF3
  2238                           intcon	equ	0xFF2
  2239                           intcon2	equ	0xFF1
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postinc1	equ	0xFE6
  2243                           postdec1	equ	0xFE5
  2244                           fsr1h	equ	0xFE2
  2245                           fsr1l	equ	0xFE1
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253                           	psect	bssBANK3
  2254  0003C8                     __pbssBANK3:
  2255                           	opt stack 0
  2256  0003C8                     _LCD_Line1:
  2257                           	opt stack 0
  2258  0003C8                     	ds	20
  2259  0003DC                     _LCD_Line2:
  2260                           	opt stack 0
  2261  0003DC                     	ds	20
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           intcon	equ	0xFF2
  2269                           intcon2	equ	0xFF1
  2270                           postinc0	equ	0xFEE
  2271                           wreg	equ	0xFE8
  2272                           postinc1	equ	0xFE6
  2273                           postdec1	equ	0xFE5
  2274                           fsr1h	equ	0xFE2
  2275                           fsr1l	equ	0xFE1
  2276                           indf2	equ	0xFDF
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283                           	psect	bssBANK4
  2284  000400                     __pbssBANK4:
  2285                           	opt stack 0
  2286  000400                     _RotaryDetentIntervals:
  2287                           	opt stack 0
  2288  000400                     	ds	16
  2289  000410                     _Move_position:
  2290                           	opt stack 0
  2291  000410                     	ds	8
  2292  000418                     _CurrentPath:
  2293                           	opt stack 0
  2294  000418                     	ds	117
  2295  00048D                     _CurrentOrbitProgram:
  2296                           	opt stack 0
  2297  00048D                     	ds	18
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           intcon	equ	0xFF2
  2305                           intcon2	equ	0xFF1
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           postinc1	equ	0xFE6
  2309                           postdec1	equ	0xFE5
  2310                           fsr1h	equ	0xFE2
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319                           	psect	dataBANK4
  2320  0004EA                     __pdataBANK4:
  2321                           	opt stack 0
  2322  0004EA                     main@F9838:
  2323                           	opt stack 0
  2324  0004EA                     	ds	20
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           intcon	equ	0xFF2
  2332                           intcon2	equ	0xFF1
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           postinc1	equ	0xFE6
  2336                           postdec1	equ	0xFE5
  2337                           fsr1h	equ	0xFE2
  2338                           fsr1l	equ	0xFE1
  2339                           indf2	equ	0xFDF
  2340                           postinc2	equ	0xFDE
  2341                           postdec2	equ	0xFDD
  2342                           fsr2h	equ	0xFDA
  2343                           fsr2l	equ	0xFD9
  2344                           status	equ	0xFD8
  2345                           
  2346                           	psect	dataBANK5
  2347  000500                     __pdataBANK5:
  2348                           	opt stack 0
  2349  000500                     main@F9840:
  2350                           	opt stack 0
  2351  000500                     	ds	20
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           intcon	equ	0xFF2
  2359                           intcon2	equ	0xFF1
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           postinc1	equ	0xFE6
  2363                           postdec1	equ	0xFE5
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373                           	psect	bssBANK6
  2374  000600                     __pbssBANK6:
  2375                           	opt stack 0
  2376  000600                     _TXBuffer:
  2377                           	opt stack 0
  2378  000600                     	ds	255
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           prodh	equ	0xFF4
  2384                           prodl	equ	0xFF3
  2385                           intcon	equ	0xFF2
  2386                           intcon2	equ	0xFF1
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postinc1	equ	0xFE6
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           postinc2	equ	0xFDE
  2395                           postdec2	equ	0xFDD
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400                           	psect	bssBANK7
  2401  000700                     __pbssBANK7:
  2402                           	opt stack 0
  2403  000700                     _RXBuffer:
  2404                           	opt stack 0
  2405  000700                     	ds	255
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           intcon2	equ	0xFF1
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           postinc1	equ	0xFE6
  2417                           postdec1	equ	0xFE5
  2418                           fsr1h	equ	0xFE2
  2419                           fsr1l	equ	0xFE1
  2420                           indf2	equ	0xFDF
  2421                           postinc2	equ	0xFDE
  2422                           postdec2	equ	0xFDD
  2423                           fsr2h	equ	0xFDA
  2424                           fsr2l	equ	0xFD9
  2425                           status	equ	0xFD8
  2426                           
  2427                           	psect	cstackBANK4
  2428  00049F                     __pcstackBANK4:
  2429                           	opt stack 0
  2430  00049F                     main@MSG1:
  2431                           	opt stack 0
  2432                           
  2433                           ; 20 bytes @ 0x0
  2434  00049F                     	ds	20
  2435  0004B3                     main@MSG2:
  2436                           	opt stack 0
  2437                           
  2438                           ; 20 bytes @ 0x14
  2439  0004B3                     	ds	20
  2440  0004C7                     main@COMMAND_0:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x28
  2444  0004C7                     	ds	2
  2445  0004C9                     main@COMMAND_1:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x2A
  2449  0004C9                     	ds	2
  2450  0004CB                     main@COMMAND_3:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x2C
  2454  0004CB                     	ds	2
  2455  0004CD                     main@COMMAND_2:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x2E
  2459  0004CD                     	ds	2
  2460  0004CF                     main@COMMAND_4:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x30
  2464  0004CF                     	ds	2
  2465  0004D1                     main@COMMAND_5:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x32
  2469  0004D1                     	ds	2
  2470  0004D3                     main@COMMAND_6:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x34
  2474  0004D3                     	ds	2
  2475  0004D5                     main@CommandMenu:
  2476                           	opt stack 0
  2477                           
  2478                           ; 14 bytes @ 0x36
  2479  0004D5                     	ds	14
  2480  0004E3                     main@lastMenu:
  2481                           	opt stack 0
  2482                           
  2483                           ; 1 bytes @ 0x44
  2484  0004E3                     	ds	1
  2485  0004E4                     main@pnum:
  2486                           	opt stack 0
  2487                           
  2488                           ; 1 bytes @ 0x45
  2489  0004E4                     	ds	1
  2490  0004E5                     main@idx:
  2491                           	opt stack 0
  2492                           
  2493                           ; 1 bytes @ 0x46
  2494  0004E5                     	ds	1
  2495  0004E6                     main@idx1:
  2496                           	opt stack 0
  2497                           
  2498                           ; 1 bytes @ 0x47
  2499  0004E6                     	ds	1
  2500  0004E7                     main@idx2:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x48
  2504  0004E7                     	ds	1
  2505  0004E8                     main@xx:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x49
  2509  0004E8                     	ds	1
  2510  0004E9                     main@ret:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x4A
  2514  0004E9                     	ds	1
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           prodh	equ	0xFF4
  2520                           prodl	equ	0xFF3
  2521                           intcon	equ	0xFF2
  2522                           intcon2	equ	0xFF1
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postinc1	equ	0xFE6
  2526                           postdec1	equ	0xFE5
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           fsr2h	equ	0xFDA
  2533                           fsr2l	equ	0xFD9
  2534                           status	equ	0xFD8
  2535                           
  2536                           	psect	cstackBANK3
  2537  000300                     __pcstackBANK3:
  2538                           	opt stack 0
  2539  000300                     ExtMode@PathTravelTimes:
  2540                           	opt stack 0
  2541                           
  2542                           ; 200 bytes @ 0x0
  2543  000300                     	ds	200
  2544                           tblptru	equ	0xFF8
  2545                           tblptrh	equ	0xFF7
  2546                           tblptrl	equ	0xFF6
  2547                           tablat	equ	0xFF5
  2548                           prodh	equ	0xFF4
  2549                           prodl	equ	0xFF3
  2550                           intcon	equ	0xFF2
  2551                           intcon2	equ	0xFF1
  2552                           postinc0	equ	0xFEE
  2553                           wreg	equ	0xFE8
  2554                           postinc1	equ	0xFE6
  2555                           postdec1	equ	0xFE5
  2556                           fsr1h	equ	0xFE2
  2557                           fsr1l	equ	0xFE1
  2558                           indf2	equ	0xFDF
  2559                           postinc2	equ	0xFDE
  2560                           postdec2	equ	0xFDD
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565                           	psect	cstackBANK2
  2566  000200                     __pcstackBANK2:
  2567                           	opt stack 0
  2568  000200                     ExtMode@PathDistances:
  2569                           	opt stack 0
  2570                           
  2571                           ; 200 bytes @ 0x0
  2572  000200                     	ds	200
  2573  0002C8                     ExtMode@D:
  2574                           	opt stack 0
  2575                           
  2576                           ; 3 bytes @ 0xC8
  2577  0002C8                     	ds	3
  2578  0002CB                     ExtMode@PathIdx:
  2579                           	opt stack 0
  2580                           
  2581                           ; 1 bytes @ 0xCB
  2582  0002CB                     	ds	1
  2583  0002CC                     ExtMode@State:
  2584                           	opt stack 0
  2585                           
  2586                           ; 1 bytes @ 0xCC
  2587  0002CC                     	ds	1
  2588  0002CD                     ExtMode@CmdID:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0xCD
  2592  0002CD                     	ds	1
  2593  0002CE                     ExtMode@mTemp:
  2594                           	opt stack 0
  2595                           
  2596                           ; 4 bytes @ 0xCE
  2597  0002CE                     	ds	4
  2598                           tblptru	equ	0xFF8
  2599                           tblptrh	equ	0xFF7
  2600                           tblptrl	equ	0xFF6
  2601                           tablat	equ	0xFF5
  2602                           prodh	equ	0xFF4
  2603                           prodl	equ	0xFF3
  2604                           intcon	equ	0xFF2
  2605                           intcon2	equ	0xFF1
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postinc1	equ	0xFE6
  2609                           postdec1	equ	0xFE5
  2610                           fsr1h	equ	0xFE2
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619                           	psect	cstackBANK1
  2620  000100                     __pcstackBANK1:
  2621                           	opt stack 0
  2622  000100                     ?_Move:
  2623                           	opt stack 0
  2624  000100                     Idle@PresetNumber:
  2625                           	opt stack 0
  2626  000100                     Move@Distance_deg:
  2627                           	opt stack 0
  2628  000100                     FactoryDefault@Empty:
  2629                           	opt stack 0
  2630                           
  2631                           ; 120 bytes @ 0x0
  2632  000100                     	ds	1
  2633  000101                     Idle@tempPset:
  2634                           	opt stack 0
  2635                           
  2636                           ; 120 bytes @ 0x1
  2637  000101                     	ds	2
  2638  000103                     Move@_Speed_Deg_Sec:
  2639                           	opt stack 0
  2640                           
  2641                           ; 3 bytes @ 0x3
  2642  000103                     	ds	3
  2643  000106                     ?_MoveToAngle:
  2644                           	opt stack 0
  2645  000106                     MoveToAngle@_DestinationAngle:
  2646                           	opt stack 0
  2647  000106                     ExtMode@PathDwellTimes:
  2648                           	opt stack 0
  2649                           
  2650                           ; 200 bytes @ 0x6
  2651  000106                     	ds	3
  2652  000109                     MoveToAngle@_Speed_Deg_Sec:
  2653                           	opt stack 0
  2654                           
  2655                           ; 3 bytes @ 0x9
  2656  000109                     	ds	3
  2657  00010C                     _MoveToAngle$3894:
  2658                           	opt stack 0
  2659                           
  2660                           ; 3 bytes @ 0xC
  2661  00010C                     	ds	3
  2662  00010F                     MoveToAngle@Speed_Deg_Sec:
  2663                           	opt stack 0
  2664                           
  2665                           ; 3 bytes @ 0xF
  2666  00010F                     	ds	3
  2667  000112                     MoveToAngle@CW_Distance:
  2668                           	opt stack 0
  2669                           
  2670                           ; 3 bytes @ 0x12
  2671  000112                     	ds	3
  2672  000115                     MoveToAngle@CCW_Distance:
  2673                           	opt stack 0
  2674                           
  2675                           ; 3 bytes @ 0x15
  2676  000115                     	ds	3
  2677  000118                     _MoveToAngle$3893:
  2678                           	opt stack 0
  2679                           
  2680                           ; 3 bytes @ 0x18
  2681  000118                     	ds	3
  2682  00011B                     MoveToAngle@CurrentAngle:
  2683                           	opt stack 0
  2684                           
  2685                           ; 3 bytes @ 0x1B
  2686  00011B                     	ds	3
  2687  00011E                     MoveToAngle@DestinationAngle:
  2688                           	opt stack 0
  2689                           
  2690                           ; 3 bytes @ 0x1E
  2691  00011E                     	ds	91
  2692  000179                     Idle@temp:
  2693                           	opt stack 0
  2694                           
  2695                           ; 4 bytes @ 0x79
  2696  000179                     	ds	4
  2697  00017D                     Idle@CmdID:
  2698                           	opt stack 0
  2699                           
  2700                           ; 1 bytes @ 0x7D
  2701  00017D                     	ds	1
  2702  00017E                     Idle@idx:
  2703                           	opt stack 0
  2704                           
  2705                           ; 1 bytes @ 0x7E
  2706  00017E                     	ds	1
  2707  00017F                     RunOrbitProgram@EndPos:
  2708                           	opt stack 0
  2709  00017F                     RunWaypointProgram@T:
  2710                           	opt stack 0
  2711                           
  2712                           ; 3 bytes @ 0x7F
  2713  00017F                     	ds	3
  2714  000182                     RunOrbitProgram@TimeRemaining:
  2715                           	opt stack 0
  2716  000182                     _RunWaypointProgram$3899:
  2717                           	opt stack 0
  2718                           
  2719                           ; 3 bytes @ 0x82
  2720  000182                     	ds	3
  2721  000185                     RunOrbitProgram@SpdConvert:
  2722                           	opt stack 0
  2723  000185                     RunWaypointProgram@S:
  2724                           	opt stack 0
  2725                           
  2726                           ; 3 bytes @ 0x85
  2727  000185                     	ds	3
  2728  000188                     RunOrbitProgram@EarlyExit:
  2729                           	opt stack 0
  2730  000188                     RunWaypointProgram@D:
  2731                           	opt stack 0
  2732                           
  2733                           ; 3 bytes @ 0x88
  2734  000188                     	ds	1
  2735  000189                     RunOrbitProgram@ret:
  2736                           	opt stack 0
  2737                           
  2738                           ; 1 bytes @ 0x89
  2739  000189                     	ds	1
  2740  00018A                     RunOrbitProgram@Distance:
  2741                           	opt stack 0
  2742                           
  2743                           ; 3 bytes @ 0x8A
  2744  00018A                     	ds	1
  2745  00018B                     RunWaypointProgram@EarlyExit:
  2746                           	opt stack 0
  2747                           
  2748                           ; 1 bytes @ 0x8B
  2749  00018B                     	ds	1
  2750  00018C                     RunWaypointProgram@PingPong:
  2751                           	opt stack 0
  2752                           
  2753                           ; 1 bytes @ 0x8C
  2754  00018C                     	ds	1
  2755  00018D                     RunWaypointProgram@CycleIndex:
  2756                           	opt stack 0
  2757  00018D                     RunOrbitProgram@CurrentPos:
  2758                           	opt stack 0
  2759                           
  2760                           ; 3 bytes @ 0x8D
  2761  00018D                     	ds	2
  2762  00018F                     RunWaypointProgram@ret:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x8F
  2766  00018F                     	ds	1
  2767  000190                     RunWaypointProgram@idx:
  2768                           	opt stack 0
  2769  000190                     RunOrbitProgram@DistanceRemaining:
  2770                           	opt stack 0
  2771                           
  2772                           ; 3 bytes @ 0x90
  2773  000190                     	ds	1
  2774  000191                     ??_CreateWaypointProgram:
  2775                           	opt stack 0
  2776                           
  2777                           ; 0 bytes @ 0x91
  2778  000191                     	ds	1
  2779  000192                     CreateWaypointProgram@DIRECTION_0:
  2780                           	opt stack 0
  2781                           
  2782                           ; 2 bytes @ 0x92
  2783  000192                     	ds	1
  2784  000193                     _CreateOrbitProgram$3897:
  2785                           	opt stack 0
  2786                           
  2787                           ; 3 bytes @ 0x93
  2788  000193                     	ds	1
  2789  000194                     CreateWaypointProgram@DIRECTION_1:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x94
  2793  000194                     	ds	2
  2794  000196                     CreateOrbitProgram@DIRECTION_1:
  2795                           	opt stack 0
  2796  000196                     CreateWaypointProgram@COMMAND_0:
  2797                           	opt stack 0
  2798                           
  2799                           ; 2 bytes @ 0x96
  2800  000196                     	ds	2
  2801  000198                     CreateOrbitProgram@DIRECTION_0:
  2802                           	opt stack 0
  2803  000198                     CreateWaypointProgram@COMMAND_1:
  2804                           	opt stack 0
  2805                           
  2806                           ; 2 bytes @ 0x98
  2807  000198                     	ds	2
  2808  00019A                     CreateOrbitProgram@SpeedMODE_0:
  2809                           	opt stack 0
  2810  00019A                     CreateWaypointProgram@DirectionMenu:
  2811                           	opt stack 0
  2812                           
  2813                           ; 4 bytes @ 0x9A
  2814  00019A                     	ds	2
  2815  00019C                     CreateOrbitProgram@SpeedMODE_1:
  2816                           	opt stack 0
  2817                           
  2818                           ; 2 bytes @ 0x9C
  2819  00019C                     	ds	2
  2820  00019E                     CreateOrbitProgram@SpeedMODE_2:
  2821                           	opt stack 0
  2822  00019E                     CreateWaypointProgram@CommandMenu:
  2823                           	opt stack 0
  2824                           
  2825                           ; 4 bytes @ 0x9E
  2826  00019E                     	ds	2
  2827  0001A0                     CreateOrbitProgram@ENDMODE_0:
  2828                           	opt stack 0
  2829                           
  2830                           ; 2 bytes @ 0xA0
  2831  0001A0                     	ds	2
  2832  0001A2                     CreateOrbitProgram@ENDMODE_1:
  2833                           	opt stack 0
  2834  0001A2                     CreateWaypointProgram@LastPos:
  2835                           	opt stack 0
  2836                           
  2837                           ; 3 bytes @ 0xA2
  2838  0001A2                     	ds	2
  2839  0001A4                     CreateOrbitProgram@ENDMODE_2:
  2840                           	opt stack 0
  2841                           
  2842                           ; 2 bytes @ 0xA4
  2843  0001A4                     	ds	1
  2844  0001A5                     CreateWaypointProgram@Done:
  2845                           	opt stack 0
  2846                           
  2847                           ; 1 bytes @ 0xA5
  2848  0001A5                     	ds	1
  2849  0001A6                     CreateOrbitProgram@COMMAND_0:
  2850                           	opt stack 0
  2851  0001A6                     CreateWaypointProgram@CurrentPos:
  2852                           	opt stack 0
  2853                           
  2854                           ; 3 bytes @ 0xA6
  2855  0001A6                     	ds	2
  2856  0001A8                     CreateOrbitProgram@COMMAND_1:
  2857                           	opt stack 0
  2858                           
  2859                           ; 2 bytes @ 0xA8
  2860  0001A8                     	ds	1
  2861  0001A9                     CreateWaypointProgram@DeltaDistance:
  2862                           	opt stack 0
  2863                           
  2864                           ; 3 bytes @ 0xA9
  2865  0001A9                     	ds	1
  2866  0001AA                     CreateOrbitProgram@EndModeMenu:
  2867                           	opt stack 0
  2868                           
  2869                           ; 6 bytes @ 0xAA
  2870  0001AA                     	ds	2
  2871  0001AC                     CreateWaypointProgram@intDistance:
  2872                           	opt stack 0
  2873                           
  2874                           ; 2 bytes @ 0xAC
  2875  0001AC                     	ds	2
  2876  0001AE                     CreateWaypointProgram@CycleCount:
  2877                           	opt stack 0
  2878                           
  2879                           ; 3 bytes @ 0xAE
  2880  0001AE                     	ds	2
  2881  0001B0                     CreateOrbitProgram@DirectionMenu:
  2882                           	opt stack 0
  2883                           
  2884                           ; 4 bytes @ 0xB0
  2885  0001B0                     	ds	1
  2886  0001B1                     CreateWaypointProgram@TravelTime:
  2887                           	opt stack 0
  2888                           
  2889                           ; 3 bytes @ 0xB1
  2890  0001B1                     	ds	3
  2891  0001B4                     CreateWaypointProgram@intTravelTime:
  2892                           	opt stack 0
  2893  0001B4                     CreateOrbitProgram@CommandMenu:
  2894                           	opt stack 0
  2895                           
  2896                           ; 4 bytes @ 0xB4
  2897  0001B4                     	ds	2
  2898  0001B6                     CreateWaypointProgram@DwellTime:
  2899                           	opt stack 0
  2900                           
  2901                           ; 3 bytes @ 0xB6
  2902  0001B6                     	ds	2
  2903  0001B8                     CreateOrbitProgram@SpeedModeMenu:
  2904                           	opt stack 0
  2905                           
  2906                           ; 6 bytes @ 0xB8
  2907  0001B8                     	ds	1
  2908  0001B9                     CreateWaypointProgram@MinTravelTime:
  2909                           	opt stack 0
  2910                           
  2911                           ; 3 bytes @ 0xB9
  2912  0001B9                     	ds	3
  2913  0001BC                     CreateWaypointProgram@idx:
  2914                           	opt stack 0
  2915                           
  2916                           ; 1 bytes @ 0xBC
  2917  0001BC                     	ds	1
  2918  0001BD                     CreateWaypointProgram@ret:
  2919                           	opt stack 0
  2920                           
  2921                           ; 1 bytes @ 0xBD
  2922  0001BD                     	ds	1
  2923  0001BE                     CreateOrbitProgram@ret:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0xBE
  2927  0001BE                     	ds	16
  2928  0001CE                     ExtMode@PrepMove_Distance:
  2929                           	opt stack 0
  2930                           
  2931                           ; 3 bytes @ 0xCE
  2932  0001CE                     	ds	3
  2933  0001D1                     ExtMode@PrepMove_Speed:
  2934                           	opt stack 0
  2935                           
  2936                           ; 3 bytes @ 0xD1
  2937  0001D1                     	ds	3
  2938  0001D4                     ExtMode@PrepMove_Acceleration:
  2939                           	opt stack 0
  2940                           
  2941                           ; 3 bytes @ 0xD4
  2942  0001D4                     	ds	3
  2943  0001D7                     ExtMode@idx:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0xD7
  2947  0001D7                     	ds	1
  2948  0001D8                     ExtMode@S:
  2949                           	opt stack 0
  2950                           
  2951                           ; 3 bytes @ 0xD8
  2952  0001D8                     	ds	3
  2953  0001DB                     ExtMode@T:
  2954                           	opt stack 0
  2955                           
  2956                           ; 3 bytes @ 0xDB
  2957  0001DB                     	ds	3
  2958  0001DE                     ExtMode@PrepMove_Ready:
  2959                           	opt stack 0
  2960                           
  2961                           ; 1 bytes @ 0xDE
  2962  0001DE                     	ds	1
  2963  0001DF                     ExtMode@PathCount:
  2964                           	opt stack 0
  2965                           
  2966                           ; 1 bytes @ 0xDF
  2967  0001DF                     	ds	1
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           intcon2	equ	0xFF1
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postinc1	equ	0xFE6
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989                           	psect	cstackBANK0
  2990  000060                     __pcstackBANK0:
  2991                           	opt stack 0
  2992  000060                     ??_FastTick:
  2993                           	opt stack 0
  2994                           
  2995                           ; 0 bytes @ 0x0
  2996  000060                     	ds	10
  2997  00006A                     FastTick@RXDat:
  2998                           	opt stack 0
  2999                           
  3000                           ; 1 bytes @ 0xA
  3001  00006A                     	ds	1
  3002  00006B                     ??_GetInput_nonblocking:
  3003                           	opt stack 0
  3004  00006B                     ??_MessageStream_ReadByte:
  3005                           	opt stack 0
  3006  00006B                     ??_MessageStream_WriteByte:
  3007                           	opt stack 0
  3008  00006B                     ??_SetupIO:
  3009                           	opt stack 0
  3010  00006B                     ??_SetupHardware:
  3011                           	opt stack 0
  3012  00006B                     ??_GetRotaryMultiplier:
  3013                           	opt stack 0
  3014  00006B                     ??_Busy_eep:
  3015                           	opt stack 0
  3016  00006B                     ?_Write_b_eep:
  3017                           	opt stack 0
  3018  00006B                     ?_Wait_ms_nonblocking:
  3019                           	opt stack 0
  3020  00006B                     ??_Wait_ticks:
  3021                           	opt stack 0
  3022  00006B                     ?_Read_b_eep:
  3023                           	opt stack 0
  3024  00006B                     ?___awdiv:
  3025                           	opt stack 0
  3026  00006B                     ?___lwdiv:
  3027                           	opt stack 0
  3028  00006B                     ?___wmul:
  3029                           	opt stack 0
  3030  00006B                     ?___ftpack:
  3031                           	opt stack 0
  3032  00006B                     ?___ftneg:
  3033                           	opt stack 0
  3034  00006B                     ?___aldiv:
  3035                           	opt stack 0
  3036  00006B                     ?___lmul:
  3037                           	opt stack 0
  3038  00006B                     MessageStream_WriteByte@dat:
  3039                           	opt stack 0
  3040  00006B                     GetInput_nonblocking@ret:
  3041                           	opt stack 0
  3042  00006B                     Wait_ms_nonblocking@time:
  3043                           	opt stack 0
  3044  00006B                     GetRotaryMultiplier@uiAccum:
  3045                           	opt stack 0
  3046  00006B                     Read_b_eep@badd:
  3047                           	opt stack 0
  3048  00006B                     Write_b_eep@badd:
  3049                           	opt stack 0
  3050  00006B                     ___awdiv@dividend:
  3051                           	opt stack 0
  3052  00006B                     ___lwdiv@dividend:
  3053                           	opt stack 0
  3054  00006B                     ___wmul@multiplier:
  3055                           	opt stack 0
  3056  00006B                     ___ftpack@arg:
  3057                           	opt stack 0
  3058  00006B                     ___ftneg@f1:
  3059                           	opt stack 0
  3060  00006B                     ___aldiv@dividend:
  3061                           	opt stack 0
  3062  00006B                     ___lmul@multiplier:
  3063                           	opt stack 0
  3064                           
  3065                           ; 4 bytes @ 0xB
  3066  00006B                     	ds	1
  3067  00006C                     MessageStream_WriteByte@temp:
  3068                           	opt stack 0
  3069  00006C                     MessageStream_ReadByte@temp:
  3070                           	opt stack 0
  3071  00006C                     Wait_ticks@Ticks:
  3072                           	opt stack 0
  3073                           
  3074                           ; 1 bytes @ 0xC
  3075  00006C                     	ds	1
  3076  00006D                     ??_AckCmd:
  3077                           	opt stack 0
  3078  00006D                     ?_NackCmd:
  3079                           	opt stack 0
  3080  00006D                     ?_MessageStream_WriteMULTI:
  3081                           	opt stack 0
  3082  00006D                     ?_EEprom_read:
  3083                           	opt stack 0
  3084  00006D                     ??_Read_b_eep:
  3085                           	opt stack 0
  3086  00006D                     ??_Wait_ms_nonblocking:
  3087                           	opt stack 0
  3088  00006D                     AckCmd@CmdID:
  3089                           	opt stack 0
  3090  00006D                     NackCmd@Reason:
  3091                           	opt stack 0
  3092  00006D                     Wait_ticks@remaining:
  3093                           	opt stack 0
  3094  00006D                     GetRotaryMultiplier@idx:
  3095                           	opt stack 0
  3096  00006D                     Write_b_eep@bdat:
  3097                           	opt stack 0
  3098  00006D                     EEprom_read@addr:
  3099                           	opt stack 0
  3100  00006D                     ___awdiv@divisor:
  3101                           	opt stack 0
  3102  00006D                     ___lwdiv@divisor:
  3103                           	opt stack 0
  3104  00006D                     ___wmul@multiplicand:
  3105                           	opt stack 0
  3106  00006D                     MessageStream_WriteMULTI@dat:
  3107                           	opt stack 0
  3108                           
  3109                           ; 4 bytes @ 0xD
  3110  00006D                     	ds	1
  3111  00006E                     ??_NackCmd:
  3112                           	opt stack 0
  3113  00006E                     ?_EEprom_write:
  3114                           	opt stack 0
  3115  00006E                     ??_Write_b_eep:
  3116                           	opt stack 0
  3117  00006E                     ??___ftneg:
  3118                           	opt stack 0
  3119  00006E                     NackCmd@CmdID:
  3120                           	opt stack 0
  3121  00006E                     ___ftpack@exp:
  3122                           	opt stack 0
  3123  00006E                     EEprom_write@addr:
  3124                           	opt stack 0
  3125                           
  3126                           ; 2 bytes @ 0xE
  3127  00006E                     	ds	1
  3128  00006F                     ??___awdiv:
  3129                           	opt stack 0
  3130  00006F                     ??___lwdiv:
  3131                           	opt stack 0
  3132  00006F                     ??___wmul:
  3133                           	opt stack 0
  3134  00006F                     ___awdiv@counter:
  3135                           	opt stack 0
  3136  00006F                     ___ftpack@sign:
  3137                           	opt stack 0
  3138  00006F                     ___lwdiv@counter:
  3139                           	opt stack 0
  3140  00006F                     EEprom_read@dat:
  3141                           	opt stack 0
  3142  00006F                     ___wmul@product:
  3143                           	opt stack 0
  3144  00006F                     ___aldiv@divisor:
  3145                           	opt stack 0
  3146  00006F                     ___lmul@multiplicand:
  3147                           	opt stack 0
  3148                           
  3149                           ; 4 bytes @ 0xF
  3150  00006F                     	ds	1
  3151  000070                     ??___ftpack:
  3152                           	opt stack 0
  3153  000070                     ___awdiv@sign:
  3154                           	opt stack 0
  3155  000070                     EEprom_write@dat:
  3156                           	opt stack 0
  3157  000070                     ___lwdiv@quotient:
  3158                           	opt stack 0
  3159                           
  3160                           ; 2 bytes @ 0x10
  3161  000070                     	ds	1
  3162  000071                     ?_Wait_seconds_nonblocking:
  3163                           	opt stack 0
  3164  000071                     MessageStream_WriteMULTI@CmdID:
  3165                           	opt stack 0
  3166  000071                     EEprom_read@bCount:
  3167                           	opt stack 0
  3168  000071                     Wait_seconds_nonblocking@time:
  3169                           	opt stack 0
  3170  000071                     ___awdiv@quotient:
  3171                           	opt stack 0
  3172                           
  3173                           ; 2 bytes @ 0x11
  3174  000071                     	ds	1
  3175  000072                     ?_Wait_us:
  3176                           	opt stack 0
  3177  000072                     ?_LoadPreset:
  3178                           	opt stack 0
  3179  000072                     ??_GetPresetType:
  3180                           	opt stack 0
  3181  000072                     ??_MessageStream_WriteMULTI:
  3182                           	opt stack 0
  3183  000072                     ??_EEprom_read:
  3184                           	opt stack 0
  3185  000072                     MessageStream_WriteMULTI@bCount:
  3186                           	opt stack 0
  3187  000072                     EEprom_write@bCount:
  3188                           	opt stack 0
  3189  000072                     GetPresetType@pnum:
  3190                           	opt stack 0
  3191  000072                     LoadPreset@dat:
  3192                           	opt stack 0
  3193  000072                     Wait_us@time:
  3194                           	opt stack 0
  3195                           
  3196                           ; 2 bytes @ 0x12
  3197  000072                     	ds	1
  3198  000073                     ??_Wait_seconds_nonblocking:
  3199                           	opt stack 0
  3200  000073                     ?_SavePreset:
  3201                           	opt stack 0
  3202  000073                     ??_EEprom_write:
  3203                           	opt stack 0
  3204  000073                     ??___aldiv:
  3205                           	opt stack 0
  3206  000073                     ??___lmul:
  3207                           	opt stack 0
  3208  000073                     ?___altoft:
  3209                           	opt stack 0
  3210  000073                     ?___awtoft:
  3211                           	opt stack 0
  3212  000073                     ?___ftadd:
  3213                           	opt stack 0
  3214  000073                     ?___lbtoft:
  3215                           	opt stack 0
  3216  000073                     ?___lltoft:
  3217                           	opt stack 0
  3218  000073                     ?___lwtoft:
  3219                           	opt stack 0
  3220  000073                     ___aldiv@counter:
  3221                           	opt stack 0
  3222  000073                     GetPresetType@addr:
  3223                           	opt stack 0
  3224  000073                     SavePreset@dat:
  3225                           	opt stack 0
  3226  000073                     Wait_seconds_nonblocking@msWait:
  3227                           	opt stack 0
  3228  000073                     ___awtoft@c:
  3229                           	opt stack 0
  3230  000073                     ___lwtoft@c:
  3231                           	opt stack 0
  3232  000073                     ___ftadd@f1:
  3233                           	opt stack 0
  3234  000073                     ___altoft@c:
  3235                           	opt stack 0
  3236  000073                     ___lltoft@c:
  3237                           	opt stack 0
  3238  000073                     ___lmul@product:
  3239                           	opt stack 0
  3240                           
  3241                           ; 4 bytes @ 0x13
  3242  000073                     	ds	1
  3243  000074                     ??_Wait_us:
  3244                           	opt stack 0
  3245  000074                     ??_LoadPreset:
  3246                           	opt stack 0
  3247  000074                     LoadPreset@pnum:
  3248                           	opt stack 0
  3249  000074                     Wait_us@tickcount:
  3250                           	opt stack 0
  3251  000074                     ___aldiv@sign:
  3252                           	opt stack 0
  3253                           
  3254                           ; 1 bytes @ 0x14
  3255  000074                     	ds	1
  3256  000075                     ??_LCD_ClearDisplay:
  3257                           	opt stack 0
  3258  000075                     ??_LCD_PrintChar:
  3259                           	opt stack 0
  3260  000075                     ?_LCD_FunctionSet:
  3261                           	opt stack 0
  3262  000075                     ?_LCD_DisplayOnOff:
  3263                           	opt stack 0
  3264  000075                     ??_SavePreset:
  3265                           	opt stack 0
  3266  000075                     ?_LCD_SetPosition:
  3267                           	opt stack 0
  3268  000075                     LCD_ClearDisplay@idx:
  3269                           	opt stack 0
  3270  000075                     LCD_DisplayOnOff@CursorOn:
  3271                           	opt stack 0
  3272  000075                     LCD_FunctionSet@DualLine:
  3273                           	opt stack 0
  3274  000075                     LCD_SetPosition@Col:
  3275                           	opt stack 0
  3276  000075                     LCD_PrintChar@dat:
  3277                           	opt stack 0
  3278  000075                     GetPresetType@ret:
  3279                           	opt stack 0
  3280  000075                     SavePreset@pnum:
  3281                           	opt stack 0
  3282  000075                     LoadPreset@addr:
  3283                           	opt stack 0
  3284  000075                     ___aldiv@quotient:
  3285                           	opt stack 0
  3286                           
  3287                           ; 4 bytes @ 0x15
  3288  000075                     	ds	1
  3289  000076                     ?_LCD_PrintString:
  3290                           	opt stack 0
  3291  000076                     ??_LCD_SetPosition:
  3292                           	opt stack 0
  3293  000076                     ??___awtoft:
  3294                           	opt stack 0
  3295  000076                     ??___lbtoft:
  3296                           	opt stack 0
  3297  000076                     ??___lwtoft:
  3298                           	opt stack 0
  3299  000076                     LCD_DisplayOnOff@BlinkOn:
  3300                           	opt stack 0
  3301  000076                     LCD_FunctionSet@FiveByTenDots:
  3302                           	opt stack 0
  3303  000076                     LCD_SetPosition@dat:
  3304                           	opt stack 0
  3305  000076                     ___awtoft@sign:
  3306                           	opt stack 0
  3307  000076                     ___lbtoft@c:
  3308                           	opt stack 0
  3309  000076                     LCD_PrintString@dat:
  3310                           	opt stack 0
  3311  000076                     SavePreset@addr:
  3312                           	opt stack 0
  3313  000076                     ___ftadd@f2:
  3314                           	opt stack 0
  3315                           
  3316                           ; 3 bytes @ 0x16
  3317  000076                     	ds	1
  3318  000077                     ??_LCD_FunctionSet:
  3319                           	opt stack 0
  3320  000077                     ??_LCD_DisplayOnOff:
  3321                           	opt stack 0
  3322  000077                     ??___altoft:
  3323                           	opt stack 0
  3324  000077                     ??___lltoft:
  3325                           	opt stack 0
  3326  000077                     ?___ftmul:
  3327                           	opt stack 0
  3328  000077                     LCD_DisplayOnOff@DisplayOn:
  3329                           	opt stack 0
  3330  000077                     LCD_FunctionSet@EightBit:
  3331                           	opt stack 0
  3332  000077                     LCD_SetPosition@Row:
  3333                           	opt stack 0
  3334  000077                     ___ftmul@f1:
  3335                           	opt stack 0
  3336                           
  3337                           ; 3 bytes @ 0x17
  3338  000077                     	ds	1
  3339  000078                     ??_LCD_PrintString:
  3340                           	opt stack 0
  3341  000078                     ??_FactoryDefault:
  3342                           	opt stack 0
  3343  000078                     LCD_DisplayOnOff@dat:
  3344                           	opt stack 0
  3345  000078                     LCD_FunctionSet@dat:
  3346                           	opt stack 0
  3347  000078                     LCD_PrintString@a:
  3348                           	opt stack 0
  3349                           
  3350                           ; 1 bytes @ 0x18
  3351  000078                     	ds	1
  3352  000079                     ?_LCD_PrintLong:
  3353                           	opt stack 0
  3354  000079                     ??___ftadd:
  3355                           	opt stack 0
  3356  000079                     LCD_PrintLong@dat:
  3357                           	opt stack 0
  3358                           
  3359                           ; 4 bytes @ 0x19
  3360  000079                     	ds	1
  3361  00007A                     ___ftmul@f2:
  3362                           	opt stack 0
  3363                           
  3364                           ; 3 bytes @ 0x1A
  3365  00007A                     	ds	1
  3366  00007B                     ___altoft@exp:
  3367                           	opt stack 0
  3368  00007B                     ___lltoft@exp:
  3369                           	opt stack 0
  3370                           
  3371                           ; 1 bytes @ 0x1B
  3372  00007B                     	ds	1
  3373  00007C                     ___altoft@sign:
  3374                           	opt stack 0
  3375                           
  3376                           ; 1 bytes @ 0x1C
  3377  00007C                     	ds	1
  3378  00007D                     ??___ftmul:
  3379                           	opt stack 0
  3380  00007D                     LCD_PrintLong@places:
  3381                           	opt stack 0
  3382                           
  3383                           ; 1 bytes @ 0x1D
  3384  00007D                     	ds	1
  3385  00007E                     LCD_PrintLong@sign:
  3386                           	opt stack 0
  3387  00007E                     ___ftadd@sign:
  3388                           	opt stack 0
  3389                           
  3390                           ; 1 bytes @ 0x1E
  3391  00007E                     	ds	1
  3392  00007F                     ??_LCD_PrintLong:
  3393                           	opt stack 0
  3394  00007F                     ___ftadd@exp2:
  3395                           	opt stack 0
  3396  00007F                     LCD_PrintLong@temp:
  3397                           	opt stack 0
  3398                           
  3399                           ; 4 bytes @ 0x1F
  3400  00007F                     	ds	1
  3401  000080                     ___ftadd@exp1:
  3402                           	opt stack 0
  3403                           
  3404                           ; 1 bytes @ 0x20
  3405  000080                     	ds	2
  3406  000082                     ___ftmul@exp:
  3407                           	opt stack 0
  3408                           
  3409                           ; 1 bytes @ 0x22
  3410  000082                     	ds	1
  3411  000083                     ___ftmul@f3_as_product:
  3412                           	opt stack 0
  3413                           
  3414                           ; 3 bytes @ 0x23
  3415  000083                     	ds	3
  3416  000086                     ___ftmul@cntr:
  3417                           	opt stack 0
  3418                           
  3419                           ; 1 bytes @ 0x26
  3420  000086                     	ds	1
  3421  000087                     ___ftmul@sign:
  3422                           	opt stack 0
  3423                           
  3424                           ; 1 bytes @ 0x27
  3425  000087                     	ds	1
  3426  000088                     ?___ftge:
  3427                           	opt stack 0
  3428  000088                     ?_Now:
  3429                           	opt stack 0
  3430  000088                     ?___ftdiv:
  3431                           	opt stack 0
  3432  000088                     ?___asftadd:
  3433                           	opt stack 0
  3434  000088                     ?___asftmul:
  3435                           	opt stack 0
  3436  000088                     ___asftadd@f1p:
  3437                           	opt stack 0
  3438  000088                     ___asftmul@f1p:
  3439                           	opt stack 0
  3440  000088                     ___ftdiv@f1:
  3441                           	opt stack 0
  3442  000088                     ___ftge@ff1:
  3443                           	opt stack 0
  3444                           
  3445                           ; 3 bytes @ 0x28
  3446  000088                     	ds	2
  3447  00008A                     ___asftadd@f2:
  3448                           	opt stack 0
  3449  00008A                     ___asftmul@f2:
  3450                           	opt stack 0
  3451                           
  3452                           ; 3 bytes @ 0x2A
  3453  00008A                     	ds	1
  3454  00008B                     ??_Now:
  3455                           	opt stack 0
  3456  00008B                     Now@ret:
  3457                           	opt stack 0
  3458  00008B                     ___ftdiv@f2:
  3459                           	opt stack 0
  3460  00008B                     ___ftge@ff2:
  3461                           	opt stack 0
  3462                           
  3463                           ; 3 bytes @ 0x2B
  3464  00008B                     	ds	2
  3465  00008D                     ??_Idle:
  3466                           	opt stack 0
  3467  00008D                     ??___asftadd:
  3468                           	opt stack 0
  3469  00008D                     ??___asftmul:
  3470                           	opt stack 0
  3471  00008D                     ?_ConvertTimeFromDiscrete:
  3472                           	opt stack 0
  3473  00008D                     ?_GetCurrentLinearPosition:
  3474                           	opt stack 0
  3475  00008D                     ConvertTimeFromDiscrete@Minutes:
  3476                           	opt stack 0
  3477                           
  3478                           ; 1 bytes @ 0x2D
  3479  00008D                     	ds	1
  3480  00008E                     ?_Wait_ms:
  3481                           	opt stack 0
  3482  00008E                     ??_GetInput:
  3483                           	opt stack 0
  3484  00008E                     ??___ftdiv:
  3485                           	opt stack 0
  3486  00008E                     ??___ftge:
  3487                           	opt stack 0
  3488  00008E                     GetInput@ret:
  3489                           	opt stack 0
  3490  00008E                     ConvertTimeFromDiscrete@Seconds:
  3491                           	opt stack 0
  3492  00008E                     Wait_ms@time:
  3493                           	opt stack 0
  3494                           
  3495                           ; 2 bytes @ 0x2E
  3496  00008E                     	ds	1
  3497  00008F                     ??_GetClick:
  3498                           	opt stack 0
  3499  00008F                     ??_GetPresetNumber:
  3500                           	opt stack 0
  3501  00008F                     ?_DisplayMenu:
  3502                           	opt stack 0
  3503  00008F                     ?_DisplayChoices:
  3504                           	opt stack 0
  3505  00008F                     ?_GetYesNo:
  3506                           	opt stack 0
  3507  00008F                     GetClick@ret:
  3508                           	opt stack 0
  3509  00008F                     GetPresetNumber@inp:
  3510                           	opt stack 0
  3511  00008F                     GetYesNo@prompt:
  3512                           	opt stack 0
  3513  00008F                     DisplayMenu@Menu:
  3514                           	opt stack 0
  3515  00008F                     DisplayChoices@Menu:
  3516                           	opt stack 0
  3517  00008F                     ConvertTimeFromDiscrete@Milliseconds:
  3518                           	opt stack 0
  3519                           
  3520                           ; 2 bytes @ 0x2F
  3521  00008F                     	ds	1
  3522  000090                     ??_Wait_ms:
  3523                           	opt stack 0
  3524  000090                     ??_LCD_PowerUp:
  3525                           	opt stack 0
  3526  000090                     ??_GetCurrentLinearPosition:
  3527                           	opt stack 0
  3528  000090                     GetPresetNumber@ptype:
  3529                           	opt stack 0
  3530  000090                     GetCurrentLinearPosition@MotorPos:
  3531                           	opt stack 0
  3532                           
  3533                           ; 3 bytes @ 0x30
  3534  000090                     	ds	1
  3535  000091                     ??_GoToSleep:
  3536                           	opt stack 0
  3537  000091                     ??_ConvertTimeFromDiscrete:
  3538                           	opt stack 0
  3539  000091                     GetYesNo@Initial:
  3540                           	opt stack 0
  3541  000091                     DisplayMenu@ItemCount:
  3542                           	opt stack 0
  3543  000091                     DisplayChoices@ItemCount:
  3544                           	opt stack 0
  3545  000091                     ConvertTimeFromDiscrete@Hours:
  3546                           	opt stack 0
  3547  000091                     GetPresetNumber@pnum:
  3548                           	opt stack 0
  3549  000091                     GoToSleep@Time:
  3550                           	opt stack 0
  3551                           
  3552                           ; 3 bytes @ 0x31
  3553  000091                     	ds	1
  3554  000092                     ??_GetYesNo:
  3555                           	opt stack 0
  3556  000092                     GetYesNo@inp:
  3557                           	opt stack 0
  3558  000092                     DisplayMenu@Initial:
  3559                           	opt stack 0
  3560  000092                     DisplayChoices@Prompt:
  3561                           	opt stack 0
  3562  000092                     ConvertTimeFromDiscrete@dTemp:
  3563                           	opt stack 0
  3564                           
  3565                           ; 3 bytes @ 0x32
  3566  000092                     	ds	1
  3567  000093                     ??_DisplayMenu:
  3568                           	opt stack 0
  3569  000093                     GetYesNo@answer:
  3570                           	opt stack 0
  3571  000093                     ___ftdiv@cntr:
  3572                           	opt stack 0
  3573                           
  3574                           ; 1 bytes @ 0x33
  3575  000093                     	ds	1
  3576  000094                     DisplayChoices@Initial:
  3577                           	opt stack 0
  3578  000094                     GoToSleep@bin:
  3579                           	opt stack 0
  3580  000094                     ___ftdiv@f3:
  3581                           	opt stack 0
  3582                           
  3583                           ; 3 bytes @ 0x34
  3584  000094                     	ds	1
  3585  000095                     ??_DisplayChoices:
  3586                           	opt stack 0
  3587  000095                     DisplayChoices@ret:
  3588                           	opt stack 0
  3589  000095                     ConvertTimeFromDiscrete@temp:
  3590                           	opt stack 0
  3591                           
  3592                           ; 4 bytes @ 0x35
  3593  000095                     	ds	1
  3594  000096                     GoToSleep@inp:
  3595                           	opt stack 0
  3596  000096                     DisplayMenu@ret:
  3597                           	opt stack 0
  3598  000096                     DisplayChoices@SelectedItem:
  3599                           	opt stack 0
  3600                           
  3601                           ; 1 bytes @ 0x36
  3602  000096                     	ds	1
  3603  000097                     GoToSleep@idx:
  3604                           	opt stack 0
  3605  000097                     DisplayMenu@SecondLine:
  3606                           	opt stack 0
  3607  000097                     ___ftdiv@exp:
  3608                           	opt stack 0
  3609                           
  3610                           ; 1 bytes @ 0x37
  3611  000097                     	ds	1
  3612  000098                     DisplayMenu@SelectedItem:
  3613                           	opt stack 0
  3614  000098                     ___ftdiv@sign:
  3615                           	opt stack 0
  3616  000098                     GoToSleep@Expires:
  3617                           	opt stack 0
  3618                           
  3619                           ; 3 bytes @ 0x38
  3620  000098                     	ds	1
  3621  000099                     ?___ftsub:
  3622                           	opt stack 0
  3623  000099                     ConvertTimeFromDiscrete@ret:
  3624                           	opt stack 0
  3625  000099                     ___ftsub@f1:
  3626                           	opt stack 0
  3627                           
  3628                           ; 3 bytes @ 0x39
  3629  000099                     	ds	3
  3630  00009C                     ___ftsub@f2:
  3631                           	opt stack 0
  3632                           
  3633                           ; 3 bytes @ 0x3C
  3634  00009C                     	ds	3
  3635  00009F                     ??___ftsub:
  3636                           	opt stack 0
  3637  00009F                     ?___asftsub:
  3638                           	opt stack 0
  3639  00009F                     ___asftsub@f1p:
  3640                           	opt stack 0
  3641                           
  3642                           ; 2 bytes @ 0x3F
  3643  00009F                     	ds	2
  3644  0000A1                     ___asftsub@f2:
  3645                           	opt stack 0
  3646                           
  3647                           ; 3 bytes @ 0x41
  3648  0000A1                     	ds	3
  3649  0000A4                     ??___asftsub:
  3650                           	opt stack 0
  3651  0000A4                     ?_sqrt:
  3652                           	opt stack 0
  3653  0000A4                     ?_GetCurrentAngle:
  3654                           	opt stack 0
  3655  0000A4                     sqrt@y:
  3656                           	opt stack 0
  3657                           
  3658                           ; 3 bytes @ 0x44
  3659  0000A4                     	ds	3
  3660  0000A7                     ??_sqrt:
  3661                           	opt stack 0
  3662  0000A7                     ??_GetCurrentAngle:
  3663                           	opt stack 0
  3664  0000A7                     GetCurrentAngle@MotorPos:
  3665                           	opt stack 0
  3666                           
  3667                           ; 3 bytes @ 0x47
  3668  0000A7                     	ds	3
  3669  0000AA                     ?___fttol:
  3670                           	opt stack 0
  3671  0000AA                     ___fttol@f1:
  3672                           	opt stack 0
  3673  0000AA                     sqrt@z:
  3674                           	opt stack 0
  3675                           
  3676                           ; 3 bytes @ 0x4A
  3677  0000AA                     	ds	3
  3678  0000AD                     sqrt@i:
  3679                           	opt stack 0
  3680                           
  3681                           ; 1 bytes @ 0x4D
  3682  0000AD                     	ds	1
  3683  0000AE                     ??___fttol:
  3684                           	opt stack 0
  3685  0000AE                     sqrt@q:
  3686                           	opt stack 0
  3687                           
  3688                           ; 3 bytes @ 0x4E
  3689  0000AE                     	ds	3
  3690  0000B1                     sqrt@x:
  3691                           	opt stack 0
  3692                           
  3693                           ; 3 bytes @ 0x51
  3694  0000B1                     	ds	2
  3695  0000B3                     ___fttol@sign1:
  3696                           	opt stack 0
  3697                           
  3698                           ; 1 bytes @ 0x53
  3699  0000B3                     	ds	1
  3700  0000B4                     ?_SpeedRequiredToMoveInTime:
  3701                           	opt stack 0
  3702  0000B4                     ?_MinTimeToMove:
  3703                           	opt stack 0
  3704  0000B4                     MinTimeToMove@_Distance:
  3705                           	opt stack 0
  3706  0000B4                     SpeedRequiredToMoveInTime@_Distance:
  3707                           	opt stack 0
  3708  0000B4                     ___fttol@lval:
  3709                           	opt stack 0
  3710                           
  3711                           ; 4 bytes @ 0x54
  3712  0000B4                     	ds	3
  3713  0000B7                     ??_MinTimeToMove:
  3714                           	opt stack 0
  3715  0000B7                     MinTimeToMove@HalfD:
  3716                           	opt stack 0
  3717  0000B7                     SpeedRequiredToMoveInTime@_Time:
  3718                           	opt stack 0
  3719                           
  3720                           ; 3 bytes @ 0x57
  3721  0000B7                     	ds	1
  3722  0000B8                     ___fttol@exp1:
  3723                           	opt stack 0
  3724                           
  3725                           ; 1 bytes @ 0x58
  3726  0000B8                     	ds	1
  3727  0000B9                     ?_LCD_PrintFloat:
  3728                           	opt stack 0
  3729  0000B9                     ?_ConvertTimeToDiscrete:
  3730                           	opt stack 0
  3731  0000B9                     ?_MoveAdvanced:
  3732                           	opt stack 0
  3733  0000B9                     LCD_PrintFloat@dat:
  3734                           	opt stack 0
  3735  0000B9                     MoveAdvanced@Distance_deg:
  3736                           	opt stack 0
  3737  0000B9                     ConvertTimeToDiscrete@Time:
  3738                           	opt stack 0
  3739                           
  3740                           ; 3 bytes @ 0x59
  3741  0000B9                     	ds	1
  3742  0000BA                     ??_SpeedRequiredToMoveInTime:
  3743                           	opt stack 0
  3744  0000BA                     MinTimeToMove@RealSpeed:
  3745                           	opt stack 0
  3746  0000BA                     SpeedRequiredToMoveInTime@AccelTime:
  3747                           	opt stack 0
  3748                           
  3749                           ; 3 bytes @ 0x5A
  3750  0000BA                     	ds	2
  3751  0000BC                     LCD_PrintFloat@whole:
  3752                           	opt stack 0
  3753  0000BC                     ConvertTimeToDiscrete@Hours:
  3754                           	opt stack 0
  3755  0000BC                     MoveAdvanced@_Speed_Deg_Sec:
  3756                           	opt stack 0
  3757                           
  3758                           ; 3 bytes @ 0x5C
  3759  0000BC                     	ds	1
  3760  0000BD                     LCD_PrintFloat@fract:
  3761                           	opt stack 0
  3762  0000BD                     MinTimeToMove@CoastDistance:
  3763                           	opt stack 0
  3764  0000BD                     _SpeedRequiredToMoveInTime$3892:
  3765                           	opt stack 0
  3766                           
  3767                           ; 3 bytes @ 0x5D
  3768  0000BD                     	ds	1
  3769  0000BE                     LCD_PrintFloat@sign:
  3770                           	opt stack 0
  3771  0000BE                     ConvertTimeToDiscrete@Minutes:
  3772                           	opt stack 0
  3773                           
  3774                           ; 2 bytes @ 0x5E
  3775  0000BE                     	ds	1
  3776  0000BF                     ??_LCD_PrintFloat:
  3777                           	opt stack 0
  3778  0000BF                     MoveAdvanced@_Acceleration_Deg_Sec_Sec:
  3779                           	opt stack 0
  3780  0000BF                     LCD_PrintFloat@wholepart:
  3781                           	opt stack 0
  3782                           
  3783                           ; 4 bytes @ 0x5F
  3784  0000BF                     	ds	1
  3785  0000C0                     ConvertTimeToDiscrete@Seconds:
  3786                           	opt stack 0
  3787  0000C0                     MinTimeToMove@CoastTime:
  3788                           	opt stack 0
  3789  0000C0                     SpeedRequiredToMoveInTime@RootPrime:
  3790                           	opt stack 0
  3791                           
  3792                           ; 3 bytes @ 0x60
  3793  0000C0                     	ds	2
  3794  0000C2                     ??_MoveAdvanced:
  3795                           	opt stack 0
  3796  0000C2                     ConvertTimeToDiscrete@Milliseconds:
  3797                           	opt stack 0
  3798  0000C2                     MoveAdvanced@DP:
  3799                           	opt stack 0
  3800                           
  3801                           ; 3 bytes @ 0x62
  3802  0000C2                     	ds	1
  3803  0000C3                     MinTimeToMove@AccelDist:
  3804                           	opt stack 0
  3805  0000C3                     SpeedRequiredToMoveInTime@Speed:
  3806                           	opt stack 0
  3807  0000C3                     LCD_PrintFloat@fraction:
  3808                           	opt stack 0
  3809                           
  3810                           ; 4 bytes @ 0x63
  3811  0000C3                     	ds	1
  3812  0000C4                     ??_ConvertTimeToDiscrete:
  3813                           	opt stack 0
  3814  0000C4                     ConvertTimeToDiscrete@temp:
  3815                           	opt stack 0
  3816                           
  3817                           ; 3 bytes @ 0x64
  3818  0000C4                     	ds	1
  3819  0000C5                     MoveAdvanced@AV:
  3820                           	opt stack 0
  3821                           
  3822                           ; 3 bytes @ 0x65
  3823  0000C5                     	ds	1
  3824  0000C6                     SpeedRequiredToMoveInTime@D:
  3825                           	opt stack 0
  3826  0000C6                     _MinTimeToMove$3890:
  3827                           	opt stack 0
  3828                           
  3829                           ; 3 bytes @ 0x66
  3830  0000C6                     	ds	1
  3831  0000C7                     ??_RealtimeMode:
  3832                           	opt stack 0
  3833  0000C7                     ??_ShowVoltage:
  3834                           	opt stack 0
  3835  0000C7                     ?_GetFloat:
  3836                           	opt stack 0
  3837  0000C7                     GetFloat@prompt:
  3838                           	opt stack 0
  3839  0000C7                     ShowVoltage@Batt:
  3840                           	opt stack 0
  3841  0000C7                     ConvertTimeToDiscrete@holder:
  3842                           	opt stack 0
  3843  0000C7                     _RealtimeMode$3898:
  3844                           	opt stack 0
  3845                           
  3846                           ; 3 bytes @ 0x67
  3847  0000C7                     	ds	1
  3848  0000C8                     MoveAdvanced@CS:
  3849                           	opt stack 0
  3850                           
  3851                           ; 3 bytes @ 0x68
  3852  0000C8                     	ds	1
  3853  0000C9                     GetFloat@unit:
  3854                           	opt stack 0
  3855  0000C9                     SpeedRequiredToMoveInTime@T:
  3856                           	opt stack 0
  3857  0000C9                     _MinTimeToMove$3891:
  3858                           	opt stack 0
  3859                           
  3860                           ; 3 bytes @ 0x69
  3861  0000C9                     	ds	1
  3862  0000CA                     RealtimeMode@ret:
  3863                           	opt stack 0
  3864  0000CA                     ConvertTimeToDiscrete@dat:
  3865                           	opt stack 0
  3866                           
  3867                           ; 3 bytes @ 0x6A
  3868  0000CA                     	ds	1
  3869  0000CB                     GetFloat@Value:
  3870                           	opt stack 0
  3871  0000CB                     RealtimeMode@SetSpeed:
  3872                           	opt stack 0
  3873  0000CB                     _MoveAdvanced$3896:
  3874                           	opt stack 0
  3875                           
  3876                           ; 3 bytes @ 0x6B
  3877  0000CB                     	ds	1
  3878  0000CC                     MinTimeToMove@TotalTime:
  3879                           	opt stack 0
  3880                           
  3881                           ; 3 bytes @ 0x6C
  3882  0000CC                     	ds	1
  3883  0000CD                     ?_PrintTime:
  3884                           	opt stack 0
  3885  0000CD                     GetFloat@Min:
  3886                           	opt stack 0
  3887  0000CD                     PrintTime@dat:
  3888                           	opt stack 0
  3889                           
  3890                           ; 3 bytes @ 0x6D
  3891  0000CD                     	ds	1
  3892  0000CE                     MoveAdvanced@CurrentPosition_counts:
  3893                           	opt stack 0
  3894                           
  3895                           ; 4 bytes @ 0x6E
  3896  0000CE                     	ds	1
  3897  0000CF                     MinTimeToMove@D:
  3898                           	opt stack 0
  3899                           
  3900                           ; 3 bytes @ 0x6F
  3901  0000CF                     	ds	1
  3902  0000D0                     PrintTime@precision:
  3903                           	opt stack 0
  3904  0000D0                     GetFloat@Max:
  3905                           	opt stack 0
  3906                           
  3907                           ; 3 bytes @ 0x70
  3908  0000D0                     	ds	1
  3909  0000D1                     PrintTime@EditChevron:
  3910                           	opt stack 0
  3911                           
  3912                           ; 1 bytes @ 0x71
  3913  0000D1                     	ds	1
  3914  0000D2                     ??_PrintTime:
  3915                           	opt stack 0
  3916  0000D2                     PrintTime@Hours:
  3917                           	opt stack 0
  3918  0000D2                     MinTimeToMove@AccelTime:
  3919                           	opt stack 0
  3920  0000D2                     MoveAdvanced@Distance_counts:
  3921                           	opt stack 0
  3922                           
  3923                           ; 4 bytes @ 0x72
  3924  0000D2                     	ds	1
  3925  0000D3                     PrintTime@Minutes:
  3926                           	opt stack 0
  3927  0000D3                     GetFloat@Precision:
  3928                           	opt stack 0
  3929                           
  3930                           ; 3 bytes @ 0x73
  3931  0000D3                     	ds	1
  3932  0000D4                     PrintTime@Seconds:
  3933                           	opt stack 0
  3934                           
  3935                           ; 1 bytes @ 0x74
  3936  0000D4                     	ds	1
  3937  0000D5                     PrintTime@Milliseconds:
  3938                           	opt stack 0
  3939                           
  3940                           ; 2 bytes @ 0x75
  3941  0000D5                     	ds	1
  3942  0000D6                     ??_GetFloat:
  3943                           	opt stack 0
  3944  0000D6                     GetFloat@WholePlaces:
  3945                           	opt stack 0
  3946  0000D6                     MoveAdvanced@AccelTime:
  3947                           	opt stack 0
  3948                           
  3949                           ; 3 bytes @ 0x76
  3950  0000D6                     	ds	1
  3951  0000D7                     ?_GetTime:
  3952                           	opt stack 0
  3953  0000D7                     GetFloat@FractionalPlaces:
  3954                           	opt stack 0
  3955  0000D7                     GetTime@prompt:
  3956                           	opt stack 0
  3957                           
  3958                           ; 2 bytes @ 0x77
  3959  0000D7                     	ds	1
  3960  0000D8                     GetFloat@Output:
  3961                           	opt stack 0
  3962                           
  3963                           ; 3 bytes @ 0x78
  3964  0000D8                     	ds	1
  3965  0000D9                     GetTime@Time:
  3966                           	opt stack 0
  3967  0000D9                     MoveAdvanced@Speed_Deg_Sec:
  3968                           	opt stack 0
  3969                           
  3970                           ; 3 bytes @ 0x79
  3971  0000D9                     	ds	2
  3972  0000DB                     GetTime@Min:
  3973                           	opt stack 0
  3974                           
  3975                           ; 3 bytes @ 0x7B
  3976  0000DB                     	ds	1
  3977  0000DC                     MoveAdvanced@AccelDist:
  3978                           	opt stack 0
  3979                           
  3980                           ; 3 bytes @ 0x7C
  3981  0000DC                     	ds	2
  3982  0000DE                     GetTime@Max:
  3983                           	opt stack 0
  3984                           
  3985                           ; 3 bytes @ 0x7E
  3986  0000DE                     	ds	1
  3987  0000DF                     MoveAdvanced@Accel_Deg_Sec_Sec:
  3988                           	opt stack 0
  3989                           
  3990                           ; 3 bytes @ 0x7F
  3991  0000DF                     	ds	2
  3992  0000E1                     GetTime@Precision:
  3993                           	opt stack 0
  3994                           
  3995                           ; 1 bytes @ 0x81
  3996  0000E1                     	ds	1
  3997  0000E2                     ??_GetTime:
  3998                           	opt stack 0
  3999  0000E2                     GetTime@Milliseconds:
  4000                           	opt stack 0
  4001  0000E2                     MoveAdvanced@DD:
  4002                           	opt stack 0
  4003                           
  4004                           ; 3 bytes @ 0x82
  4005  0000E2                     	ds	2
  4006  0000E4                     GetTime@Seconds:
  4007                           	opt stack 0
  4008                           
  4009                           ; 1 bytes @ 0x84
  4010  0000E4                     	ds	1
  4011  0000E5                     GetTime@Minutes:
  4012                           	opt stack 0
  4013  0000E5                     _MoveAdvanced$3895:
  4014                           	opt stack 0
  4015                           
  4016                           ; 3 bytes @ 0x85
  4017  0000E5                     	ds	1
  4018  0000E6                     GetTime@Hours:
  4019                           	opt stack 0
  4020                           
  4021                           ; 1 bytes @ 0x86
  4022  0000E6                     	ds	1
  4023  0000E7                     GetTime@Tm:
  4024                           	opt stack 0
  4025                           
  4026                           ; 3 bytes @ 0x87
  4027  0000E7                     	ds	1
  4028  0000E8                     ??_Move:
  4029                           	opt stack 0
  4030  0000E8                     ??_RunWaypointProgram:
  4031                           	opt stack 0
  4032  0000E8                     ??_RunOrbitProgram:
  4033                           	opt stack 0
  4034  0000E8                     ??_ExtMode:
  4035                           	opt stack 0
  4036  0000E8                     ??_MoveToAngle:
  4037                           	opt stack 0
  4038  0000E8                     ExtMode@ret:
  4039                           	opt stack 0
  4040                           
  4041                           ; 1 bytes @ 0x88
  4042  0000E8                     	ds	2
  4043  0000EA                     ??_CreateOrbitProgram:
  4044                           	opt stack 0
  4045  0000EA                     ??_main:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           intcon2	equ	0xFF1
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           postinc1	equ	0xFE6
  4058                           postdec1	equ	0xFE5
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068                           ; 0 bytes @ 0x8A
  4069                           
  4070                           	psect	cstackCOMRAM
  4071  000001                     __pcstackCOMRAM:
  4072                           	opt stack 0
  4073  000001                     ?_LCD_ClearDisplay:
  4074                           	opt stack 0
  4075  000001                     ?_AckCmd:
  4076                           	opt stack 0
  4077  000001                     ?_MessageStream_WriteByte:
  4078                           	opt stack 0
  4079  000001                     ?_LCD_PrintChar:
  4080                           	opt stack 0
  4081  000001                     ?_SetupIO:
  4082                           	opt stack 0
  4083  000001                     ?_FactoryDefault:
  4084                           	opt stack 0
  4085  000001                     ?_SetupHardware:
  4086                           	opt stack 0
  4087  000001                     ?_Idle:
  4088                           	opt stack 0
  4089  000001                     ?_RealtimeMode:
  4090                           	opt stack 0
  4091  000001                     ?_ShowVoltage:
  4092                           	opt stack 0
  4093  000001                     ?_GoToSleep:
  4094                           	opt stack 0
  4095  000001                     ?_Busy_eep:
  4096                           	opt stack 0
  4097  000001                     ?_Wait_ticks:
  4098                           	opt stack 0
  4099  000001                     ?_LCD_PowerUp:
  4100                           	opt stack 0
  4101  000001                     ?_main:
  4102                           	opt stack 0
  4103  000001                     ?_FastTick:
  4104                           	opt stack 0
  4105  000001                     ?_SlowTick:
  4106                           	opt stack 0
  4107  000001                     ?_GetInput_nonblocking:
  4108                           	opt stack 0
  4109  000001                     ?_MessageStream_ReadByte:
  4110                           	opt stack 0
  4111  000001                     ?_GetClick:
  4112                           	opt stack 0
  4113  000001                     ?_CreateOrbitProgram:
  4114                           	opt stack 0
  4115  000001                     ?_CreateWaypointProgram:
  4116                           	opt stack 0
  4117  000001                     ?_GetPresetNumber:
  4118                           	opt stack 0
  4119  000001                     ?_RunWaypointProgram:
  4120                           	opt stack 0
  4121  000001                     ?_RunOrbitProgram:
  4122                           	opt stack 0
  4123  000001                     ?_GetPresetType:
  4124                           	opt stack 0
  4125  000001                     ?_GetRotaryMultiplier:
  4126                           	opt stack 0
  4127  000001                     ?_GetInput:
  4128                           	opt stack 0
  4129  000001                     ?_ExtMode:
  4130                           	opt stack 0
  4131  000001                     ?i1___lwdiv:
  4132                           	opt stack 0
  4133  000001                     ?i1___wmul:
  4134                           	opt stack 0
  4135  000001                     i1___lwdiv@dividend:
  4136                           	opt stack 0
  4137  000001                     i1___wmul@multiplier:
  4138                           	opt stack 0
  4139                           
  4140                           ; 2 bytes @ 0x0
  4141  000001                     	ds	2
  4142  000003                     i1___lwdiv@divisor:
  4143                           	opt stack 0
  4144  000003                     i1___wmul@multiplicand:
  4145                           	opt stack 0
  4146                           
  4147                           ; 2 bytes @ 0x2
  4148  000003                     	ds	2
  4149  000005                     ??i1___lwdiv:
  4150                           	opt stack 0
  4151  000005                     ??i1___wmul:
  4152                           	opt stack 0
  4153  000005                     i1___lwdiv@counter:
  4154                           	opt stack 0
  4155  000005                     i1___wmul@product:
  4156                           	opt stack 0
  4157                           
  4158                           ; 2 bytes @ 0x4
  4159  000005                     	ds	1
  4160  000006                     i1___lwdiv@quotient:
  4161                           	opt stack 0
  4162                           
  4163                           ; 2 bytes @ 0x5
  4164  000006                     	ds	2
  4165  000008                     ??_SlowTick:
  4166                           	opt stack 0
  4167                           
  4168                           ; 0 bytes @ 0x7
  4169  000008                     	ds	16
  4170  000018                     SlowTick@PID_Error_delta:
  4171                           	opt stack 0
  4172                           
  4173                           ; 2 bytes @ 0x17
  4174  000018                     	ds	2
  4175  00001A                     SlowTick@BatteryScaleQ8:
  4176                           	opt stack 0
  4177                           
  4178                           ; 2 bytes @ 0x19
  4179  00001A                     	ds	2
  4180  00001C                     SlowTick@diff:
  4181                           	opt stack 0
  4182                           
  4183                           ; 2 bytes @ 0x1B
  4184  00001C                     	ds	2
  4185  00001E                     SlowTick@ucBatt:
  4186                           	opt stack 0
  4187                           
  4188                           ; 1 bytes @ 0x1D
  4189  00001E                     	ds	1
  4190  00001F                     SlowTick@PID_ResponseLimit:
  4191                           	opt stack 0
  4192                           
  4193                           ; 4 bytes @ 0x1E
  4194  00001F                     	ds	4
  4195  000023                     SlowTick@MotorSpeed:
  4196                           	opt stack 0
  4197                           
  4198                           ; 2 bytes @ 0x22
  4199  000023                     	ds	2
  4200  000025                     SlowTick@CurrentMotorPosition:
  4201                           	opt stack 0
  4202                           
  4203                           ; 4 bytes @ 0x24
  4204  000025                     	ds	4
  4205  000029                     SlowTick@uiTemp:
  4206                           	opt stack 0
  4207                           
  4208                           ; 2 bytes @ 0x28
  4209  000029                     	ds	2
  4210  00002B                     SlowTick@PID_Error:
  4211                           	opt stack 0
  4212                           
  4213                           ; 4 bytes @ 0x2A
  4214  00002B                     	ds	4
  4215  00002F                     SlowTick@ResponseOutput:
  4216                           	opt stack 0
  4217                           
  4218                           ; 2 bytes @ 0x2E
  4219  00002F                     	ds	2
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           postinc0	equ	0xFEE
  4229                           wreg	equ	0xFE8
  4230                           postinc1	equ	0xFE6
  4231                           postdec1	equ	0xFE5
  4232                           fsr1h	equ	0xFE2
  4233                           fsr1l	equ	0xFE1
  4234                           indf2	equ	0xFDF
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;;
  4242 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4243 ;;
  4244 ;; *************** function _main *****************
  4245 ;; Defined at:
  4246 ;;		line 16 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  MSG2           20   20[BANK4 ] unsigned char [20]
  4251 ;;  MSG1           20    0[BANK4 ] unsigned char [20]
  4252 ;;  CommandMenu    14   54[BANK4 ] PTR const unsigned char 
  4253 ;;		 -> STR_8(20), STR_7(13), STR_6(17), STR_5(15), 
  4254 ;;		 -> STR_4(12), STR_3(15), STR_2(12), 
  4255 ;;  COMMAND_6       2   52[BANK4 ] PTR const unsigned char 
  4256 ;;		 -> STR_8(20), 
  4257 ;;  COMMAND_5       2   50[BANK4 ] PTR const unsigned char 
  4258 ;;		 -> STR_7(13), 
  4259 ;;  COMMAND_4       2   48[BANK4 ] PTR const unsigned char 
  4260 ;;		 -> STR_6(17), 
  4261 ;;  COMMAND_2       2   46[BANK4 ] PTR const unsigned char 
  4262 ;;		 -> STR_5(15), 
  4263 ;;  COMMAND_3       2   44[BANK4 ] PTR const unsigned char 
  4264 ;;		 -> STR_4(12), 
  4265 ;;  COMMAND_1       2   42[BANK4 ] PTR const unsigned char 
  4266 ;;		 -> STR_3(15), 
  4267 ;;  COMMAND_0       2   40[BANK4 ] PTR const unsigned char 
  4268 ;;		 -> STR_2(12), 
  4269 ;;  ret             1   74[BANK4 ] char 
  4270 ;;  xx              1   73[BANK4 ] unsigned char 
  4271 ;;  idx2            1   72[BANK4 ] unsigned char 
  4272 ;;  idx1            1   71[BANK4 ] unsigned char 
  4273 ;;  idx             1   70[BANK4 ] unsigned char 
  4274 ;;  pnum            1   69[BANK4 ] unsigned char 
  4275 ;;  lastMenu        1   68[BANK4 ] char 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;		None               void
  4278 ;; Registers used:
  4279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : F/1
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0      75       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Totals:         0       0       0       0       0      75       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;Total ram usage:       75 bytes
  4290 ;; Hardware stack levels required when called:   11
  4291 ;; This function calls:
  4292 ;;		_SetupIO
  4293 ;;		_FactoryDefault
  4294 ;;		_SetupHardware
  4295 ;;		_LCD_PowerUp
  4296 ;;		_LCD_ClearDisplay
  4297 ;;		_LCD_SetPosition
  4298 ;;		_LCD_PrintChar
  4299 ;;		_Wait_ms
  4300 ;;		_LCD_PrintString
  4301 ;;		_GetClick
  4302 ;;		_Idle
  4303 ;;		_DisplayMenu
  4304 ;;		_CreateOrbitProgram
  4305 ;;		_RealtimeMode
  4306 ;;		_CreateWaypointProgram
  4307 ;;		_GetPresetNumber
  4308 ;;		_LoadPreset
  4309 ;;		_RunWaypointProgram
  4310 ;;		_RunOrbitProgram
  4311 ;;		_GetPresetType
  4312 ;;		_ShowVoltage
  4313 ;;		_GoToSleep
  4314 ;;		_ExtMode
  4315 ;; This function is called by:
  4316 ;;		Startup code after reset
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text0
  4321  004C90                     __ptext0:
  4322                           	opt stack 0
  4323  004C90                     _main:
  4324                           	opt stack 20
  4325                           
  4326                           ;Main.c: 18: signed char lastMenu = 0;
  4327  004C90  0104               	movlb	4	; () banked
  4328  004C92  6BE3               	clrf	main@lastMenu& (0+255),b
  4329                           
  4330                           ;Main.c: 19: char pnum = 0;
  4331  004C94  6BE4               	clrf	main@pnum& (0+255),b
  4332                           
  4333                           ; BSR set to: 4
  4334                           ;Main.c: 21: SetupIO();
  4335  004C96  EC35  F03A         	call	_SetupIO	;wreg free
  4336                           
  4337                           ; BSR set to: 15
  4338                           ;Main.c: 22: LATCbits.LATC0 = 0;
  4339  004C9A  908B               	bcf	3979,0,c	;volatile
  4340                           
  4341                           ; BSR set to: 15
  4342                           ;Main.c: 23: LATBbits.LATB0 = 0;
  4343  004C9C  908A               	bcf	3978,0,c	;volatile
  4344                           
  4345                           ; BSR set to: 15
  4346                           ;Main.c: 25: Move_shifted_position.ul = 0;
  4347  004C9E  6A41               	clrf	_Move_shifted_position,c
  4348  004CA0  6A42               	clrf	_Move_shifted_position+1,c
  4349  004CA2  6A43               	clrf	_Move_shifted_position+2,c
  4350  004CA4  6A44               	clrf	_Move_shifted_position+3,c
  4351                           
  4352                           ; BSR set to: 15
  4353                           ;Main.c: 26: Move_position[0].ul = 0;
  4354  004CA6  0104               	movlb	4	; () banked
  4355  004CA8  6B10               	clrf	_Move_position& (0+255),b
  4356  004CAA  6B11               	clrf	(_Move_position+1)& (0+255),b
  4357  004CAC  6B12               	clrf	(_Move_position+2)& (0+255),b
  4358  004CAE  6B13               	clrf	(_Move_position+3)& (0+255),b
  4359                           
  4360                           ; BSR set to: 4
  4361                           ;Main.c: 27: Move_position[1].ul = 0;
  4362  004CB0  6B14               	clrf	(_Move_position+4)& (0+255),b
  4363  004CB2  6B15               	clrf	(_Move_position+5)& (0+255),b
  4364  004CB4  6B16               	clrf	(_Move_position+6)& (0+255),b
  4365  004CB6  6B17               	clrf	(_Move_position+7)& (0+255),b
  4366                           
  4367                           ; BSR set to: 4
  4368                           ;Main.c: 29: char idx;
  4369                           ;Main.c: 30: for (idx = 0; idx < 16; idx++) RotaryDetentIntervals[idx] = 0xFF;
  4370  004CB8  6BE5               	clrf	main@idx& (0+255),b
  4371  004CBA                     l18099:
  4372                           
  4373                           ; BSR set to: 4
  4374  004CBA  0E00               	movlw	low _RotaryDetentIntervals
  4375  004CBC  25E5               	addwf	main@idx& (0+255),w,b
  4376  004CBE  6ED9               	movwf	fsr2l,c
  4377  004CC0  6ADA               	clrf	fsr2h,c
  4378  004CC2  0E04               	movlw	high _RotaryDetentIntervals
  4379  004CC4  22DA               	addwfc	fsr2h,f,c
  4380  004CC6  68DF               	setf	indf2,c
  4381                           
  4382                           ; BSR set to: 4
  4383  004CC8  2BE5               	incf	main@idx& (0+255),f,b
  4384                           
  4385                           ; BSR set to: 4
  4386  004CCA  0E0F               	movlw	15
  4387  004CCC  65E5               	cpfsgt	main@idx& (0+255),b
  4388  004CCE  D7F5               	goto	l18099
  4389                           
  4390                           ; BSR set to: 4
  4391                           ;Main.c: 32: FactoryDefault();
  4392  004CD0  EC19  F033         	call	_FactoryDefault	;wreg free
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;Main.c: 34: SetupHardware();
  4396  004CD4  ECA7  F036         	call	_SetupHardware	;wreg free
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;Main.c: 36: LCD_PowerUp();
  4400  004CD8  ECCA  F038         	call	_LCD_PowerUp	;wreg free
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;Main.c: 37: LCD_ClearDisplay();
  4404  004CDC  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;Main.c: 39: unsigned char MSG1[20] = {'C', 'I', 'N', 'E', 'F', 'L', 'U', 'X', ' ', 'O',
      +                           'R', 'B', 'I', 'T', '.', '.', '.', '.', '.', '.'};
  4408  004CE0  EE24  F0EA         	lfsr	2,main@F9838
  4409  004CE4  EE14  F09F         	lfsr	1,main@MSG1
  4410  004CE8  0E14               	movlw	20
  4411  004CEA                     u10271:
  4412  004CEA  CFDE FFE6          	movff	postinc2,postinc1
  4413  004CEE  2EE8               	decfsz	wreg,f,c
  4414  004CF0  D7FC               	goto	u10271
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;Main.c: 40: unsigned char MSG2[20] = {'H', '/', 'W', ':', '1', 'C', ' ', 'S', '/', 'W',
      +                           ':', '1', 'A', '.', '.', '.', '.', '.', '.', '.'};
  4418  004CF2  EE25  F000         	lfsr	2,main@F9840
  4419  004CF6  EE14  F0B3         	lfsr	1,main@MSG2
  4420  004CFA  0E14               	movlw	20
  4421  004CFC                     u10281:
  4422  004CFC  CFDE FFE6          	movff	postinc2,postinc1
  4423  004D00  2EE8               	decfsz	wreg,f,c
  4424  004D02  D7FC               	goto	u10281
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;Main.c: 41: unsigned char idx1, idx2, xx;
  4428                           ;Main.c: 43: for (idx1 = 0; idx1 < 20; idx1++) {
  4429  004D04  0104               	movlb	4	; () banked
  4430  004D06  6BE6               	clrf	main@idx1& (0+255),b
  4431  004D08                     l18123:
  4432                           
  4433                           ; BSR set to: 4
  4434                           ;Main.c: 44: xx = 19 - idx1;
  4435  004D08  51E6               	movf	main@idx1& (0+255),w,b
  4436  004D0A  0813               	sublw	19
  4437  004D0C  6FE8               	movwf	main@xx& (0+255),b
  4438                           
  4439                           ; BSR set to: 4
  4440                           ;Main.c: 45: for (idx2 = 0; idx2 < 20; idx2++) {
  4441  004D0E  6BE7               	clrf	main@idx2& (0+255),b
  4442  004D10                     l18131:
  4443                           
  4444                           ; BSR set to: 4
  4445                           ;Main.c: 46: LCD_SetPosition(0, idx2);
  4446  004D10  C4E7  F075         	movff	main@idx2,?_LCD_SetPosition
  4447  004D14  0E00               	movlw	0
  4448  004D16  ECDF  F036         	call	_LCD_SetPosition
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;Main.c: 47: if (xx < 20) LCD_PrintChar(MSG1[xx]);
  4452  004D1A  0E14               	movlw	20
  4453  004D1C  0104               	movlb	4	; () banked
  4454  004D1E  61E8               	cpfslt	main@xx& (0+255),b
  4455  004D20  D00A               	goto	l18137
  4456                           
  4457                           ; BSR set to: 4
  4458  004D22  0E9F               	movlw	low main@MSG1
  4459  004D24  25E8               	addwf	main@xx& (0+255),w,b
  4460  004D26  6ED9               	movwf	fsr2l,c
  4461  004D28  6ADA               	clrf	fsr2h,c
  4462  004D2A  0E04               	movlw	high main@MSG1
  4463  004D2C  22DA               	addwfc	fsr2h,f,c
  4464  004D2E  50DF               	movf	indf2,w,c
  4465  004D30  EC6A  F035         	call	_LCD_PrintChar
  4466  004D34  D003               	goto	l18139
  4467  004D36                     l18137:
  4468                           
  4469                           ; BSR set to: 4
  4470                           ;Main.c: 48: else LCD_PrintChar(' ');
  4471  004D36  0E20               	movlw	32
  4472  004D38  EC6A  F035         	call	_LCD_PrintChar
  4473  004D3C                     l18139:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;Main.c: 49: LCD_SetPosition(1, idx2);
  4477  004D3C  C4E7  F075         	movff	main@idx2,?_LCD_SetPosition
  4478  004D40  0E01               	movlw	1
  4479  004D42  ECDF  F036         	call	_LCD_SetPosition
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;Main.c: 50: if (xx < 20) LCD_PrintChar(MSG2[xx]);
  4483  004D46  0E14               	movlw	20
  4484  004D48  0104               	movlb	4	; () banked
  4485  004D4A  61E8               	cpfslt	main@xx& (0+255),b
  4486  004D4C  D00A               	goto	l18145
  4487                           
  4488                           ; BSR set to: 4
  4489  004D4E  0EB3               	movlw	low main@MSG2
  4490  004D50  25E8               	addwf	main@xx& (0+255),w,b
  4491  004D52  6ED9               	movwf	fsr2l,c
  4492  004D54  6ADA               	clrf	fsr2h,c
  4493  004D56  0E04               	movlw	high main@MSG2
  4494  004D58  22DA               	addwfc	fsr2h,f,c
  4495  004D5A  50DF               	movf	indf2,w,c
  4496  004D5C  EC6A  F035         	call	_LCD_PrintChar
  4497  004D60  D003               	goto	l18147
  4498  004D62                     l18145:
  4499                           
  4500                           ; BSR set to: 4
  4501                           ;Main.c: 51: else LCD_PrintChar(' ');
  4502  004D62  0E20               	movlw	32
  4503  004D64  EC6A  F035         	call	_LCD_PrintChar
  4504  004D68                     l18147:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;Main.c: 52: xx++;
  4508  004D68  0104               	movlb	4	; () banked
  4509  004D6A  2BE8               	incf	main@xx& (0+255),f,b
  4510                           
  4511                           ; BSR set to: 4
  4512  004D6C  2BE7               	incf	main@idx2& (0+255),f,b
  4513                           
  4514                           ; BSR set to: 4
  4515  004D6E  0E13               	movlw	19
  4516  004D70  65E7               	cpfsgt	main@idx2& (0+255),b
  4517  004D72  D7CE               	goto	l18131
  4518                           
  4519                           ; BSR set to: 4
  4520                           ;Main.c: 53: }
  4521                           ;Main.c: 54: Wait_ms(75);
  4522  004D74  0100               	movlb	0	; () banked
  4523  004D76  6B8F               	clrf	(?_Wait_ms+1)& (0+255),b
  4524  004D78  0E4B               	movlw	75
  4525  004D7A  6F8E               	movwf	?_Wait_ms& (0+255),b
  4526  004D7C  EC0A  F03C         	call	_Wait_ms	;wreg free
  4527  004D80  0104               	movlb	4	; () banked
  4528  004D82  2BE6               	incf	main@idx1& (0+255),f,b
  4529                           
  4530                           ; BSR set to: 4
  4531  004D84  0E13               	movlw	19
  4532  004D86  65E6               	cpfsgt	main@idx1& (0+255),b
  4533  004D88  D7BF               	goto	l18123
  4534                           
  4535                           ; BSR set to: 4
  4536                           ;Main.c: 55: }
  4537                           ;Main.c: 56: Wait_ms(2000);
  4538  004D8A  0E07               	movlw	7
  4539  004D8C  0100               	movlb	0	; () banked
  4540  004D8E  6F8F               	movwf	(?_Wait_ms+1)& (0+255),b
  4541  004D90  0ED0               	movlw	208
  4542  004D92  6F8E               	movwf	?_Wait_ms& (0+255),b
  4543  004D94  EC0A  F03C         	call	_Wait_ms	;wreg free
  4544                           
  4545                           ;Main.c: 58: const char *COMMAND_0 = "ORBIT MODE\0";
  4546  004D98  0E1D               	movlw	high STR_2
  4547  004D9A  0104               	movlb	4	; () banked
  4548  004D9C  6FC8               	movwf	(main@COMMAND_0+1)& (0+255),b
  4549  004D9E  0E38               	movlw	low STR_2
  4550  004DA0  6FC7               	movwf	main@COMMAND_0& (0+255),b
  4551                           
  4552                           ; BSR set to: 4
  4553                           ;Main.c: 59: const char *COMMAND_1 = "WAYPOINT MODE\0";
  4554  004DA2  0E1C               	movlw	high STR_3
  4555  004DA4  6FCA               	movwf	(main@COMMAND_1+1)& (0+255),b
  4556  004DA6  0E3E               	movlw	low STR_3
  4557  004DA8  6FC9               	movwf	main@COMMAND_1& (0+255),b
  4558                           
  4559                           ; BSR set to: 4
  4560                           ;Main.c: 60: const char *COMMAND_3 = "RUN PRESET\0";
  4561  004DAA  0E1D               	movlw	high STR_4
  4562  004DAC  6FCC               	movwf	(main@COMMAND_3+1)& (0+255),b
  4563  004DAE  0E44               	movlw	low STR_4
  4564  004DB0  6FCB               	movwf	main@COMMAND_3& (0+255),b
  4565                           
  4566                           ; BSR set to: 4
  4567                           ;Main.c: 61: const char *COMMAND_2 = "REALTIME MODE\0";
  4568  004DB2  0E1C               	movlw	high STR_5
  4569  004DB4  6FCE               	movwf	(main@COMMAND_2+1)& (0+255),b
  4570  004DB6  0E2F               	movlw	low STR_5
  4571  004DB8  6FCD               	movwf	main@COMMAND_2& (0+255),b
  4572                           
  4573                           ; BSR set to: 4
  4574                           ;Main.c: 62: const char *COMMAND_4 = "BATTERY VOLTAGE\0";
  4575  004DBA  0E1B               	movlw	high STR_6
  4576  004DBC  6FD0               	movwf	(main@COMMAND_4+1)& (0+255),b
  4577  004DBE  0EB1               	movlw	low STR_6
  4578  004DC0  6FCF               	movwf	main@COMMAND_4& (0+255),b
  4579                           
  4580                           ; BSR set to: 4
  4581                           ;Main.c: 63: const char *COMMAND_5 = "GO TO SLEEP\0";
  4582  004DC2  0E1C               	movlw	high STR_7
  4583  004DC4  6FD2               	movwf	(main@COMMAND_5+1)& (0+255),b
  4584  004DC6  0EEF               	movlw	low STR_7
  4585  004DC8  6FD1               	movwf	main@COMMAND_5& (0+255),b
  4586                           
  4587                           ; BSR set to: 4
  4588                           ;Main.c: 64: const char *COMMAND_6 = "EXTERNAL CTRL MODE\0";
  4589  004DCA  0E1A               	movlw	high STR_8
  4590  004DCC  6FD4               	movwf	(main@COMMAND_6+1)& (0+255),b
  4591  004DCE  0E9E               	movlw	low STR_8
  4592  004DD0  6FD3               	movwf	main@COMMAND_6& (0+255),b
  4593                           
  4594                           ; BSR set to: 4
  4595                           ;Main.c: 65: const char*CommandMenu[7];
  4596                           ;Main.c: 66: CommandMenu[0] = COMMAND_0;
  4597  004DD2  C4C7  F4D5         	movff	main@COMMAND_0,main@CommandMenu
  4598  004DD6  C4C8  F4D6         	movff	main@COMMAND_0+1,main@CommandMenu+1
  4599                           
  4600                           ; BSR set to: 4
  4601                           ;Main.c: 67: CommandMenu[1] = COMMAND_1;
  4602  004DDA  C4C9  F4D7         	movff	main@COMMAND_1,main@CommandMenu+2
  4603  004DDE  C4CA  F4D8         	movff	main@COMMAND_1+1,main@CommandMenu+3
  4604                           
  4605                           ; BSR set to: 4
  4606                           ;Main.c: 68: CommandMenu[2] = COMMAND_2;
  4607  004DE2  C4CD  F4D9         	movff	main@COMMAND_2,main@CommandMenu+4
  4608  004DE6  C4CE  F4DA         	movff	main@COMMAND_2+1,main@CommandMenu+5
  4609                           
  4610                           ; BSR set to: 4
  4611                           ;Main.c: 69: CommandMenu[3] = COMMAND_3;
  4612  004DEA  C4CB  F4DB         	movff	main@COMMAND_3,main@CommandMenu+6
  4613  004DEE  C4CC  F4DC         	movff	main@COMMAND_3+1,main@CommandMenu+7
  4614                           
  4615                           ; BSR set to: 4
  4616                           ;Main.c: 70: CommandMenu[4] = COMMAND_4;
  4617  004DF2  C4CF  F4DD         	movff	main@COMMAND_4,main@CommandMenu+8
  4618  004DF6  C4D0  F4DE         	movff	main@COMMAND_4+1,main@CommandMenu+9
  4619                           
  4620                           ; BSR set to: 4
  4621                           ;Main.c: 71: CommandMenu[5] = COMMAND_5;
  4622  004DFA  C4D1  F4DF         	movff	main@COMMAND_5,main@CommandMenu+10
  4623  004DFE  C4D2  F4E0         	movff	main@COMMAND_5+1,main@CommandMenu+11
  4624                           
  4625                           ; BSR set to: 4
  4626                           ;Main.c: 72: CommandMenu[6] = COMMAND_6;
  4627  004E02  C4D3  F4E1         	movff	main@COMMAND_6,main@CommandMenu+12
  4628  004E06  C4D4  F4E2         	movff	main@COMMAND_6+1,main@CommandMenu+13
  4629                           
  4630                           ; BSR set to: 4
  4631                           ;Main.c: 74: bFollowMode = 1;
  4632  004E0A  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  4633  004E0C  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  4634                           
  4635                           ;Main.c: 75: LCD_ClearDisplay();
  4636  004E0E  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;Main.c: 76: LCD_PrintString("MOVE TO ZERO DEGREES\0");
  4640  004E12  0E19               	movlw	high STR_9
  4641  004E14  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  4642  004E16  0EE4               	movlw	low STR_9
  4643  004E18  6F76               	movwf	?_LCD_PrintString& (0+255),b
  4644  004E1A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;Main.c: 77: LCD_SetPosition(1, 0);
  4648  004E1E  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  4649  004E20  0E01               	movlw	1
  4650  004E22  ECDF  F036         	call	_LCD_SetPosition
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;Main.c: 78: LCD_PrintString("THEN CLICK...\0");
  4654  004E26  0E1C               	movlw	high STR_10
  4655  004E28  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  4656  004E2A  0E20               	movlw	low STR_10
  4657  004E2C  6F76               	movwf	?_LCD_PrintString& (0+255),b
  4658  004E2E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;Main.c: 79: GetClick();
  4662  004E32  ECFC  F03B         	call	_GetClick	;wreg free
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;Main.c: 80: bClear_MotorPosition = 1;
  4666  004E36  8658               	bsf	_bClear_MotorPosition/(0+8),_bClear_MotorPosition& (0+7),c	;volatile
  4667                           
  4668                           ;Main.c: 81: while (bClear_MotorPosition) Idle();
  4669  004E38  D002               	goto	l18205
  4670  004E3A                     l18203:
  4671  004E3A  ECDF  F024         	call	_Idle	;wreg free
  4672  004E3E                     l18205:
  4673  004E3E  0100               	movlb	(_bClear_MotorPosition/(0+8)) shr (0+8)
  4674  004E40  B658               	btfsc	_bClear_MotorPosition/(0+8),_bClear_MotorPosition& (0+7),c	;volatile
  4675  004E42  D7FB               	goto	l18203
  4676                           
  4677                           ;Main.c: 82: Wait_ms(10);
  4678  004E44  0100               	movlb	0	; () banked
  4679  004E46  6B8F               	clrf	(?_Wait_ms+1)& (0+255),b
  4680  004E48  0E0A               	movlw	10
  4681  004E4A  6F8E               	movwf	?_Wait_ms& (0+255),b
  4682  004E4C  EC0A  F03C         	call	_Wait_ms	;wreg free
  4683                           
  4684                           ;Main.c: 83: bFollowMode = 0;
  4685  004E50  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  4686  004E52  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  4687                           
  4688                           ;Main.c: 84: LCD_ClearDisplay();
  4689  004E54  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  4690  004E58                     l18213:
  4691                           
  4692                           ;Main.c: 87: ret = DisplayMenu(CommandMenu, 6, lastMenu);
  4693  004E58  0E04               	movlw	high main@CommandMenu
  4694  004E5A  0100               	movlb	0	; () banked
  4695  004E5C  6F90               	movwf	(?_DisplayMenu+1)& (0+255),b
  4696  004E5E  0ED5               	movlw	low main@CommandMenu
  4697  004E60  6F8F               	movwf	?_DisplayMenu& (0+255),b
  4698  004E62  0E06               	movlw	6
  4699  004E64  6F91               	movwf	(?_DisplayMenu+2)& (0+255),b
  4700  004E66  C4E3  F092         	movff	main@lastMenu,?_DisplayMenu+3
  4701  004E6A  EC77  F02E         	call	_DisplayMenu	;wreg free
  4702  004E6E  0104               	movlb	4	; () banked
  4703  004E70  6FE9               	movwf	main@ret& (0+255),b
  4704                           
  4705                           ;Main.c: 88: switch (ret) {
  4706  004E72  D04C               	goto	l18261
  4707  004E74                     l750:
  4708                           
  4709                           ; BSR set to: 4
  4710                           ;Main.c: 90: lastMenu = 0;
  4711  004E74  6BE3               	clrf	main@lastMenu& (0+255),b
  4712                           
  4713                           ; BSR set to: 4
  4714                           ;Main.c: 91: if (!CreateOrbitProgram() == 0)
  4715  004E76  ECDD  F00E         	call	_CreateOrbitProgram	;wreg free
  4716  004E7A  0900               	iorlw	0
  4717  004E7C  E0ED               	bz	l18213
  4718  004E7E                     l18217:
  4719                           
  4720                           ;Main.c: 92: RealtimeMode();
  4721  004E7E  ECB9  F01C         	call	_RealtimeMode	;wreg free
  4722  004E82  D7EA               	goto	l18213
  4723  004E84                     l18219:
  4724                           
  4725                           ; BSR set to: 4
  4726                           ;Main.c: 95: lastMenu = 1;
  4727  004E84  0E01               	movlw	1
  4728  004E86  6FE3               	movwf	main@lastMenu& (0+255),b
  4729                           
  4730                           ; BSR set to: 4
  4731                           ;Main.c: 96: if (!CreateWaypointProgram() == 0)
  4732  004E88  EC10  F015         	call	_CreateWaypointProgram	;wreg free
  4733  004E8C  D7F6               	goto	L1
  4734  004E8E                     l18225:
  4735                           
  4736                           ; BSR set to: 4
  4737                           ;Main.c: 100: lastMenu = 2;
  4738  004E8E  0E02               	movlw	2
  4739  004E90  6FE3               	movwf	main@lastMenu& (0+255),b
  4740                           
  4741                           ; BSR set to: 4
  4742                           ;Main.c: 101: ret = GetPresetNumber();
  4743  004E92  ECDF  F033         	call	_GetPresetNumber	;wreg free
  4744  004E96  0104               	movlb	4	; () banked
  4745  004E98  6FE9               	movwf	main@ret& (0+255),b
  4746                           
  4747                           ; BSR set to: 4
  4748                           ;Main.c: 102: if (ret == -1) break;
  4749  004E9A  29E9               	incf	main@ret& (0+255),w,b
  4750  004E9C  E0DD               	bz	l18213
  4751                           
  4752                           ; BSR set to: 4
  4753                           ;Main.c: 103: if (ret == -2) break;
  4754  004E9E  51E9               	movf	main@ret& (0+255),w,b
  4755  004EA0  0AFE               	xorlw	254
  4756  004EA2  E0DA               	bz	l18213
  4757                           
  4758                           ; BSR set to: 4
  4759                           ;Main.c: 104: pnum = ret;
  4760  004EA4  C4E9  F4E4         	movff	main@ret,main@pnum
  4761                           
  4762                           ;Main.c: 105: switch (GetPresetType(pnum)) {
  4763  004EA8  D01A               	goto	l18247
  4764  004EAA                     l18237:
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;Main.c: 107: LoadPreset(pnum, (unsigned char *) &CurrentPath);
  4768  004EAA  0E04               	movlw	high _CurrentPath
  4769  004EAC  0100               	movlb	0	; () banked
  4770  004EAE  6F73               	movwf	(?_LoadPreset+1)& (0+255),b
  4771  004EB0  0E18               	movlw	low _CurrentPath
  4772  004EB2  6F72               	movwf	?_LoadPreset& (0+255),b
  4773  004EB4  0104               	movlb	4	; () banked
  4774  004EB6  51E4               	movf	main@pnum& (0+255),w,b
  4775  004EB8  EC0C  F03B         	call	_LoadPreset
  4776                           
  4777                           ;Main.c: 108: if (!RunWaypointProgram() == 0)
  4778  004EBC  ECEE  F017         	call	_RunWaypointProgram	;wreg free
  4779  004EC0  0900               	iorlw	0
  4780  004EC2  E1DD               	bnz	l18217
  4781  004EC4  D7C9               	goto	l18213
  4782  004EC6                     l18241:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;Main.c: 112: LoadPreset(pnum, (unsigned char *) &CurrentOrbitProgram);
  4786  004EC6  0E04               	movlw	high _CurrentOrbitProgram
  4787  004EC8  0100               	movlb	0	; () banked
  4788  004ECA  6F73               	movwf	(?_LoadPreset+1)& (0+255),b
  4789  004ECC  0E8D               	movlw	low _CurrentOrbitProgram
  4790  004ECE  6F72               	movwf	?_LoadPreset& (0+255),b
  4791  004ED0  0104               	movlb	4	; () banked
  4792  004ED2  51E4               	movf	main@pnum& (0+255),w,b
  4793  004ED4  EC0C  F03B         	call	_LoadPreset
  4794                           
  4795                           ;Main.c: 113: if (!RunOrbitProgram() == 0)
  4796  004ED8  ECEC  F021         	call	_RunOrbitProgram	;wreg free
  4797  004EDC  D7F1               	goto	L2
  4798  004EDE                     l18247:
  4799                           
  4800                           ; BSR set to: 4
  4801  004EDE  51E4               	movf	main@pnum& (0+255),w,b
  4802  004EE0  ECC5  F03A         	call	_GetPresetType
  4803                           
  4804                           ; Switch size 1, requested type "space"
  4805                           ; Number of cases is 2, Range of values is 1 to 2
  4806                           ; switch strategies available:
  4807                           ; Name         Instructions Cycles
  4808                           ; simple_byte            7     4 (average)
  4809                           ;	Chosen strategy is simple_byte
  4810  004EE4  0A01               	xorlw	1	; case 1
  4811  004EE6  E0E1               	bz	l18237
  4812  004EE8  0A03               	xorlw	3	; case 2
  4813  004EEA  E0ED               	bz	l18241
  4814  004EEC  D7B5               	goto	l18213
  4815  004EEE                     l18249:
  4816                           
  4817                           ; BSR set to: 4
  4818                           ;Main.c: 119: lastMenu = 2;
  4819  004EEE  0E02               	movlw	2
  4820  004EF0  6FE3               	movwf	main@lastMenu& (0+255),b
  4821  004EF2  D7C5               	goto	l18217
  4822  004EF4                     l765:
  4823                           
  4824                           ; BSR set to: 4
  4825                           ;Main.c: 123: lastMenu = 0;
  4826  004EF4  6BE3               	clrf	main@lastMenu& (0+255),b
  4827                           
  4828                           ; BSR set to: 4
  4829                           ;Main.c: 124: ShowVoltage();
  4830  004EF6  EC2E  F036         	call	_ShowVoltage	;wreg free
  4831                           
  4832                           ;Main.c: 125: break;
  4833  004EFA  D7AE               	goto	l18213
  4834  004EFC                     l766:
  4835                           
  4836                           ; BSR set to: 4
  4837                           ;Main.c: 127: lastMenu = 0;
  4838  004EFC  6BE3               	clrf	main@lastMenu& (0+255),b
  4839                           
  4840                           ; BSR set to: 4
  4841                           ;Main.c: 128: GoToSleep();
  4842  004EFE  EC42  F032         	call	_GoToSleep	;wreg free
  4843                           
  4844                           ;Main.c: 129: break;
  4845  004F02  D7AA               	goto	l18213
  4846  004F04                     l767:
  4847                           
  4848                           ; BSR set to: 4
  4849                           ;Main.c: 131: lastMenu = 0;
  4850  004F04  6BE3               	clrf	main@lastMenu& (0+255),b
  4851                           
  4852                           ; BSR set to: 4
  4853                           ;Main.c: 132: ExtMode();
  4854  004F06  EC22  F012         	call	_ExtMode	;wreg free
  4855                           
  4856                           ;Main.c: 133: break;
  4857  004F0A  D7A6               	goto	l18213
  4858  004F0C                     l18261:
  4859                           
  4860                           ; BSR set to: 4
  4861  004F0C  51E9               	movf	main@ret& (0+255),w,b
  4862                           
  4863                           ; Switch size 1, requested type "space"
  4864                           ; Number of cases is 7, Range of values is 0 to 6
  4865                           ; switch strategies available:
  4866                           ; Name         Instructions Cycles
  4867                           ; simple_byte           22    12 (average)
  4868                           ;	Chosen strategy is simple_byte
  4869  004F0E  E0B2               	bz	l750
  4870  004F10  0A01               	xorlw	1	; case 1
  4871  004F12  E0B8               	bz	l18219
  4872  004F14  0A03               	xorlw	3	; case 2
  4873  004F16  E0EB               	bz	l18249
  4874  004F18  0A01               	xorlw	1	; case 3
  4875  004F1A  E0B9               	bz	l18225
  4876  004F1C  0A07               	xorlw	7	; case 4
  4877  004F1E  E0EA               	bz	l765
  4878  004F20  0A01               	xorlw	1	; case 5
  4879  004F22  E0EC               	bz	l766
  4880  004F24  0A03               	xorlw	3	; case 6
  4881  004F26  E0EE               	bz	l767
  4882                           
  4883                           ; BSR set to: 1
  4884  004F28  D797               	goto	l18213
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postinc1	equ	0xFE6
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _ExtMode *****************
  4907 ;; Defined at:
  4908 ;;		line 8 in file "Z:\CineFlux\Dropbox\Orbit\ExtMode.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  PathTravelTi  200    0[BANK3 ] unsigned int [100]
  4913 ;;  PathDistance  200    0[BANK2 ] int [100]
  4914 ;;  PathDwellTim  200    6[BANK1 ] unsigned int [100]
  4915 ;;  mTemp           4  206[BANK2 ] struct .
  4916 ;;  D               3  200[BANK2 ] struct .
  4917 ;;  T               3  219[BANK1 ] struct .
  4918 ;;  S               3  216[BANK1 ] struct .
  4919 ;;  PrepMove_Acc    3  212[BANK1 ] struct .
  4920 ;;  PrepMove_Spe    3  209[BANK1 ] struct .
  4921 ;;  PrepMove_Dis    3  206[BANK1 ] struct .
  4922 ;;  CmdID           1  205[BANK2 ] unsigned char 
  4923 ;;  State           1  204[BANK2 ] unsigned char 
  4924 ;;  PathIdx         1  203[BANK2 ] unsigned char 
  4925 ;;  PathCount       1  223[BANK1 ] unsigned char 
  4926 ;;  PrepMove_Rea    1  222[BANK1 ] unsigned char 
  4927 ;;  idx             1  215[BANK1 ] unsigned char 
  4928 ;;  ret             1  136[BANK0 ] char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      unsigned char 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : F/4
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Locals:         0       1     218     210     200       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Totals:         0       1     218     210     200       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;Total ram usage:      629 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    9
  4945 ;; This function calls:
  4946 ;;		_LCD_ClearDisplay
  4947 ;;		_LCD_PrintString
  4948 ;;		_GetInput_nonblocking
  4949 ;;		_Wait_seconds_nonblocking
  4950 ;;		___awtoft
  4951 ;;		___lwtoft
  4952 ;;		_SpeedRequiredToMoveInTime
  4953 ;;		_Move
  4954 ;;		_MessageStream_ReadByte
  4955 ;;		_AckCmd
  4956 ;;		_NackCmd
  4957 ;;		_MoveAdvanced
  4958 ;;		_MessageStream_WriteByte
  4959 ;;		___altoft
  4960 ;;		___asftmul
  4961 ;;		___lltoft
  4962 ;; This function is called by:
  4963 ;;		_main
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text1
  4968  002444                     __ptext1:
  4969                           	opt stack 0
  4970  002444                     __end_of_main:
  4971                           	opt stack 0
  4972  002444                     _ExtMode:
  4973                           	opt stack 21
  4974                           
  4975                           ; BSR set to: 4
  4976                           ;ExtMode.c: 9: unsigned char PathIdx = 0;
  4977                           
  4978                           ; BSR set to: 1
  4979  002444  0102               	movlb	2	; () banked
  4980  002446  6BCB               	clrf	ExtMode@PathIdx& (0+255),b
  4981                           
  4982                           ;ExtMode.c: 10: unsigned char PathCount = 0;
  4983  002448  0101               	movlb	1	; () banked
  4984  00244A  6BDF               	clrf	ExtMode@PathCount& (0+255),b
  4985                           
  4986                           ;ExtMode.c: 11: signed int PathDistances[100];
  4987                           ;ExtMode.c: 12: unsigned int PathTravelTimes[100];
  4988                           ;ExtMode.c: 13: unsigned int PathDwellTimes[100];
  4989                           ;ExtMode.c: 15: ExtModeActive = 1;
  4990  00244C  8857               	bsf	_ExtModeActive/(0+8),_ExtModeActive& (0+7),c	;volatile
  4991                           
  4992                           ;ExtMode.c: 16: signed char ret;
  4993                           ;ExtMode.c: 17: unsigned char CmdID;
  4994                           ;ExtMode.c: 19: unsigned char idx;
  4995                           ;ExtMode.c: 20: unsigned char State = 0;
  4996  00244E  0102               	movlb	2	; () banked
  4997  002450  6BCC               	clrf	ExtMode@State& (0+255),b
  4998                           
  4999                           ;ExtMode.c: 21: MULTI mTemp;
  5000                           ;ExtMode.c: 23: char PrepMove_Ready = 0;
  5001  002452  0101               	movlb	1	; () banked
  5002  002454  6BDE               	clrf	ExtMode@PrepMove_Ready& (0+255),b
  5003                           
  5004                           ; BSR set to: 1
  5005                           ;ExtMode.c: 24: double PrepMove_Distance, PrepMove_Speed, PrepMove_Acceleration;
  5006                           ;ExtMode.c: 25: double S, D, T;
  5007                           ;ExtMode.c: 27: LCD_ClearDisplay();
  5008  002456  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  5009                           
  5010                           ;ExtMode.c: 28: LCD_PrintString("EXTERNAL MODE");
  5011  00245A  0E1C               	movlw	high STR_1
  5012  00245C  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  5013  00245E  0E93               	movlw	low STR_1
  5014  002460  6F76               	movwf	?_LCD_PrintString& (0+255),b
  5015  002462  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  5016  002466                     l17123:
  5017                           
  5018                           ;ExtMode.c: 31: ret = GetInput_nonblocking();
  5019  002466  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
  5020  00246A  6FE8               	movwf	ExtMode@ret& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;ExtMode.c: 32: if (ret == 3) {
  5024  00246C  51E8               	movf	ExtMode@ret& (0+255),w,b
  5025  00246E  0A03               	xorlw	3
  5026  002470  E154               	bnz	l17155
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;ExtMode.c: 33: ExtModeActive = 0;
  5030  002472  0100               	movlb	(_ExtModeActive/(0+8)) shr (0+8)
  5031  002474  9857               	bcf	_ExtModeActive/(0+8),_ExtModeActive& (0+7),c	;volatile
  5032                           
  5033                           ;ExtMode.c: 34: return (-2);
  5034                           ;	Return value of _ExtMode is never used
  5035  002476  0012               	return	
  5036  002478                     l149:
  5037                           
  5038                           ; BSR set to: 2
  5039                           ;ExtMode.c: 38: bMove_InProgress = 0;
  5040  002478  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  5041                           
  5042                           ;ExtMode.c: 39: bFollowMode = 0;
  5043  00247A  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  5044                           
  5045                           ;ExtMode.c: 40: bSpeedMode = 0;
  5046  00247C  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  5047                           
  5048                           ;ExtMode.c: 41: break;
  5049  00247E  D058               	goto	l150
  5050  002480                     l151:
  5051                           
  5052                           ; BSR set to: 2
  5053                           ;ExtMode.c: 43: bSpeedMode = 1;
  5054  002480  845A               	bsf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  5055                           
  5056                           ;ExtMode.c: 44: Speed_SetToThis = 0;
  5057  002482  0101               	movlb	1	; () banked
  5058  002484  6BF4               	clrf	_Speed_SetToThis& (0+255),b
  5059  002486  6BF5               	clrf	(_Speed_SetToThis+1)& (0+255),b
  5060  002488  6BF6               	clrf	(_Speed_SetToThis+2)& (0+255),b
  5061  00248A  6BF7               	clrf	(_Speed_SetToThis+3)& (0+255),b
  5062                           
  5063                           ;ExtMode.c: 45: Speed_SetPending = 1;
  5064  00248C  8258               	bsf	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  5065                           
  5066                           ;ExtMode.c: 46: if (!Speed_IsAccelerating) State = 0;
  5067  00248E  B058               	btfsc	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
  5068  002490  D002               	goto	l153
  5069  002492  0102               	movlb	2	; () banked
  5070  002494  6BCC               	clrf	ExtMode@State& (0+255),b
  5071  002496                     l153:
  5072                           
  5073                           ;ExtMode.c: 48: if (!bMove_InProgress) State = 1;
  5074  002496  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  5075  002498  D003               	goto	l17133
  5076  00249A  0E01               	movlw	1
  5077  00249C  0102               	movlb	2	; () banked
  5078  00249E  6FCC               	movwf	ExtMode@State& (0+255),b
  5079  0024A0                     l17133:
  5080                           
  5081                           ;ExtMode.c: 50: if (!bMove_InProgress) {
  5082  0024A0  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  5083  0024A2  D046               	goto	l150
  5084                           
  5085                           ;ExtMode.c: 51: Wait_seconds_nonblocking(PathDwellTimes[PathIdx]);
  5086  0024A4  0102               	movlb	2	; () banked
  5087  0024A6  51CB               	movf	ExtMode@PathIdx& (0+255),w,b
  5088  0024A8  DAAC               	call	PL58	;call to abstracted procedure
  5089  0024AA  0100               	movlb	0	; () banked
  5090  0024AC  CFDE F071          	movff	postinc2,?_Wait_seconds_nonblocking
  5091  0024B0  CFDD F072          	movff	postdec2,?_Wait_seconds_nonblocking+1
  5092  0024B4  ECA3  F03B         	call	_Wait_seconds_nonblocking	;wreg free
  5093                           
  5094                           ;ExtMode.c: 52: PathIdx += 1;
  5095  0024B8  0102               	movlb	2	; () banked
  5096  0024BA  2BCB               	incf	ExtMode@PathIdx& (0+255),f,b
  5097                           
  5098                           ; BSR set to: 2
  5099                           ;ExtMode.c: 53: State = 4;
  5100  0024BC  0E04               	movlw	4
  5101  0024BE  D02B               	goto	L4
  5102  0024C0                     l157:
  5103                           
  5104                           ; BSR set to: 2
  5105                           ;ExtMode.c: 57: if (!bWaiting) {
  5106  0024C0  B85A               	btfsc	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
  5107  0024C2  D036               	goto	l150
  5108                           
  5109                           ;ExtMode.c: 58: if (PathIdx == PathCount) {
  5110  0024C4  0101               	movlb	1	; () banked
  5111  0024C6  51DF               	movf	ExtMode@PathCount& (0+255),w,b
  5112  0024C8  0102               	movlb	2	; () banked
  5113  0024CA  63CB               	cpfseq	ExtMode@PathIdx& (0+255),b
  5114  0024CC  D002               	goto	l17145
  5115                           
  5116                           ; BSR set to: 2
  5117                           ;ExtMode.c: 59: State = 1;
  5118  0024CE  0E01               	movlw	1
  5119  0024D0  D022               	goto	L4
  5120  0024D2                     l17145:
  5121                           
  5122                           ; BSR set to: 2
  5123                           ;ExtMode.c: 61: D = PathDistances[PathIdx];
  5124  0024D2  51CB               	movf	ExtMode@PathIdx& (0+255),w,b
  5125  0024D4  0D02               	mullw	2
  5126  0024D6  DA9D               	call	PL66	;call to abstracted procedure
  5127  0024D8  0100               	movlb	0	; () banked
  5128  0024DA  CFDE F073          	movff	postinc2,?___awtoft
  5129  0024DE  CFDD F074          	movff	postdec2,?___awtoft+1
  5130  0024E2  EC8F  F03A         	call	___awtoft	;wreg free
  5131  0024E6  C073  F2C8         	movff	?___awtoft,ExtMode@D
  5132  0024EA  C074  F2C9         	movff	?___awtoft+1,ExtMode@D+1
  5133  0024EE  C075  F2CA         	movff	?___awtoft+2,ExtMode@D+2
  5134                           
  5135                           ;ExtMode.c: 62: T = PathTravelTimes[PathIdx];
  5136  0024F2  0102               	movlb	2	; () banked
  5137  0024F4  51CB               	movf	ExtMode@PathIdx& (0+255),w,b
  5138  0024F6  DA7D               	call	PL57	;call to abstracted procedure
  5139  0024F8  0100               	movlb	0	; () banked
  5140  0024FA  CFDE F073          	movff	postinc2,?___lwtoft
  5141  0024FE  CFDD F074          	movff	postdec2,?___lwtoft+1
  5142  002502  ECCB  F03B         	call	___lwtoft	;wreg free
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;ExtMode.c: 63: S = SpeedRequiredToMoveInTime(D, T);
  5146  002506  DA43               	call	PL26	;call to abstracted procedure
  5147  002508  ECE9  F029         	call	_SpeedRequiredToMoveInTime	;wreg free
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;ExtMode.c: 64: Move(D, S);
  5151  00250C  DA53               	call	PL28	;call to abstracted procedure
  5152  00250E  ECB7  F03B         	call	_Move	;wreg free
  5153                           
  5154                           ;ExtMode.c: 65: State = 3;
  5155  002512  0E03               	movlw	3
  5156  002514  0102               	movlb	2	; () banked
  5157  002516                     L4:
  5158  002516  6FCC               	movwf	ExtMode@State& (0+255),b
  5159  002518  D00B               	goto	l150
  5160  00251A                     l17155:
  5161                           
  5162                           ; BSR set to: 0
  5163  00251A  0102               	movlb	2	; () banked
  5164  00251C  51CC               	movf	ExtMode@State& (0+255),w,b
  5165                           
  5166                           ; Switch size 1, requested type "space"
  5167                           ; Number of cases is 5, Range of values is 0 to 4
  5168                           ; switch strategies available:
  5169                           ; Name         Instructions Cycles
  5170                           ; simple_byte           16     9 (average)
  5171                           ;	Chosen strategy is simple_byte
  5172  00251E  E0AC               	bz	l149
  5173  002520  0A01               	xorlw	1	; case 1
  5174  002522  E0AE               	bz	l151
  5175  002524  0A03               	xorlw	3	; case 2
  5176  002526  E0B7               	bz	l153
  5177  002528  0A01               	xorlw	1	; case 3
  5178  00252A  E0BA               	bz	l17133
  5179  00252C  0A07               	xorlw	7	; case 4
  5180  00252E  E0C8               	bz	l157
  5181  002530                     l150:
  5182                           
  5183                           ;ExtMode.c: 71: if (RX_MsgComplete) {
  5184  002530  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
  5185  002532  AE57               	btfss	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
  5186  002534  D798               	goto	l17123
  5187                           
  5188                           ;ExtMode.c: 72: ReadIdx = 1;
  5189  002536  0E01               	movlw	1
  5190  002538  0100               	movlb	0	; () banked
  5191  00253A  6FF0               	movwf	_ReadIdx& (0+255),b
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;ExtMode.c: 73: RX_MsgComplete = 0;
  5195  00253C  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
  5196  00253E  9E57               	bcf	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
  5197                           
  5198                           ;ExtMode.c: 74: if (MessageStream_ReadByte() == MyID) {
  5199  002540  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5200  002544  0101               	movlb	1	; () banked
  5201  002546  19FF               	xorwf	_MyID& (0+255),w,b	;volatile
  5202  002548  E18E               	bnz	l17123
  5203                           
  5204                           ; BSR set to: 1
  5205                           ;ExtMode.c: 75: CmdID = MessageStream_ReadByte();
  5206  00254A  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5207  00254E  0102               	movlb	2	; () banked
  5208  002550  6FCD               	movwf	ExtMode@CmdID& (0+255),b
  5209                           
  5210                           ;ExtMode.c: 76: switch (CmdID) {
  5211  002552  D207               	goto	l17329
  5212  002554                     l17165:
  5213                           
  5214                           ; BSR set to: 2
  5215                           ;ExtMode.c: 78: mTemp.ub[3] = MessageStream_ReadByte();
  5216  002554  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5217  002558  0102               	movlb	2	; () banked
  5218  00255A  6FD1               	movwf	(ExtMode@mTemp+3)& (0+255),b
  5219                           
  5220                           ;ExtMode.c: 79: mTemp.ub[2] = MessageStream_ReadByte();
  5221  00255C  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5222  002560  0102               	movlb	2	; () banked
  5223  002562  6FD0               	movwf	(ExtMode@mTemp+2)& (0+255),b
  5224                           
  5225                           ;ExtMode.c: 80: mTemp.ub[1] = MessageStream_ReadByte();
  5226  002564  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5227  002568  0102               	movlb	2	; () banked
  5228  00256A  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5229                           
  5230                           ;ExtMode.c: 81: mTemp.ub[0] = MessageStream_ReadByte();
  5231  00256C  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5232  002570  0102               	movlb	2	; () banked
  5233  002572  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5234                           
  5235                           ; BSR set to: 2
  5236                           ;ExtMode.c: 82: PrepMove_Distance = mTemp.dbl;
  5237  002574  C2CE  F1CE         	movff	ExtMode@mTemp,ExtMode@PrepMove_Distance
  5238  002578  C2CF  F1CF         	movff	ExtMode@mTemp+1,ExtMode@PrepMove_Distance+1
  5239  00257C  C2D0  F1D0         	movff	ExtMode@mTemp+2,ExtMode@PrepMove_Distance+2
  5240                           
  5241                           ;ExtMode.c: 84: mTemp.ub[3] = MessageStream_ReadByte();
  5242  002580  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5243  002584  0102               	movlb	2	; () banked
  5244  002586  6FD1               	movwf	(ExtMode@mTemp+3)& (0+255),b
  5245                           
  5246                           ;ExtMode.c: 85: mTemp.ub[2] = MessageStream_ReadByte();
  5247  002588  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5248  00258C  0102               	movlb	2	; () banked
  5249  00258E  6FD0               	movwf	(ExtMode@mTemp+2)& (0+255),b
  5250                           
  5251                           ;ExtMode.c: 86: mTemp.ub[1] = MessageStream_ReadByte();
  5252  002590  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5253  002594  0102               	movlb	2	; () banked
  5254  002596  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5255                           
  5256                           ;ExtMode.c: 87: mTemp.ub[0] = MessageStream_ReadByte();
  5257  002598  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5258  00259C  0102               	movlb	2	; () banked
  5259  00259E  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5260                           
  5261                           ; BSR set to: 2
  5262                           ;ExtMode.c: 88: PrepMove_Speed = mTemp.dbl;
  5263  0025A0  C2CE  F1D1         	movff	ExtMode@mTemp,ExtMode@PrepMove_Speed
  5264  0025A4  C2CF  F1D2         	movff	ExtMode@mTemp+1,ExtMode@PrepMove_Speed+1
  5265  0025A8  C2D0  F1D3         	movff	ExtMode@mTemp+2,ExtMode@PrepMove_Speed+2
  5266                           
  5267                           ;ExtMode.c: 90: mTemp.ub[3] = MessageStream_ReadByte();
  5268  0025AC  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5269  0025B0  0102               	movlb	2	; () banked
  5270  0025B2  6FD1               	movwf	(ExtMode@mTemp+3)& (0+255),b
  5271                           
  5272                           ;ExtMode.c: 91: mTemp.ub[2] = MessageStream_ReadByte();
  5273  0025B4  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5274  0025B8  0102               	movlb	2	; () banked
  5275  0025BA  6FD0               	movwf	(ExtMode@mTemp+2)& (0+255),b
  5276                           
  5277                           ;ExtMode.c: 92: mTemp.ub[1] = MessageStream_ReadByte();
  5278  0025BC  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5279  0025C0  0102               	movlb	2	; () banked
  5280  0025C2  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5281                           
  5282                           ;ExtMode.c: 93: mTemp.ub[0] = MessageStream_ReadByte();
  5283  0025C4  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5284  0025C8  0102               	movlb	2	; () banked
  5285  0025CA  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5286                           
  5287                           ; BSR set to: 2
  5288                           ;ExtMode.c: 94: PrepMove_Acceleration = mTemp.dbl;
  5289  0025CC  C2CE  F1D4         	movff	ExtMode@mTemp,ExtMode@PrepMove_Acceleration
  5290  0025D0  C2CF  F1D5         	movff	ExtMode@mTemp+1,ExtMode@PrepMove_Acceleration+1
  5291  0025D4  C2D0  F1D6         	movff	ExtMode@mTemp+2,ExtMode@PrepMove_Acceleration+2
  5292                           
  5293                           ; BSR set to: 2
  5294                           ;ExtMode.c: 95: PrepMove_Ready = 1;
  5295  0025D8  0E01               	movlw	1
  5296  0025DA  0101               	movlb	1	; () banked
  5297  0025DC  6FDE               	movwf	ExtMode@PrepMove_Ready& (0+255),b
  5298                           
  5299                           ; BSR set to: 1
  5300                           ;ExtMode.c: 97: AckCmd(CmdID);
  5301  0025DE  0102               	movlb	2	; () banked
  5302  0025E0  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5303  0025E2  EC36  F039         	call	_AckCmd
  5304                           
  5305                           ;ExtMode.c: 99: break;
  5306  0025E6  D73F               	goto	l17123
  5307  0025E8                     l166:
  5308                           
  5309                           ; BSR set to: 2
  5310                           ;ExtMode.c: 101: if (!PrepMove_Ready) {
  5311  0025E8  0101               	movlb	1	; () banked
  5312  0025EA  67DE               	tstfsz	ExtMode@PrepMove_Ready& (0+255),b
  5313  0025EC  D008               	goto	l17179
  5314                           
  5315                           ; BSR set to: 1
  5316                           ;ExtMode.c: 102: NackCmd(CmdID, 1);
  5317  0025EE  0E01               	movlw	1
  5318  0025F0  0100               	movlb	0	; () banked
  5319  0025F2  6F6D               	movwf	?_NackCmd& (0+255),b
  5320  0025F4  0102               	movlb	2	; () banked
  5321  0025F6  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5322  0025F8  ECBA  F039         	call	_NackCmd
  5323                           
  5324                           ;ExtMode.c: 103: break;
  5325  0025FC  D734               	goto	l17123
  5326  0025FE                     l17179:
  5327                           
  5328                           ; BSR set to: 1
  5329                           ;ExtMode.c: 104: }
  5330                           ;ExtMode.c: 105: if (State) {
  5331  0025FE  0102               	movlb	2	; () banked
  5332  002600  51CC               	movf	ExtMode@State& (0+255),w,b
  5333  002602  E008               	bz	l17183
  5334                           
  5335                           ; BSR set to: 2
  5336                           ;ExtMode.c: 106: NackCmd(CmdID, 2);
  5337  002604  0E02               	movlw	2
  5338  002606  0100               	movlb	0	; () banked
  5339  002608  6F6D               	movwf	?_NackCmd& (0+255),b
  5340  00260A  0102               	movlb	2	; () banked
  5341  00260C  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5342  00260E  ECBA  F039         	call	_NackCmd
  5343                           
  5344                           ;ExtMode.c: 107: break;
  5345  002612  D729               	goto	l17123
  5346  002614                     l17183:
  5347                           
  5348                           ; BSR set to: 2
  5349                           ;ExtMode.c: 108: }
  5350                           ;ExtMode.c: 109: MoveAdvanced(PrepMove_Distance, PrepMove_Speed, PrepMove_Acceleration);
  5351  002614  C1CE  F0B9         	movff	ExtMode@PrepMove_Distance,?_MoveAdvanced
  5352  002618  C1CF  F0BA         	movff	ExtMode@PrepMove_Distance+1,?_MoveAdvanced+1
  5353  00261C  C1D0  F0BB         	movff	ExtMode@PrepMove_Distance+2,?_MoveAdvanced+2
  5354  002620  C1D1  F0BC         	movff	ExtMode@PrepMove_Speed,?_MoveAdvanced+3
  5355  002624  C1D2  F0BD         	movff	ExtMode@PrepMove_Speed+1,?_MoveAdvanced+4
  5356  002628  C1D3  F0BE         	movff	ExtMode@PrepMove_Speed+2,?_MoveAdvanced+5
  5357  00262C  C1D4  F0BF         	movff	ExtMode@PrepMove_Acceleration,?_MoveAdvanced+6
  5358  002630  C1D5  F0C0         	movff	ExtMode@PrepMove_Acceleration+1,?_MoveAdvanced+7
  5359  002634  C1D6  F0C1         	movff	ExtMode@PrepMove_Acceleration+2,?_MoveAdvanced+8
  5360  002638  EC8A  F01E         	call	_MoveAdvanced	;wreg free
  5361                           
  5362                           ;ExtMode.c: 110: PrepMove_Ready = 0;
  5363  00263C  0101               	movlb	1	; () banked
  5364  00263E  6BDE               	clrf	ExtMode@PrepMove_Ready& (0+255),b
  5365                           
  5366                           ; BSR set to: 1
  5367                           ;ExtMode.c: 111: State = 2;
  5368  002640  0E02               	movlw	2
  5369  002642  0102               	movlb	2	; () banked
  5370  002644  6FCC               	movwf	ExtMode@State& (0+255),b
  5371                           
  5372                           ; BSR set to: 2
  5373                           ;ExtMode.c: 112: AckCmd(CmdID);
  5374  002646  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5375  002648  EC36  F039         	call	_AckCmd
  5376                           
  5377                           ;ExtMode.c: 114: break;
  5378  00264C  D70C               	goto	l17123
  5379  00264E                     l17191:
  5380                           
  5381                           ; BSR set to: 2
  5382                           ;ExtMode.c: 116: if (!State == 0) State = 1;
  5383  00264E  51CC               	movf	ExtMode@State& (0+255),w,b
  5384  002650  E002               	bz	l17195
  5385                           
  5386                           ; BSR set to: 2
  5387  002652  0E01               	movlw	1
  5388  002654  6FCC               	movwf	ExtMode@State& (0+255),b
  5389  002656                     l17195:
  5390                           
  5391                           ; BSR set to: 2
  5392                           ;ExtMode.c: 117: AckCmd(CmdID);
  5393  002656  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5394  002658  EC36  F039         	call	_AckCmd
  5395                           
  5396                           ;ExtMode.c: 118: break;
  5397  00265C  D704               	goto	l17123
  5398  00265E                     l171:
  5399                           
  5400                           ; BSR set to: 2
  5401                           ;ExtMode.c: 120: TX_Idx = 0;
  5402  00265E  0101               	movlb	1	; () banked
  5403  002660  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
  5404                           
  5405                           ; BSR set to: 1
  5406                           ;ExtMode.c: 121: TXBuffer[TX_Idx++] = '$';
  5407  002662  0E00               	movlw	low _TXBuffer	;volatile
  5408  002664  25FE               	addwf	_TX_Idx& (0+255),w,b
  5409  002666  6ED9               	movwf	fsr2l,c
  5410  002668  6ADA               	clrf	fsr2h,c
  5411  00266A  0E06               	movlw	high _TXBuffer	;volatile
  5412  00266C  22DA               	addwfc	fsr2h,f,c
  5413  00266E  0E24               	movlw	36
  5414  002670  6EDF               	movwf	indf2,c
  5415                           
  5416                           ; BSR set to: 6
  5417  002672  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
  5418                           
  5419                           ; BSR set to: 1
  5420                           ;ExtMode.c: 122: MessageStream_WriteByte(CmdID);
  5421  002674  0102               	movlb	2	; () banked
  5422  002676  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5423  002678  ECDA  F039         	call	_MessageStream_WriteByte
  5424                           
  5425                           ; BSR set to: 1
  5426                           ;ExtMode.c: 124: MessageStream_WriteByte(State);
  5427  00267C  0102               	movlb	2	; () banked
  5428  00267E  51CC               	movf	ExtMode@State& (0+255),w,b
  5429  002680  ECDA  F039         	call	_MessageStream_WriteByte
  5430                           
  5431                           ; BSR set to: 1
  5432                           ;ExtMode.c: 125: MessageStream_WriteByte(PrepMove_Ready);
  5433  002684  51DE               	movf	ExtMode@PrepMove_Ready& (0+255),w,b
  5434  002686  ECDA  F039         	call	_MessageStream_WriteByte
  5435                           
  5436                           ; BSR set to: 1
  5437                           ;ExtMode.c: 127: bLock_Motor_Position = 1;
  5438                           
  5439                           ;ExtMode.c: 128: mTemp.dbl = Motor_Position;
  5440  00268A  EC26  F038         	call	PL11	;call to abstracted procedure
  5441  00268E  EC49  F037         	call	___altoft	;wreg free
  5442  002692  C073  F2CE         	movff	?___altoft,ExtMode@mTemp
  5443  002696  C074  F2CF         	movff	?___altoft+1,ExtMode@mTemp+1
  5444  00269A  C075  F2D0         	movff	?___altoft+2,ExtMode@mTemp+2
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;ExtMode.c: 129: bLock_Motor_Position = 0;
  5448  00269E  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
  5449                           
  5450                           ;ExtMode.c: 130: mTemp.dbl *= Config.Degrees_Per_Count;
  5451  0026A0  D99C               	call	PL46	;call to abstracted procedure
  5452  0026A2  ECF9  F039         	call	___asftmul	;wreg free
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;ExtMode.c: 131: MessageStream_WriteByte(mTemp.ub[3]);
  5456  0026A6  0102               	movlb	2	; () banked
  5457  0026A8  51D1               	movf	(ExtMode@mTemp+3)& (0+255),w,b
  5458  0026AA  ECDA  F039         	call	_MessageStream_WriteByte
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;ExtMode.c: 132: MessageStream_WriteByte(mTemp.ub[2]);
  5462  0026AE  0102               	movlb	2	; () banked
  5463  0026B0  51D0               	movf	(ExtMode@mTemp+2)& (0+255),w,b
  5464  0026B2  ECDA  F039         	call	_MessageStream_WriteByte
  5465                           
  5466                           ; BSR set to: 1
  5467                           ;ExtMode.c: 133: MessageStream_WriteByte(mTemp.ub[1]);
  5468  0026B6  0102               	movlb	2	; () banked
  5469  0026B8  51CF               	movf	(ExtMode@mTemp+1)& (0+255),w,b
  5470  0026BA  ECDA  F039         	call	_MessageStream_WriteByte
  5471                           
  5472                           ; BSR set to: 1
  5473                           ;ExtMode.c: 134: MessageStream_WriteByte(mTemp.ub[0]);
  5474  0026BE  0102               	movlb	2	; () banked
  5475  0026C0  51CE               	movf	ExtMode@mTemp& (0+255),w,b
  5476  0026C2  ECDA  F039         	call	_MessageStream_WriteByte
  5477                           
  5478                           ; BSR set to: 1
  5479                           ;ExtMode.c: 136: mTemp.dbl = 0;
  5480  0026C6  0102               	movlb	2	; () banked
  5481  0026C8  6BCE               	clrf	ExtMode@mTemp& (0+255),b
  5482  0026CA  6BCF               	clrf	(ExtMode@mTemp+1)& (0+255),b
  5483  0026CC  6BD0               	clrf	(ExtMode@mTemp+2)& (0+255),b
  5484                           
  5485                           ;ExtMode.c: 137: while (!(mTemp.dbl == Move_speedQ24)) mTemp.dbl = Move_speedQ24;
  5486  0026CE  D010               	goto	l172
  5487  0026D0                     l17225:
  5488                           
  5489                           ; BSR set to: 0
  5490  0026D0  C1F0  F073         	movff	_Move_speedQ24,?___lltoft
  5491  0026D4  C1F1  F074         	movff	_Move_speedQ24+1,?___lltoft+1
  5492  0026D8  C1F2  F075         	movff	_Move_speedQ24+2,?___lltoft+2
  5493  0026DC  C1F3  F076         	movff	_Move_speedQ24+3,?___lltoft+3
  5494  0026E0  EC31  F038         	call	___lltoft	;wreg free
  5495  0026E4  C073  F2CE         	movff	?___lltoft,ExtMode@mTemp
  5496  0026E8  C074  F2CF         	movff	?___lltoft+1,ExtMode@mTemp+1
  5497  0026EC  C075  F2D0         	movff	?___lltoft+2,ExtMode@mTemp+2
  5498  0026F0                     l172:
  5499  0026F0  C1F0  F073         	movff	_Move_speedQ24,?___lltoft
  5500  0026F4  C1F1  F074         	movff	_Move_speedQ24+1,?___lltoft+1
  5501  0026F8  C1F2  F075         	movff	_Move_speedQ24+2,?___lltoft+2
  5502  0026FC  C1F3  F076         	movff	_Move_speedQ24+3,?___lltoft+3
  5503  002700  EC31  F038         	call	___lltoft	;wreg free
  5504  002704  0102               	movlb	2	; () banked
  5505  002706  51D0               	movf	(ExtMode@mTemp+2)& (0+255),w,b
  5506  002708  0100               	movlb	0	; () banked
  5507  00270A  1975               	xorwf	(?___lltoft+2)& (0+255),w,b
  5508  00270C  E109               	bnz	u9715
  5509  00270E  0102               	movlb	2	; () banked
  5510  002710  51CF               	movf	(ExtMode@mTemp+1)& (0+255),w,b
  5511  002712  0100               	movlb	0	; () banked
  5512  002714  1974               	xorwf	(?___lltoft+1)& (0+255),w,b
  5513  002716  E104               	bnz	u9715
  5514  002718  0102               	movlb	2	; () banked
  5515  00271A  51CE               	movf	ExtMode@mTemp& (0+255),w,b
  5516  00271C  0100               	movlb	0	; () banked
  5517  00271E  1973               	xorwf	?___lltoft& (0+255),w,b
  5518  002720                     u9715:
  5519  002720  E1D7               	bnz	l17225
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;ExtMode.c: 138: mTemp.dbl *= 0.0000298023224;
  5523  002722  0E02               	movlw	high ExtMode@mTemp
  5524  002724  0100               	movlb	0	; () banked
  5525  002726  6F89               	movwf	(?___asftmul+1)& (0+255),b
  5526  002728  0ECE               	movlw	low ExtMode@mTemp
  5527  00272A  6F88               	movwf	?___asftmul& (0+255),b
  5528  00272C  6B8A               	clrf	(?___asftmul+2)& (0+255),b
  5529  00272E  0EFA               	movlw	250
  5530  002730  6F8B               	movwf	(?___asftmul+3)& (0+255),b
  5531  002732  0E37               	movlw	55
  5532  002734  6F8C               	movwf	(?___asftmul+4)& (0+255),b
  5533  002736  ECF9  F039         	call	___asftmul	;wreg free
  5534                           
  5535                           ;ExtMode.c: 139: mTemp.dbl *= Config.Degrees_Per_Count;
  5536  00273A  D94F               	call	PL46	;call to abstracted procedure
  5537  00273C  ECF9  F039         	call	___asftmul	;wreg free
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;ExtMode.c: 140: MessageStream_WriteByte(mTemp.ub[3]);
  5541  002740  0102               	movlb	2	; () banked
  5542  002742  51D1               	movf	(ExtMode@mTemp+3)& (0+255),w,b
  5543  002744  ECDA  F039         	call	_MessageStream_WriteByte
  5544                           
  5545                           ; BSR set to: 1
  5546                           ;ExtMode.c: 141: MessageStream_WriteByte(mTemp.ub[2]);
  5547  002748  0102               	movlb	2	; () banked
  5548  00274A  51D0               	movf	(ExtMode@mTemp+2)& (0+255),w,b
  5549  00274C  ECDA  F039         	call	_MessageStream_WriteByte
  5550                           
  5551                           ; BSR set to: 1
  5552                           ;ExtMode.c: 142: MessageStream_WriteByte(mTemp.ub[1]);
  5553  002750  0102               	movlb	2	; () banked
  5554  002752  51CF               	movf	(ExtMode@mTemp+1)& (0+255),w,b
  5555  002754  ECDA  F039         	call	_MessageStream_WriteByte
  5556                           
  5557                           ; BSR set to: 1
  5558                           ;ExtMode.c: 143: MessageStream_WriteByte(mTemp.ub[0]);
  5559  002758  0102               	movlb	2	; () banked
  5560  00275A  51CE               	movf	ExtMode@mTemp& (0+255),w,b
  5561  00275C  ECDA  F039         	call	_MessageStream_WriteByte
  5562                           
  5563                           ; BSR set to: 1
  5564                           ;ExtMode.c: 145: bLock_Tick500Hz = 1;
  5565  002760  0100               	movlb	(_bLock_Tick500Hz/(0+8)) shr (0+8)
  5566  002762  8659               	bsf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
  5567                           
  5568                           ;ExtMode.c: 146: mTemp.dbl = Tick500Hz;
  5569  002764  C1F8  F073         	movff	_Tick500Hz,?___lltoft	;volatile
  5570  002768  C1F9  F074         	movff	_Tick500Hz+1,?___lltoft+1	;volatile
  5571  00276C  C1FA  F075         	movff	_Tick500Hz+2,?___lltoft+2	;volatile
  5572  002770  C1FB  F076         	movff	_Tick500Hz+3,?___lltoft+3	;volatile
  5573  002774  EC31  F038         	call	___lltoft	;wreg free
  5574  002778  C073  F2CE         	movff	?___lltoft,ExtMode@mTemp
  5575  00277C  C074  F2CF         	movff	?___lltoft+1,ExtMode@mTemp+1
  5576  002780  C075  F2D0         	movff	?___lltoft+2,ExtMode@mTemp+2
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;ExtMode.c: 147: bLock_Tick500Hz = 0;
  5580  002784  9659               	bcf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
  5581                           
  5582                           ;ExtMode.c: 148: mTemp.dbl *= 0.002;
  5583  002786  0E02               	movlw	high ExtMode@mTemp
  5584  002788  0100               	movlb	0	; () banked
  5585  00278A  6F89               	movwf	(?___asftmul+1)& (0+255),b
  5586  00278C  0ECE               	movlw	low ExtMode@mTemp
  5587  00278E  6F88               	movwf	?___asftmul& (0+255),b
  5588  002790  0E12               	movlw	18
  5589  002792  6F8A               	movwf	(?___asftmul+2)& (0+255),b
  5590  002794  0E03               	movlw	3
  5591  002796  6F8B               	movwf	(?___asftmul+3)& (0+255),b
  5592  002798  0E3B               	movlw	59
  5593  00279A  6F8C               	movwf	(?___asftmul+4)& (0+255),b
  5594  00279C  ECF9  F039         	call	___asftmul	;wreg free
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;ExtMode.c: 149: MessageStream_WriteByte(mTemp.ub[3]);
  5598  0027A0  0102               	movlb	2	; () banked
  5599  0027A2  51D1               	movf	(ExtMode@mTemp+3)& (0+255),w,b
  5600  0027A4  ECDA  F039         	call	_MessageStream_WriteByte
  5601                           
  5602                           ; BSR set to: 1
  5603                           ;ExtMode.c: 150: MessageStream_WriteByte(mTemp.ub[2]);
  5604  0027A8  0102               	movlb	2	; () banked
  5605  0027AA  51D0               	movf	(ExtMode@mTemp+2)& (0+255),w,b
  5606  0027AC  ECDA  F039         	call	_MessageStream_WriteByte
  5607                           
  5608                           ; BSR set to: 1
  5609                           ;ExtMode.c: 151: MessageStream_WriteByte(mTemp.ub[1]);
  5610  0027B0  0102               	movlb	2	; () banked
  5611  0027B2  51CF               	movf	(ExtMode@mTemp+1)& (0+255),w,b
  5612  0027B4  ECDA  F039         	call	_MessageStream_WriteByte
  5613                           
  5614                           ; BSR set to: 1
  5615                           ;ExtMode.c: 152: MessageStream_WriteByte(mTemp.ub[0]);
  5616  0027B8  0102               	movlb	2	; () banked
  5617  0027BA  51CE               	movf	ExtMode@mTemp& (0+255),w,b
  5618  0027BC  ECDA  F039         	call	_MessageStream_WriteByte
  5619                           
  5620                           ; BSR set to: 1
  5621                           ;ExtMode.c: 154: bLock_BatteryVoltage = 1;
  5622  0027C0  0100               	movlb	(_bLock_BatteryVoltage/(0+8)) shr (0+8)
  5623  0027C2  8E58               	bsf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
  5624                           
  5625                           ;ExtMode.c: 155: mTemp.dbl = BatteryVoltage;
  5626  0027C4  C1FC  F073         	movff	_BatteryVoltage,?___lwtoft
  5627  0027C8  C1FD  F074         	movff	_BatteryVoltage+1,?___lwtoft+1
  5628  0027CC  ECCB  F03B         	call	___lwtoft	;wreg free
  5629  0027D0  C073  F2CE         	movff	?___lwtoft,ExtMode@mTemp
  5630  0027D4  C074  F2CF         	movff	?___lwtoft+1,ExtMode@mTemp+1
  5631  0027D8  C075  F2D0         	movff	?___lwtoft+2,ExtMode@mTemp+2
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;ExtMode.c: 156: bLock_BatteryVoltage = 0;
  5635  0027DC  9E58               	bcf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
  5636                           
  5637                           ;ExtMode.c: 157: mTemp.dbl *= Config.Volts_per_Count;
  5638  0027DE  0E02               	movlw	high ExtMode@mTemp
  5639  0027E0  0100               	movlb	0	; () banked
  5640  0027E2  6F89               	movwf	(?___asftmul+1)& (0+255),b
  5641  0027E4  0ECE               	movlw	low ExtMode@mTemp
  5642  0027E6  6F88               	movwf	?___asftmul& (0+255),b
  5643  0027E8  C2E0  F08A         	movff	_Config+10,?___asftmul+2
  5644  0027EC  C2E1  F08B         	movff	_Config+11,?___asftmul+3
  5645  0027F0  C2E2  F08C         	movff	_Config+12,?___asftmul+4
  5646  0027F4  ECF9  F039         	call	___asftmul	;wreg free
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;ExtMode.c: 158: MessageStream_WriteByte(mTemp.ub[3]);
  5650  0027F8  0102               	movlb	2	; () banked
  5651  0027FA  51D1               	movf	(ExtMode@mTemp+3)& (0+255),w,b
  5652  0027FC  ECDA  F039         	call	_MessageStream_WriteByte
  5653                           
  5654                           ; BSR set to: 1
  5655                           ;ExtMode.c: 159: MessageStream_WriteByte(mTemp.ub[2]);
  5656  002800  0102               	movlb	2	; () banked
  5657  002802  51D0               	movf	(ExtMode@mTemp+2)& (0+255),w,b
  5658  002804  ECDA  F039         	call	_MessageStream_WriteByte
  5659                           
  5660                           ; BSR set to: 1
  5661                           ;ExtMode.c: 160: MessageStream_WriteByte(mTemp.ub[1]);
  5662  002808  0102               	movlb	2	; () banked
  5663  00280A  51CF               	movf	(ExtMode@mTemp+1)& (0+255),w,b
  5664  00280C  ECDA  F039         	call	_MessageStream_WriteByte
  5665                           
  5666                           ; BSR set to: 1
  5667                           ;ExtMode.c: 161: MessageStream_WriteByte(mTemp.ub[0]);
  5668  002810  0102               	movlb	2	; () banked
  5669  002812  51CE               	movf	ExtMode@mTemp& (0+255),w,b
  5670  002814  ECDA  F039         	call	_MessageStream_WriteByte
  5671                           
  5672                           ; BSR set to: 1
  5673                           ;ExtMode.c: 163: TXBuffer[TX_Idx++] = '#';
  5674  002818  0E00               	movlw	low _TXBuffer	;volatile
  5675  00281A  EC51  F039         	call	PL50	;call to abstracted procedure
  5676  00281E  0E23               	movlw	35
  5677  002820  6EDF               	movwf	indf2,c
  5678                           
  5679                           ; BSR set to: 6
  5680  002822  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
  5681                           
  5682                           ; BSR set to: 1
  5683                           ;ExtMode.c: 164: idx = TX_Idx;
  5684  002824  C1FE  F1D7         	movff	_TX_Idx,ExtMode@idx	;volatile
  5685                           
  5686                           ; BSR set to: 1
  5687                           ;ExtMode.c: 165: TX_Idx = 0;
  5688  002828  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
  5689                           
  5690                           ; BSR set to: 1
  5691                           ;ExtMode.c: 166: TX_bCount = idx;
  5692  00282A  C1D7  F0F1         	movff	ExtMode@idx,_TX_bCount	;volatile
  5693                           
  5694                           ;ExtMode.c: 167: break;
  5695  00282E  D61B               	goto	l17123
  5696  002830                     l17277:
  5697                           
  5698                           ; BSR set to: 2
  5699                           ;ExtMode.c: 169: if ((State == 3) || (State == 4)) {
  5700  002830  51CC               	movf	ExtMode@State& (0+255),w,b
  5701  002832  0A03               	xorlw	3
  5702  002834  E003               	bz	l17281
  5703                           
  5704                           ; BSR set to: 2
  5705  002836  51CC               	movf	ExtMode@State& (0+255),w,b
  5706  002838  0A04               	xorlw	4
  5707  00283A  E108               	bnz	l176
  5708  00283C                     l17281:
  5709                           
  5710                           ; BSR set to: 2
  5711                           ;ExtMode.c: 170: NackCmd(CmdID, 1);
  5712  00283C  0E01               	movlw	1
  5713  00283E  0100               	movlb	0	; () banked
  5714  002840  6F6D               	movwf	?_NackCmd& (0+255),b
  5715  002842  0102               	movlb	2	; () banked
  5716  002844  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5717  002846  ECBA  F039         	call	_NackCmd
  5718                           
  5719                           ;ExtMode.c: 171: break;
  5720  00284A  D60D               	goto	l17123
  5721  00284C                     l176:
  5722                           
  5723                           ; BSR set to: 2
  5724                           ;ExtMode.c: 172: }
  5725                           ;ExtMode.c: 173: PathIdx = 0;
  5726  00284C  6BCB               	clrf	ExtMode@PathIdx& (0+255),b
  5727                           
  5728                           ;ExtMode.c: 174: PathCount = 0;
  5729  00284E  0101               	movlb	1	; () banked
  5730  002850  6BDF               	clrf	ExtMode@PathCount& (0+255),b
  5731                           
  5732                           ; BSR set to: 1
  5733                           ;ExtMode.c: 175: AckCmd(CmdID);
  5734  002852  0102               	movlb	2	; () banked
  5735  002854  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5736  002856  EC36  F039         	call	_AckCmd
  5737                           
  5738                           ;ExtMode.c: 176: break;
  5739  00285A  D605               	goto	l17123
  5740  00285C                     l17285:
  5741                           
  5742                           ; BSR set to: 2
  5743                           ;ExtMode.c: 178: if ((State == 3) || (State == 4)) {
  5744  00285C  51CC               	movf	ExtMode@State& (0+255),w,b
  5745  00285E  0A03               	xorlw	3
  5746  002860  E003               	bz	l17289
  5747                           
  5748                           ; BSR set to: 2
  5749  002862  51CC               	movf	ExtMode@State& (0+255),w,b
  5750  002864  0A04               	xorlw	4
  5751  002866  E108               	bnz	l17291
  5752  002868                     l17289:
  5753                           
  5754                           ; BSR set to: 2
  5755                           ;ExtMode.c: 179: NackCmd(CmdID, 1);
  5756  002868  0E01               	movlw	1
  5757  00286A  0100               	movlb	0	; () banked
  5758  00286C  6F6D               	movwf	?_NackCmd& (0+255),b
  5759  00286E  0102               	movlb	2	; () banked
  5760  002870  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5761  002872  ECBA  F039         	call	_NackCmd
  5762                           
  5763                           ;ExtMode.c: 180: break;
  5764  002876  D5F7               	goto	l17123
  5765  002878                     l17291:
  5766                           
  5767                           ; BSR set to: 2
  5768                           ;ExtMode.c: 181: }
  5769                           ;ExtMode.c: 183: if (PathCount > 99) {
  5770  002878  0E63               	movlw	99
  5771  00287A  0101               	movlb	1	; () banked
  5772  00287C  65DF               	cpfsgt	ExtMode@PathCount& (0+255),b
  5773  00287E  D008               	goto	l17295
  5774                           
  5775                           ; BSR set to: 1
  5776                           ;ExtMode.c: 184: NackCmd(CmdID, 2);
  5777  002880  0E02               	movlw	2
  5778  002882  0100               	movlb	0	; () banked
  5779  002884  6F6D               	movwf	?_NackCmd& (0+255),b
  5780  002886  0102               	movlb	2	; () banked
  5781  002888  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5782  00288A  ECBA  F039         	call	_NackCmd
  5783                           
  5784                           ;ExtMode.c: 185: break;
  5785  00288E  D5EB               	goto	l17123
  5786  002890                     l17295:
  5787                           
  5788                           ; BSR set to: 1
  5789                           ;ExtMode.c: 186: }
  5790                           ;ExtMode.c: 188: mTemp.ub[1] = MessageStream_ReadByte();
  5791  002890  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5792  002894  0102               	movlb	2	; () banked
  5793  002896  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5794                           
  5795                           ;ExtMode.c: 189: mTemp.ub[0] = MessageStream_ReadByte();
  5796  002898  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5797  00289C  0102               	movlb	2	; () banked
  5798  00289E  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5799                           
  5800                           ; BSR set to: 2
  5801                           ;ExtMode.c: 190: PathDistances[PathCount] = mTemp.i[0];
  5802  0028A0  0101               	movlb	1	; () banked
  5803  0028A2  51DF               	movf	ExtMode@PathCount& (0+255),w,b
  5804  0028A4  0D02               	mullw	2
  5805  0028A6  0102               	movlb	2	; () banked
  5806  0028A8  D8B4               	call	PL66	;call to abstracted procedure
  5807  0028AA  C2CE  FFDE         	movff	ExtMode@mTemp,postinc2
  5808  0028AE  C2CF  FFDD         	movff	ExtMode@mTemp+1,postdec2
  5809                           
  5810                           ; BSR set to: 2
  5811                           ;ExtMode.c: 192: mTemp.ub[1] = MessageStream_ReadByte();
  5812  0028B2  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5813  0028B6  0102               	movlb	2	; () banked
  5814  0028B8  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5815                           
  5816                           ; BSR set to: 2
  5817                           ;ExtMode.c: 193: mTemp.ub[0] = MessageStream_ReadByte();
  5818  0028BA  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5819  0028BE  0102               	movlb	2	; () banked
  5820  0028C0  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5821                           
  5822                           ; BSR set to: 2
  5823                           ;ExtMode.c: 194: PathTravelTimes[PathCount] = mTemp.ui[0];
  5824  0028C2  0101               	movlb	1	; () banked
  5825  0028C4  51DF               	movf	ExtMode@PathCount& (0+255),w,b
  5826  0028C6  D895               	call	PL57	;call to abstracted procedure
  5827  0028C8  0102               	movlb	2	; () banked
  5828  0028CA  C2CE  FFDE         	movff	ExtMode@mTemp,postinc2
  5829  0028CE  C2CF  FFDD         	movff	ExtMode@mTemp+1,postdec2
  5830                           
  5831                           ;ExtMode.c: 196: mTemp.ub[1] = MessageStream_ReadByte();
  5832  0028D2  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5833  0028D6  0102               	movlb	2	; () banked
  5834  0028D8  6FCF               	movwf	(ExtMode@mTemp+1)& (0+255),b
  5835                           
  5836                           ;ExtMode.c: 197: mTemp.ub[0] = MessageStream_ReadByte();
  5837  0028DA  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
  5838  0028DE  0102               	movlb	2	; () banked
  5839  0028E0  6FCE               	movwf	ExtMode@mTemp& (0+255),b
  5840                           
  5841                           ; BSR set to: 2
  5842                           ;ExtMode.c: 198: PathDwellTimes[PathCount] = mTemp.ui[0];
  5843  0028E2  0101               	movlb	1	; () banked
  5844  0028E4  51DF               	movf	ExtMode@PathCount& (0+255),w,b
  5845  0028E6  D88D               	call	PL58	;call to abstracted procedure
  5846  0028E8  0102               	movlb	2	; () banked
  5847  0028EA  C2CE  FFDE         	movff	ExtMode@mTemp,postinc2
  5848  0028EE  C2CF  FFDD         	movff	ExtMode@mTemp+1,postdec2
  5849                           
  5850                           ; BSR set to: 2
  5851                           ;ExtMode.c: 199: AckCmd(CmdID);
  5852  0028F2  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5853  0028F4  EC36  F039         	call	_AckCmd
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;ExtMode.c: 200: PathCount++;
  5857  0028F8  0101               	movlb	1	; () banked
  5858  0028FA  2BDF               	incf	ExtMode@PathCount& (0+255),f,b
  5859                           
  5860                           ;ExtMode.c: 202: break;
  5861  0028FC  D5B4               	goto	l17123
  5862  0028FE                     l17311:
  5863                           
  5864                           ; BSR set to: 2
  5865                           ;ExtMode.c: 204: if (!(State == 0)) {
  5866  0028FE  51CC               	movf	ExtMode@State& (0+255),w,b
  5867  002900  E008               	bz	l185
  5868                           
  5869                           ; BSR set to: 2
  5870                           ;ExtMode.c: 205: NackCmd(CmdID, 1);
  5871  002902  0E01               	movlw	1
  5872  002904  0100               	movlb	0	; () banked
  5873  002906  6F6D               	movwf	?_NackCmd& (0+255),b
  5874  002908  0102               	movlb	2	; () banked
  5875  00290A  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5876  00290C  ECBA  F039         	call	_NackCmd
  5877                           
  5878                           ;ExtMode.c: 206: break;
  5879  002910  D5AA               	goto	l17123
  5880  002912                     l185:
  5881                           
  5882                           ; BSR set to: 2
  5883                           ;ExtMode.c: 207: }
  5884                           ;ExtMode.c: 208: PathIdx = 0;
  5885  002912  6BCB               	clrf	ExtMode@PathIdx& (0+255),b
  5886                           
  5887                           ; BSR set to: 2
  5888                           ;ExtMode.c: 209: D = PathDistances[PathIdx];
  5889  002914  C200  F073         	movff	ExtMode@PathDistances,?___awtoft
  5890  002918  C201  F074         	movff	ExtMode@PathDistances+1,?___awtoft+1
  5891  00291C  EC8F  F03A         	call	___awtoft	;wreg free
  5892  002920  C073  F2C8         	movff	?___awtoft,ExtMode@D
  5893  002924  C074  F2C9         	movff	?___awtoft+1,ExtMode@D+1
  5894  002928  C075  F2CA         	movff	?___awtoft+2,ExtMode@D+2
  5895                           
  5896                           ;ExtMode.c: 210: T = PathTravelTimes[PathIdx];
  5897  00292C  C300  F073         	movff	ExtMode@PathTravelTimes,?___lwtoft
  5898  002930  C301  F074         	movff	ExtMode@PathTravelTimes+1,?___lwtoft+1
  5899  002934  ECCB  F03B         	call	___lwtoft	;wreg free
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;ExtMode.c: 211: S = SpeedRequiredToMoveInTime(D, T);
  5903  002938  D82A               	call	PL26	;call to abstracted procedure
  5904  00293A  ECE9  F029         	call	_SpeedRequiredToMoveInTime	;wreg free
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;ExtMode.c: 212: Move(D, S);
  5908  00293E  D83A               	call	PL28	;call to abstracted procedure
  5909  002940  ECB7  F03B         	call	_Move	;wreg free
  5910                           
  5911                           ;ExtMode.c: 213: State = 3;
  5912  002944  0E03               	movlw	3
  5913  002946  0102               	movlb	2	; () banked
  5914  002948  6FCC               	movwf	ExtMode@State& (0+255),b
  5915                           
  5916                           ; BSR set to: 2
  5917                           ;ExtMode.c: 214: AckCmd(CmdID);
  5918  00294A  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5919  00294C  EC36  F039         	call	_AckCmd
  5920                           
  5921                           ;ExtMode.c: 215: break;
  5922  002950  D58A               	goto	l17123
  5923  002952                     l17325:
  5924                           
  5925                           ; BSR set to: 2
  5926                           ;ExtMode.c: 217: NackCmd(CmdID, 0xFE);
  5927  002952  0EFE               	movlw	254
  5928  002954  0100               	movlb	0	; () banked
  5929  002956  6F6D               	movwf	?_NackCmd& (0+255),b
  5930  002958  0102               	movlb	2	; () banked
  5931  00295A  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5932  00295C  ECBA  F039         	call	_NackCmd
  5933                           
  5934                           ;ExtMode.c: 218: break;
  5935  002960  D582               	goto	l17123
  5936  002962                     l17329:
  5937                           
  5938                           ; BSR set to: 2
  5939  002962  51CD               	movf	ExtMode@CmdID& (0+255),w,b
  5940                           
  5941                           ; Switch size 1, requested type "space"
  5942                           ; Number of cases is 7, Range of values is 96 to 102
  5943                           ; switch strategies available:
  5944                           ; Name         Instructions Cycles
  5945                           ; simple_byte           22    12 (average)
  5946                           ;	Chosen strategy is simple_byte
  5947  002964  0A60               	xorlw	96	; case 96
  5948  002966  E101 D5F5          	bz	l17165
  5949  00296A  0A01               	xorlw	1	; case 97
  5950  00296C  E101 D63C          	bz	l166
  5951  002970  0A03               	xorlw	3	; case 98
  5952  002972  E101 D66C          	bz	l17191
  5953  002976  0A01               	xorlw	1	; case 99
  5954  002978  E101 D671          	bz	l171
  5955  00297C  0A07               	xorlw	7	; case 100
  5956  00297E  E101 D757          	bz	l17277
  5957  002982  0A01               	xorlw	1	; case 101
  5958  002984  E101 D76A          	bz	l17285
  5959  002988  0A03               	xorlw	3	; case 102
  5960  00298A  E0B9               	bz	l17311
  5961  00298C  D7E2               	goto	l17325
  5962  00298E                     __end_of_ExtMode:
  5963                           	opt stack 0
  5964  00298E                     PL26:
  5965  00298E  C073  F1DB         	movff	?___lwtoft,ExtMode@T
  5966  002992  C074  F1DC         	movff	?___lwtoft+1,ExtMode@T+1
  5967  002996  C075  F1DD         	movff	?___lwtoft+2,ExtMode@T+2
  5968  00299A  C2C8  F0B4         	movff	ExtMode@D,?_SpeedRequiredToMoveInTime
  5969  00299E  C2C9  F0B5         	movff	ExtMode@D+1,?_SpeedRequiredToMoveInTime+1
  5970  0029A2  C2CA  F0B6         	movff	ExtMode@D+2,?_SpeedRequiredToMoveInTime+2
  5971  0029A6  C1DB  F0B7         	movff	ExtMode@T,?_SpeedRequiredToMoveInTime+3
  5972  0029AA  C1DC  F0B8         	movff	ExtMode@T+1,?_SpeedRequiredToMoveInTime+4
  5973  0029AE  C1DD  F0B9         	movff	ExtMode@T+2,?_SpeedRequiredToMoveInTime+5
  5974  0029B2  0012               	return	
  5975  0029B4                     PL28:
  5976  0029B4  C0B4  F1D8         	movff	?_SpeedRequiredToMoveInTime,ExtMode@S
  5977  0029B8  C0B5  F1D9         	movff	?_SpeedRequiredToMoveInTime+1,ExtMode@S+1
  5978  0029BC  C0B6  F1DA         	movff	?_SpeedRequiredToMoveInTime+2,ExtMode@S+2
  5979  0029C0  C2C8  F100         	movff	ExtMode@D,?_Move
  5980  0029C4  C2C9  F101         	movff	ExtMode@D+1,?_Move+1
  5981  0029C8  C2CA  F102         	movff	ExtMode@D+2,?_Move+2
  5982  0029CC  C1D8  F103         	movff	ExtMode@S,?_Move+3
  5983  0029D0  C1D9  F104         	movff	ExtMode@S+1,?_Move+4
  5984  0029D4  C1DA  F105         	movff	ExtMode@S+2,?_Move+5
  5985  0029D8  0012               	return	
  5986  0029DA                     PL46:
  5987  0029DA  0E02               	movlw	high ExtMode@mTemp
  5988  0029DC  0100               	movlb	0	; () banked
  5989  0029DE  6F89               	movwf	(?___asftmul+1)& (0+255),b
  5990  0029E0  0ECE               	movlw	low ExtMode@mTemp
  5991  0029E2  6F88               	movwf	?___asftmul& (0+255),b
  5992  0029E4  C2F5  F08A         	movff	_Config+31,?___asftmul+2
  5993  0029E8  C2F6  F08B         	movff	_Config+32,?___asftmul+3
  5994  0029EC  C2F7  F08C         	movff	_Config+33,?___asftmul+4
  5995  0029F0  0012               	return	
  5996  0029F2                     PL57:
  5997  0029F2  0D02               	mullw	2
  5998  0029F4  0E00               	movlw	low ExtMode@PathTravelTimes
  5999  0029F6  24F3               	addwf	prodl,w,c
  6000  0029F8  6ED9               	movwf	fsr2l,c
  6001  0029FA  6ADA               	clrf	fsr2h,c
  6002  0029FC  0E03               	movlw	high ExtMode@PathTravelTimes
  6003  0029FE  22DA               	addwfc	fsr2h,f,c
  6004  002A00  0012               	return	
  6005  002A02                     PL58:
  6006  002A02  0D02               	mullw	2
  6007  002A04  0E06               	movlw	low ExtMode@PathDwellTimes
  6008  002A06  24F3               	addwf	prodl,w,c
  6009  002A08  6ED9               	movwf	fsr2l,c
  6010  002A0A  6ADA               	clrf	fsr2h,c
  6011  002A0C  0E01               	movlw	high ExtMode@PathDwellTimes
  6012  002A0E  22DA               	addwfc	fsr2h,f,c
  6013  002A10  0012               	return	
  6014  002A12                     PL66:
  6015  002A12  0E00               	movlw	low ExtMode@PathDistances
  6016  002A14  24F3               	addwf	prodl,w,c
  6017  002A16  6ED9               	movwf	fsr2l,c
  6018  002A18  6ADA               	clrf	fsr2h,c
  6019  002A1A  0E02               	movlw	high ExtMode@PathDistances
  6020  002A1C  22DA               	addwfc	fsr2h,f,c
  6021  002A1E  0012               	return	
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           intcon2	equ	0xFF1
  6030                           postinc0	equ	0xFEE
  6031                           wreg	equ	0xFE8
  6032                           postinc1	equ	0xFE6
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _LCD_PowerUp *****************
  6044 ;; Defined at:
  6045 ;;		line 104 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;		None               void
  6052 ;; Registers used:
  6053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : F/0
  6056 ;;		On exit  : F/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    8
  6066 ;; This function calls:
  6067 ;;		_Wait_ms
  6068 ;;		_LCD_FunctionSet
  6069 ;;		_LCD_DisplayOnOff
  6070 ;;		_LCD_ClearDisplay
  6071 ;; This function is called by:
  6072 ;;		_main
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text2
  6077  007194                     __ptext2:
  6078                           	opt stack 0
  6079  007194                     _LCD_PowerUp:
  6080                           	opt stack 22
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;LCD.c: 107: LATBbits.LATB1 = 1;
  6084  007194  828A               	bsf	3978,1,c	;volatile
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;LCD.c: 110: Wait_ms(60);
  6088  007196  6B8F               	clrf	(?_Wait_ms+1)& (0+255),b
  6089  007198  0E3C               	movlw	60
  6090  00719A  6F8E               	movwf	?_Wait_ms& (0+255),b
  6091  00719C  EC0A  F03C         	call	_Wait_ms	;wreg free
  6092                           
  6093                           ;LCD.c: 113: LCD_FunctionSet(1, 1, 1);
  6094  0071A0  0E01               	movlw	1
  6095  0071A2  0100               	movlb	0	; () banked
  6096  0071A4  6F75               	movwf	?_LCD_FunctionSet& (0+255),b
  6097  0071A6  6F76               	movwf	(?_LCD_FunctionSet+1)& (0+255),b
  6098  0071A8  EC15  F037         	call	_LCD_FunctionSet
  6099                           
  6100                           ;LCD.c: 116: LCD_DisplayOnOff(1, 0, 0);
  6101  0071AC  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
  6102  0071AE  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
  6103  0071B0  0E01               	movlw	1
  6104  0071B2  EC7D  F037         	call	_LCD_DisplayOnOff
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;LCD.c: 119: LCD_ClearDisplay();
  6108  0071B6  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;LCD.c: 122: Wait_ms(60);
  6112  0071BA  6B8F               	clrf	(?_Wait_ms+1)& (0+255),b
  6113  0071BC  0E3C               	movlw	60
  6114  0071BE  6F8E               	movwf	?_Wait_ms& (0+255),b
  6115  0071C0  EC0A  F03C         	call	_Wait_ms	;wreg free
  6116                           
  6117                           ;LCD.c: 125: LCD_FunctionSet(1, 1, 1);
  6118  0071C4  0E01               	movlw	1
  6119  0071C6  0100               	movlb	0	; () banked
  6120  0071C8  6F75               	movwf	?_LCD_FunctionSet& (0+255),b
  6121  0071CA  6F76               	movwf	(?_LCD_FunctionSet+1)& (0+255),b
  6122  0071CC  EC15  F037         	call	_LCD_FunctionSet
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;LCD.c: 128: LCD_DisplayOnOff(1, 0, 0);
  6126  0071D0  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
  6127  0071D2  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
  6128  0071D4  0E01               	movlw	1
  6129  0071D6  EC7D  F037         	call	_LCD_DisplayOnOff
  6130                           
  6131                           ;LCD.c: 131: LCD_ClearDisplay();
  6132  0071DA  EFEE  F035         	goto	_LCD_ClearDisplay	;wreg free
  6133  0071DE                     __end_of_LCD_PowerUp:
  6134                           	opt stack 0
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           intcon	equ	0xFF2
  6142                           intcon2	equ	0xFF1
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           postinc1	equ	0xFE6
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function _LCD_FunctionSet *****************
  6157 ;; Defined at:
  6158 ;;		line 212 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  EightBit        1    wreg     unsigned char 
  6161 ;;  DualLine        1   21[BANK0 ] unsigned char 
  6162 ;;  FiveByTenDot    1   22[BANK0 ] unsigned char 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  EightBit        1   23[BANK0 ] unsigned char 
  6165 ;;  dat             1   24[BANK0 ] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;		None               void
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : F/0
  6172 ;;		On exit  : F/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;Total ram usage:        4 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    5
  6182 ;; This function calls:
  6183 ;;		_Wait_us
  6184 ;; This function is called by:
  6185 ;;		_LCD_PowerUp
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	text3
  6190  006E2A                     __ptext3:
  6191                           	opt stack 0
  6192  006E2A                     _LCD_FunctionSet:
  6193                           	opt stack 24
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;LCD_FunctionSet@EightBit stored from wreg
  6197  006E2A  CFE8 F077          	movff	wreg,LCD_FunctionSet@EightBit
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;LCD.c: 214: unsigned char dat = 0b00100000;
  6201  006E2E  0E20               	movlw	32
  6202  006E30  6F78               	movwf	LCD_FunctionSet@dat& (0+255),b
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;LCD.c: 215: if (EightBit) dat |= 0b00010000;
  6206  006E32  5177               	movf	LCD_FunctionSet@EightBit& (0+255),w,b
  6207  006E34  A4D8               	btfss	status,2,c
  6208                           
  6209                           ; BSR set to: 0
  6210  006E36  8978               	bsf	LCD_FunctionSet@dat& (0+255),4,b
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;LCD.c: 216: if (DualLine) dat |= 0b00001000;
  6214  006E38  5175               	movf	LCD_FunctionSet@DualLine& (0+255),w,b
  6215  006E3A  A4D8               	btfss	status,2,c
  6216                           
  6217                           ; BSR set to: 0
  6218  006E3C  8778               	bsf	LCD_FunctionSet@dat& (0+255),3,b
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;LCD.c: 217: if (FiveByTenDots) dat |= 0b00000100;
  6222  006E3E  5176               	movf	LCD_FunctionSet@FiveByTenDots& (0+255),w,b
  6223  006E40  A4D8               	btfss	status,2,c
  6224                           
  6225                           ; BSR set to: 0
  6226  006E42  8578               	bsf	LCD_FunctionSet@dat& (0+255),2,b
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;LCD.c: 219: LATEbits.LATE7 = 0;
  6230  006E44  9E8D               	bcf	3981,7,c	;volatile
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;LCD.c: 220: LATEbits.LATE5 = 0;
  6234  006E46  9A8D               	bcf	3981,5,c	;volatile
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;LCD.c: 221: LATEbits.LATE6 = 0;
  6238  006E48  9C8D               	bcf	3981,6,c	;volatile
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;LCD.c: 222: LATD = dat;
  6242  006E4A  C078  FF8C         	movff	LCD_FunctionSet@dat,3980	;volatile
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;LCD.c: 223: LATEbits.LATE7=1;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop"
      +                          );asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");LA
      +                          TEbits.LATE7=0;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");
  6246  006E4E  8E8D               	bsf	3981,7,c	;volatile
  6247                           
  6248                           ; BSR set to: 0
  6249  006E50  F000               	nop		;# 
  6250  006E52  F000               	nop		;# 
  6251  006E54  F000               	nop		;# 
  6252  006E56  F000               	nop		;# 
  6253  006E58  F000               	nop		;# 
  6254  006E5A  F000               	nop		;# 
  6255  006E5C  F000               	nop		;# 
  6256  006E5E  F000               	nop		;# 
  6257  006E60  F000               	nop		;# 
  6258  006E62  F000               	nop		;# 
  6259  006E64  F000               	nop		;# 
  6260  006E66  F000               	nop		;# 
  6261  006E68  9E8D               	bcf	3981,7,c	;volatile
  6262  006E6A  F000               	nop		;# 
  6263  006E6C  F000               	nop		;# 
  6264  006E6E  F000               	nop		;# 
  6265  006E70  F000               	nop		;# 
  6266  006E72  F000               	nop		;# 
  6267  006E74  F000               	nop		;# 
  6268  006E76  F000               	nop		;# 
  6269  006E78  F000               	nop		;# 
  6270  006E7A  F000               	nop		;# 
  6271  006E7C  F000               	nop		;# 
  6272  006E7E  F000               	nop		;# 
  6273  006E80  F000               	nop		;# 
  6274  006E82  F000               	nop		;# 
  6275  006E84  F000               	nop		;# 
  6276                           
  6277                           ;LCD.c: 225: Wait_us(75);
  6278  006E86  0100               	movlb	0	; () banked
  6279  006E88  6B73               	clrf	(?_Wait_us+1)& (0+255),b
  6280  006E8A  0E4B               	movlw	75
  6281  006E8C  6F72               	movwf	?_Wait_us& (0+255),b
  6282  006E8E  EF79  F039         	goto	_Wait_us	;wreg free
  6283  006E92                     __end_of_LCD_FunctionSet:
  6284                           	opt stack 0
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           intcon2	equ	0xFF1
  6293                           postinc0	equ	0xFEE
  6294                           wreg	equ	0xFE8
  6295                           postinc1	equ	0xFE6
  6296                           postdec1	equ	0xFE5
  6297                           fsr1h	equ	0xFE2
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _SetupIO *****************
  6307 ;; Defined at:
  6308 ;;		line 637 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, status,2
  6317 ;; Tracked objects:
  6318 ;;		On entry : F/4
  6319 ;;		On exit  : F/F
  6320 ;;		Unchanged: FFFFFFF0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    3
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text4
  6337  00746A                     __ptext4:
  6338                           	opt stack 0
  6339  00746A                     _SetupIO:
  6340                           	opt stack 27
  6341                           
  6342                           ; BSR set to: 4
  6343                           ;Main.c: 648: LATA = 0b00000000;
  6344                           
  6345                           ; BSR set to: 0
  6346  00746A  6A89               	clrf	3977,c	;volatile
  6347                           
  6348                           ; BSR set to: 4
  6349                           ;Main.c: 649: TRISA = 0b10000011;
  6350  00746C  0E83               	movlw	131
  6351  00746E  6E92               	movwf	3986,c	;volatile
  6352                           
  6353                           ; BSR set to: 4
  6354                           ;Main.c: 661: LATB = 0b00000000;
  6355  007470  6A8A               	clrf	3978,c	;volatile
  6356                           
  6357                           ;Main.c: 662: TRISB = 0b00011100;
  6358  007472  0E1C               	movlw	28
  6359  007474  6E93               	movwf	3987,c	;volatile
  6360                           
  6361                           ; BSR set to: 4
  6362                           ;Main.c: 663: RBPU = 0;
  6363  007476  9EF1               	bcf	intcon2,7,c	;volatile
  6364                           
  6365                           ; BSR set to: 4
  6366                           ;Main.c: 675: LATC = 0b00000000;
  6367  007478  6A8B               	clrf	3979,c	;volatile
  6368                           
  6369                           ;Main.c: 676: TRISC = 0b10000000;
  6370  00747A  0E80               	movlw	128
  6371  00747C  6E94               	movwf	3988,c	;volatile
  6372                           
  6373                           ; BSR set to: 4
  6374                           ;Main.c: 680: LATD = 0b00000000;
  6375  00747E  6A8C               	clrf	3980,c	;volatile
  6376                           
  6377                           ; BSR set to: 4
  6378                           ;Main.c: 681: TRISD = 0b00000000;
  6379  007480  6A95               	clrf	3989,c	;volatile
  6380                           
  6381                           ; BSR set to: 4
  6382                           ;Main.c: 692: LATE = 0b00000000;
  6383  007482  6A8D               	clrf	3981,c	;volatile
  6384                           
  6385                           ; BSR set to: 4
  6386                           ;Main.c: 693: TRISE = 0b00000000;
  6387  007484  6A96               	clrf	3990,c	;volatile
  6388                           
  6389                           ; BSR set to: 4
  6390                           ;Main.c: 704: LATF = 0b00000000;
  6391  007486  6A8E               	clrf	3982,c	;volatile
  6392                           
  6393                           ;Main.c: 705: TRISF = 0b00000100;
  6394  007488  0E04               	movlw	4
  6395  00748A  6E97               	movwf	3991,c	;volatile
  6396                           
  6397                           ; BSR set to: 4
  6398                           ;Main.c: 716: LATG = 0b00000000;
  6399  00748C  6A8F               	clrf	3983,c	;volatile
  6400                           
  6401                           ; BSR set to: 4
  6402                           ;Main.c: 717: TRISG = 0b00000000;
  6403  00748E  6A98               	clrf	3992,c	;volatile
  6404                           
  6405                           ;Main.c: 722: ANCON0 = 0b10000000;
  6406  007490  0E80               	movlw	128
  6407  007492  010F               	movlb	15	; () banked
  6408  007494  6F25               	movwf	37,b	;volatile
  6409                           
  6410                           ; BSR set to: 15
  6411                           ;Main.c: 723: ANCON1 = 0;
  6412  007496  6B24               	clrf	36,b	;volatile
  6413                           
  6414                           ; BSR set to: 15
  6415                           ;Main.c: 724: ANCON2 = 0;
  6416  007498  6B23               	clrf	35,b	;volatile
  6417                           
  6418                           ;Main.c: 728: ADCON0 = 0b00011100;
  6419  00749A  0E1C               	movlw	28
  6420  00749C  6EC2               	movwf	4034,c	;volatile
  6421                           
  6422                           ;Main.c: 730: ADCON2 = 0b10111110;
  6423  00749E  0EBE               	movlw	190
  6424  0074A0  6EC0               	movwf	4032,c	;volatile
  6425                           
  6426                           ; BSR set to: 15
  6427                           ;Main.c: 732: ADON = 1;
  6428  0074A2  80C2               	bsf	4034,0,c	;volatile
  6429                           
  6430                           ; BSR set to: 15
  6431  0074A4  0CBE               	retlw	190
  6432  0074A6                     __end_of_SetupIO:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           intcon2	equ	0xFF1
  6442                           postinc0	equ	0xFEE
  6443                           wreg	equ	0xFE8
  6444                           postinc1	equ	0xFE6
  6445                           postdec1	equ	0xFE5
  6446                           fsr1h	equ	0xFE2
  6447                           fsr1l	equ	0xFE1
  6448                           indf2	equ	0xFDF
  6449                           postinc2	equ	0xFDE
  6450                           postdec2	equ	0xFDD
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _FactoryDefault *****************
  6456 ;; Defined at:
  6457 ;;		line 9 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;  Empty         120    0[BANK1 ] struct .
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : F/4
  6468 ;;		On exit  : F/0
  6469 ;;		Unchanged: FFFFFFF0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Locals:         0       0     120       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Totals:         0       0     120       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;Total ram usage:      120 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    6
  6478 ;; This function calls:
  6479 ;;		_SavePreset
  6480 ;; This function is called by:
  6481 ;;		_main
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text5
  6486  006632                     __ptext5:
  6487                           	opt stack 0
  6488  006632                     _FactoryDefault:
  6489                           	opt stack 24
  6490                           
  6491                           ; BSR set to: 4
  6492                           ;Settings.c: 10: Config.Version=2;
  6493                           
  6494                           ; BSR set to: 15
  6495  006632  0E02               	movlw	2
  6496  006634  0102               	movlb	2	; () banked
  6497  006636  6FD6               	movwf	_Config& (0+255),b
  6498                           
  6499                           ;Settings.c: 11: Config.BatteryLowVoltageLevel = 1470;
  6500  006638  0E05               	movlw	5
  6501  00663A  6FD8               	movwf	(_Config+2)& (0+255),b
  6502  00663C  0EBE               	movlw	190
  6503  00663E  6FD7               	movwf	(_Config+1)& (0+255),b
  6504                           
  6505                           ;Settings.c: 12: Config.Battery12V_Q8 = 23520;
  6506  006640  0E5B               	movlw	91
  6507  006642  6FDA               	movwf	(_Config+4)& (0+255),b
  6508  006644  0EE0               	movlw	224
  6509  006646  6FD9               	movwf	(_Config+3)& (0+255),b
  6510                           
  6511                           ;Settings.c: 13: Config.PowerResponseLimiter_Slope = 6;
  6512  006648  0E06               	movlw	6
  6513  00664A  6FDB               	movwf	(_Config+5)& (0+255),b
  6514                           
  6515                           ;Settings.c: 14: Config.PowerResponseLimiter_Intercept = 122;
  6516  00664C  0E7A               	movlw	122
  6517  00664E  6FDC               	movwf	(_Config+6)& (0+255),b
  6518                           
  6519                           ;Settings.c: 15: Config.Counts_per_Volt = 2519.0 / 12.0;
  6520  006650  0EEB               	movlw	235
  6521  006652  6FDD               	movwf	(_Config+7)& (0+255),b
  6522  006654  0E51               	movlw	81
  6523  006656  6FDE               	movwf	(_Config+8)& (0+255),b
  6524  006658  0E43               	movlw	67
  6525  00665A  6FDF               	movwf	(_Config+9)& (0+255),b
  6526                           
  6527                           ;Settings.c: 16: Config.Volts_per_Count = 12.0 / 2519.0;
  6528  00665C  0E1A               	movlw	26
  6529  00665E  6FE0               	movwf	(_Config+10)& (0+255),b
  6530  006660  0E9C               	movlw	156
  6531  006662  6FE1               	movwf	(_Config+11)& (0+255),b
  6532  006664  0E3B               	movlw	59
  6533  006666  6FE2               	movwf	(_Config+12)& (0+255),b
  6534                           
  6535                           ;Settings.c: 18: Config.BacklightIdleTimeout = 5000;
  6536  006668  0E13               	movlw	19
  6537  00666A  6FE5               	movwf	(_Config+15)& (0+255),b
  6538  00666C  0E88               	movlw	136
  6539  00666E  6FE4               	movwf	(_Config+14)& (0+255),b
  6540                           
  6541                           ;Settings.c: 19: Config.BacklightPWM_Duty = 4;
  6542  006670  0E04               	movlw	4
  6543  006672  6FE3               	movwf	(_Config+13)& (0+255),b
  6544                           
  6545                           ;Settings.c: 21: Config.SystemAcceleration = 180.0;
  6546  006674  6BE6               	clrf	(_Config+16)& (0+255),b
  6547  006676  0E34               	movlw	52
  6548  006678  6FE7               	movwf	(_Config+17)& (0+255),b
  6549  00667A  0E43               	movlw	67
  6550  00667C  6FE8               	movwf	(_Config+18)& (0+255),b
  6551                           
  6552                           ;Settings.c: 22: Config.MaxSpeed = 90.0;
  6553  00667E  6BE9               	clrf	(_Config+19)& (0+255),b
  6554  006680  0EB4               	movlw	180
  6555  006682  6FEA               	movwf	(_Config+20)& (0+255),b
  6556  006684  0E42               	movlw	66
  6557  006686  6FEB               	movwf	(_Config+21)& (0+255),b
  6558                           
  6559                           ;Settings.c: 24: Config.PID_MaxError = 32;
  6560  006688  6BED               	clrf	(_Config+23)& (0+255),b
  6561  00668A  0E20               	movlw	32
  6562  00668C  6FEC               	movwf	(_Config+22)& (0+255),b
  6563                           
  6564                           ;Settings.c: 25: Config.PID_Kp = 32;
  6565  00668E  6BEF               	clrf	(_Config+25)& (0+255),b
  6566  006690  6FEE               	movwf	(_Config+24)& (0+255),b
  6567                           
  6568                           ;Settings.c: 26: Config.PID_Kd = 64;
  6569  006692  6BF1               	clrf	(_Config+27)& (0+255),b
  6570  006694  0E40               	movlw	64
  6571  006696  6FF0               	movwf	(_Config+26)& (0+255),b
  6572                           
  6573                           ;Settings.c: 28: Config.Counts_Per_Degree = 17.5;
  6574  006698  6BF2               	clrf	(_Config+28)& (0+255),b
  6575  00669A  0E8C               	movlw	140
  6576  00669C  6FF3               	movwf	(_Config+29)& (0+255),b
  6577  00669E  0E41               	movlw	65
  6578  0066A0  6FF4               	movwf	(_Config+30)& (0+255),b
  6579                           
  6580                           ;Settings.c: 29: Config.Degrees_Per_Count = 0.05714286;
  6581  0066A2  0E0F               	movlw	15
  6582  0066A4  6FF5               	movwf	(_Config+31)& (0+255),b
  6583  0066A6  0E6A               	movlw	106
  6584  0066A8  6FF6               	movwf	(_Config+32)& (0+255),b
  6585  0066AA  0E3D               	movlw	61
  6586  0066AC  6FF7               	movwf	(_Config+33)& (0+255),b
  6587                           
  6588                           ; BSR set to: 2
  6589                           ;Settings.c: 31: PRESET Empty;
  6590                           ;Settings.c: 32: Empty.Orbit.Type=0;
  6591  0066AE  0101               	movlb	1	; () banked
  6592  0066B0  6B00               	clrf	FactoryDefault@Empty& (0+255),b
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;Settings.c: 33: SavePreset(0,(unsigned char *)&Empty);
  6596  0066B2  0E01               	movlw	high FactoryDefault@Empty
  6597  0066B4  0100               	movlb	0	; () banked
  6598  0066B6  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  6599  0066B8  0E00               	movlw	low FactoryDefault@Empty
  6600  0066BA  6F73               	movwf	?_SavePreset& (0+255),b
  6601  0066BC  0E00               	movlw	0
  6602  0066BE  ECF5  F03A         	call	_SavePreset
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;Settings.c: 34: SavePreset(1,(unsigned char *)&Empty);
  6606  0066C2  0E01               	movlw	high FactoryDefault@Empty
  6607  0066C4  0100               	movlb	0	; () banked
  6608  0066C6  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  6609  0066C8  0E00               	movlw	low FactoryDefault@Empty
  6610  0066CA  6F73               	movwf	?_SavePreset& (0+255),b
  6611  0066CC  0E01               	movlw	1
  6612  0066CE  ECF5  F03A         	call	_SavePreset
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;Settings.c: 35: SavePreset(2,(unsigned char *)&Empty);
  6616  0066D2  0E01               	movlw	high FactoryDefault@Empty
  6617  0066D4  0100               	movlb	0	; () banked
  6618  0066D6  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  6619  0066D8  0E00               	movlw	low FactoryDefault@Empty
  6620  0066DA  6F73               	movwf	?_SavePreset& (0+255),b
  6621  0066DC  0E02               	movlw	2
  6622  0066DE  ECF5  F03A         	call	_SavePreset
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;Settings.c: 36: SavePreset(3,(unsigned char *)&Empty);
  6626  0066E2  0E01               	movlw	high FactoryDefault@Empty
  6627  0066E4  0100               	movlb	0	; () banked
  6628  0066E6  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  6629  0066E8  0E00               	movlw	low FactoryDefault@Empty
  6630  0066EA  6F73               	movwf	?_SavePreset& (0+255),b
  6631  0066EC  0E03               	movlw	3
  6632  0066EE  ECF5  F03A         	call	_SavePreset
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;Settings.c: 37: SavePreset(4,(unsigned char *)&Empty);
  6636  0066F2  0E01               	movlw	high FactoryDefault@Empty
  6637  0066F4  0100               	movlb	0	; () banked
  6638  0066F6  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  6639  0066F8  0E00               	movlw	low FactoryDefault@Empty
  6640  0066FA  6F73               	movwf	?_SavePreset& (0+255),b
  6641  0066FC  0E04               	movlw	4
  6642  0066FE  EFF5  F03A         	goto	_SavePreset
  6643  006702                     __end_of_FactoryDefault:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           intcon2	equ	0xFF1
  6653                           postinc0	equ	0xFEE
  6654                           wreg	equ	0xFE8
  6655                           postinc1	equ	0xFE6
  6656                           postdec1	equ	0xFE5
  6657                           fsr1h	equ	0xFE2
  6658                           fsr1l	equ	0xFE1
  6659                           indf2	equ	0xFDF
  6660                           postinc2	equ	0xFDE
  6661                           postdec2	equ	0xFDD
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _SetupHardware *****************
  6667 ;; Defined at:
  6668 ;;		line 540 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;		None               void
  6675 ;; Registers used:
  6676 ;;		wreg, status,2
  6677 ;; Tracked objects:
  6678 ;;		On entry : F/0
  6679 ;;		On exit  : F/0
  6680 ;;		Unchanged: FFFFFFF0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    3
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_main
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text6
  6697  006D4E                     __ptext6:
  6698                           	opt stack 0
  6699  006D4E                     _SetupHardware:
  6700                           	opt stack 27
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;Main.c: 542: OSCCON = 0b01110000;
  6704                           
  6705                           ; BSR set to: 0
  6706  006D4E  0E70               	movlw	112
  6707  006D50  6ED3               	movwf	4051,c	;volatile
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;Main.c: 545: PLLEN = 1;
  6711  006D52  8C9B               	bsf	3995,6,c	;volatile
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;Main.c: 548: TMR0ON = 0;
  6715  006D54  9ED5               	bcf	4053,7,c	;volatile
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;Main.c: 549: T08BIT = 0;
  6719  006D56  9CD5               	bcf	4053,6,c	;volatile
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;Main.c: 550: T0CS = 0;
  6723  006D58  9AD5               	bcf	4053,5,c	;volatile
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;Main.c: 551: PSA = 1;
  6727  006D5A  86D5               	bsf	4053,3,c	;volatile
  6728                           
  6729                           ;Main.c: 554: TMR0H = 0xFC;
  6730  006D5C  0EFC               	movlw	252
  6731  006D5E  6ED7               	movwf	4055,c	;volatile
  6732                           
  6733                           ;Main.c: 555: TMR0L = 0xF2;
  6734  006D60  0EF2               	movlw	242
  6735  006D62  6ED6               	movwf	4054,c	;volatile
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;Main.c: 557: TMR0IF = 0;
  6739  006D64  94F2               	bcf	intcon,2,c	;volatile
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;Main.c: 558: TMR0IE = 1;
  6743  006D66  8AF2               	bsf	intcon,5,c	;volatile
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;Main.c: 559: TMR0IP = 1;
  6747  006D68  84F1               	bsf	intcon2,2,c	;volatile
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;Main.c: 561: TMR0ON = 1;
  6751  006D6A  8ED5               	bsf	4053,7,c	;volatile
  6752                           
  6753                           ;Main.c: 566: TMR1H = 0x83;
  6754  006D6C  0E83               	movlw	131
  6755  006D6E  6ECF               	movwf	4047,c	;volatile
  6756                           
  6757                           ;Main.c: 567: TMR1L = 0x50;
  6758  006D70  0E50               	movlw	80
  6759  006D72  6ECE               	movwf	4046,c	;volatile
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;Main.c: 569: TMR1IF = 0;
  6763  006D74  909E               	bcf	3998,0,c	;volatile
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;Main.c: 570: TMR1IE = 1;
  6767  006D76  809D               	bsf	3997,0,c	;volatile
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;Main.c: 571: TMR1IP = 0;
  6771  006D78  909F               	bcf	3999,0,c	;volatile
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;Main.c: 576: TMR2 = 0;
  6775  006D7A  6ACC               	clrf	4044,c	;volatile
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;Main.c: 579: PR2 = 0xFF;
  6779  006D7C  68CB               	setf	4043,c	;volatile
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;Main.c: 581: T2CONbits.T2CKPS0 = 1;
  6783  006D7E  80CA               	bsf	4042,0,c	;volatile
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;Main.c: 582: T2CONbits.T2CKPS1 = 0;
  6787  006D80  92CA               	bcf	4042,1,c	;volatile
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;Main.c: 585: CCPR1L = 0;
  6791  006D82  6ABC               	clrf	4028,c	;volatile
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;Main.c: 588: TRISCbits.TRISC2 = 0;
  6795  006D84  9494               	bcf	3988,2,c	;volatile
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;Main.c: 591: TMR2ON = 1;
  6799  006D86  84CA               	bsf	4042,2,c	;volatile
  6800                           
  6801                           ;Main.c: 594: CCP1CON = 0b00001100;
  6802  006D88  0E0C               	movlw	12
  6803  006D8A  6EBB               	movwf	4027,c	;volatile
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;Main.c: 598: TRISCbits.TRISC7 = 1;
  6807  006D8C  8E94               	bsf	3988,7,c	;volatile
  6808                           
  6809                           ;Main.c: 599: TRISCbits.TRISC = 0;
  6810  006D8E  0E00               	movlw	-256
  6811  006D90  1694               	andwf	3988,f,c	;volatile
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;Main.c: 602: TXSTA1bits.BRGH = 1;
  6815  006D92  84AC               	bsf	4012,2,c	;volatile
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;Main.c: 603: BAUDCON1bits.BRG16 = 1;
  6819  006D94  8665               	bsf	3941,3,c	;volatile
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;Main.c: 604: BAUDCON1bits.RXDTP = 0;
  6823  006D96  9A65               	bcf	3941,5,c	;volatile
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;Main.c: 605: BAUDCON1bits.TXCKP = 0;
  6827  006D98  9865               	bcf	3941,4,c	;volatile
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;Main.c: 606: BAUDCON1bits.WUE = 0;
  6831  006D9A  9265               	bcf	3941,1,c	;volatile
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;Main.c: 607: BAUDCON1bits.ABDEN = 0;
  6835  006D9C  9065               	bcf	3941,0,c	;volatile
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;Main.c: 615: SPBRGH1 = 0;
  6839  006D9E  6AD4               	clrf	4052,c	;volatile
  6840                           
  6841                           ;Main.c: 616: SPBRG1 = 137;
  6842  006DA0  0E89               	movlw	137
  6843  006DA2  6EAF               	movwf	4015,c	;volatile
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;Main.c: 618: TXSTA1bits.SYNC = 0;
  6847  006DA4  98AC               	bcf	4012,4,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;Main.c: 619: RCSTA1bits.SPEN = 1;
  6851  006DA6  8EAB               	bsf	4011,7,c	;volatile
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;Main.c: 621: TX1IE = 0;
  6855  006DA8  989D               	bcf	3997,4,c	;volatile
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;Main.c: 622: TXSTA1bits.TX9 = 0;
  6859  006DAA  9CAC               	bcf	4012,6,c	;volatile
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;Main.c: 623: TXSTA1bits.TXEN = 1;
  6863  006DAC  8AAC               	bsf	4012,5,c	;volatile
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;Main.c: 625: RC1IE = 0;
  6867  006DAE  9A9D               	bcf	3997,5,c	;volatile
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;Main.c: 626: RCSTA1bits.RC9 = 0;
  6871  006DB0  9CAB               	bcf	4011,6,c	;volatile
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;Main.c: 627: RCSTA1bits.CREN = 1;
  6875  006DB2  88AB               	bsf	4011,4,c	;volatile
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;Main.c: 629: IPEN = 1;
  6879  006DB4  8ED0               	bsf	4048,7,c	;volatile
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;Main.c: 630: PEIE = 1;
  6883  006DB6  8CF2               	bsf	intcon,6,c	;volatile
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;Main.c: 631: GIEL = 1;
  6887  006DB8  8CF2               	bsf	intcon,6,c	;volatile
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;Main.c: 632: (INTCONbits.GIE = 1);
  6891  006DBA  8EF2               	bsf	intcon,7,c	;volatile
  6892                           
  6893                           ; BSR set to: 0
  6894  006DBC  0C89               	retlw	137
  6895  006DBE                     __end_of_SetupHardware:
  6896                           	opt stack 0
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           prodh	equ	0xFF4
  6902                           prodl	equ	0xFF3
  6903                           intcon	equ	0xFF2
  6904                           intcon2	equ	0xFF1
  6905                           postinc0	equ	0xFEE
  6906                           wreg	equ	0xFE8
  6907                           postinc1	equ	0xFE6
  6908                           postdec1	equ	0xFE5
  6909                           fsr1h	equ	0xFE2
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           fsr2h	equ	0xFDA
  6915                           fsr2l	equ	0xFD9
  6916                           status	equ	0xFD8
  6917                           
  6918 ;; *************** function _DisplayMenu *****************
  6919 ;; Defined at:
  6920 ;;		line 178 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  Menu            2   47[BANK0 ] PTR PTR const unsigned c
  6923 ;;		 -> main@CommandMenu(14), 
  6924 ;;  ItemCount       1   49[BANK0 ] unsigned char 
  6925 ;;  Initial         1   50[BANK0 ] unsigned char 
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;  SelectedItem    1   56[BANK0 ] char 
  6928 ;;  SecondLine      1   55[BANK0 ] unsigned char 
  6929 ;;  ret             1   54[BANK0 ] char 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      char 
  6932 ;; Registers used:
  6933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  6934 ;; Tracked objects:
  6935 ;;		On entry : F/0
  6936 ;;		On exit  : F/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;Total ram usage:       10 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    8
  6946 ;; This function calls:
  6947 ;;		_LCD_DisplayOnOff
  6948 ;;		_LCD_ClearDisplay
  6949 ;;		_LCD_SetPosition
  6950 ;;		_LCD_PrintString
  6951 ;;		_LCD_PrintChar
  6952 ;;		_GetInput
  6953 ;; This function is called by:
  6954 ;;		_main
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text7
  6959  005CEE                     __ptext7:
  6960                           	opt stack 0
  6961  005CEE                     _DisplayMenu:
  6962                           	opt stack 22
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;UserInterface.c: 179: char SecondLine = 0;
  6966                           
  6967                           ; BSR set to: 0
  6968  005CEE  6B97               	clrf	DisplayMenu@SecondLine& (0+255),b
  6969                           
  6970                           ;UserInterface.c: 180: signed char SelectedItem = 0;
  6971  005CF0  6B98               	clrf	DisplayMenu@SelectedItem& (0+255),b
  6972                           
  6973                           ;UserInterface.c: 183: SelectedItem = Initial;
  6974  005CF2  C092  F098         	movff	DisplayMenu@Initial,DisplayMenu@SelectedItem
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;UserInterface.c: 184: LCD_DisplayOnOff(1, 0, 1);
  6978  005CF6  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
  6979  005CF8  0E01               	movlw	1
  6980  005CFA  6F76               	movwf	(?_LCD_DisplayOnOff+1)& (0+255),b
  6981  005CFC  EC7D  F037         	call	_LCD_DisplayOnOff
  6982  005D00                     l18477:
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;UserInterface.c: 187: LCD_ClearDisplay();
  6986  005D00  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;UserInterface.c: 188: if (SecondLine) {
  6990  005D04  5197               	movf	DisplayMenu@SecondLine& (0+255),w,b
  6991  005D06  E02D               	bz	l18497
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;UserInterface.c: 189: LCD_SetPosition(0, 1);
  6995  005D08  0E01               	movlw	1
  6996  005D0A  6F75               	movwf	?_LCD_SetPosition& (0+255),b
  6997  005D0C  0E00               	movlw	0
  6998  005D0E  ECDF  F036         	call	_LCD_SetPosition
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;UserInterface.c: 190: if (SelectedItem == 0) LCD_PrintString(Menu[ItemCount]);
  7002  005D12  6798               	tstfsz	DisplayMenu@SelectedItem& (0+255),b
  7003  005D14  D00F               	goto	l18487
  7004                           
  7005                           ; BSR set to: 0
  7006  005D16  5191               	movf	DisplayMenu@ItemCount& (0+255),w,b
  7007  005D18  0D02               	mullw	2
  7008  005D1A  50F3               	movf	prodl,w,c
  7009  005D1C  258F               	addwf	DisplayMenu@Menu& (0+255),w,b
  7010  005D1E  6ED9               	movwf	fsr2l,c
  7011  005D20  0E00               	movlw	0
  7012  005D22  2190               	addwfc	(DisplayMenu@Menu+1)& (0+255),w,b
  7013  005D24  6EDA               	movwf	fsr2h,c
  7014  005D26  CFDE F076          	movff	postinc2,?_LCD_PrintString
  7015  005D2A  CFDD F077          	movff	postdec2,?_LCD_PrintString+1
  7016  005D2E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7017  005D32  D008               	goto	l18489
  7018  005D34                     l18487:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;UserInterface.c: 191: else LCD_PrintString(Menu[SelectedItem - 1]);
  7022  005D34  5198               	movf	DisplayMenu@SelectedItem& (0+255),w,b
  7023  005D36  0D02               	mullw	2
  7024  005D38  CFF3 F093          	movff	prodl,??_DisplayMenu
  7025  005D3C  0EFE               	movlw	-2
  7026  005D3E  D873               	call	PL30	;call to abstracted procedure
  7027  005D40  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7028  005D44                     l18489:
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;UserInterface.c: 192: LCD_SetPosition(1, 0);
  7032  005D44  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  7033  005D46  0E01               	movlw	1
  7034  005D48  ECDF  F036         	call	_LCD_SetPosition
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;UserInterface.c: 193: LCD_PrintChar('*');
  7038  005D4C  0E2A               	movlw	42
  7039  005D4E  EC6A  F035         	call	_LCD_PrintChar
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;UserInterface.c: 194: LCD_PrintString(Menu[SelectedItem]);
  7043  005D52  D856               	call	PL24	;call to abstracted procedure
  7044  005D54  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;UserInterface.c: 195: LCD_SetPosition(1, 0);
  7048  005D58  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  7049  005D5A  0E01               	movlw	1
  7050  005D5C  ECDF  F036         	call	_LCD_SetPosition
  7051                           
  7052                           ;UserInterface.c: 196: } else {
  7053  005D60  D023               	goto	l18511
  7054  005D62                     l18497:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;UserInterface.c: 197: LCD_PrintChar('*');
  7058  005D62  0E2A               	movlw	42
  7059  005D64  EC6A  F035         	call	_LCD_PrintChar
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;UserInterface.c: 198: LCD_PrintString(Menu[SelectedItem]);
  7063  005D68  D84B               	call	PL24	;call to abstracted procedure
  7064  005D6A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;UserInterface.c: 199: LCD_SetPosition(1, 1);
  7068  005D6E  0E01               	movlw	1
  7069  005D70  6F75               	movwf	?_LCD_SetPosition& (0+255),b
  7070  005D72  ECDF  F036         	call	_LCD_SetPosition
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;UserInterface.c: 200: if (SelectedItem == ItemCount) LCD_PrintString(Menu[0]);
  7074  005D76  D869               	call	PL56	;call to abstracted procedure
  7075  005D78  E10B               	bnz	l18507
  7076                           
  7077                           ; BSR set to: 0
  7078  005D7A  C08F  FFD9         	movff	DisplayMenu@Menu,fsr2l
  7079  005D7E  C090  FFDA         	movff	DisplayMenu@Menu+1,fsr2h
  7080  005D82  CFDE F076          	movff	postinc2,?_LCD_PrintString
  7081  005D86  CFDD F077          	movff	postdec2,?_LCD_PrintString+1
  7082  005D8A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7083  005D8E  D008               	goto	l18509
  7084  005D90                     l18507:
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;UserInterface.c: 201: else LCD_PrintString(Menu[SelectedItem + 1]);
  7088  005D90  5198               	movf	DisplayMenu@SelectedItem& (0+255),w,b
  7089  005D92  0D02               	mullw	2
  7090  005D94  CFF3 F093          	movff	prodl,??_DisplayMenu
  7091  005D98  0E02               	movlw	2
  7092  005D9A  D845               	call	PL30	;call to abstracted procedure
  7093  005D9C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7094  005DA0                     l18509:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;UserInterface.c: 202: LCD_SetPosition(0, 0);
  7098  005DA0  0E00               	movlw	0
  7099  005DA2  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  7100  005DA4  ECDF  F036         	call	_LCD_SetPosition
  7101  005DA8                     l18511:
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;UserInterface.c: 203: }
  7105                           ;UserInterface.c: 205: ret = GetInput();
  7106  005DA8  EC39  F03B         	call	_GetInput	;wreg free
  7107  005DAC  6F96               	movwf	DisplayMenu@ret& (0+255),b
  7108                           
  7109                           ;UserInterface.c: 207: switch (ret) {
  7110  005DAE  D015               	goto	l18529
  7111  005DB0                     l2132:
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;UserInterface.c: 211: SelectedItem = -1;
  7115  005DB0  6998               	setf	DisplayMenu@SelectedItem& (0+255),b
  7116                           
  7117                           ;UserInterface.c: 212: goto exit;
  7118  005DB2  D01F               	goto	l18531
  7119  005DB4                     l18513:
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;UserInterface.c: 214: SelectedItem = -2;
  7123  005DB4  0EFE               	movlw	254
  7124  005DB6  6F98               	movwf	DisplayMenu@SelectedItem& (0+255),b
  7125                           
  7126                           ;UserInterface.c: 215: goto exit;
  7127  005DB8  D01C               	goto	l18531
  7128  005DBA                     l18515:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;UserInterface.c: 217: SecondLine = 1;
  7132  005DBA  0E01               	movlw	1
  7133  005DBC  6F97               	movwf	DisplayMenu@SecondLine& (0+255),b
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;UserInterface.c: 218: if (SelectedItem == ItemCount) SelectedItem = ItemCount;
  7137  005DBE  D845               	call	PL56	;call to abstracted procedure
  7138  005DC0  E103               	bnz	l18521
  7139                           
  7140                           ; BSR set to: 0
  7141  005DC2  C091  F098         	movff	DisplayMenu@ItemCount,DisplayMenu@SelectedItem
  7142  005DC6  D79C               	goto	l18477
  7143  005DC8                     l18521:
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;UserInterface.c: 219: else SelectedItem++;
  7147  005DC8  2B98               	incf	DisplayMenu@SelectedItem& (0+255),f,b
  7148  005DCA  D79A               	goto	l18477
  7149  005DCC                     l2138:
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;UserInterface.c: 222: SecondLine = 0;
  7153  005DCC  6B97               	clrf	DisplayMenu@SecondLine& (0+255),b
  7154                           
  7155                           ;UserInterface.c: 223: if (SelectedItem == 0) SelectedItem = 0;
  7156  005DCE  6798               	tstfsz	DisplayMenu@SelectedItem& (0+255),b
  7157  005DD0  D002               	goto	l18525
  7158                           
  7159                           ; BSR set to: 0
  7160  005DD2  6B98               	clrf	DisplayMenu@SelectedItem& (0+255),b
  7161  005DD4  D795               	goto	l18477
  7162  005DD6                     l18525:
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;UserInterface.c: 224: else SelectedItem--;
  7166  005DD6  0798               	decf	DisplayMenu@SelectedItem& (0+255),f,b
  7167  005DD8  D793               	goto	l18477
  7168  005DDA                     l18529:
  7169                           
  7170                           ; BSR set to: 0
  7171  005DDA  5196               	movf	DisplayMenu@ret& (0+255),w,b
  7172                           
  7173                           ; Switch size 1, requested type "space"
  7174                           ; Number of cases is 5, Range of values is 1 to 5
  7175                           ; switch strategies available:
  7176                           ; Name         Instructions Cycles
  7177                           ; simple_byte           16     9 (average)
  7178                           ;	Chosen strategy is simple_byte
  7179  005DDC  0A01               	xorlw	1	; case 1
  7180  005DDE  E009               	bz	l18531
  7181  005DE0  0A03               	xorlw	3	; case 2
  7182  005DE2  E0E6               	bz	l2132
  7183  005DE4  0A01               	xorlw	1	; case 3
  7184  005DE6  E0E6               	bz	l18513
  7185  005DE8  0A07               	xorlw	7	; case 4
  7186  005DEA  E0E7               	bz	l18515
  7187  005DEC  0A01               	xorlw	1	; case 5
  7188  005DEE  E0EE               	bz	l2138
  7189  005DF0  D787               	goto	l18477
  7190  005DF2                     l18531:
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;UserInterface.c: 229: LCD_DisplayOnOff(1, 0, 0);
  7194  005DF2  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
  7195  005DF4  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
  7196  005DF6  0E01               	movlw	1
  7197  005DF8  EC7D  F037         	call	_LCD_DisplayOnOff
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;UserInterface.c: 230: return (SelectedItem);
  7201  005DFC  5198               	movf	DisplayMenu@SelectedItem& (0+255),w,b
  7202                           
  7203                           ; BSR set to: 0
  7204  005DFE  0012               	return	
  7205  005E00                     __end_of_DisplayMenu:
  7206                           	opt stack 0
  7207  005E00                     PL24:
  7208  005E00  5198               	movf	DisplayMenu@SelectedItem& (0+255),w,b
  7209  005E02  0D02               	mullw	2
  7210  005E04  50F3               	movf	prodl,w,c
  7211  005E06  258F               	addwf	DisplayMenu@Menu& (0+255),w,b
  7212  005E08  6F93               	movwf	??_DisplayMenu& (0+255),b
  7213  005E0A  6AE8               	clrf	wreg,c
  7214  005E0C  BEF3               	btfsc	prodl,7,c
  7215  005E0E  68E8               	setf	wreg,c
  7216  005E10  2190               	addwfc	(DisplayMenu@Menu+1)& (0+255),w,b
  7217  005E12  6F94               	movwf	(??_DisplayMenu+1)& (0+255),b
  7218  005E14  C093  FFD9         	movff	??_DisplayMenu,fsr2l
  7219  005E18  C094  FFDA         	movff	??_DisplayMenu+1,fsr2h
  7220  005E1C  CFDE F076          	movff	postinc2,?_LCD_PrintString
  7221  005E20  CFDD F077          	movff	postdec2,?_LCD_PrintString+1
  7222  005E24  0012               	return	
  7223  005E26                     PL30:
  7224  005E26  2793               	addwf	??_DisplayMenu& (0+255),f,b
  7225  005E28  5193               	movf	??_DisplayMenu& (0+255),w,b
  7226  005E2A  258F               	addwf	DisplayMenu@Menu& (0+255),w,b
  7227  005E2C  6F94               	movwf	(??_DisplayMenu+1)& (0+255),b
  7228  005E2E  6AE8               	clrf	wreg,c
  7229  005E30  BF93               	btfsc	??_DisplayMenu& (0+255),7,b
  7230  005E32  68E8               	setf	wreg,c
  7231  005E34  2190               	addwfc	(DisplayMenu@Menu+1)& (0+255),w,b
  7232  005E36  6F95               	movwf	(??_DisplayMenu+2)& (0+255),b
  7233  005E38  C094  FFD9         	movff	??_DisplayMenu+1,fsr2l
  7234  005E3C  C095  FFDA         	movff	??_DisplayMenu+2,fsr2h
  7235  005E40  CFDE F076          	movff	postinc2,?_LCD_PrintString
  7236  005E44  CFDD F077          	movff	postdec2,?_LCD_PrintString+1
  7237  005E48  0012               	return	
  7238  005E4A                     PL56:
  7239  005E4A  5191               	movf	DisplayMenu@ItemCount& (0+255),w,b
  7240  005E4C  C098  F093         	movff	DisplayMenu@SelectedItem,??_DisplayMenu
  7241  005E50  6B94               	clrf	(??_DisplayMenu+1)& (0+255),b
  7242  005E52  BF93               	btfsc	??_DisplayMenu& (0+255),7,b
  7243  005E54  0794               	decf	(??_DisplayMenu+1)& (0+255),f,b
  7244  005E56  1993               	xorwf	??_DisplayMenu& (0+255),w,b
  7245  005E58  1194               	iorwf	(??_DisplayMenu+1)& (0+255),w,b
  7246  005E5A  0012               	return	
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           postinc0	equ	0xFEE
  7256                           wreg	equ	0xFE8
  7257                           postinc1	equ	0xFE6
  7258                           postdec1	equ	0xFE5
  7259                           fsr1h	equ	0xFE2
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           postinc2	equ	0xFDE
  7263                           postdec2	equ	0xFDD
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _CreateOrbitProgram *****************
  7269 ;; Defined at:
  7270 ;;		line 10 in file "Z:\CineFlux\Dropbox\Orbit\OrbitProgram.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;  SpeedModeMen    6  184[BANK1 ] PTR const unsigned char 
  7275 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  7276 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  7277 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  7278 ;;		 -> STR_13(19), STR_12(11), 
  7279 ;;  EndModeMenu     6  170[BANK1 ] PTR const unsigned char 
  7280 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  7281 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  7282 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  7283 ;;		 -> STR_13(19), STR_12(11), 
  7284 ;;  CommandMenu     4  180[BANK1 ] PTR const unsigned char 
  7285 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  7286 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  7287 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  7288 ;;		 -> STR_13(19), STR_12(11), 
  7289 ;;  DirectionMen    4  176[BANK1 ] PTR const unsigned char 
  7290 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  7291 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  7292 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  7293 ;;		 -> STR_13(19), STR_12(11), 
  7294 ;;  COMMAND_1       2  168[BANK1 ] PTR const unsigned char 
  7295 ;;		 -> STR_21(13), 
  7296 ;;  COMMAND_0       2  166[BANK1 ] PTR const unsigned char 
  7297 ;;		 -> STR_20(13), 
  7298 ;;  ENDMODE_2       2  164[BANK1 ] PTR const unsigned char 
  7299 ;;		 -> STR_19(14), 
  7300 ;;  ENDMODE_1       2  162[BANK1 ] PTR const unsigned char 
  7301 ;;		 -> STR_18(15), 
  7302 ;;  ENDMODE_0       2  160[BANK1 ] PTR const unsigned char 
  7303 ;;		 -> STR_17(16), 
  7304 ;;  SpeedMODE_2     2  158[BANK1 ] PTR const unsigned char 
  7305 ;;		 -> STR_16(16), 
  7306 ;;  SpeedMODE_1     2  156[BANK1 ] PTR const unsigned char 
  7307 ;;		 -> STR_15(11), 
  7308 ;;  SpeedMODE_0     2  154[BANK1 ] PTR const unsigned char 
  7309 ;;		 -> STR_14(8), 
  7310 ;;  DIRECTION_0     2  152[BANK1 ] PTR const unsigned char 
  7311 ;;		 -> STR_13(19), 
  7312 ;;  DIRECTION_1     2  150[BANK1 ] PTR const unsigned char 
  7313 ;;		 -> STR_12(11), 
  7314 ;;  ret             1  190[BANK1 ] char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      char 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : F/4
  7321 ;;		On exit  : F/1
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:       44 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:   10
  7331 ;; This function calls:
  7332 ;;		_LCD_ClearDisplay
  7333 ;;		_LCD_PrintString
  7334 ;;		_LCD_SetPosition
  7335 ;;		_GetClick
  7336 ;;		_GetCurrentAngle
  7337 ;;		___fttol
  7338 ;;		_DisplayChoices
  7339 ;;		___ftge
  7340 ;;		_GetFloat
  7341 ;;		_GetTime
  7342 ;;		___ftdiv
  7343 ;;		___ftmul
  7344 ;;		_RunOrbitProgram
  7345 ;;		_GetPresetNumber
  7346 ;;		_SavePreset
  7347 ;; This function is called by:
  7348 ;;		_main
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text8
  7353  001DBA                     __ptext8:
  7354                           	opt stack 0
  7355  001DBA                     _CreateOrbitProgram:
  7356                           	opt stack 20
  7357                           
  7358                           ; BSR set to: 4
  7359                           ;OrbitProgram.c: 12: signed char ret;
  7360                           ;OrbitProgram.c: 14: const char *DIRECTION_1 = "CLOCKWISE\0";
  7361                           
  7362                           ; BSR set to: 0
  7363  001DBA  0E1B               	movlw	high (STR_13+8)
  7364  001DBC  0101               	movlb	1	; () banked
  7365  001DBE  6F97               	movwf	(CreateOrbitProgram@DIRECTION_1+1)& (0+255),b
  7366  001DC0  0E19               	movlw	low (STR_13+8)
  7367  001DC2  6F96               	movwf	CreateOrbitProgram@DIRECTION_1& (0+255),b
  7368                           
  7369                           ;OrbitProgram.c: 15: const char *DIRECTION_0 = "COUNTER CLOCKWISE\0";
  7370  001DC4  0E1B               	movlw	high STR_13
  7371  001DC6  6F99               	movwf	(CreateOrbitProgram@DIRECTION_0+1)& (0+255),b
  7372  001DC8  0E11               	movlw	low STR_13
  7373  001DCA  6F98               	movwf	CreateOrbitProgram@DIRECTION_0& (0+255),b
  7374                           
  7375                           ; BSR set to: 1
  7376                           ;OrbitProgram.c: 16: const char*DirectionMenu[2];
  7377                           ;OrbitProgram.c: 17: DirectionMenu[0] = DIRECTION_0;
  7378  001DCC  C198  F1B0         	movff	CreateOrbitProgram@DIRECTION_0,CreateOrbitProgram@DirectionMenu
  7379  001DD0  C199  F1B1         	movff	CreateOrbitProgram@DIRECTION_0+1,CreateOrbitProgram@DirectionMenu+1
  7380                           
  7381                           ; BSR set to: 1
  7382                           ;OrbitProgram.c: 18: DirectionMenu[1] = DIRECTION_1;
  7383  001DD4  C196  F1B2         	movff	CreateOrbitProgram@DIRECTION_1,CreateOrbitProgram@DirectionMenu+2
  7384  001DD8  C197  F1B3         	movff	CreateOrbitProgram@DIRECTION_1+1,CreateOrbitProgram@DirectionMenu+3
  7385                           
  7386                           ;OrbitProgram.c: 20: const char *SpeedMODE_0 = "MANUAL\0";
  7387  001DDC  0E1D               	movlw	high STR_14
  7388  001DDE  6F9B               	movwf	(CreateOrbitProgram@SpeedMODE_0+1)& (0+255),b
  7389  001DE0  0E85               	movlw	low STR_14
  7390  001DE2  6F9A               	movwf	CreateOrbitProgram@SpeedMODE_0& (0+255),b
  7391                           
  7392                           ;OrbitProgram.c: 21: const char *SpeedMODE_1 = "PER ORBIT\0";
  7393  001DE4  0E1B               	movlw	high (STR_32+5)
  7394  001DE6  6F9D               	movwf	(CreateOrbitProgram@SpeedMODE_1+1)& (0+255),b
  7395  001DE8  0EE7               	movlw	low (STR_32+5)
  7396  001DEA  6F9C               	movwf	CreateOrbitProgram@SpeedMODE_1& (0+255),b
  7397                           
  7398                           ;OrbitProgram.c: 22: const char *SpeedMODE_2 = "FOR ALL ORBITS\0";
  7399  001DEC  0E1A               	movlw	high (STR_33+5)
  7400  001DEE  6F9F               	movwf	(CreateOrbitProgram@SpeedMODE_2+1)& (0+255),b
  7401  001DF0  0E3E               	movlw	low (STR_33+5)
  7402  001DF2  6F9E               	movwf	CreateOrbitProgram@SpeedMODE_2& (0+255),b
  7403                           
  7404                           ; BSR set to: 1
  7405                           ;OrbitProgram.c: 23: const char*SpeedModeMenu[3];
  7406                           ;OrbitProgram.c: 24: SpeedModeMenu[0] = SpeedMODE_0;
  7407  001DF4  C19A  F1B8         	movff	CreateOrbitProgram@SpeedMODE_0,CreateOrbitProgram@SpeedModeMenu
  7408  001DF8  C19B  F1B9         	movff	CreateOrbitProgram@SpeedMODE_0+1,CreateOrbitProgram@SpeedModeMenu+1
  7409                           
  7410                           ; BSR set to: 1
  7411                           ;OrbitProgram.c: 25: SpeedModeMenu[1] = SpeedMODE_1;
  7412  001DFC  C19C  F1BA         	movff	CreateOrbitProgram@SpeedMODE_1,CreateOrbitProgram@SpeedModeMenu+2
  7413  001E00  C19D  F1BB         	movff	CreateOrbitProgram@SpeedMODE_1+1,CreateOrbitProgram@SpeedModeMenu+3
  7414                           
  7415                           ; BSR set to: 1
  7416                           ;OrbitProgram.c: 26: SpeedModeMenu[2] = SpeedMODE_2;
  7417  001E04  C19E  F1BC         	movff	CreateOrbitProgram@SpeedMODE_2,CreateOrbitProgram@SpeedModeMenu+4
  7418  001E08  C19F  F1BD         	movff	CreateOrbitProgram@SpeedMODE_2+1,CreateOrbitProgram@SpeedModeMenu+5
  7419                           
  7420                           ;OrbitProgram.c: 28: const char *ENDMODE_0 = "BY ORBIT COUNT\0";
  7421  001E0C  0E1B               	movlw	high STR_17
  7422  001E0E  6FA1               	movwf	(CreateOrbitProgram@ENDMODE_0+1)& (0+255),b
  7423  001E10  0EF2               	movlw	low STR_17
  7424  001E12  6FA0               	movwf	CreateOrbitProgram@ENDMODE_0& (0+255),b
  7425                           
  7426                           ;OrbitProgram.c: 29: const char *ENDMODE_1 = "BY TOTAL TIME\0";
  7427  001E14  0E1C               	movlw	high STR_18
  7428  001E16  6FA3               	movwf	(CreateOrbitProgram@ENDMODE_1+1)& (0+255),b
  7429  001E18  0E02               	movlw	low STR_18
  7430  001E1A  6FA2               	movwf	CreateOrbitProgram@ENDMODE_1& (0+255),b
  7431                           
  7432                           ;OrbitProgram.c: 30: const char *ENDMODE_2 = "NEVER ENDING\0";
  7433  001E1C  0E1C               	movlw	high STR_19
  7434  001E1E  6FA5               	movwf	(CreateOrbitProgram@ENDMODE_2+1)& (0+255),b
  7435  001E20  0E85               	movlw	low STR_19
  7436  001E22  6FA4               	movwf	CreateOrbitProgram@ENDMODE_2& (0+255),b
  7437                           
  7438                           ; BSR set to: 1
  7439                           ;OrbitProgram.c: 31: const char*EndModeMenu[3];
  7440                           ;OrbitProgram.c: 32: EndModeMenu[0] = ENDMODE_0;
  7441  001E24  C1A0  F1AA         	movff	CreateOrbitProgram@ENDMODE_0,CreateOrbitProgram@EndModeMenu
  7442  001E28  C1A1  F1AB         	movff	CreateOrbitProgram@ENDMODE_0+1,CreateOrbitProgram@EndModeMenu+1
  7443                           
  7444                           ; BSR set to: 1
  7445                           ;OrbitProgram.c: 33: EndModeMenu[1] = ENDMODE_1;
  7446  001E2C  C1A2  F1AC         	movff	CreateOrbitProgram@ENDMODE_1,CreateOrbitProgram@EndModeMenu+2
  7447  001E30  C1A3  F1AD         	movff	CreateOrbitProgram@ENDMODE_1+1,CreateOrbitProgram@EndModeMenu+3
  7448                           
  7449                           ; BSR set to: 1
  7450                           ;OrbitProgram.c: 34: EndModeMenu[2] = ENDMODE_2;
  7451  001E34  C1A4  F1AE         	movff	CreateOrbitProgram@ENDMODE_2,CreateOrbitProgram@EndModeMenu+4
  7452  001E38  C1A5  F1AF         	movff	CreateOrbitProgram@ENDMODE_2+1,CreateOrbitProgram@EndModeMenu+5
  7453                           
  7454                           ;OrbitProgram.c: 36: const char *COMMAND_0 = "RUN PROGRAM\0";
  7455  001E3C  0E1C               	movlw	high STR_20
  7456  001E3E  6FA7               	movwf	(CreateOrbitProgram@COMMAND_0+1)& (0+255),b
  7457  001E40  0EC8               	movlw	low STR_20
  7458  001E42  6FA6               	movwf	CreateOrbitProgram@COMMAND_0& (0+255),b
  7459                           
  7460                           ;OrbitProgram.c: 37: const char *COMMAND_1 = "SAVE PRESET\0";
  7461  001E44  0E1C               	movlw	high STR_21
  7462  001E46  6FA9               	movwf	(CreateOrbitProgram@COMMAND_1+1)& (0+255),b
  7463  001E48  0EE2               	movlw	low STR_21
  7464  001E4A  6FA8               	movwf	CreateOrbitProgram@COMMAND_1& (0+255),b
  7465                           
  7466                           ; BSR set to: 1
  7467                           ;OrbitProgram.c: 38: const char*CommandMenu[2];
  7468                           ;OrbitProgram.c: 39: CommandMenu[0] = COMMAND_0;
  7469  001E4C  C1A6  F1B4         	movff	CreateOrbitProgram@COMMAND_0,CreateOrbitProgram@CommandMenu
  7470  001E50  C1A7  F1B5         	movff	CreateOrbitProgram@COMMAND_0+1,CreateOrbitProgram@CommandMenu+1
  7471                           
  7472                           ; BSR set to: 1
  7473                           ;OrbitProgram.c: 40: CommandMenu[1] = COMMAND_1;
  7474  001E54  C1A8  F1B6         	movff	CreateOrbitProgram@COMMAND_1,CreateOrbitProgram@CommandMenu+2
  7475  001E58  C1A9  F1B7         	movff	CreateOrbitProgram@COMMAND_1+1,CreateOrbitProgram@CommandMenu+3
  7476  001E5C                     l18559:
  7477                           
  7478                           ; BSR set to: 1
  7479                           ;OrbitProgram.c: 43: LCD_ClearDisplay();
  7480  001E5C  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;OrbitProgram.c: 44: LCD_PrintString("MOVE TO START...\0");
  7484  001E60  0E1B               	movlw	high STR_22
  7485  001E62  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  7486  001E64  0E5A               	movlw	low STR_22
  7487  001E66  6F76               	movwf	?_LCD_PrintString& (0+255),b
  7488  001E68  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;OrbitProgram.c: 45: LCD_SetPosition(1, 0);
  7492  001E6C  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  7493  001E6E  0E01               	movlw	1
  7494  001E70  ECDF  F036         	call	_LCD_SetPosition
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;OrbitProgram.c: 46: LCD_PrintString("THEN CLICK.\0");
  7498  001E74  0E1C               	movlw	high STR_23
  7499  001E76  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  7500  001E78  0EBB               	movlw	low STR_23
  7501  001E7A  6F76               	movwf	?_LCD_PrintString& (0+255),b
  7502  001E7C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;OrbitProgram.c: 47: bFollowMode = 1;
  7506  001E80  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  7507  001E82  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  7508                           
  7509                           ;OrbitProgram.c: 48: ret = GetClick();
  7510  001E84  ECFC  F03B         	call	_GetClick	;wreg free
  7511  001E88  0101               	movlb	1	; () banked
  7512  001E8A  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7513                           
  7514                           ; BSR set to: 1
  7515                           ;OrbitProgram.c: 49: if (ret < 0) return ret;
  7516  001E8C  AFBE               	btfss	CreateOrbitProgram@ret& (0+255),7,b
  7517  001E8E  D002               	goto	l1319
  7518                           
  7519                           ; BSR set to: 1
  7520  001E90  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7521  001E92  0012               	return	
  7522  001E94                     l1319:
  7523                           
  7524                           ; BSR set to: 1
  7525                           ;OrbitProgram.c: 50: bFollowMode = 0;
  7526  001E94  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  7527  001E96  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  7528                           
  7529                           ;OrbitProgram.c: 51: CurrentOrbitProgram.Origin_deg = (unsigned int) GetCurrentAngle();
  7530  001E98  ECB1  F032         	call	_GetCurrentAngle	;wreg free
  7531  001E9C  C0A4  F0AA         	movff	?_GetCurrentAngle,?___fttol
  7532  001EA0  C0A5  F0AB         	movff	?_GetCurrentAngle+1,?___fttol+1
  7533  001EA4  C0A6  F0AC         	movff	?_GetCurrentAngle+2,?___fttol+2
  7534  001EA8  EC3B  F034         	call	___fttol	;wreg free
  7535  001EAC  C0AA  F48E         	movff	?___fttol,_CurrentOrbitProgram+1
  7536  001EB0  C0AB  F48F         	movff	?___fttol+1,_CurrentOrbitProgram+2
  7537  001EB4                     l18579:
  7538                           
  7539                           ;OrbitProgram.c: 54: ret = DisplayChoices(DirectionMenu, 1, "ROTATION DIRECTION:\0", Cur
      +                          rentOrbitProgram.IsClockWise);
  7540  001EB4  0E01               	movlw	high CreateOrbitProgram@DirectionMenu
  7541  001EB6  0100               	movlb	0	; () banked
  7542  001EB8  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
  7543  001EBA  0EB0               	movlw	low CreateOrbitProgram@DirectionMenu
  7544  001EBC  6F8F               	movwf	?_DisplayChoices& (0+255),b
  7545  001EBE  0E01               	movlw	1
  7546  001EC0  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
  7547  001EC2  0E1A               	movlw	high STR_24
  7548  001EC4  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
  7549  001EC6  0E0F               	movlw	low STR_24
  7550  001EC8  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
  7551  001ECA  C491  F094         	movff	_CurrentOrbitProgram+4,?_DisplayChoices+5
  7552  001ECE  EC28  F035         	call	_DisplayChoices	;wreg free
  7553  001ED2  0101               	movlb	1	; () banked
  7554  001ED4  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7555                           
  7556                           ; BSR set to: 1
  7557                           ;OrbitProgram.c: 55: if (ret == -1) goto labelOrigin;
  7558  001ED6  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7559  001ED8  E0C1               	bz	l18559
  7560                           
  7561                           ; BSR set to: 1
  7562                           ;OrbitProgram.c: 56: if (ret == -2) return (-2);
  7563  001EDA  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7564  001EDC  0AFE               	xorlw	254
  7565  001EDE  E101               	bnz	l1323
  7566  001EE0                     l18587:
  7567                           
  7568                           ; BSR set to: 1
  7569  001EE0  0CFE               	retlw	254
  7570  001EE2                     l1323:
  7571                           
  7572                           ; BSR set to: 1
  7573                           ;OrbitProgram.c: 57: CurrentOrbitProgram.IsClockWise = ret;
  7574  001EE2  C1BE  F491         	movff	CreateOrbitProgram@ret,_CurrentOrbitProgram+4
  7575  001EE6                     l18591:
  7576                           
  7577                           ; BSR set to: 1
  7578                           ;OrbitProgram.c: 60: ret = DisplayChoices(EndModeMenu, 2, "PROGRAM END MODE:\0", Current
      +                          OrbitProgram.EndMode);
  7579  001EE6  0E01               	movlw	high CreateOrbitProgram@EndModeMenu
  7580  001EE8  0100               	movlb	0	; () banked
  7581  001EEA  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
  7582  001EEC  0EAA               	movlw	low CreateOrbitProgram@EndModeMenu
  7583  001EEE  6F8F               	movwf	?_DisplayChoices& (0+255),b
  7584  001EF0  0E02               	movlw	2
  7585  001EF2  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
  7586  001EF4  0E1A               	movlw	high STR_25
  7587  001EF6  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
  7588  001EF8  0EFE               	movlw	low STR_25
  7589  001EFA  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
  7590  001EFC  C490  F094         	movff	_CurrentOrbitProgram+3,?_DisplayChoices+5
  7591  001F00  EC28  F035         	call	_DisplayChoices	;wreg free
  7592  001F04  0101               	movlb	1	; () banked
  7593  001F06  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7594                           
  7595                           ; BSR set to: 1
  7596                           ;OrbitProgram.c: 61: if (ret == -1) goto labelDirection;
  7597  001F08  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7598  001F0A  E0D4               	bz	l18579
  7599                           
  7600                           ; BSR set to: 1
  7601                           ;OrbitProgram.c: 62: if (ret == -2) return (-2);
  7602  001F0C  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7603  001F0E  0AFE               	xorlw	254
  7604  001F10  E0E7               	bz	l18587
  7605                           
  7606                           ; BSR set to: 1
  7607                           ;OrbitProgram.c: 63: CurrentOrbitProgram.EndMode = ret;
  7608  001F12  C1BE  F490         	movff	CreateOrbitProgram@ret,_CurrentOrbitProgram+3
  7609                           
  7610                           ;OrbitProgram.c: 64: switch (CurrentOrbitProgram.EndMode) {
  7611  001F16  D1CE               	goto	l18811
  7612  001F18                     l18603:
  7613                           
  7614                           ;OrbitProgram.c: 67: if (CurrentOrbitProgram.CycleCount_rev < 1) CurrentOrbitProgram.Cyc
      +                          leCount_rev = 1;
  7615  001F18  C495  F088         	movff	_CurrentOrbitProgram+8,?___ftge
  7616  001F1C  C496  F089         	movff	_CurrentOrbitProgram+9,?___ftge+1
  7617  001F20  C497  F08A         	movff	_CurrentOrbitProgram+10,?___ftge+2
  7618  001F24  0100               	movlb	0	; () banked
  7619  001F26  6B8B               	clrf	(?___ftge+3)& (0+255),b
  7620  001F28  0E80               	movlw	128
  7621  001F2A  6F8C               	movwf	(?___ftge+4)& (0+255),b
  7622  001F2C  0E3F               	movlw	63
  7623  001F2E  6F8D               	movwf	(?___ftge+5)& (0+255),b
  7624  001F30  ECB1  F037         	call	___ftge	;wreg free
  7625  001F34  E206               	bc	l18607
  7626                           
  7627                           ; BSR set to: 0
  7628  001F36  0104               	movlb	4	; () banked
  7629  001F38  6B95               	clrf	(_CurrentOrbitProgram+8)& (0+255),b
  7630  001F3A  0E80               	movlw	128
  7631  001F3C  6F96               	movwf	(_CurrentOrbitProgram+9)& (0+255),b
  7632  001F3E  0E3F               	movlw	63
  7633  001F40  6F97               	movwf	(_CurrentOrbitProgram+10)& (0+255),b
  7634  001F42                     l18607:
  7635                           
  7636                           ;OrbitProgram.c: 68: if (CurrentOrbitProgram.CycleCount_rev > 999) CurrentOrbitProgram.C
      +                          ycleCount_rev = 999;
  7637  001F42  0EC0               	movlw	192
  7638  001F44  0100               	movlb	0	; () banked
  7639  001F46  6F88               	movwf	?___ftge& (0+255),b
  7640  001F48  0E79               	movlw	121
  7641  001F4A  6F89               	movwf	(?___ftge+1)& (0+255),b
  7642  001F4C  0E44               	movlw	68
  7643  001F4E  6F8A               	movwf	(?___ftge+2)& (0+255),b
  7644  001F50  C495  F08B         	movff	_CurrentOrbitProgram+8,?___ftge+3
  7645  001F54  C496  F08C         	movff	_CurrentOrbitProgram+9,?___ftge+4
  7646  001F58  C497  F08D         	movff	_CurrentOrbitProgram+10,?___ftge+5
  7647  001F5C  ECB1  F037         	call	___ftge	;wreg free
  7648  001F60  E207               	bc	l18611
  7649                           
  7650                           ; BSR set to: 0
  7651  001F62  0EC0               	movlw	192
  7652  001F64  0104               	movlb	4	; () banked
  7653  001F66  6F95               	movwf	(_CurrentOrbitProgram+8)& (0+255),b
  7654  001F68  0E79               	movlw	121
  7655  001F6A  6F96               	movwf	(_CurrentOrbitProgram+9)& (0+255),b
  7656  001F6C  0E44               	movlw	68
  7657  001F6E  6F97               	movwf	(_CurrentOrbitProgram+10)& (0+255),b
  7658  001F70                     l18611:
  7659                           
  7660                           ;OrbitProgram.c: 70: ret = GetFloat("ORBIT LIMIT:\0", "", &CurrentOrbitProgram.CycleCoun
      +                          t_rev, 1, 999, 1.0);
  7661  001F70  0E1C               	movlw	high STR_26
  7662  001F72  0100               	movlb	0	; () banked
  7663  001F74  6FC8               	movwf	(?_GetFloat+1)& (0+255),b
  7664  001F76  0E77               	movlw	low STR_26
  7665  001F78  6FC7               	movwf	?_GetFloat& (0+255),b
  7666  001F7A  0E1A               	movlw	high (STR_58+20)
  7667  001F7C  6FCA               	movwf	(?_GetFloat+3)& (0+255),b
  7668  001F7E  0E0E               	movlw	low (STR_58+20)
  7669  001F80  6FC9               	movwf	(?_GetFloat+2)& (0+255),b
  7670  001F82  0E04               	movlw	high (_CurrentOrbitProgram+8)
  7671  001F84  6FCC               	movwf	(?_GetFloat+5)& (0+255),b
  7672  001F86  0E95               	movlw	low (_CurrentOrbitProgram+8)
  7673  001F88  6FCB               	movwf	(?_GetFloat+4)& (0+255),b
  7674  001F8A  6BCD               	clrf	(?_GetFloat+6)& (0+255),b
  7675  001F8C  0E80               	movlw	128
  7676  001F8E  6FCE               	movwf	(?_GetFloat+7)& (0+255),b
  7677  001F90  0E3F               	movlw	63
  7678  001F92  6FCF               	movwf	(?_GetFloat+8)& (0+255),b
  7679  001F94  0EC0               	movlw	192
  7680  001F96  6FD0               	movwf	(?_GetFloat+9)& (0+255),b
  7681  001F98  0E79               	movlw	121
  7682  001F9A  6FD1               	movwf	(?_GetFloat+10)& (0+255),b
  7683  001F9C  0E44               	movlw	68
  7684  001F9E  6FD2               	movwf	(?_GetFloat+11)& (0+255),b
  7685  001FA0  6BD3               	clrf	(?_GetFloat+12)& (0+255),b
  7686  001FA2  0E80               	movlw	128
  7687  001FA4  6FD4               	movwf	(?_GetFloat+13)& (0+255),b
  7688  001FA6  0E3F               	movlw	63
  7689  001FA8  6FD5               	movwf	(?_GetFloat+14)& (0+255),b
  7690  001FAA  EC53  F020         	call	_GetFloat	;wreg free
  7691  001FAE  0101               	movlb	1	; () banked
  7692  001FB0  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7693                           
  7694                           ; BSR set to: 1
  7695                           ;OrbitProgram.c: 71: if (ret == -1) goto labelEndMode;
  7696  001FB2  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7697  001FB4  E098               	bz	l18591
  7698                           
  7699                           ; BSR set to: 1
  7700                           ;OrbitProgram.c: 72: if (ret == -2) return (-2);
  7701  001FB6  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7702  001FB8  0AFE               	xorlw	254
  7703  001FBA  E092               	bz	l18587
  7704  001FBC                     l18623:
  7705                           
  7706                           ; BSR set to: 1
  7707                           ;OrbitProgram.c: 75: if (CurrentOrbitProgram.CycleCount_rev > 1) ret = DisplayChoices(Sp
      +                          eedModeMenu, 2, "ORBIT SPEED:\0", CurrentOrbitProgram.SpeedMode);
  7708  001FBC  0100               	movlb	0	; () banked
  7709  001FBE  6B88               	clrf	?___ftge& (0+255),b
  7710  001FC0  0E80               	movlw	128
  7711  001FC2  6F89               	movwf	(?___ftge+1)& (0+255),b
  7712  001FC4  0E3F               	movlw	63
  7713  001FC6  6F8A               	movwf	(?___ftge+2)& (0+255),b
  7714  001FC8  C495  F08B         	movff	_CurrentOrbitProgram+8,?___ftge+3
  7715  001FCC  C496  F08C         	movff	_CurrentOrbitProgram+9,?___ftge+4
  7716  001FD0  C497  F08D         	movff	_CurrentOrbitProgram+10,?___ftge+5
  7717  001FD4  ECB1  F037         	call	___ftge	;wreg free
  7718  001FD8  E210               	bc	l18627
  7719                           
  7720                           ; BSR set to: 0
  7721  001FDA  0E01               	movlw	high CreateOrbitProgram@SpeedModeMenu
  7722  001FDC  0100               	movlb	0	; () banked
  7723  001FDE  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
  7724  001FE0  0EB8               	movlw	low CreateOrbitProgram@SpeedModeMenu
  7725  001FE2  6F8F               	movwf	?_DisplayChoices& (0+255),b
  7726  001FE4  0E02               	movlw	2
  7727  001FE6  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
  7728  001FE8  0E1C               	movlw	high STR_28
  7729  001FEA  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
  7730  001FEC  0E69               	movlw	low STR_28
  7731  001FEE  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
  7732  001FF0  C49E  F094         	movff	_CurrentOrbitProgram+17,?_DisplayChoices+5
  7733  001FF4  EC28  F035         	call	_DisplayChoices	;wreg free
  7734  001FF8  D003               	goto	L5
  7735  001FFA                     l18627:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;OrbitProgram.c: 76: else ret = DisplayChoices(SpeedModeMenu, 1, "ORBIT SPEED:\0", Curre
      +                          ntOrbitProgram.SpeedMode);
  7739  001FFA  D9E1               	call	PL15	;call to abstracted procedure
  7740  001FFC  EC28  F035         	call	_DisplayChoices	;wreg free
  7741  002000                     L5:
  7742  002000  0101               	movlb	1	; () banked
  7743  002002  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7744                           
  7745                           ; BSR set to: 1
  7746                           ;OrbitProgram.c: 77: if (ret == -1) goto labelCycleCount;
  7747  002004  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7748  002006  E088               	bz	l18603
  7749                           
  7750                           ; BSR set to: 1
  7751                           ;OrbitProgram.c: 78: if (ret == -2) return (-2);
  7752  002008  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7753  00200A  0AFE               	xorlw	254
  7754  00200C  E101 D768          	bz	l18587
  7755  002010  D090               	goto	l18693
  7756  002012                     l18639:
  7757                           
  7758                           ; BSR set to: 1
  7759                           ;OrbitProgram.c: 82: if (CurrentOrbitProgram.Speed_deg_sec < 0.01) CurrentOrbitProgram.S
      +                          peed_deg_sec = 0.01;
  7760  002012  D9C7               	call	PL14	;call to abstracted procedure
  7761  002014  ECB1  F037         	call	___ftge	;wreg free
  7762  002018  E201               	bc	l18643
  7763                           
  7764                           ; BSR set to: 0
  7765  00201A  D9F9               	call	PL44	;call to abstracted procedure
  7766  00201C                     l18643:
  7767                           
  7768                           ;OrbitProgram.c: 83: ret = GetFloat("SPEED\0", "\xDF/Sec\0", &CurrentOrbitProgram.Speed_
      +                          deg_sec, 0.01, 90, 0.01);
  7769  00201C  D987               	call	PL4	;call to abstracted procedure
  7770  00201E  EC53  F020         	call	_GetFloat	;wreg free
  7771  002022  0101               	movlb	1	; () banked
  7772  002024  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7773                           
  7774                           ; BSR set to: 1
  7775                           ;OrbitProgram.c: 84: if (ret == -1) goto labelSpeedMode;
  7776  002026  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7777  002028  E0C9               	bz	l18623
  7778  00202A                     l18649:
  7779                           
  7780                           ; BSR set to: 1
  7781                           ;OrbitProgram.c: 85: if (ret == -2) return (-2);
  7782  00202A  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7783  00202C  0AFE               	xorlw	254
  7784  00202E  E101 D757          	bz	l18587
  7785  002032  D149               	goto	l18813
  7786  002034                     l18655:
  7787                           
  7788                           ; BSR set to: 1
  7789                           ;OrbitProgram.c: 88: if (CurrentOrbitProgram.CycleTime_sec < 4) CurrentOrbitProgram.Cycl
      +                          eTime_sec = 4;
  7790  002034  D9DF               	call	PL18	;call to abstracted procedure
  7791  002036  ECB1  F037         	call	___ftge	;wreg free
  7792  00203A  E201               	bc	l18659
  7793                           
  7794                           ; BSR set to: 0
  7795  00203C  D9FC               	call	PL53	;call to abstracted procedure
  7796  00203E                     l18659:
  7797                           
  7798                           ;OrbitProgram.c: 89: ret = GetTime("TIME PER ORBIT\0", &CurrentOrbitProgram.CycleTime_se
      +                          c, 4, 86400, 0b1110);
  7799  00203E  0E1B               	movlw	high STR_32
  7800  002040  0100               	movlb	0	; () banked
  7801  002042  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  7802  002044  0EE2               	movlw	low STR_32
  7803  002046  D991               	call	PL12	;call to abstracted procedure
  7804  002048  ECBB  F01A         	call	_GetTime	;wreg free
  7805  00204C  0101               	movlb	1	; () banked
  7806  00204E  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7807                           
  7808                           ; BSR set to: 1
  7809                           ;OrbitProgram.c: 90: if (ret == -1) goto labelSpeedMode;
  7810  002050  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7811  002052  E0B4               	bz	l18623
  7812                           
  7813                           ; BSR set to: 1
  7814                           ;OrbitProgram.c: 91: if (ret == -2) return (-2);
  7815  002054  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7816  002056  0AFE               	xorlw	254
  7817  002058  E101 D742          	bz	l18587
  7818                           
  7819                           ; BSR set to: 1
  7820                           ;OrbitProgram.c: 92: CurrentOrbitProgram.Speed_deg_sec = 360 / CurrentOrbitProgram.Cycle
      +                          Time_sec;
  7821  00205C  D9BE               	call	PL17	;call to abstracted procedure
  7822  00205E  ECD0  F031         	call	___ftdiv	;wreg free
  7823  002062  D11C               	goto	L7
  7824  002064                     l18673:
  7825                           
  7826                           ; BSR set to: 1
  7827                           ;OrbitProgram.c: 95: if (CurrentOrbitProgram.CycleTime_sec < (4 * CurrentOrbitProgram.Cy
      +                          cleCount_rev)) CurrentOrbitProgram.CycleTime_sec = 4 * CurrentOrbitProgram.CycleCount_re
      +                          v;
  7828  002064  C498  F088         	movff	_CurrentOrbitProgram+11,?___ftge
  7829  002068  C499  F089         	movff	_CurrentOrbitProgram+12,?___ftge+1
  7830  00206C  C49A  F08A         	movff	_CurrentOrbitProgram+13,?___ftge+2
  7831  002070  0100               	movlb	0	; () banked
  7832  002072  6B7A               	clrf	(?___ftmul+3)& (0+255),b
  7833  002074  0E80               	movlw	128
  7834  002076  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  7835  002078  0E40               	movlw	64
  7836  00207A  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  7837  00207C  C495  F077         	movff	_CurrentOrbitProgram+8,?___ftmul
  7838  002080  C496  F078         	movff	_CurrentOrbitProgram+9,?___ftmul+1
  7839  002084  C497  F079         	movff	_CurrentOrbitProgram+10,?___ftmul+2
  7840  002088  EC52  F031         	call	___ftmul	;wreg free
  7841  00208C  C077  F08B         	movff	?___ftmul,?___ftge+3
  7842  002090  C078  F08C         	movff	?___ftmul+1,?___ftge+4
  7843  002094  C079  F08D         	movff	?___ftmul+2,?___ftge+5
  7844  002098  ECB1  F037         	call	___ftge	;wreg free
  7845  00209C  E209               	bc	l1350
  7846                           
  7847                           ; BSR set to: 0
  7848  00209E  D9BF               	call	PL47	;call to abstracted procedure
  7849  0020A0  EC52  F031         	call	___ftmul	;wreg free
  7850  0020A4  C077  F498         	movff	?___ftmul,_CurrentOrbitProgram+11
  7851  0020A8  C078  F499         	movff	?___ftmul+1,_CurrentOrbitProgram+12
  7852  0020AC  C079  F49A         	movff	?___ftmul+2,_CurrentOrbitProgram+13
  7853  0020B0                     l1350:
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;OrbitProgram.c: 96: ret = GetTime("TIME FOR ALL ORBITS\0", &CurrentOrbitProgram.CycleTi
      +                          me_sec, 4 * CurrentOrbitProgram.CycleCount_rev, 86400, 0b1110);
  7857  0020B0  D9B6               	call	PL47	;call to abstracted procedure
  7858  0020B2  EC52  F031         	call	___ftmul	;wreg free
  7859  0020B6  C077  F193         	movff	?___ftmul,_CreateOrbitProgram$3897
  7860  0020BA  C078  F194         	movff	?___ftmul+1,_CreateOrbitProgram$3897+1
  7861  0020BE  C079  F195         	movff	?___ftmul+2,_CreateOrbitProgram$3897+2
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;OrbitProgram.c: 96: ret = GetTime("TIME FOR ALL ORBITS\0", &CurrentOrbitProgram.CycleTi
      +                          me_sec, 4 * CurrentOrbitProgram.CycleCount_rev, 86400, 0b1110);
  7865  0020C2  0E1A               	movlw	high STR_33
  7866  0020C4  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  7867  0020C6  0E39               	movlw	low STR_33
  7868  0020C8  6FD7               	movwf	?_GetTime& (0+255),b
  7869  0020CA  0E04               	movlw	high (_CurrentOrbitProgram+11)
  7870  0020CC  0100               	movlb	0	; () banked
  7871  0020CE  6FDA               	movwf	(?_GetTime+3)& (0+255),b
  7872  0020D0  0E98               	movlw	low (_CurrentOrbitProgram+11)
  7873  0020D2  6FD9               	movwf	(?_GetTime+2)& (0+255),b
  7874  0020D4  C193  F0DB         	movff	_CreateOrbitProgram$3897,?_GetTime+4
  7875  0020D8  C194  F0DC         	movff	_CreateOrbitProgram$3897+1,?_GetTime+5
  7876  0020DC  C195  F0DD         	movff	_CreateOrbitProgram$3897+2,?_GetTime+6
  7877  0020E0  D957               	call	PL13	;call to abstracted procedure
  7878  0020E2  ECBB  F01A         	call	_GetTime	;wreg free
  7879  0020E6  0101               	movlb	1	; () banked
  7880  0020E8  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7881                           
  7882                           ; BSR set to: 1
  7883                           ;OrbitProgram.c: 97: if (ret == -1) goto labelSpeedMode;
  7884  0020EA  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7885  0020EC  E101 D766          	bz	l18623
  7886                           
  7887                           ; BSR set to: 1
  7888                           ;OrbitProgram.c: 98: if (ret == -2) return (-2);
  7889  0020F0  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7890  0020F2  0AFE               	xorlw	254
  7891  0020F4  E101 D6F4          	bz	l18587
  7892                           
  7893                           ; BSR set to: 1
  7894                           ;OrbitProgram.c: 99: CurrentOrbitProgram.Speed_deg_sec = (360 * CurrentOrbitProgram.Cycl
      +                          eCount_rev) / CurrentOrbitProgram.CycleTime_sec;
  7895  0020F8  0100               	movlb	0	; () banked
  7896  0020FA  6B7A               	clrf	(?___ftmul+3)& (0+255),b
  7897  0020FC  0EB4               	movlw	180
  7898  0020FE  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  7899  002100  0E43               	movlw	67
  7900  002102  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  7901  002104  C495  F077         	movff	_CurrentOrbitProgram+8,?___ftmul
  7902  002108  C496  F078         	movff	_CurrentOrbitProgram+9,?___ftmul+1
  7903  00210C  C497  F079         	movff	_CurrentOrbitProgram+10,?___ftmul+2
  7904  002110  EC52  F031         	call	___ftmul	;wreg free
  7905  002114  C077  F088         	movff	?___ftmul,?___ftdiv
  7906  002118  C078  F089         	movff	?___ftmul+1,?___ftdiv+1
  7907  00211C  C079  F08A         	movff	?___ftmul+2,?___ftdiv+2
  7908  002120  C498  F08B         	movff	_CurrentOrbitProgram+11,?___ftdiv+3
  7909  002124  C499  F08C         	movff	_CurrentOrbitProgram+12,?___ftdiv+4
  7910  002128  C49A  F08D         	movff	_CurrentOrbitProgram+13,?___ftdiv+5
  7911  00212C  ECD0  F031         	call	___ftdiv	;wreg free
  7912  002130  D0B5               	goto	L7
  7913  002132                     l18693:
  7914                           
  7915                           ; BSR set to: 1
  7916  002132  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7917                           
  7918                           ; Switch size 1, requested type "space"
  7919                           ; Number of cases is 3, Range of values is 0 to 2
  7920                           ; switch strategies available:
  7921                           ; Name         Instructions Cycles
  7922                           ; simple_byte           10     6 (average)
  7923                           ;	Chosen strategy is simple_byte
  7924  002134  E101 D76D          	bz	l18639
  7925  002138  0A01               	xorlw	1	; case 1
  7926  00213A  E101 D77B          	bz	l18655
  7927  00213E  0A03               	xorlw	3	; case 2
  7928  002140  E091               	bz	l18673
  7929  002142  D0C1               	goto	l18813
  7930  002144                     l18695:
  7931                           
  7932                           ;OrbitProgram.c: 106: ret = GetTime("TOTAL RUNTIME:\0", &CurrentOrbitProgram.ProgramRunT
      +                          ime_sec, 1, 86400, 0b1110);
  7933  002144  0E1B               	movlw	high STR_34
  7934  002146  0100               	movlb	0	; () banked
  7935  002148  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  7936  00214A  0ED2               	movlw	low STR_34
  7937  00214C  6FD7               	movwf	?_GetTime& (0+255),b
  7938  00214E  0E04               	movlw	high (_CurrentOrbitProgram+5)
  7939  002150  6FDA               	movwf	(?_GetTime+3)& (0+255),b
  7940  002152  0E92               	movlw	low (_CurrentOrbitProgram+5)
  7941  002154  6FD9               	movwf	(?_GetTime+2)& (0+255),b
  7942  002156  6BDB               	clrf	(?_GetTime+4)& (0+255),b
  7943  002158  0E80               	movlw	128
  7944  00215A  6FDC               	movwf	(?_GetTime+5)& (0+255),b
  7945  00215C  0E3F               	movlw	63
  7946  00215E  6FDD               	movwf	(?_GetTime+6)& (0+255),b
  7947  002160  D917               	call	PL13	;call to abstracted procedure
  7948  002162  ECBB  F01A         	call	_GetTime	;wreg free
  7949  002166  0101               	movlb	1	; () banked
  7950  002168  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7951                           
  7952                           ; BSR set to: 1
  7953                           ;OrbitProgram.c: 107: if (ret == -1) goto labelEndMode;
  7954  00216A  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7955  00216C  E101 D6BB          	bz	l18591
  7956                           
  7957                           ; BSR set to: 1
  7958                           ;OrbitProgram.c: 108: if (ret == -2) return (-2);
  7959  002170  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7960  002172  0AFE               	xorlw	254
  7961  002174  E101 D6B4          	bz	l18587
  7962  002178                     l18707:
  7963                           
  7964                           ; BSR set to: 1
  7965                           ;OrbitProgram.c: 112: ret = DisplayChoices(SpeedModeMenu, 1, "ORBIT SPEED:\0", CurrentOr
      +                          bitProgram.SpeedMode);
  7966  002178  D922               	call	PL15	;call to abstracted procedure
  7967  00217A  EC28  F035         	call	_DisplayChoices	;wreg free
  7968  00217E  0101               	movlb	1	; () banked
  7969  002180  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7970                           
  7971                           ; BSR set to: 1
  7972                           ;OrbitProgram.c: 113: if (ret == -1) goto labelProgramRuntime;
  7973  002182  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  7974  002184  E0DF               	bz	l18695
  7975                           
  7976                           ; BSR set to: 1
  7977                           ;OrbitProgram.c: 114: if (ret == -2) return (-2);
  7978  002186  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  7979  002188  0AFE               	xorlw	254
  7980  00218A  E101 D6A9          	bz	l18587
  7981  00218E  D02F               	goto	l18755
  7982  002190                     l18719:
  7983                           
  7984                           ; BSR set to: 1
  7985                           ;OrbitProgram.c: 117: if (CurrentOrbitProgram.Speed_deg_sec < 0.01) CurrentOrbitProgram.
      +                          Speed_deg_sec = 0.01;
  7986  002190  D908               	call	PL14	;call to abstracted procedure
  7987  002192  ECB1  F037         	call	___ftge	;wreg free
  7988  002196  E201               	bc	l18723
  7989                           
  7990                           ; BSR set to: 0
  7991  002198  D93A               	call	PL44	;call to abstracted procedure
  7992  00219A                     l18723:
  7993                           
  7994                           ;OrbitProgram.c: 118: ret = GetFloat("SPEED\0", "\xDF/Sec\0", &CurrentOrbitProgram.Speed
      +                          _deg_sec, 0.01, 90, 0.01);
  7995  00219A  D8C8               	call	PL4	;call to abstracted procedure
  7996  00219C  EC53  F020         	call	_GetFloat	;wreg free
  7997  0021A0  0101               	movlb	1	; () banked
  7998  0021A2  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  7999                           
  8000                           ; BSR set to: 1
  8001                           ;OrbitProgram.c: 119: if (ret == -1) goto labelSpeedMode2;
  8002  0021A4  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8003  0021A6  E0E8               	bz	l18707
  8004                           
  8005                           ; BSR set to: 1
  8006                           ;OrbitProgram.c: 120: if (ret == -2) return (-2);
  8007  0021A8  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8008  0021AA  0AFE               	xorlw	254
  8009  0021AC  E101 D698          	bz	l18587
  8010  0021B0  D022               	goto	l18757
  8011  0021B2                     l18735:
  8012                           
  8013                           ; BSR set to: 1
  8014                           ;OrbitProgram.c: 123: if (CurrentOrbitProgram.CycleTime_sec < 4) CurrentOrbitProgram.Cyc
      +                          leTime_sec = 4;
  8015  0021B2  D920               	call	PL18	;call to abstracted procedure
  8016  0021B4  ECB1  F037         	call	___ftge	;wreg free
  8017  0021B8  E201               	bc	l18739
  8018                           
  8019                           ; BSR set to: 0
  8020  0021BA  D93D               	call	PL53	;call to abstracted procedure
  8021  0021BC                     l18739:
  8022                           
  8023                           ;OrbitProgram.c: 124: ret = GetTime("TIME PER ORBIT:\0", &CurrentOrbitProgram.CycleTime_
      +                          sec, 4, 86400, 0b1110);
  8024  0021BC  0E1B               	movlw	high STR_38
  8025  0021BE  0100               	movlb	0	; () banked
  8026  0021C0  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  8027  0021C2  0E8F               	movlw	low STR_38
  8028  0021C4  D8D2               	call	PL12	;call to abstracted procedure
  8029  0021C6  ECBB  F01A         	call	_GetTime	;wreg free
  8030  0021CA  0101               	movlb	1	; () banked
  8031  0021CC  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8032                           
  8033                           ; BSR set to: 1
  8034                           ;OrbitProgram.c: 125: if (ret == -1) goto labelSpeedMode2;
  8035  0021CE  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8036  0021D0  E0D3               	bz	l18707
  8037                           
  8038                           ; BSR set to: 1
  8039                           ;OrbitProgram.c: 126: if (ret == -2) return (-2);
  8040  0021D2  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8041  0021D4  0AFE               	xorlw	254
  8042  0021D6  E101 D683          	bz	l18587
  8043                           
  8044                           ; BSR set to: 1
  8045                           ;OrbitProgram.c: 127: CurrentOrbitProgram.Speed_deg_sec = 360 / CurrentOrbitProgram.Cycl
      +                          eTime_sec;
  8046  0021DA  D8FF               	call	PL17	;call to abstracted procedure
  8047  0021DC  ECD0  F031         	call	___ftdiv	;wreg free
  8048  0021E0  C088  F49B         	movff	?___ftdiv,_CurrentOrbitProgram+14
  8049  0021E4  C089  F49C         	movff	?___ftdiv+1,_CurrentOrbitProgram+15
  8050  0021E8  C08A  F49D         	movff	?___ftdiv+2,_CurrentOrbitProgram+16
  8051                           
  8052                           ;OrbitProgram.c: 128: break;
  8053  0021EC  D004               	goto	l18757
  8054  0021EE                     l18755:
  8055                           
  8056                           ; BSR set to: 1
  8057  0021EE  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8058                           
  8059                           ; Switch size 1, requested type "space"
  8060                           ; Number of cases is 2, Range of values is 0 to 1
  8061                           ; switch strategies available:
  8062                           ; Name         Instructions Cycles
  8063                           ; simple_byte            7     4 (average)
  8064                           ;	Chosen strategy is simple_byte
  8065  0021F0  E0CF               	bz	l18719
  8066  0021F2  0A01               	xorlw	1	; case 1
  8067  0021F4  E0DE               	bz	l18735
  8068  0021F6                     l18757:
  8069                           
  8070                           ;OrbitProgram.c: 130: CurrentOrbitProgram.CycleCount_rev = (CurrentOrbitProgram.Speed_de
      +                          g_sec * CurrentOrbitProgram.ProgramRunTime_sec) / 360;
  8071  0021F6  C492  F07A         	movff	_CurrentOrbitProgram+5,?___ftmul+3
  8072  0021FA  C493  F07B         	movff	_CurrentOrbitProgram+6,?___ftmul+4
  8073  0021FE  C494  F07C         	movff	_CurrentOrbitProgram+7,?___ftmul+5
  8074  002202  C49B  F077         	movff	_CurrentOrbitProgram+14,?___ftmul
  8075  002206  C49C  F078         	movff	_CurrentOrbitProgram+15,?___ftmul+1
  8076  00220A  C49D  F079         	movff	_CurrentOrbitProgram+16,?___ftmul+2
  8077  00220E  EC52  F031         	call	___ftmul	;wreg free
  8078  002212  C077  F088         	movff	?___ftmul,?___ftdiv
  8079  002216  C078  F089         	movff	?___ftmul+1,?___ftdiv+1
  8080  00221A  C079  F08A         	movff	?___ftmul+2,?___ftdiv+2
  8081  00221E  6B8B               	clrf	(?___ftdiv+3)& (0+255),b
  8082  002220  0EB4               	movlw	180
  8083  002222  6F8C               	movwf	(?___ftdiv+4)& (0+255),b
  8084  002224  0E43               	movlw	67
  8085  002226  6F8D               	movwf	(?___ftdiv+5)& (0+255),b
  8086  002228  ECD0  F031         	call	___ftdiv	;wreg free
  8087  00222C  C088  F495         	movff	?___ftdiv,_CurrentOrbitProgram+8
  8088  002230  C089  F496         	movff	?___ftdiv+1,_CurrentOrbitProgram+9
  8089  002234  C08A  F497         	movff	?___ftdiv+2,_CurrentOrbitProgram+10
  8090                           
  8091                           ;OrbitProgram.c: 131: break;
  8092  002238  D046               	goto	l18813
  8093  00223A                     l18759:
  8094                           
  8095                           ;OrbitProgram.c: 134: ret = DisplayChoices(SpeedModeMenu, 1, "ORBIT SPEED:\0", CurrentOr
      +                          bitProgram.SpeedMode);
  8096  00223A  D8C1               	call	PL15	;call to abstracted procedure
  8097  00223C  EC28  F035         	call	_DisplayChoices	;wreg free
  8098  002240  0101               	movlb	1	; () banked
  8099  002242  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8100                           
  8101                           ; BSR set to: 1
  8102                           ;OrbitProgram.c: 135: if (ret == -1) goto labelEndMode;
  8103  002244  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8104  002246  E101 D64E          	bz	l18591
  8105                           
  8106                           ; BSR set to: 1
  8107                           ;OrbitProgram.c: 136: if (ret == -2) return (-2);
  8108  00224A  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8109  00224C  0AFE               	xorlw	254
  8110  00224E  E101 D647          	bz	l18587
  8111  002252  D02B               	goto	l18807
  8112  002254                     l18771:
  8113                           
  8114                           ; BSR set to: 1
  8115                           ;OrbitProgram.c: 139: if (CurrentOrbitProgram.Speed_deg_sec < 0.01) CurrentOrbitProgram.
      +                          Speed_deg_sec = 0.01;
  8116  002254  D8A6               	call	PL14	;call to abstracted procedure
  8117  002256  ECB1  F037         	call	___ftge	;wreg free
  8118  00225A  E201               	bc	l18775
  8119                           
  8120                           ; BSR set to: 0
  8121  00225C  D8D8               	call	PL44	;call to abstracted procedure
  8122  00225E                     l18775:
  8123                           
  8124                           ;OrbitProgram.c: 140: ret = GetFloat("SPEED\0", "\xDF/Sec\0", &CurrentOrbitProgram.Speed
      +                          _deg_sec, 0.01, 90, 0.01);
  8125  00225E  D866               	call	PL4	;call to abstracted procedure
  8126  002260  EC53  F020         	call	_GetFloat	;wreg free
  8127  002264  0101               	movlb	1	; () banked
  8128  002266  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8129                           
  8130                           ; BSR set to: 1
  8131                           ;OrbitProgram.c: 141: if (ret == -1) goto labelSpeedMode3;
  8132  002268  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8133  00226A  E0E7               	bz	l18759
  8134  00226C  D6DE               	goto	l18649
  8135  00226E                     l18787:
  8136                           
  8137                           ; BSR set to: 1
  8138                           ;OrbitProgram.c: 145: if (CurrentOrbitProgram.CycleTime_sec < 4) CurrentOrbitProgram.Cyc
      +                          leTime_sec = 4;
  8139  00226E  D8C2               	call	PL18	;call to abstracted procedure
  8140  002270  ECB1  F037         	call	___ftge	;wreg free
  8141  002274  E201               	bc	l18791
  8142                           
  8143                           ; BSR set to: 0
  8144  002276  D8DF               	call	PL53	;call to abstracted procedure
  8145  002278                     l18791:
  8146                           
  8147                           ;OrbitProgram.c: 146: ret = GetTime("TIME PER ORBIT:\0", &CurrentOrbitProgram.CycleTime_
      +                          sec, 4, 86400, 0b1110);
  8148  002278  0E1B               	movlw	high STR_38
  8149  00227A  0100               	movlb	0	; () banked
  8150  00227C  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  8151  00227E  0E8F               	movlw	low STR_38
  8152  002280  D874               	call	PL12	;call to abstracted procedure
  8153  002282  ECBB  F01A         	call	_GetTime	;wreg free
  8154  002286  0101               	movlb	1	; () banked
  8155  002288  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8156                           
  8157                           ; BSR set to: 1
  8158                           ;OrbitProgram.c: 147: if (ret == -1) goto labelSpeedMode3;
  8159  00228A  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8160  00228C  E0D6               	bz	l18759
  8161                           
  8162                           ; BSR set to: 1
  8163                           ;OrbitProgram.c: 148: if (ret == -2) return (-2);
  8164  00228E  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8165  002290  0AFE               	xorlw	254
  8166  002292  E101 D625          	bz	l18587
  8167                           
  8168                           ; BSR set to: 1
  8169                           ;OrbitProgram.c: 149: CurrentOrbitProgram.Speed_deg_sec = 360 / CurrentOrbitProgram.Cycl
      +                          eTime_sec;
  8170  002296  D8A1               	call	PL17	;call to abstracted procedure
  8171  002298  ECD0  F031         	call	___ftdiv	;wreg free
  8172  00229C                     L7:
  8173  00229C  C088  F49B         	movff	?___ftdiv,_CurrentOrbitProgram+14
  8174  0022A0  C089  F49C         	movff	?___ftdiv+1,_CurrentOrbitProgram+15
  8175  0022A4  C08A  F49D         	movff	?___ftdiv+2,_CurrentOrbitProgram+16
  8176                           
  8177                           ;OrbitProgram.c: 150: break;
  8178  0022A8  D00E               	goto	l18813
  8179  0022AA                     l18807:
  8180                           
  8181                           ; BSR set to: 1
  8182  0022AA  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8183                           
  8184                           ; Switch size 1, requested type "space"
  8185                           ; Number of cases is 2, Range of values is 0 to 1
  8186                           ; switch strategies available:
  8187                           ; Name         Instructions Cycles
  8188                           ; simple_byte            7     4 (average)
  8189                           ;	Chosen strategy is simple_byte
  8190  0022AC  E0D3               	bz	l18771
  8191  0022AE  0A01               	xorlw	1	; case 1
  8192  0022B0  E0DE               	bz	l18787
  8193  0022B2  D009               	goto	l18813
  8194  0022B4                     l18811:
  8195                           
  8196                           ; BSR set to: 1
  8197  0022B4  0104               	movlb	4	; () banked
  8198  0022B6  5190               	movf	(_CurrentOrbitProgram+3)& (0+255),w,b
  8199                           
  8200                           ; Switch size 1, requested type "space"
  8201                           ; Number of cases is 3, Range of values is 0 to 2
  8202                           ; switch strategies available:
  8203                           ; Name         Instructions Cycles
  8204                           ; simple_byte           10     6 (average)
  8205                           ;	Chosen strategy is simple_byte
  8206  0022B8  E101 D62E          	bz	l18603
  8207  0022BC  0A01               	xorlw	1	; case 1
  8208  0022BE  E101 D741          	bz	l18695
  8209  0022C2  0A03               	xorlw	3	; case 2
  8210  0022C4  E0BA               	bz	l18759
  8211  0022C6                     l18813:
  8212                           
  8213                           ;OrbitProgram.c: 157: ret = DisplayChoices(CommandMenu, 1, "ACTION:\0", 0);
  8214  0022C6  0E01               	movlw	high CreateOrbitProgram@CommandMenu
  8215  0022C8  0100               	movlb	0	; () banked
  8216  0022CA  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
  8217  0022CC  0EB4               	movlw	low CreateOrbitProgram@CommandMenu
  8218  0022CE  6F8F               	movwf	?_DisplayChoices& (0+255),b
  8219  0022D0  0E01               	movlw	1
  8220  0022D2  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
  8221  0022D4  0E1D               	movlw	high STR_43
  8222  0022D6  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
  8223  0022D8  0E64               	movlw	low STR_43
  8224  0022DA  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
  8225  0022DC  0E00               	movlw	0
  8226  0022DE  6B94               	clrf	(?_DisplayChoices+5)& (0+255),b
  8227  0022E0  EC28  F035         	call	_DisplayChoices	;wreg free
  8228  0022E4  0101               	movlb	1	; () banked
  8229  0022E6  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8230                           
  8231                           ; BSR set to: 1
  8232                           ;OrbitProgram.c: 158: if (ret == -1) goto labelCycleCount;
  8233  0022E8  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8234  0022EA  E101 D615          	bz	l18603
  8235                           
  8236                           ; BSR set to: 1
  8237                           ;OrbitProgram.c: 159: if (ret == -2) return (-2);
  8238  0022EE  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8239  0022F0  0AFE               	xorlw	254
  8240  0022F2  E101 D5F5          	bz	l18587
  8241                           
  8242                           ; BSR set to: 1
  8243                           ;OrbitProgram.c: 161: if (ret == 0) {
  8244  0022F6  67BE               	tstfsz	CreateOrbitProgram@ret& (0+255),b
  8245  0022F8  D002               	goto	l18829
  8246                           
  8247                           ; BSR set to: 1
  8248                           ;OrbitProgram.c: 162: return RunOrbitProgram();
  8249  0022FA  EFEC  F021         	goto	_RunOrbitProgram	;wreg free
  8250  0022FE                     l18829:
  8251                           
  8252                           ; BSR set to: 1
  8253                           ;OrbitProgram.c: 163: }
  8254                           ;OrbitProgram.c: 165: ret = GetPresetNumber();
  8255  0022FE  ECDF  F033         	call	_GetPresetNumber	;wreg free
  8256  002302  0101               	movlb	1	; () banked
  8257  002304  6FBE               	movwf	CreateOrbitProgram@ret& (0+255),b
  8258                           
  8259                           ; BSR set to: 1
  8260                           ;OrbitProgram.c: 166: if (ret == -1) goto labelActions;
  8261  002306  29BE               	incf	CreateOrbitProgram@ret& (0+255),w,b
  8262  002308  E0DE               	bz	l18813
  8263                           
  8264                           ; BSR set to: 1
  8265                           ;OrbitProgram.c: 167: if (ret == -2) return (-2);
  8266  00230A  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8267  00230C  0AFE               	xorlw	254
  8268  00230E  E101 D5E7          	bz	l18587
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;OrbitProgram.c: 169: CurrentOrbitProgram.Type = 2;
  8272  002312  0E02               	movlw	2
  8273  002314  0104               	movlb	4	; () banked
  8274  002316  6F8D               	movwf	_CurrentOrbitProgram& (0+255),b
  8275                           
  8276                           ; BSR set to: 4
  8277                           ;OrbitProgram.c: 170: SavePreset(ret, (unsigned char *) &CurrentOrbitProgram);
  8278  002318  0E04               	movlw	high _CurrentOrbitProgram
  8279  00231A  0100               	movlb	0	; () banked
  8280  00231C  6F74               	movwf	(?_SavePreset+1)& (0+255),b
  8281  00231E  0E8D               	movlw	low _CurrentOrbitProgram
  8282  002320  6F73               	movwf	?_SavePreset& (0+255),b
  8283  002322  0101               	movlb	1	; () banked
  8284  002324  51BE               	movf	CreateOrbitProgram@ret& (0+255),w,b
  8285  002326  ECF5  F03A         	call	_SavePreset
  8286                           
  8287                           ;OrbitProgram.c: 171: goto labelActions;
  8288  00232A  D7CD               	goto	l18813
  8289  00232C                     __end_of_CreateOrbitProgram:
  8290                           	opt stack 0
  8291  00232C                     PL4:
  8292  00232C  0E1D               	movlw	high STR_30
  8293  00232E  0100               	movlb	0	; () banked
  8294  002330  6FC8               	movwf	(?_GetFloat+1)& (0+255),b
  8295  002332  0E9B               	movlw	low STR_30
  8296  002334  6FC7               	movwf	?_GetFloat& (0+255),b
  8297  002336  0E1A               	movlw	high (STR_51+12)
  8298  002338  6FCA               	movwf	(?_GetFloat+3)& (0+255),b
  8299  00233A  0EF7               	movlw	low (STR_51+12)
  8300  00233C  6FC9               	movwf	(?_GetFloat+2)& (0+255),b
  8301  00233E  0E04               	movlw	high (_CurrentOrbitProgram+14)
  8302  002340  6FCC               	movwf	(?_GetFloat+5)& (0+255),b
  8303  002342  0E9B               	movlw	low (_CurrentOrbitProgram+14)
  8304  002344  6FCB               	movwf	(?_GetFloat+4)& (0+255),b
  8305  002346  0ED7               	movlw	215
  8306  002348  6FCD               	movwf	(?_GetFloat+6)& (0+255),b
  8307  00234A  0E23               	movlw	35
  8308  00234C  6FCE               	movwf	(?_GetFloat+7)& (0+255),b
  8309  00234E  0E3C               	movlw	60
  8310  002350  6FCF               	movwf	(?_GetFloat+8)& (0+255),b
  8311  002352  6BD0               	clrf	(?_GetFloat+9)& (0+255),b
  8312  002354  0EB4               	movlw	180
  8313  002356  6FD1               	movwf	(?_GetFloat+10)& (0+255),b
  8314  002358  0E42               	movlw	66
  8315  00235A  6FD2               	movwf	(?_GetFloat+11)& (0+255),b
  8316  00235C  0ED7               	movlw	215
  8317  00235E  6FD3               	movwf	(?_GetFloat+12)& (0+255),b
  8318  002360  0E23               	movlw	35
  8319  002362  6FD4               	movwf	(?_GetFloat+13)& (0+255),b
  8320  002364  0E3C               	movlw	60
  8321  002366  6FD5               	movwf	(?_GetFloat+14)& (0+255),b
  8322  002368  0C3C               	retlw	60
  8323  00236A                     PL12:
  8324  00236A  6FD7               	movwf	?_GetTime& (0+255),b
  8325  00236C  0E04               	movlw	high (_CurrentOrbitProgram+11)
  8326  00236E  6FDA               	movwf	(?_GetTime+3)& (0+255),b
  8327  002370  0E98               	movlw	low (_CurrentOrbitProgram+11)
  8328  002372  6FD9               	movwf	(?_GetTime+2)& (0+255),b
  8329  002374  6BDB               	clrf	(?_GetTime+4)& (0+255),b
  8330  002376  0E80               	movlw	128
  8331  002378  6FDC               	movwf	(?_GetTime+5)& (0+255),b
  8332  00237A  0E40               	movlw	64
  8333  00237C  6FDD               	movwf	(?_GetTime+6)& (0+255),b
  8334  00237E  0EC0               	movlw	192
  8335  002380  6FDE               	movwf	(?_GetTime+7)& (0+255),b
  8336  002382  0EA8               	movlw	168
  8337  002384  6FDF               	movwf	(?_GetTime+8)& (0+255),b
  8338  002386  0E47               	movlw	71
  8339  002388  6FE0               	movwf	(?_GetTime+9)& (0+255),b
  8340  00238A  0E0E               	movlw	14
  8341  00238C  6FE1               	movwf	(?_GetTime+10)& (0+255),b
  8342  00238E  0C0E               	retlw	14
  8343  002390                     PL13:
  8344  002390  0EC0               	movlw	192
  8345  002392  6FDE               	movwf	(?_GetTime+7)& (0+255),b
  8346  002394  0EA8               	movlw	168
  8347  002396  6FDF               	movwf	(?_GetTime+8)& (0+255),b
  8348  002398  0E47               	movlw	71
  8349  00239A  6FE0               	movwf	(?_GetTime+9)& (0+255),b
  8350  00239C  0E0E               	movlw	14
  8351  00239E  6FE1               	movwf	(?_GetTime+10)& (0+255),b
  8352  0023A0  0C0E               	retlw	14
  8353  0023A2                     PL14:
  8354  0023A2  C49B  F088         	movff	_CurrentOrbitProgram+14,?___ftge
  8355  0023A6  C49C  F089         	movff	_CurrentOrbitProgram+15,?___ftge+1
  8356  0023AA  C49D  F08A         	movff	_CurrentOrbitProgram+16,?___ftge+2
  8357  0023AE  0ED7               	movlw	215
  8358  0023B0  0100               	movlb	0	; () banked
  8359  0023B2  6F8B               	movwf	(?___ftge+3)& (0+255),b
  8360  0023B4  0E23               	movlw	35
  8361  0023B6  6F8C               	movwf	(?___ftge+4)& (0+255),b
  8362  0023B8  0E3C               	movlw	60
  8363  0023BA  6F8D               	movwf	(?___ftge+5)& (0+255),b
  8364  0023BC  0C3C               	retlw	60
  8365  0023BE                     PL15:
  8366  0023BE  0E01               	movlw	high CreateOrbitProgram@SpeedModeMenu
  8367  0023C0  0100               	movlb	0	; () banked
  8368  0023C2  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
  8369  0023C4  0EB8               	movlw	low CreateOrbitProgram@SpeedModeMenu
  8370  0023C6  6F8F               	movwf	?_DisplayChoices& (0+255),b
  8371  0023C8  0E01               	movlw	1
  8372  0023CA  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
  8373  0023CC  0E1C               	movlw	high STR_28
  8374  0023CE  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
  8375  0023D0  0E69               	movlw	low STR_28
  8376  0023D2  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
  8377  0023D4  C49E  F094         	movff	_CurrentOrbitProgram+17,?_DisplayChoices+5
  8378  0023D8  0012               	return	
  8379  0023DA                     PL17:
  8380  0023DA  0100               	movlb	0	; () banked
  8381  0023DC  6B88               	clrf	?___ftdiv& (0+255),b
  8382  0023DE  0EB4               	movlw	180
  8383  0023E0  6F89               	movwf	(?___ftdiv+1)& (0+255),b
  8384  0023E2  0E43               	movlw	67
  8385  0023E4  6F8A               	movwf	(?___ftdiv+2)& (0+255),b
  8386  0023E6  C498  F08B         	movff	_CurrentOrbitProgram+11,?___ftdiv+3
  8387  0023EA  C499  F08C         	movff	_CurrentOrbitProgram+12,?___ftdiv+4
  8388  0023EE  C49A  F08D         	movff	_CurrentOrbitProgram+13,?___ftdiv+5
  8389  0023F2  0C43               	retlw	67
  8390  0023F4                     PL18:
  8391  0023F4  C498  F088         	movff	_CurrentOrbitProgram+11,?___ftge
  8392  0023F8  C499  F089         	movff	_CurrentOrbitProgram+12,?___ftge+1
  8393  0023FC  C49A  F08A         	movff	_CurrentOrbitProgram+13,?___ftge+2
  8394  002400  0100               	movlb	0	; () banked
  8395  002402  6B8B               	clrf	(?___ftge+3)& (0+255),b
  8396  002404  0E80               	movlw	128
  8397  002406  6F8C               	movwf	(?___ftge+4)& (0+255),b
  8398  002408  0E40               	movlw	64
  8399  00240A  6F8D               	movwf	(?___ftge+5)& (0+255),b
  8400  00240C  0C40               	retlw	64
  8401  00240E                     PL44:
  8402  00240E  0ED7               	movlw	215
  8403  002410  0104               	movlb	4	; () banked
  8404  002412  6F9B               	movwf	(_CurrentOrbitProgram+14)& (0+255),b
  8405  002414  0E23               	movlw	35
  8406  002416  6F9C               	movwf	(_CurrentOrbitProgram+15)& (0+255),b
  8407  002418  0E3C               	movlw	60
  8408  00241A  6F9D               	movwf	(_CurrentOrbitProgram+16)& (0+255),b
  8409  00241C  0C3C               	retlw	60
  8410  00241E                     PL47:
  8411  00241E  C495  F077         	movff	_CurrentOrbitProgram+8,?___ftmul
  8412  002422  C496  F078         	movff	_CurrentOrbitProgram+9,?___ftmul+1
  8413  002426  C497  F079         	movff	_CurrentOrbitProgram+10,?___ftmul+2
  8414  00242A  6B7A               	clrf	(?___ftmul+3)& (0+255),b
  8415  00242C  0E80               	movlw	128
  8416  00242E  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  8417  002430  0E40               	movlw	64
  8418  002432  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  8419  002434  0C40               	retlw	64
  8420  002436                     PL53:
  8421  002436  0104               	movlb	4	; () banked
  8422  002438  6B98               	clrf	(_CurrentOrbitProgram+11)& (0+255),b
  8423  00243A  0E80               	movlw	128
  8424  00243C  6F99               	movwf	(_CurrentOrbitProgram+12)& (0+255),b
  8425  00243E  0E40               	movlw	64
  8426  002440  6F9A               	movwf	(_CurrentOrbitProgram+13)& (0+255),b
  8427  002442  0C40               	retlw	64
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodh	equ	0xFF4
  8433                           prodl	equ	0xFF3
  8434                           intcon	equ	0xFF2
  8435                           intcon2	equ	0xFF1
  8436                           postinc0	equ	0xFEE
  8437                           wreg	equ	0xFE8
  8438                           postinc1	equ	0xFE6
  8439                           postdec1	equ	0xFE5
  8440                           fsr1h	equ	0xFE2
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           fsr2h	equ	0xFDA
  8446                           fsr2l	equ	0xFD9
  8447                           status	equ	0xFD8
  8448                           
  8449 ;; *************** function _RealtimeMode *****************
  8450 ;; Defined at:
  8451 ;;		line 7 in file "Z:\CineFlux\Dropbox\Orbit\RealtimeMode.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  SetSpeed        3  107[BANK0 ] char 
  8456 ;;  ret             1  106[BANK0 ] char 
  8457 ;; Return value:  Size  Location     Type
  8458 ;;		None               void
  8459 ;; Registers used:
  8460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/1
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;Total ram usage:        7 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    8
  8473 ;; This function calls:
  8474 ;;		___ftmul
  8475 ;;		___fttol
  8476 ;;		_GetInput_nonblocking
  8477 ;;		_LCD_ClearDisplay
  8478 ;;		_LCD_PrintString
  8479 ;;		_LCD_SetPosition
  8480 ;;		_GetRotaryMultiplier
  8481 ;;		___lbtoft
  8482 ;;		___asftadd
  8483 ;;		___ftge
  8484 ;;		___asftsub
  8485 ;;		_LCD_PrintFloat
  8486 ;;		___ftneg
  8487 ;;		_Idle
  8488 ;; This function is called by:
  8489 ;;		_main
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           	psect	text9
  8494  003972                     __ptext9:
  8495                           	opt stack 0
  8496  003972                     _RealtimeMode:
  8497                           	opt stack 22
  8498                           
  8499                           ;RealtimeMode.c: 8: double SetSpeed = 0;
  8500                           
  8501                           ; BSR set to: 1
  8502  003972  0100               	movlb	0	; () banked
  8503  003974  6BCB               	clrf	RealtimeMode@SetSpeed& (0+255),b
  8504  003976  6BCC               	clrf	(RealtimeMode@SetSpeed+1)& (0+255),b
  8505  003978  6BCD               	clrf	(RealtimeMode@SetSpeed+2)& (0+255),b
  8506                           
  8507                           ;RealtimeMode.c: 10: signed char ret;
  8508                           ;RealtimeMode.c: 12: bLock_Motor_Position = 1;
  8509                           
  8510                           ;RealtimeMode.c: 13: Move_Origin = Motor_Position;
  8511                           
  8512                           ;RealtimeMode.c: 14: bLock_Motor_Position = 0;
  8513  00397A  D9A6               	call	PL49	;call to abstracted procedure
  8514                           
  8515                           ;RealtimeMode.c: 17: Move_AccelValueQ24 = (unsigned long) (180 * Config.Counts_Per_Degre
      +                          e * 67.1088640);
  8516  00397C  0EBE               	movlw	190
  8517  00397E  6F7A               	movwf	(?___ftmul+3)& (0+255),b
  8518  003980  0E3C               	movlw	60
  8519  003982  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  8520  003984  0E46               	movlw	70
  8521  003986  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  8522  003988  C2F2  F077         	movff	_Config+28,?___ftmul
  8523  00398C  C2F3  F078         	movff	_Config+29,?___ftmul+1
  8524  003990  C2F4  F079         	movff	_Config+30,?___ftmul+2
  8525  003994  EC52  F031         	call	___ftmul	;wreg free
  8526  003998  C077  F0AA         	movff	?___ftmul,?___fttol
  8527  00399C  C078  F0AB         	movff	?___ftmul+1,?___fttol+1
  8528  0039A0  C079  F0AC         	movff	?___ftmul+2,?___fttol+2
  8529  0039A4  EC3B  F034         	call	___fttol	;wreg free
  8530  0039A8  C0AA  F035         	movff	?___fttol,_Move_AccelValueQ24
  8531  0039AC  C0AB  F036         	movff	?___fttol+1,_Move_AccelValueQ24+1
  8532  0039B0  C0AC  F037         	movff	?___fttol+2,_Move_AccelValueQ24+2
  8533  0039B4  C0AD  F038         	movff	?___fttol+3,_Move_AccelValueQ24+3
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;RealtimeMode.c: 20: Move_shifted_position.ul = 0;
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;RealtimeMode.c: 21: Move_speedQ24 = 0;
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;RealtimeMode.c: 22: Move_position[0].ul = 0;
  8543                           
  8544                           ; BSR set to: 4
  8545                           ;RealtimeMode.c: 23: Move_position[1].ul = 0;
  8546  0039B8  D959               	call	PL5	;call to abstracted procedure
  8547                           
  8548                           ; BSR set to: 4
  8549                           ;RealtimeMode.c: 24: bFollowMode=0;
  8550  0039BA  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  8551                           
  8552                           ;RealtimeMode.c: 25: bMove_InProgress=0;
  8553  0039BC  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  8554                           
  8555                           ;RealtimeMode.c: 26: bSpeedMode = 1;
  8556  0039BE  845A               	bsf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8557                           
  8558                           ;RealtimeMode.c: 27: bSpeedMode = 1;
  8559  0039C0  0100               	movlb	(_bSpeedMode/(0+8)) shr (0+8)
  8560  0039C2  845A               	bsf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8561  0039C4  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;RealtimeMode.c: 30: LCD_ClearDisplay();
  8565  0039C8  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;RealtimeMode.c: 31: LCD_PrintString("REALTIME MODE\0");
  8569  0039CC  0E1C               	movlw	high STR_5
  8570  0039CE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  8571  0039D0  0E2F               	movlw	low STR_5
  8572  0039D2  6F76               	movwf	?_LCD_PrintString& (0+255),b
  8573  0039D4  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;RealtimeMode.c: 32: LCD_SetPosition(1, 0);
  8577  0039D8  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  8578  0039DA  0E01               	movlw	1
  8579  0039DC  ECDF  F036         	call	_LCD_SetPosition
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;RealtimeMode.c: 33: LCD_PrintString("SPEED: XX.XX\xDF/Sec\0");
  8583  0039E0  0E1A               	movlw	high STR_51
  8584  0039E2  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  8585  0039E4  0EEB               	movlw	low STR_51
  8586  0039E6  6F76               	movwf	?_LCD_PrintString& (0+255),b
  8587  0039E8  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  8588  0039EC                     l18875:
  8589                           
  8590                           ;RealtimeMode.c: 36: ret = GetInput_nonblocking();
  8591  0039EC  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
  8592  0039F0  6FCA               	movwf	RealtimeMode@ret& (0+255),b
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;RealtimeMode.c: 37: if (ret == 3) goto labelExit;
  8596  0039F2  51CA               	movf	RealtimeMode@ret& (0+255),w,b
  8597  0039F4  0A03               	xorlw	3
  8598  0039F6  E101 D119          	bz	l18973
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;RealtimeMode.c: 38: if (ret == 2) goto labelExit;
  8602  0039FA  51CA               	movf	RealtimeMode@ret& (0+255),w,b
  8603  0039FC  0A02               	xorlw	2
  8604  0039FE  E101 D115          	bz	l18973
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;RealtimeMode.c: 39: if (ret == 1) SetSpeed = 0;
  8608  003A02  05CA               	decf	RealtimeMode@ret& (0+255),w,b
  8609  003A04  E103               	bnz	l18889
  8610                           
  8611                           ; BSR set to: 0
  8612  003A06  6BCB               	clrf	RealtimeMode@SetSpeed& (0+255),b
  8613  003A08  6BCC               	clrf	(RealtimeMode@SetSpeed+1)& (0+255),b
  8614  003A0A  6BCD               	clrf	(RealtimeMode@SetSpeed+2)& (0+255),b
  8615  003A0C                     l18889:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;RealtimeMode.c: 40: if (ret == 4) {
  8619  003A0C  51CA               	movf	RealtimeMode@ret& (0+255),w,b
  8620  003A0E  0A04               	xorlw	4
  8621  003A10  E12C               	bnz	l18897
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;RealtimeMode.c: 41: SetSpeed += GetRotaryMultiplier() * 0.05;
  8625  003A12  0E00               	movlw	high RealtimeMode@SetSpeed
  8626  003A14  6F89               	movwf	(?___asftadd+1)& (0+255),b
  8627  003A16  0ECB               	movlw	low RealtimeMode@SetSpeed
  8628  003A18  6F88               	movwf	?___asftadd& (0+255),b
  8629  003A1A  D975               	call	PL62	;call to abstracted procedure
  8630  003A1C  ECAC  F035         	call	_GetRotaryMultiplier	;wreg free
  8631  003A20  EC8F  F03B         	call	___lbtoft
  8632  003A24  C073  F077         	movff	?___lbtoft,?___ftmul
  8633  003A28  C074  F078         	movff	?___lbtoft+1,?___ftmul+1
  8634  003A2C  C075  F079         	movff	?___lbtoft+2,?___ftmul+2
  8635  003A30  EC52  F031         	call	___ftmul	;wreg free
  8636  003A34  C077  F08A         	movff	?___ftmul,?___asftadd+2
  8637  003A38  C078  F08B         	movff	?___ftmul+1,?___asftadd+3
  8638  003A3C  C079  F08C         	movff	?___ftmul+2,?___asftadd+4
  8639  003A40  EC53  F03A         	call	___asftadd	;wreg free
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;RealtimeMode.c: 42: if (SetSpeed > 90) SetSpeed = 90;
  8643  003A44  6B88               	clrf	?___ftge& (0+255),b
  8644  003A46  0EB4               	movlw	180
  8645  003A48  6F89               	movwf	(?___ftge+1)& (0+255),b
  8646  003A4A  0E42               	movlw	66
  8647  003A4C  6F8A               	movwf	(?___ftge+2)& (0+255),b
  8648  003A4E  C0CB  F08B         	movff	RealtimeMode@SetSpeed,?___ftge+3
  8649  003A52  C0CC  F08C         	movff	RealtimeMode@SetSpeed+1,?___ftge+4
  8650  003A56  C0CD  F08D         	movff	RealtimeMode@SetSpeed+2,?___ftge+5
  8651  003A5A  ECB1  F037         	call	___ftge	;wreg free
  8652  003A5E  E205               	bc	l18897
  8653                           
  8654                           ; BSR set to: 0
  8655  003A60  6BCB               	clrf	RealtimeMode@SetSpeed& (0+255),b
  8656  003A62  0EB4               	movlw	180
  8657  003A64  6FCC               	movwf	(RealtimeMode@SetSpeed+1)& (0+255),b
  8658  003A66  0E42               	movlw	66
  8659  003A68  6FCD               	movwf	(RealtimeMode@SetSpeed+2)& (0+255),b
  8660  003A6A                     l18897:
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;RealtimeMode.c: 43: }
  8664                           ;RealtimeMode.c: 44: if (ret == 5) {
  8665  003A6A  51CA               	movf	RealtimeMode@ret& (0+255),w,b
  8666  003A6C  0A05               	xorlw	5
  8667  003A6E  E12C               	bnz	l18905
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;RealtimeMode.c: 45: SetSpeed -= GetRotaryMultiplier() * 0.05;
  8671  003A70  0E00               	movlw	high RealtimeMode@SetSpeed
  8672  003A72  6FA0               	movwf	(?___asftsub+1)& (0+255),b
  8673  003A74  0ECB               	movlw	low RealtimeMode@SetSpeed
  8674  003A76  6F9F               	movwf	?___asftsub& (0+255),b
  8675  003A78  D946               	call	PL62	;call to abstracted procedure
  8676  003A7A  ECAC  F035         	call	_GetRotaryMultiplier	;wreg free
  8677  003A7E  EC8F  F03B         	call	___lbtoft
  8678  003A82  C073  F077         	movff	?___lbtoft,?___ftmul
  8679  003A86  C074  F078         	movff	?___lbtoft+1,?___ftmul+1
  8680  003A8A  C075  F079         	movff	?___lbtoft+2,?___ftmul+2
  8681  003A8E  EC52  F031         	call	___ftmul	;wreg free
  8682  003A92  C077  F0A1         	movff	?___ftmul,?___asftsub+2
  8683  003A96  C078  F0A2         	movff	?___ftmul+1,?___asftsub+3
  8684  003A9A  C079  F0A3         	movff	?___ftmul+2,?___asftsub+4
  8685  003A9E  EC17  F03A         	call	___asftsub	;wreg free
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;RealtimeMode.c: 46: if (SetSpeed<-90) SetSpeed = -90;
  8689  003AA2  C0CB  F088         	movff	RealtimeMode@SetSpeed,?___ftge
  8690  003AA6  C0CC  F089         	movff	RealtimeMode@SetSpeed+1,?___ftge+1
  8691  003AAA  C0CD  F08A         	movff	RealtimeMode@SetSpeed+2,?___ftge+2
  8692  003AAE  6B8B               	clrf	(?___ftge+3)& (0+255),b
  8693  003AB0  0EB4               	movlw	180
  8694  003AB2  6F8C               	movwf	(?___ftge+4)& (0+255),b
  8695  003AB4  0EC2               	movlw	194
  8696  003AB6  6F8D               	movwf	(?___ftge+5)& (0+255),b
  8697  003AB8  ECB1  F037         	call	___ftge	;wreg free
  8698  003ABC  E205               	bc	l18905
  8699                           
  8700                           ; BSR set to: 0
  8701  003ABE  6BCB               	clrf	RealtimeMode@SetSpeed& (0+255),b
  8702  003AC0  0EB4               	movlw	180
  8703  003AC2  6FCC               	movwf	(RealtimeMode@SetSpeed+1)& (0+255),b
  8704  003AC4  0EC2               	movlw	194
  8705  003AC6  6FCD               	movwf	(RealtimeMode@SetSpeed+2)& (0+255),b
  8706  003AC8                     l18905:
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;RealtimeMode.c: 47: }
  8710                           ;RealtimeMode.c: 49: LCD_SetPosition(1, 6);
  8711  003AC8  0E06               	movlw	6
  8712  003ACA  6F75               	movwf	?_LCD_SetPosition& (0+255),b
  8713  003ACC  0E01               	movlw	1
  8714  003ACE  ECDF  F036         	call	_LCD_SetPosition
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;RealtimeMode.c: 51: LCD_PrintFloat(SetSpeed, 2, 2, 1);
  8718  003AD2  C0CB  F0B9         	movff	RealtimeMode@SetSpeed,?_LCD_PrintFloat
  8719  003AD6  C0CC  F0BA         	movff	RealtimeMode@SetSpeed+1,?_LCD_PrintFloat+1
  8720  003ADA  C0CD  F0BB         	movff	RealtimeMode@SetSpeed+2,?_LCD_PrintFloat+2
  8721  003ADE  0E02               	movlw	2
  8722  003AE0  6FBC               	movwf	(?_LCD_PrintFloat+3)& (0+255),b
  8723  003AE2  6FBD               	movwf	(?_LCD_PrintFloat+4)& (0+255),b
  8724  003AE4  0E01               	movlw	1
  8725  003AE6  6FBE               	movwf	(?_LCD_PrintFloat+5)& (0+255),b
  8726  003AE8  ECFD  F02A         	call	_LCD_PrintFloat	;wreg free
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;RealtimeMode.c: 54: if (bMove_Neg) {
  8730  003AEC  A05A               	btfss	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
  8731  003AEE  D050               	goto	l18941
  8732                           
  8733                           ;RealtimeMode.c: 55: if (SetSpeed < 0) {
  8734  003AF0  0100               	movlb	0	; () banked
  8735  003AF2  51CD               	movf	(RealtimeMode@SetSpeed+2)& (0+255),w,b
  8736  003AF4  0A80               	xorlw	128
  8737  003AF6  0F80               	addlw	128
  8738  003AF8  E105               	bnz	u11125
  8739  003AFA  0E00               	movlw	0
  8740  003AFC  5DCC               	subwf	(RealtimeMode@SetSpeed+1)& (0+255),w,b
  8741  003AFE  E102               	bnz	u11125
  8742  003B00  0E00               	movlw	0
  8743  003B02  5DCB               	subwf	RealtimeMode@SetSpeed& (0+255),w,b
  8744  003B04                     u11125:
  8745  003B04  E229               	bc	l18921
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;RealtimeMode.c: 56: Speed_SetToThis = (unsigned long) (-SetSpeed * Config.Counts_Per_De
      +                          gree * 33554.4320);
  8749  003B06  C2F2  F07A         	movff	_Config+28,?___ftmul+3
  8750  003B0A  C2F3  F07B         	movff	_Config+29,?___ftmul+4
  8751  003B0E  C2F4  F07C         	movff	_Config+30,?___ftmul+5
  8752  003B12  C0CB  F06B         	movff	RealtimeMode@SetSpeed,?___ftneg
  8753  003B16  C0CC  F06C         	movff	RealtimeMode@SetSpeed+1,?___ftneg+1
  8754  003B1A  C0CD  F06D         	movff	RealtimeMode@SetSpeed+2,?___ftneg+2
  8755  003B1E  ECED  F03B         	call	___ftneg	;wreg free
  8756  003B22  C06B  F077         	movff	?___ftneg,?___ftmul
  8757  003B26  C06C  F078         	movff	?___ftneg+1,?___ftmul+1
  8758  003B2A  C06D  F079         	movff	?___ftneg+2,?___ftmul+2
  8759  003B2E  EC52  F031         	call	___ftmul	;wreg free
  8760                           
  8761                           ;RealtimeMode.c: 56: Speed_SetToThis = (unsigned long) (-SetSpeed * Config.Counts_Per_De
      +                          gree * 33554.4320);
  8762  003B32  D8B7               	call	PL25	;call to abstracted procedure
  8763  003B34  EC52  F031         	call	___ftmul	;wreg free
  8764  003B38  C077  F0AA         	movff	?___ftmul,?___fttol
  8765  003B3C  C078  F0AB         	movff	?___ftmul+1,?___fttol+1
  8766  003B40  C079  F0AC         	movff	?___ftmul+2,?___fttol+2
  8767  003B44  EC3B  F034         	call	___fttol	;wreg free
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;RealtimeMode.c: 57: Speed_SetPending = 1;
  8771  003B48  D8D4               	call	PL55	;call to abstracted procedure
  8772                           
  8773                           ;RealtimeMode.c: 58: while (Speed_SetPending) Idle();
  8774  003B4A  D002               	goto	l18919
  8775  003B4C                     l18917:
  8776  003B4C  ECDF  F024         	call	_Idle	;wreg free
  8777  003B50                     l18919:
  8778  003B50  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8779  003B52  A258               	btfss	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8780  003B54  D068               	goto	l18971
  8781  003B56  D7FA               	goto	l18917
  8782  003B58                     l18921:
  8783                           
  8784                           ; BSR set to: 0
  8785  003B58  0E00               	movlw	0
  8786  003B5A  D8C1               	call	PL54	;call to abstracted procedure
  8787  003B5C  ECB1  F037         	call	___ftge	;wreg free
  8788  003B60  E20F               	bc	l18933
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;RealtimeMode.c: 60: Speed_SetToThis = 1;
  8792                           
  8793                           ; BSR set to: 1
  8794                           ;RealtimeMode.c: 61: Speed_SetPending = 1;
  8795  003B62  D897               	call	PL23	;call to abstracted procedure
  8796                           
  8797                           ;RealtimeMode.c: 62: while (Speed_SetPending) Idle();
  8798  003B64  D002               	goto	l18929
  8799  003B66                     l18927:
  8800  003B66  ECDF  F024         	call	_Idle	;wreg free
  8801  003B6A                     l18929:
  8802  003B6A  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8803  003B6C  B258               	btfsc	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8804  003B6E  D7FB               	goto	l18927
  8805                           
  8806                           ;RealtimeMode.c: 63: if (!Speed_IsAccelerating) {
  8807  003B70  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
  8808  003B72  B058               	btfsc	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
  8809  003B74  D058               	goto	l18971
  8810                           
  8811                           ;RealtimeMode.c: 64: bSpeedMode = 0;
  8812  003B76  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8813                           
  8814                           ;RealtimeMode.c: 65: bSpeedMode = 0;
  8815  003B78  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8816                           
  8817                           ;RealtimeMode.c: 66: Move_shifted_position.ul = 0;
  8818                           
  8819                           ;RealtimeMode.c: 67: Move_speedQ24 = 0;
  8820                           
  8821                           ;RealtimeMode.c: 68: Move_position[0].ul = 0;
  8822                           
  8823                           ;RealtimeMode.c: 69: Move_position[1].ul = 0;
  8824  003B7A  D878               	call	PL5	;call to abstracted procedure
  8825                           
  8826                           ;RealtimeMode.c: 71: bMove_Neg = 0;
  8827  003B7C  905A               	bcf	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
  8828  003B7E  D047               	goto	L8
  8829  003B80                     l18933:
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;RealtimeMode.c: 79: Speed_SetToThis = 1;
  8833                           
  8834                           ; BSR set to: 1
  8835                           ;RealtimeMode.c: 80: Speed_SetPending = 1;
  8836  003B80  D888               	call	PL23	;call to abstracted procedure
  8837                           
  8838                           ;RealtimeMode.c: 81: while (Speed_SetPending) Idle();
  8839  003B82  D002               	goto	l18939
  8840  003B84                     l18937:
  8841  003B84  ECDF  F024         	call	_Idle	;wreg free
  8842  003B88                     l18939:
  8843  003B88  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8844  003B8A  A258               	btfss	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8845  003B8C  D04C               	goto	l18971
  8846  003B8E  D7FA               	goto	l18937
  8847  003B90                     l18941:
  8848                           
  8849                           ;RealtimeMode.c: 84: if (SetSpeed > 0) {
  8850  003B90  0E00               	movlw	0
  8851  003B92  0100               	movlb	0	; () banked
  8852  003B94  D8A4               	call	PL54	;call to abstracted procedure
  8853  003B96  ECB1  F037         	call	___ftge	;wreg free
  8854  003B9A  E221               	bc	l18951
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;RealtimeMode.c: 85: Speed_SetToThis = (unsigned long) (SetSpeed * Config.Counts_Per_Deg
      +                          ree * 33554.4320);
  8858  003B9C  C0CB  F07A         	movff	RealtimeMode@SetSpeed,?___ftmul+3
  8859  003BA0  C0CC  F07B         	movff	RealtimeMode@SetSpeed+1,?___ftmul+4
  8860  003BA4  C0CD  F07C         	movff	RealtimeMode@SetSpeed+2,?___ftmul+5
  8861  003BA8  C2F2  F077         	movff	_Config+28,?___ftmul
  8862  003BAC  C2F3  F078         	movff	_Config+29,?___ftmul+1
  8863  003BB0  C2F4  F079         	movff	_Config+30,?___ftmul+2
  8864  003BB4  EC52  F031         	call	___ftmul	;wreg free
  8865                           
  8866                           ;RealtimeMode.c: 85: Speed_SetToThis = (unsigned long) (SetSpeed * Config.Counts_Per_Deg
      +                          ree * 33554.4320);
  8867  003BB8  D874               	call	PL25	;call to abstracted procedure
  8868  003BBA  EC52  F031         	call	___ftmul	;wreg free
  8869  003BBE  C077  F0AA         	movff	?___ftmul,?___fttol
  8870  003BC2  C078  F0AB         	movff	?___ftmul+1,?___fttol+1
  8871  003BC6  C079  F0AC         	movff	?___ftmul+2,?___fttol+2
  8872  003BCA  EC3B  F034         	call	___fttol	;wreg free
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;RealtimeMode.c: 86: Speed_SetPending = 1;
  8876  003BCE  D891               	call	PL55	;call to abstracted procedure
  8877                           
  8878                           ;RealtimeMode.c: 87: while (Speed_SetPending) Idle();
  8879  003BD0  D002               	goto	l18949
  8880  003BD2                     l18947:
  8881  003BD2  ECDF  F024         	call	_Idle	;wreg free
  8882  003BD6                     l18949:
  8883  003BD6  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8884  003BD8  A258               	btfss	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8885  003BDA  D025               	goto	l18971
  8886  003BDC  D7FA               	goto	l18947
  8887  003BDE                     l18951:
  8888                           
  8889                           ; BSR set to: 0
  8890  003BDE  51CD               	movf	(RealtimeMode@SetSpeed+2)& (0+255),w,b
  8891  003BE0  0A80               	xorlw	128
  8892  003BE2  0F80               	addlw	128
  8893  003BE4  E105               	bnz	u11205
  8894  003BE6  0E00               	movlw	0
  8895  003BE8  5DCC               	subwf	(RealtimeMode@SetSpeed+1)& (0+255),w,b
  8896  003BEA  E102               	bnz	u11205
  8897  003BEC  0E00               	movlw	0
  8898  003BEE  5DCB               	subwf	RealtimeMode@SetSpeed& (0+255),w,b
  8899  003BF0                     u11205:
  8900  003BF0  E213               	bc	l18963
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;RealtimeMode.c: 89: Speed_SetToThis = 1;
  8904                           
  8905                           ; BSR set to: 1
  8906                           ;RealtimeMode.c: 90: Speed_SetPending = 1;
  8907  003BF2  D84F               	call	PL23	;call to abstracted procedure
  8908                           
  8909                           ;RealtimeMode.c: 91: while (Speed_SetPending) Idle();
  8910  003BF4  D002               	goto	l18959
  8911  003BF6                     l18957:
  8912  003BF6  ECDF  F024         	call	_Idle	;wreg free
  8913  003BFA                     l18959:
  8914  003BFA  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8915  003BFC  B258               	btfsc	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8916  003BFE  D7FB               	goto	l18957
  8917                           
  8918                           ;RealtimeMode.c: 93: if (!Speed_IsAccelerating) {
  8919  003C00  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
  8920  003C02  B058               	btfsc	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
  8921  003C04  D010               	goto	l18971
  8922                           
  8923                           ;RealtimeMode.c: 94: bSpeedMode = 0;
  8924  003C06  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8925                           
  8926                           ;RealtimeMode.c: 95: bSpeedMode = 0;
  8927  003C08  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8928                           
  8929                           ;RealtimeMode.c: 96: Move_shifted_position.ul = 0;
  8930                           
  8931                           ;RealtimeMode.c: 97: Move_speedQ24 = 0;
  8932                           
  8933                           ;RealtimeMode.c: 98: Move_position[0].ul = 0;
  8934                           
  8935                           ;RealtimeMode.c: 99: Move_position[1].ul = 0;
  8936  003C0A  D830               	call	PL5	;call to abstracted procedure
  8937                           
  8938                           ;RealtimeMode.c: 100: bMove_Neg = 1;
  8939  003C0C  805A               	bsf	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
  8940  003C0E                     L8:
  8941                           
  8942                           ;RealtimeMode.c: 101: bLock_Motor_Position = 1;
  8943                           
  8944                           ;RealtimeMode.c: 102: Move_Origin = Motor_Position;
  8945                           
  8946                           ;RealtimeMode.c: 103: bLock_Motor_Position = 0;
  8947  003C0E  D85C               	call	PL49	;call to abstracted procedure
  8948                           
  8949                           ;RealtimeMode.c: 104: bSpeedMode = 1;
  8950  003C10  845A               	bsf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8951                           
  8952                           ;RealtimeMode.c: 105: bSpeedMode = 1;
  8953  003C12  0100               	movlb	(_bSpeedMode/(0+8)) shr (0+8)
  8954  003C14  845A               	bsf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  8955  003C16  D007               	goto	l18971
  8956  003C18                     l18963:
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;RealtimeMode.c: 108: Speed_SetToThis = 1;
  8960                           
  8961                           ; BSR set to: 1
  8962                           ;RealtimeMode.c: 109: Speed_SetPending = 1;
  8963  003C18  D83C               	call	PL23	;call to abstracted procedure
  8964                           
  8965                           ;RealtimeMode.c: 110: while (Speed_SetPending) Idle();
  8966  003C1A  D002               	goto	l18969
  8967  003C1C                     l18967:
  8968  003C1C  ECDF  F024         	call	_Idle	;wreg free
  8969  003C20                     l18969:
  8970  003C20  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  8971  003C22  B258               	btfsc	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  8972  003C24  D7FB               	goto	l18967
  8973  003C26                     l18971:
  8974                           
  8975                           ;RealtimeMode.c: 111: }
  8976                           ;RealtimeMode.c: 112: }
  8977                           ;RealtimeMode.c: 114: Idle();
  8978  003C26  ECDF  F024         	call	_Idle	;wreg free
  8979  003C2A  D6E0               	goto	l18875
  8980  003C2C                     l18973:
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;RealtimeMode.c: 119: LCD_ClearDisplay();
  8984  003C2C  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;RealtimeMode.c: 120: LCD_PrintString("STOPPING...\0");
  8988  003C30  0E1C               	movlw	high STR_49
  8989  003C32  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  8990  003C34  0EAE               	movlw	low STR_49
  8991  003C36  6F76               	movwf	?_LCD_PrintString& (0+255),b
  8992  003C38  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  8993  003C3C                     l18977:
  8994                           
  8995                           ;RealtimeMode.c: 122: Speed_SetToThis = 1;
  8996  003C3C  0E01               	movlw	1
  8997  003C3E  0101               	movlb	1	; () banked
  8998  003C40  6FF4               	movwf	_Speed_SetToThis& (0+255),b
  8999  003C42  0E00               	movlw	0
  9000  003C44  6FF5               	movwf	(_Speed_SetToThis+1)& (0+255),b
  9001  003C46  6FF6               	movwf	(_Speed_SetToThis+2)& (0+255),b
  9002  003C48  6FF7               	movwf	(_Speed_SetToThis+3)& (0+255),b
  9003                           
  9004                           ; BSR set to: 1
  9005                           ;RealtimeMode.c: 123: Speed_SetPending = 1;
  9006  003C4A  8258               	bsf	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  9007                           
  9008                           ;RealtimeMode.c: 124: while (Speed_SetPending) Idle();
  9009  003C4C  D002               	goto	l18983
  9010  003C4E                     l18981:
  9011  003C4E  ECDF  F024         	call	_Idle	;wreg free
  9012  003C52                     l18983:
  9013  003C52  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
  9014  003C54  B258               	btfsc	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  9015  003C56  D7FB               	goto	l18981
  9016                           
  9017                           ;RealtimeMode.c: 125: if (!Speed_IsAccelerating) {
  9018  003C58  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
  9019  003C5A  B058               	btfsc	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
  9020  003C5C  D004               	goto	l18987
  9021                           
  9022                           ;RealtimeMode.c: 126: bSpeedMode = 0;
  9023  003C5E  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  9024                           
  9025                           ;RealtimeMode.c: 127: bSpeedMode = 0;
  9026  003C60  0100               	movlb	(_bSpeedMode/(0+8)) shr (0+8)
  9027  003C62  945A               	bcf	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
  9028                           
  9029                           ;RealtimeMode.c: 128: return;
  9030  003C64  0012               	return	
  9031  003C66                     l18987:
  9032                           
  9033                           ;RealtimeMode.c: 129: }
  9034                           ;RealtimeMode.c: 130: Idle();
  9035  003C66  ECDF  F024         	call	_Idle	;wreg free
  9036  003C6A  D7E8               	goto	l18977
  9037  003C6C                     __end_of_RealtimeMode:
  9038                           	opt stack 0
  9039  003C6C                     PL5:
  9040  003C6C  6A41               	clrf	_Move_shifted_position,c
  9041  003C6E  6A42               	clrf	_Move_shifted_position+1,c
  9042  003C70  6A43               	clrf	_Move_shifted_position+2,c
  9043  003C72  6A44               	clrf	_Move_shifted_position+3,c
  9044  003C74  0101               	movlb	1	; () banked
  9045  003C76  6BF0               	clrf	_Move_speedQ24& (0+255),b
  9046  003C78  6BF1               	clrf	(_Move_speedQ24+1)& (0+255),b
  9047  003C7A  6BF2               	clrf	(_Move_speedQ24+2)& (0+255),b
  9048  003C7C  6BF3               	clrf	(_Move_speedQ24+3)& (0+255),b
  9049  003C7E  0104               	movlb	4	; () banked
  9050  003C80  6B10               	clrf	_Move_position& (0+255),b
  9051  003C82  6B11               	clrf	(_Move_position+1)& (0+255),b
  9052  003C84  6B12               	clrf	(_Move_position+2)& (0+255),b
  9053  003C86  6B13               	clrf	(_Move_position+3)& (0+255),b
  9054  003C88  6B14               	clrf	(_Move_position+4)& (0+255),b
  9055  003C8A  6B15               	clrf	(_Move_position+5)& (0+255),b
  9056  003C8C  6B16               	clrf	(_Move_position+6)& (0+255),b
  9057  003C8E  6B17               	clrf	(_Move_position+7)& (0+255),b
  9058  003C90  0012               	return	
  9059  003C92                     PL23:
  9060  003C92  0E01               	movlw	1
  9061  003C94  0101               	movlb	1	; () banked
  9062  003C96  6FF4               	movwf	_Speed_SetToThis& (0+255),b
  9063  003C98  6BF5               	clrf	(_Speed_SetToThis+1)& (0+255),b
  9064  003C9A  6BF6               	clrf	(_Speed_SetToThis+2)& (0+255),b
  9065  003C9C  6BF7               	clrf	(_Speed_SetToThis+3)& (0+255),b
  9066  003C9E  8258               	bsf	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  9067  003CA0  0C00               	retlw	0
  9068  003CA2                     PL25:
  9069  003CA2  C077  F0C7         	movff	?___ftmul,_RealtimeMode$3898
  9070  003CA6  C078  F0C8         	movff	?___ftmul+1,_RealtimeMode$3898+1
  9071  003CAA  C079  F0C9         	movff	?___ftmul+2,_RealtimeMode$3898+2
  9072  003CAE  0E12               	movlw	18
  9073  003CB0  6F7A               	movwf	(?___ftmul+3)& (0+255),b
  9074  003CB2  0E03               	movlw	3
  9075  003CB4  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  9076  003CB6  0E47               	movlw	71
  9077  003CB8  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  9078  003CBA  C0C7  F077         	movff	_RealtimeMode$3898,?___ftmul
  9079  003CBE  C0C8  F078         	movff	_RealtimeMode$3898+1,?___ftmul+1
  9080  003CC2  C0C9  F079         	movff	_RealtimeMode$3898+2,?___ftmul+2
  9081  003CC6  0C47               	retlw	71
  9082  003CC8                     PL49:
  9083  003CC8  8059               	bsf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
  9084  003CCA  C1E4  F03D         	movff	_Motor_Position,_Move_Origin
  9085  003CCE  C1E5  F03E         	movff	_Motor_Position+1,_Move_Origin+1
  9086  003CD2  C1E6  F03F         	movff	_Motor_Position+2,_Move_Origin+2
  9087  003CD6  C1E7  F040         	movff	_Motor_Position+3,_Move_Origin+3
  9088  003CDA  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
  9089  003CDC  0012               	return	
  9090  003CDE                     PL54:
  9091  003CDE  6B88               	clrf	?___ftge& (0+255),b
  9092  003CE0  6B89               	clrf	(?___ftge+1)& (0+255),b
  9093  003CE2  6B8A               	clrf	(?___ftge+2)& (0+255),b
  9094  003CE4  C0CB  F08B         	movff	RealtimeMode@SetSpeed,?___ftge+3
  9095  003CE8  C0CC  F08C         	movff	RealtimeMode@SetSpeed+1,?___ftge+4
  9096  003CEC  C0CD  F08D         	movff	RealtimeMode@SetSpeed+2,?___ftge+5
  9097  003CF0  0012               	return	
  9098  003CF2                     PL55:
  9099  003CF2  C0AA  F1F4         	movff	?___fttol,_Speed_SetToThis
  9100  003CF6  C0AB  F1F5         	movff	?___fttol+1,_Speed_SetToThis+1
  9101  003CFA  C0AC  F1F6         	movff	?___fttol+2,_Speed_SetToThis+2
  9102  003CFE  C0AD  F1F7         	movff	?___fttol+3,_Speed_SetToThis+3
  9103  003D02  8258               	bsf	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
  9104  003D04  0012               	return	
  9105  003D06                     PL62:
  9106  003D06  0ECD               	movlw	205
  9107  003D08  6F7A               	movwf	(?___ftmul+3)& (0+255),b
  9108  003D0A  0E4C               	movlw	76
  9109  003D0C  6F7B               	movwf	(?___ftmul+4)& (0+255),b
  9110  003D0E  0E3D               	movlw	61
  9111  003D10  6F7C               	movwf	(?___ftmul+5)& (0+255),b
  9112  003D12  0C3D               	retlw	61
  9113                           tblptru	equ	0xFF8
  9114                           tblptrh	equ	0xFF7
  9115                           tblptrl	equ	0xFF6
  9116                           tablat	equ	0xFF5
  9117                           prodh	equ	0xFF4
  9118                           prodl	equ	0xFF3
  9119                           intcon	equ	0xFF2
  9120                           intcon2	equ	0xFF1
  9121                           postinc0	equ	0xFEE
  9122                           wreg	equ	0xFE8
  9123                           postinc1	equ	0xFE6
  9124                           postdec1	equ	0xFE5
  9125                           fsr1h	equ	0xFE2
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function _CreateWaypointProgram *****************
  9135 ;; Defined at:
  9136 ;;		line 9 in file "Z:\CineFlux\Dropbox\Orbit\WaypointProgram.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;  CommandMenu     4  158[BANK1 ] PTR const unsigned char 
  9141 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  9142 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  9143 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  9144 ;;		 -> STR_13(19), STR_12(11), 
  9145 ;;  DirectionMen    4  154[BANK1 ] PTR const unsigned char 
  9146 ;;		 -> STR_73(13), STR_72(13), STR_71(8), STR_70(9), 
  9147 ;;		 -> STR_21(13), STR_20(13), STR_19(14), STR_18(15), 
  9148 ;;		 -> STR_17(16), STR_16(16), STR_15(11), STR_14(8), 
  9149 ;;		 -> STR_13(19), STR_12(11), 
  9150 ;;  MinTravelTim    3  185[BANK1 ] PTR const unsigned char 
  9151 ;;  DwellTime       3  182[BANK1 ] PTR const unsigned char 
  9152 ;;  TravelTime      3  177[BANK1 ] PTR const unsigned char 
  9153 ;;  CycleCount      3  174[BANK1 ] PTR const unsigned char 
  9154 ;;  DeltaDistanc    3  169[BANK1 ] PTR const unsigned char 
  9155 ;;  CurrentPos      3  166[BANK1 ] PTR const unsigned char 
  9156 ;;  LastPos         3  162[BANK1 ] PTR const unsigned char 
  9157 ;;  intTravelTim    2  180[BANK1 ] unsigned int 
  9158 ;;  intDistance     2  172[BANK1 ] int 
  9159 ;;  COMMAND_1       2  152[BANK1 ] PTR const unsigned char 
  9160 ;;		 -> STR_73(13), 
  9161 ;;  COMMAND_0       2  150[BANK1 ] PTR const unsigned char 
  9162 ;;		 -> STR_72(13), 
  9163 ;;  DIRECTION_1     2  148[BANK1 ] PTR const unsigned char 
  9164 ;;		 -> STR_71(8), 
  9165 ;;  DIRECTION_0     2  146[BANK1 ] PTR const unsigned char 
  9166 ;;		 -> STR_70(9), 
  9167 ;;  ret             1  189[BANK1 ] char 
  9168 ;;  idx             1  188[BANK1 ] char 
  9169 ;;  Done            1  165[BANK1 ] unsigned char 
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  1    wreg      char 
  9172 ;; Registers used:
  9173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : F/4
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Locals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Totals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;Total ram usage:       45 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:   10
  9186 ;; This function calls:
  9187 ;;		_LCD_ClearDisplay
  9188 ;;		_LCD_PrintString
  9189 ;;		_LCD_SetPosition
  9190 ;;		_GetClick
  9191 ;;		_GetCurrentAngle
  9192 ;;		___fttol
  9193 ;;		_GetCurrentLinearPosition
  9194 ;;		_GetTime
  9195 ;;		_Idle
  9196 ;;		___ftsub
  9197 ;;		_LCD_PrintLong
  9198 ;;		_Move
  9199 ;;		_MinTimeToMove
  9200 ;;		___lwtoft
  9201 ;;		___asftsub
  9202 ;;		___ftge
  9203 ;;		_GetYesNo
  9204 ;;		_DisplayChoices
  9205 ;;		_GetFloat
  9206 ;;		_RunWaypointProgram
  9207 ;;		_GetPresetNumber
  9208 ;;		_SavePreset
  9209 ;; This function is called by:
  9210 ;;		_main
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           	psect	text10
  9215  002A20                     __ptext10:
  9216                           	opt stack 0
  9217  002A20                     _CreateWaypointProgram:
  9218                           	opt stack 20
  9219                           
  9220                           ; BSR set to: 4
  9221                           ;WaypointProgram.c: 11: double LastPos = 0;
  9222  002A20  0101               	movlb	1	; () banked
  9223  002A22  6BA2               	clrf	CreateWaypointProgram@LastPos& (0+255),b
  9224  002A24  6BA3               	clrf	(CreateWaypointProgram@LastPos+1)& (0+255),b
  9225  002A26  6BA4               	clrf	(CreateWaypointProgram@LastPos+2)& (0+255),b
  9226                           
  9227                           ;WaypointProgram.c: 12: double CurrentPos = 0;
  9228  002A28  6BA6               	clrf	CreateWaypointProgram@CurrentPos& (0+255),b
  9229  002A2A  6BA7               	clrf	(CreateWaypointProgram@CurrentPos+1)& (0+255),b
  9230  002A2C  6BA8               	clrf	(CreateWaypointProgram@CurrentPos+2)& (0+255),b
  9231                           
  9232                           ;WaypointProgram.c: 13: double DeltaDistance = 0;
  9233  002A2E  6BA9               	clrf	CreateWaypointProgram@DeltaDistance& (0+255),b
  9234  002A30  6BAA               	clrf	(CreateWaypointProgram@DeltaDistance+1)& (0+255),b
  9235  002A32  6BAB               	clrf	(CreateWaypointProgram@DeltaDistance+2)& (0+255),b
  9236                           
  9237                           ;WaypointProgram.c: 14: signed int intDistance = 0;
  9238  002A34  6BAC               	clrf	CreateWaypointProgram@intDistance& (0+255),b
  9239  002A36  6BAD               	clrf	(CreateWaypointProgram@intDistance+1)& (0+255),b
  9240                           
  9241                           ;WaypointProgram.c: 15: double TravelTime = 0;
  9242                           
  9243                           ;WaypointProgram.c: 16: double MinTravelTime = 0;
  9244  002A38  DAC3               	call	PL60	;call to abstracted procedure
  9245                           
  9246                           ;WaypointProgram.c: 17: unsigned int intTravelTime = 0;
  9247  002A3A  6BB4               	clrf	CreateWaypointProgram@intTravelTime& (0+255),b
  9248  002A3C  6BB5               	clrf	(CreateWaypointProgram@intTravelTime+1)& (0+255),b
  9249                           
  9250                           ;WaypointProgram.c: 18: double DwellTime = 0;
  9251  002A3E  6BB6               	clrf	CreateWaypointProgram@DwellTime& (0+255),b
  9252  002A40  6BB7               	clrf	(CreateWaypointProgram@DwellTime+1)& (0+255),b
  9253  002A42  6BB8               	clrf	(CreateWaypointProgram@DwellTime+2)& (0+255),b
  9254                           
  9255                           ;WaypointProgram.c: 19: double CycleCount = 0;
  9256  002A44  6BAE               	clrf	CreateWaypointProgram@CycleCount& (0+255),b
  9257  002A46  6BAF               	clrf	(CreateWaypointProgram@CycleCount+1)& (0+255),b
  9258  002A48  6BB0               	clrf	(CreateWaypointProgram@CycleCount+2)& (0+255),b
  9259                           
  9260                           ;WaypointProgram.c: 21: char Done = 0;
  9261  002A4A  6BA5               	clrf	CreateWaypointProgram@Done& (0+255),b
  9262                           
  9263                           ;WaypointProgram.c: 22: signed char idx = 0;
  9264  002A4C  6BBC               	clrf	CreateWaypointProgram@idx& (0+255),b
  9265                           
  9266                           ;WaypointProgram.c: 23: CurrentPath.PointCount = 0;
  9267  002A4E  0104               	movlb	4	; () banked
  9268  002A50  6B1B               	clrf	(_CurrentPath+3)& (0+255),b
  9269                           
  9270                           ; BSR set to: 4
  9271                           ;WaypointProgram.c: 25: const char *DIRECTION_0 = "ONE-WAY\0";
  9272  002A52  0E1D               	movlw	high STR_70
  9273  002A54  0101               	movlb	1	; () banked
  9274  002A56  6F93               	movwf	(CreateWaypointProgram@DIRECTION_0+1)& (0+255),b
  9275  002A58  0E5B               	movlw	low STR_70
  9276  002A5A  6F92               	movwf	CreateWaypointProgram@DIRECTION_0& (0+255),b
  9277                           
  9278                           ;WaypointProgram.c: 26: const char *DIRECTION_1 = "BOUNCE\0";
  9279  002A5C  0E1D               	movlw	high STR_71
  9280  002A5E  6F95               	movwf	(CreateWaypointProgram@DIRECTION_1+1)& (0+255),b
  9281  002A60  0E75               	movlw	low STR_71
  9282  002A62  6F94               	movwf	CreateWaypointProgram@DIRECTION_1& (0+255),b
  9283                           
  9284                           ; BSR set to: 1
  9285                           ;WaypointProgram.c: 27: const char*DirectionMenu[2];
  9286                           ;WaypointProgram.c: 28: DirectionMenu[0] = DIRECTION_0;
  9287  002A64  C192  F19A         	movff	CreateWaypointProgram@DIRECTION_0,CreateWaypointProgram@DirectionMenu
  9288  002A68  C193  F19B         	movff	CreateWaypointProgram@DIRECTION_0+1,CreateWaypointProgram@DirectionMenu+1
  9289                           
  9290                           ; BSR set to: 1
  9291                           ;WaypointProgram.c: 29: DirectionMenu[1] = DIRECTION_1;
  9292  002A6C  C194  F19C         	movff	CreateWaypointProgram@DIRECTION_1,CreateWaypointProgram@DirectionMenu+2
  9293  002A70  C195  F19D         	movff	CreateWaypointProgram@DIRECTION_1+1,CreateWaypointProgram@DirectionMenu+3
  9294                           
  9295                           ;WaypointProgram.c: 31: const char *COMMAND_0 = "RUN PROGRAM\0";
  9296  002A74  0E1C               	movlw	high STR_20
  9297  002A76  6F97               	movwf	(CreateWaypointProgram@COMMAND_0+1)& (0+255),b
  9298  002A78  0EC8               	movlw	low STR_20
  9299  002A7A  6F96               	movwf	CreateWaypointProgram@COMMAND_0& (0+255),b
  9300                           
  9301                           ;WaypointProgram.c: 32: const char *COMMAND_1 = "SAVE PRESET\0";
  9302  002A7C  0E1C               	movlw	high STR_21
  9303  002A7E  6F99               	movwf	(CreateWaypointProgram@COMMAND_1+1)& (0+255),b
  9304  002A80  0EE2               	movlw	low STR_21
  9305  002A82  6F98               	movwf	CreateWaypointProgram@COMMAND_1& (0+255),b
  9306                           
  9307                           ; BSR set to: 1
  9308                           ;WaypointProgram.c: 33: const char*CommandMenu[2];
  9309                           ;WaypointProgram.c: 34: CommandMenu[0] = COMMAND_0;
  9310  002A84  C196  F19E         	movff	CreateWaypointProgram@COMMAND_0,CreateWaypointProgram@CommandMenu
  9311  002A88  C197  F19F         	movff	CreateWaypointProgram@COMMAND_0+1,CreateWaypointProgram@CommandMenu+1
  9312                           
  9313                           ; BSR set to: 1
  9314                           ;WaypointProgram.c: 35: CommandMenu[1] = COMMAND_1;
  9315  002A8C  C198  F1A0         	movff	CreateWaypointProgram@COMMAND_1,CreateWaypointProgram@CommandMenu+2
  9316  002A90  C199  F1A1         	movff	CreateWaypointProgram@COMMAND_1+1,CreateWaypointProgram@CommandMenu+3
  9317  002A94                     l19001:
  9318                           
  9319                           ; BSR set to: 1
  9320                           ;WaypointProgram.c: 38: TravelTime = 0;
  9321                           
  9322                           ; BSR set to: 1
  9323                           ;WaypointProgram.c: 39: MinTravelTime = 0;
  9324  002A94  DA95               	call	PL60	;call to abstracted procedure
  9325                           
  9326                           ; BSR set to: 1
  9327                           ;WaypointProgram.c: 40: intDistance = 0;
  9328  002A96  6BAC               	clrf	CreateWaypointProgram@intDistance& (0+255),b
  9329  002A98  6BAD               	clrf	(CreateWaypointProgram@intDistance+1)& (0+255),b
  9330                           
  9331                           ; BSR set to: 1
  9332                           ;WaypointProgram.c: 41: DeltaDistance = 0;
  9333  002A9A  6BA9               	clrf	CreateWaypointProgram@DeltaDistance& (0+255),b
  9334  002A9C  6BAA               	clrf	(CreateWaypointProgram@DeltaDistance+1)& (0+255),b
  9335  002A9E  6BAB               	clrf	(CreateWaypointProgram@DeltaDistance+2)& (0+255),b
  9336                           
  9337                           ; BSR set to: 1
  9338                           ;WaypointProgram.c: 43: CurrentPos = 0;
  9339  002AA0  6BA6               	clrf	CreateWaypointProgram@CurrentPos& (0+255),b
  9340  002AA2  6BA7               	clrf	(CreateWaypointProgram@CurrentPos+1)& (0+255),b
  9341  002AA4  6BA8               	clrf	(CreateWaypointProgram@CurrentPos+2)& (0+255),b
  9342                           
  9343                           ; BSR set to: 1
  9344                           ;WaypointProgram.c: 46: DwellTime = 0;
  9345                           
  9346                           ; BSR set to: 1
  9347                           
  9348                           ; BSR set to: 1
  9349  002AA6  6BB6               	clrf	CreateWaypointProgram@DwellTime& (0+255),b
  9350  002AA8  6BB7               	clrf	(CreateWaypointProgram@DwellTime+1)& (0+255),b
  9351  002AAA  6BB8               	clrf	(CreateWaypointProgram@DwellTime+2)& (0+255),b
  9352                           
  9353                           ; BSR set to: 1
  9354                           ;WaypointProgram.c: 48: idx = 0;
  9355  002AAC  6BBC               	clrf	CreateWaypointProgram@idx& (0+255),b
  9356                           
  9357                           ; BSR set to: 1
  9358                           ;WaypointProgram.c: 50: LCD_ClearDisplay();
  9359  002AAE  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;WaypointProgram.c: 51: LCD_PrintString("MOVE TO START...\0");
  9363  002AB2  0E1B               	movlw	high STR_22
  9364  002AB4  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9365  002AB6  0E5A               	movlw	low STR_22
  9366  002AB8  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9367  002ABA  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;WaypointProgram.c: 52: LCD_SetPosition(1, 0);
  9371  002ABE  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  9372  002AC0  0E01               	movlw	1
  9373  002AC2  ECDF  F036         	call	_LCD_SetPosition
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;WaypointProgram.c: 53: LCD_PrintString("THEN CLICK.\0");
  9377  002AC6  0E1C               	movlw	high STR_23
  9378  002AC8  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9379  002ACA  0EBB               	movlw	low STR_23
  9380  002ACC  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9381  002ACE  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;WaypointProgram.c: 54: bFollowMode = 1;
  9385  002AD2  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  9386  002AD4  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9387                           
  9388                           ;WaypointProgram.c: 55: ret = GetClick();
  9389  002AD6  ECFC  F03B         	call	_GetClick	;wreg free
  9390  002ADA  0101               	movlb	1	; () banked
  9391  002ADC  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9392                           
  9393                           ; BSR set to: 1
  9394                           ;WaypointProgram.c: 56: if (ret < 0) return ret;
  9395  002ADE  AFBD               	btfss	CreateWaypointProgram@ret& (0+255),7,b
  9396  002AE0  D002               	goto	l2453
  9397                           
  9398                           ; BSR set to: 1
  9399  002AE2  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9400  002AE4  0012               	return	
  9401  002AE6                     l2453:
  9402                           
  9403                           ; BSR set to: 1
  9404                           ;WaypointProgram.c: 57: bFollowMode = 0;
  9405  002AE6  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  9406  002AE8  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9407                           
  9408                           ;WaypointProgram.c: 58: CurrentPath.Origin_deg = (unsigned int) GetCurrentAngle();
  9409  002AEA  ECB1  F032         	call	_GetCurrentAngle	;wreg free
  9410  002AEE  C0A4  F0AA         	movff	?_GetCurrentAngle,?___fttol
  9411  002AF2  C0A5  F0AB         	movff	?_GetCurrentAngle+1,?___fttol+1
  9412  002AF6  C0A6  F0AC         	movff	?_GetCurrentAngle+2,?___fttol+2
  9413  002AFA  EC3B  F034         	call	___fttol	;wreg free
  9414  002AFE  C0AA  F419         	movff	?___fttol,_CurrentPath+1
  9415  002B02  C0AB  F41A         	movff	?___fttol+1,_CurrentPath+2
  9416                           
  9417                           ;WaypointProgram.c: 60: LastPos = GetCurrentLinearPosition();
  9418  002B06  EC08  F038         	call	_GetCurrentLinearPosition	;wreg free
  9419  002B0A  C08D  F1A2         	movff	?_GetCurrentLinearPosition,CreateWaypointProgram@LastPos
  9420  002B0E  C08E  F1A3         	movff	?_GetCurrentLinearPosition+1,CreateWaypointProgram@LastPos+1
  9421  002B12  C08F  F1A4         	movff	?_GetCurrentLinearPosition+2,CreateWaypointProgram@LastPos+2
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;WaypointProgram.c: 62: ret = GetTime("DWELL TIME:\0", &DwellTime, 0, 65535, 0b1110);
  9425  002B16  0E1C               	movlw	high STR_76
  9426  002B18  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  9427  002B1A  0EA1               	movlw	low STR_76
  9428  002B1C  6FD7               	movwf	?_GetTime& (0+255),b
  9429  002B1E  0E01               	movlw	high CreateWaypointProgram@DwellTime
  9430  002B20  0100               	movlb	0	; () banked
  9431  002B22  DA40               	call	PL37	;call to abstracted procedure
  9432  002B24  ECBB  F01A         	call	_GetTime	;wreg free
  9433  002B28  0101               	movlb	1	; () banked
  9434  002B2A  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9435                           
  9436                           ; BSR set to: 1
  9437                           ;WaypointProgram.c: 63: if (ret == -2) return -2;
  9438  002B2C  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9439  002B2E  0AFE               	xorlw	254
  9440  002B30  E101               	bnz	l19047
  9441  002B32                     l19043:
  9442  002B32  0CFE               	retlw	254
  9443  002B34                     l19047:
  9444                           
  9445                           ; BSR set to: 1
  9446                           ;WaypointProgram.c: 64: if (ret == -1) goto labelSetOrigin;
  9447  002B34  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
  9448  002B36  E0AE               	bz	l19001
  9449                           
  9450                           ; BSR set to: 1
  9451                           ;WaypointProgram.c: 65: CurrentPath.DwellTimes_sec[idx] = (unsigned int) (DwellTime);
  9452  002B38  C1B6  F0AA         	movff	CreateWaypointProgram@DwellTime,?___fttol
  9453  002B3C  C1B7  F0AB         	movff	CreateWaypointProgram@DwellTime+1,?___fttol+1
  9454  002B40  C1B8  F0AC         	movff	CreateWaypointProgram@DwellTime+2,?___fttol+2
  9455  002B44  EC3B  F034         	call	___fttol	;wreg free
  9456  002B48  C0AA  F467         	movff	?___fttol,_CurrentPath+79
  9457  002B4C  C0AB  F468         	movff	?___fttol+1,_CurrentPath+80
  9458                           
  9459                           ;WaypointProgram.c: 67: while (!Done) {
  9460  002B50  D1A6               	goto	l2457
  9461  002B52                     l19053:
  9462                           
  9463                           ; BSR set to: 1
  9464                           ;WaypointProgram.c: 69: LCD_ClearDisplay();
  9465  002B52  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;WaypointProgram.c: 70: LCD_PrintString("MOVE TO NEXT POINT\0");
  9469  002B56  0E1A               	movlw	high STR_77
  9470  002B58  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9471  002B5A  0E8A               	movlw	low STR_77
  9472  002B5C  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9473  002B5E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;WaypointProgram.c: 71: LCD_SetPosition(1, 0);
  9477  002B62  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  9478  002B64  0E01               	movlw	1
  9479  002B66  ECDF  F036         	call	_LCD_SetPosition
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;WaypointProgram.c: 72: LCD_PrintString("+XXXX\xDF THEN CLICK\0");
  9483  002B6A  0E1A               	movlw	high STR_78
  9484  002B6C  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9485  002B6E  0EC5               	movlw	low STR_78
  9486  002B70  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9487  002B72  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;WaypointProgram.c: 74: bFollowMode = 1;
  9491  002B76  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9492                           
  9493                           ;WaypointProgram.c: 76: ClearUI_Event = 1;
  9494  002B78  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9495                           
  9496                           ;WaypointProgram.c: 77: while (ClearUI_Event) Idle();
  9497  002B7A  D002               	goto	l19067
  9498  002B7C                     l19065:
  9499  002B7C  ECDF  F024         	call	_Idle	;wreg free
  9500  002B80                     l19067:
  9501  002B80  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
  9502  002B82  B657               	btfsc	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9503  002B84  D7FB               	goto	l19065
  9504                           
  9505                           ;WaypointProgram.c: 78: ret = 0;
  9506  002B86  0101               	movlb	1	; () banked
  9507  002B88  6BBD               	clrf	CreateWaypointProgram@ret& (0+255),b
  9508                           
  9509                           ;WaypointProgram.c: 79: while (!(ret == 1)) {
  9510  002B8A  D087               	goto	l19133
  9511  002B8C                     l19069:
  9512                           
  9513                           ; BSR set to: 1
  9514                           ;WaypointProgram.c: 80: Idle();
  9515  002B8C  ECDF  F024         	call	_Idle	;wreg free
  9516                           
  9517                           ;WaypointProgram.c: 81: CurrentPos = GetCurrentLinearPosition();
  9518  002B90  EC08  F038         	call	_GetCurrentLinearPosition	;wreg free
  9519  002B94  C08D  F1A6         	movff	?_GetCurrentLinearPosition,CreateWaypointProgram@CurrentPos
  9520  002B98  C08E  F1A7         	movff	?_GetCurrentLinearPosition+1,CreateWaypointProgram@CurrentPos+1
  9521  002B9C  C08F  F1A8         	movff	?_GetCurrentLinearPosition+2,CreateWaypointProgram@CurrentPos+2
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;WaypointProgram.c: 82: DeltaDistance = CurrentPos - LastPos;
  9525  002BA0  C1A6  F099         	movff	CreateWaypointProgram@CurrentPos,?___ftsub
  9526  002BA4  C1A7  F09A         	movff	CreateWaypointProgram@CurrentPos+1,?___ftsub+1
  9527  002BA8  C1A8  F09B         	movff	CreateWaypointProgram@CurrentPos+2,?___ftsub+2
  9528  002BAC  C1A2  F09C         	movff	CreateWaypointProgram@LastPos,?___ftsub+3
  9529  002BB0  C1A3  F09D         	movff	CreateWaypointProgram@LastPos+1,?___ftsub+4
  9530  002BB4  C1A4  F09E         	movff	CreateWaypointProgram@LastPos+2,?___ftsub+5
  9531  002BB8  ECDE  F03A         	call	___ftsub	;wreg free
  9532  002BBC  C099  F1A9         	movff	?___ftsub,CreateWaypointProgram@DeltaDistance
  9533  002BC0  C09A  F1AA         	movff	?___ftsub+1,CreateWaypointProgram@DeltaDistance+1
  9534  002BC4  C09B  F1AB         	movff	?___ftsub+2,CreateWaypointProgram@DeltaDistance+2
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;WaypointProgram.c: 83: intDistance = (signed int) (DeltaDistance);
  9538  002BC8  C1A9  F0AA         	movff	CreateWaypointProgram@DeltaDistance,?___fttol
  9539  002BCC  C1AA  F0AB         	movff	CreateWaypointProgram@DeltaDistance+1,?___fttol+1
  9540  002BD0  C1AB  F0AC         	movff	CreateWaypointProgram@DeltaDistance+2,?___fttol+2
  9541  002BD4  EC3B  F034         	call	___fttol	;wreg free
  9542  002BD8  C0AA  F1AC         	movff	?___fttol,CreateWaypointProgram@intDistance
  9543  002BDC  C0AB  F1AD         	movff	?___fttol+1,CreateWaypointProgram@intDistance+1
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;WaypointProgram.c: 84: LCD_SetPosition(1, 0);
  9547  002BE0  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  9548  002BE2  0E01               	movlw	1
  9549  002BE4  ECDF  F036         	call	_LCD_SetPosition
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;WaypointProgram.c: 85: LCD_PrintLong(intDistance, 4, 1);
  9553  002BE8  C1AC  F079         	movff	CreateWaypointProgram@intDistance,?_LCD_PrintLong
  9554  002BEC  0100               	movlb	0	; () banked
  9555  002BEE  C1AD  F07A         	movff	CreateWaypointProgram@intDistance+1,?_LCD_PrintLong+1
  9556  002BF2  0E00               	movlw	0
  9557  002BF4  BF7A               	btfsc	(?_LCD_PrintLong+1)& (0+255),7,b
  9558  002BF6  0EFF               	movlw	-1
  9559  002BF8  6F7B               	movwf	(?_LCD_PrintLong+2)& (0+255),b
  9560  002BFA  6F7C               	movwf	(?_LCD_PrintLong+3)& (0+255),b
  9561  002BFC  0E04               	movlw	4
  9562  002BFE  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
  9563  002C00  0E01               	movlw	1
  9564  002C02  6F7E               	movwf	(?_LCD_PrintLong+5)& (0+255),b
  9565  002C04  EC66  F023         	call	_LCD_PrintLong	;wreg free
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;WaypointProgram.c: 87: bLock_UI_Event = 1;
  9569  002C08  8859               	bsf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
  9570                           
  9571                           ;WaypointProgram.c: 88: ret = UI_Event;
  9572  002C0A  C0F2  F1BD         	movff	_UI_Event,CreateWaypointProgram@ret	;volatile
  9573                           
  9574                           ;WaypointProgram.c: 89: bLock_UI_Event = 0;
  9575  002C0E  9859               	bcf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
  9576                           
  9577                           ;WaypointProgram.c: 91: if (ret == 3) {
  9578  002C10  0101               	movlb	1	; () banked
  9579  002C12  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9580  002C14  0A03               	xorlw	3
  9581  002C16  E103               	bnz	l19095
  9582                           
  9583                           ; BSR set to: 1
  9584                           ;WaypointProgram.c: 92: bFollowMode = 0;
  9585  002C18  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
  9586  002C1A  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9587  002C1C  0CFE               	retlw	254
  9588  002C1E                     l19095:
  9589                           
  9590                           ; BSR set to: 1
  9591                           ;WaypointProgram.c: 94: }
  9592                           ;WaypointProgram.c: 96: if (ret == 2) {
  9593  002C1E  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9594  002C20  0A02               	xorlw	2
  9595  002C22  E107               	bnz	l19105
  9596                           
  9597                           ; BSR set to: 1
  9598                           ;WaypointProgram.c: 97: bFollowMode = 0;
  9599  002C24  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9600                           
  9601                           ;WaypointProgram.c: 98: if (idx == 0) {
  9602  002C26  0101               	movlb	1	; () banked
  9603  002C28  67BC               	tstfsz	CreateWaypointProgram@idx& (0+255),b
  9604  002C2A  D001               	goto	l19103
  9605  002C2C  D733               	goto	l19001
  9606  002C2E                     l19103:
  9607                           
  9608                           ; BSR set to: 1
  9609                           ;WaypointProgram.c: 101: idx--;
  9610  002C2E  07BC               	decf	CreateWaypointProgram@idx& (0+255),f,b
  9611                           
  9612                           ;WaypointProgram.c: 102: goto labelInputWaypoint1;
  9613  002C30  D790               	goto	l19053
  9614  002C32                     l19105:
  9615                           
  9616                           ; BSR set to: 1
  9617                           ;WaypointProgram.c: 103: }
  9618                           ;WaypointProgram.c: 104: }
  9619                           ;WaypointProgram.c: 106: if (ret == 5) {
  9620  002C32  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9621  002C34  0A05               	xorlw	5
  9622  002C36  E117               	bnz	l19119
  9623                           
  9624                           ; BSR set to: 1
  9625                           ;WaypointProgram.c: 107: ClearUI_Event = 1;
  9626  002C38  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9627                           
  9628                           ;WaypointProgram.c: 108: bFollowMode = 0;
  9629  002C3A  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9630                           
  9631                           ;WaypointProgram.c: 109: Move(-1, 90);
  9632  002C3C  0101               	movlb	1	; () banked
  9633  002C3E  6B00               	clrf	?_Move& (0+255),b
  9634  002C40  0E80               	movlw	128
  9635  002C42  6F01               	movwf	(?_Move+1)& (0+255),b
  9636  002C44  0EBF               	movlw	191
  9637  002C46  D9C3               	call	PL61	;call to abstracted procedure
  9638  002C48  ECB7  F03B         	call	_Move	;wreg free
  9639                           
  9640                           ;WaypointProgram.c: 110: while (bMove_InProgress) Idle();
  9641  002C4C  D002               	goto	l19113
  9642  002C4E                     l19111:
  9643  002C4E  ECDF  F024         	call	_Idle	;wreg free
  9644  002C52                     l19113:
  9645  002C52  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
  9646  002C54  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  9647  002C56  D7FB               	goto	l19111
  9648                           
  9649                           ;WaypointProgram.c: 111: bFollowMode = 1;
  9650  002C58  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9651                           
  9652                           ;WaypointProgram.c: 112: while (ClearUI_Event) Idle();
  9653  002C5A  D002               	goto	l19117
  9654  002C5C                     l19115:
  9655  002C5C  ECDF  F024         	call	_Idle	;wreg free
  9656  002C60                     l19117:
  9657  002C60  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
  9658  002C62  B657               	btfsc	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9659  002C64  D7FB               	goto	l19115
  9660  002C66                     l19119:
  9661                           
  9662                           ;WaypointProgram.c: 113: }
  9663                           ;WaypointProgram.c: 115: if (ret == 4) {
  9664  002C66  0101               	movlb	1	; () banked
  9665  002C68  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9666  002C6A  0A04               	xorlw	4
  9667  002C6C  E116               	bnz	l19133
  9668                           
  9669                           ; BSR set to: 1
  9670                           ;WaypointProgram.c: 116: ClearUI_Event = 1;
  9671  002C6E  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9672                           
  9673                           ;WaypointProgram.c: 117: bFollowMode = 0;
  9674  002C70  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9675                           
  9676                           ;WaypointProgram.c: 118: Move(1, 90);
  9677  002C72  6B00               	clrf	?_Move& (0+255),b
  9678  002C74  0E80               	movlw	128
  9679  002C76  6F01               	movwf	(?_Move+1)& (0+255),b
  9680  002C78  0E3F               	movlw	63
  9681  002C7A  D9A9               	call	PL61	;call to abstracted procedure
  9682  002C7C  ECB7  F03B         	call	_Move	;wreg free
  9683                           
  9684                           ;WaypointProgram.c: 119: while (bMove_InProgress) Idle();
  9685  002C80  D002               	goto	l19127
  9686  002C82                     l19125:
  9687  002C82  ECDF  F024         	call	_Idle	;wreg free
  9688  002C86                     l19127:
  9689  002C86  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
  9690  002C88  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
  9691  002C8A  D7FB               	goto	l19125
  9692                           
  9693                           ;WaypointProgram.c: 120: bFollowMode = 1;
  9694  002C8C  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9695                           
  9696                           ;WaypointProgram.c: 121: while (ClearUI_Event) Idle();
  9697  002C8E  D002               	goto	l19131
  9698  002C90                     l19129:
  9699  002C90  ECDF  F024         	call	_Idle	;wreg free
  9700  002C94                     l19131:
  9701  002C94  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
  9702  002C96  B657               	btfsc	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
  9703  002C98  D7FB               	goto	l19129
  9704  002C9A                     l19133:
  9705  002C9A  0101               	movlb	1	; () banked
  9706  002C9C  05BD               	decf	CreateWaypointProgram@ret& (0+255),w,b
  9707  002C9E  E001 D775          	bnz	l19069
  9708                           
  9709                           ; BSR set to: 1
  9710                           ;WaypointProgram.c: 122: }
  9711                           ;WaypointProgram.c: 123: }
  9712                           ;WaypointProgram.c: 124: bFollowMode = 0;
  9713  002CA2  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
  9714                           
  9715                           ;WaypointProgram.c: 127: CurrentPath.Distances_deg[idx] = intDistance;
  9716  002CA4  51BC               	movf	CreateWaypointProgram@idx& (0+255),w,b
  9717  002CA6  0D02               	mullw	2
  9718  002CA8  0E1F               	movlw	low (_CurrentPath+7)
  9719  002CAA  24F3               	addwf	prodl,w,c
  9720  002CAC  6ED9               	movwf	fsr2l,c
  9721  002CAE  6ADA               	clrf	fsr2h,c
  9722  002CB0  0E04               	movlw	high (_CurrentPath+7)
  9723  002CB2  22DA               	addwfc	fsr2h,f,c
  9724  002CB4  C1AC  FFDE         	movff	CreateWaypointProgram@intDistance,postinc2
  9725  002CB8  C1AD  FFDD         	movff	CreateWaypointProgram@intDistance+1,postdec2
  9726                           
  9727                           ; BSR set to: 1
  9728                           ;WaypointProgram.c: 128: MinTravelTime = MinTimeToMove(DeltaDistance);
  9729  002CBC  C1A9  F0B4         	movff	CreateWaypointProgram@DeltaDistance,?_MinTimeToMove
  9730  002CC0  C1AA  F0B5         	movff	CreateWaypointProgram@DeltaDistance+1,?_MinTimeToMove+1
  9731  002CC4  C1AB  F0B6         	movff	CreateWaypointProgram@DeltaDistance+2,?_MinTimeToMove+2
  9732  002CC8  EC95  F027         	call	_MinTimeToMove	;wreg free
  9733  002CCC  C0B4  F1B9         	movff	?_MinTimeToMove,CreateWaypointProgram@MinTravelTime
  9734  002CD0  C0B5  F1BA         	movff	?_MinTimeToMove+1,CreateWaypointProgram@MinTravelTime+1
  9735  002CD4  C0B6  F1BB         	movff	?_MinTimeToMove+2,CreateWaypointProgram@MinTravelTime+2
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;WaypointProgram.c: 129: intTravelTime = (unsigned int) MinTravelTime;
  9739  002CD8  C1B9  F0AA         	movff	CreateWaypointProgram@MinTravelTime,?___fttol
  9740  002CDC  C1BA  F0AB         	movff	CreateWaypointProgram@MinTravelTime+1,?___fttol+1
  9741  002CE0  C1BB  F0AC         	movff	CreateWaypointProgram@MinTravelTime+2,?___fttol+2
  9742  002CE4  EC3B  F034         	call	___fttol	;wreg free
  9743  002CE8  C0AA  F1B4         	movff	?___fttol,CreateWaypointProgram@intTravelTime
  9744  002CEC  C0AB  F1B5         	movff	?___fttol+1,CreateWaypointProgram@intTravelTime+1
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;WaypointProgram.c: 130: MinTravelTime -= intTravelTime;
  9748  002CF0  0E01               	movlw	high CreateWaypointProgram@MinTravelTime
  9749  002CF2  0100               	movlb	0	; () banked
  9750  002CF4  6FA0               	movwf	(?___asftsub+1)& (0+255),b
  9751  002CF6  0EB9               	movlw	low CreateWaypointProgram@MinTravelTime
  9752  002CF8  6F9F               	movwf	?___asftsub& (0+255),b
  9753  002CFA  C1B4  F073         	movff	CreateWaypointProgram@intTravelTime,?___lwtoft
  9754  002CFE  C1B5  F074         	movff	CreateWaypointProgram@intTravelTime+1,?___lwtoft+1
  9755  002D02  ECCB  F03B         	call	___lwtoft	;wreg free
  9756  002D06  C073  F0A1         	movff	?___lwtoft,?___asftsub+2
  9757  002D0A  C074  F0A2         	movff	?___lwtoft+1,?___asftsub+3
  9758  002D0E  C075  F0A3         	movff	?___lwtoft+2,?___asftsub+4
  9759  002D12  EC17  F03A         	call	___asftsub	;wreg free
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;WaypointProgram.c: 131: if (MinTravelTime > 0) MinTravelTime = intTravelTime + 1;
  9763  002D16  0E00               	movlw	0
  9764  002D18  6B88               	clrf	?___ftge& (0+255),b
  9765  002D1A  6B89               	clrf	(?___ftge+1)& (0+255),b
  9766  002D1C  6B8A               	clrf	(?___ftge+2)& (0+255),b
  9767  002D1E  C1B9  F08B         	movff	CreateWaypointProgram@MinTravelTime,?___ftge+3
  9768  002D22  C1BA  F08C         	movff	CreateWaypointProgram@MinTravelTime+1,?___ftge+4
  9769  002D26  C1BB  F08D         	movff	CreateWaypointProgram@MinTravelTime+2,?___ftge+5
  9770  002D2A  ECB1  F037         	call	___ftge	;wreg free
  9771  002D2E  E20D               	bc	l19147
  9772                           
  9773                           ; BSR set to: 0
  9774  002D30  0E01               	movlw	1
  9775  002D32  0101               	movlb	1	; () banked
  9776  002D34  25B4               	addwf	CreateWaypointProgram@intTravelTime& (0+255),w,b
  9777  002D36  0100               	movlb	0	; () banked
  9778  002D38  6F73               	movwf	?___lwtoft& (0+255),b
  9779  002D3A  0E00               	movlw	0
  9780  002D3C  0101               	movlb	1	; () banked
  9781  002D3E  21B5               	addwfc	(CreateWaypointProgram@intTravelTime+1)& (0+255),w,b
  9782  002D40  0100               	movlb	0	; () banked
  9783  002D42  6F74               	movwf	(?___lwtoft+1)& (0+255),b
  9784  002D44  ECCB  F03B         	call	___lwtoft	;wreg free
  9785  002D48  D006               	goto	L9
  9786  002D4A                     l19147:
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;WaypointProgram.c: 132: else MinTravelTime = intTravelTime;
  9790  002D4A  C1B4  F073         	movff	CreateWaypointProgram@intTravelTime,?___lwtoft
  9791  002D4E  C1B5  F074         	movff	CreateWaypointProgram@intTravelTime+1,?___lwtoft+1
  9792  002D52  ECCB  F03B         	call	___lwtoft	;wreg free
  9793  002D56                     L9:
  9794  002D56  C073  F1B9         	movff	?___lwtoft,CreateWaypointProgram@MinTravelTime
  9795  002D5A  C074  F1BA         	movff	?___lwtoft+1,CreateWaypointProgram@MinTravelTime+1
  9796  002D5E  C075  F1BB         	movff	?___lwtoft+2,CreateWaypointProgram@MinTravelTime+2
  9797  002D62                     l19149:
  9798                           
  9799                           ;WaypointProgram.c: 136: ret = GetTime("TRAVEL TIME:\0", &TravelTime, MinTravelTime, 655
      +                          35, 0b1110);
  9800  002D62  0E1C               	movlw	high STR_79
  9801  002D64  0100               	movlb	0	; () banked
  9802  002D66  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  9803  002D68  0E4D               	movlw	low STR_79
  9804  002D6A  6FD7               	movwf	?_GetTime& (0+255),b
  9805  002D6C  0E01               	movlw	high CreateWaypointProgram@TravelTime
  9806  002D6E  6FDA               	movwf	(?_GetTime+3)& (0+255),b
  9807  002D70  0EB1               	movlw	low CreateWaypointProgram@TravelTime
  9808  002D72  6FD9               	movwf	(?_GetTime+2)& (0+255),b
  9809  002D74  C1B9  F0DB         	movff	CreateWaypointProgram@MinTravelTime,?_GetTime+4
  9810  002D78  C1BA  F0DC         	movff	CreateWaypointProgram@MinTravelTime+1,?_GetTime+5
  9811  002D7C  C1BB  F0DD         	movff	CreateWaypointProgram@MinTravelTime+2,?_GetTime+6
  9812  002D80  69DE               	setf	(?_GetTime+7)& (0+255),b
  9813  002D82  0E7F               	movlw	127
  9814  002D84  6FDF               	movwf	(?_GetTime+8)& (0+255),b
  9815  002D86  0E47               	movlw	71
  9816  002D88  6FE0               	movwf	(?_GetTime+9)& (0+255),b
  9817  002D8A  0E0E               	movlw	14
  9818  002D8C  6FE1               	movwf	(?_GetTime+10)& (0+255),b
  9819  002D8E  ECBB  F01A         	call	_GetTime	;wreg free
  9820  002D92  0101               	movlb	1	; () banked
  9821  002D94  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9822                           
  9823                           ; BSR set to: 1
  9824                           ;WaypointProgram.c: 137: if (ret == -2) return -2;
  9825  002D96  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9826  002D98  0AFE               	xorlw	254
  9827  002D9A  E101 D6CA          	bz	l19043
  9828                           
  9829                           ; BSR set to: 1
  9830                           ;WaypointProgram.c: 138: if (ret == -1) goto labelInputWaypoint1;
  9831  002D9E  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
  9832  002DA0  E101 D6D7          	bz	l19053
  9833                           
  9834                           ; BSR set to: 1
  9835                           ;WaypointProgram.c: 139: CurrentPath.TravelTimes_sec[idx] = (unsigned int) (TravelTime);
  9836  002DA4  C1B1  F0AA         	movff	CreateWaypointProgram@TravelTime,?___fttol
  9837  002DA8  C1B2  F0AB         	movff	CreateWaypointProgram@TravelTime+1,?___fttol+1
  9838  002DAC  C1B3  F0AC         	movff	CreateWaypointProgram@TravelTime+2,?___fttol+2
  9839  002DB0  EC3B  F034         	call	___fttol	;wreg free
  9840  002DB4  0101               	movlb	1	; () banked
  9841  002DB6  51BC               	movf	CreateWaypointProgram@idx& (0+255),w,b
  9842  002DB8  0D02               	mullw	2
  9843  002DBA  0E43               	movlw	low (_CurrentPath+43)
  9844  002DBC  24F3               	addwf	prodl,w,c
  9845  002DBE  6ED9               	movwf	fsr2l,c
  9846  002DC0  6ADA               	clrf	fsr2h,c
  9847  002DC2  0E04               	movlw	high (_CurrentPath+43)
  9848  002DC4  22DA               	addwfc	fsr2h,f,c
  9849  002DC6  C0AA  FFDE         	movff	?___fttol,postinc2
  9850  002DCA  C0AB  FFDD         	movff	?___fttol+1,postdec2
  9851  002DCE                     l19163:
  9852                           
  9853                           ;WaypointProgram.c: 142: ret = GetTime("DWELL TIME:\0", &DwellTime, 0, 65535, 0b1110);
  9854  002DCE  0E1C               	movlw	high STR_76
  9855  002DD0  0100               	movlb	0	; () banked
  9856  002DD2  6FD8               	movwf	(?_GetTime+1)& (0+255),b
  9857  002DD4  0EA1               	movlw	low STR_76
  9858  002DD6  6FD7               	movwf	?_GetTime& (0+255),b
  9859  002DD8  0E01               	movlw	high CreateWaypointProgram@DwellTime
  9860  002DDA  D8E4               	call	PL37	;call to abstracted procedure
  9861  002DDC  ECBB  F01A         	call	_GetTime	;wreg free
  9862  002DE0  0101               	movlb	1	; () banked
  9863  002DE2  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9864                           
  9865                           ; BSR set to: 1
  9866                           ;WaypointProgram.c: 143: if (ret == -2) return -2;
  9867  002DE4  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9868  002DE6  0AFE               	xorlw	254
  9869  002DE8  E101 D6A3          	bz	l19043
  9870                           
  9871                           ; BSR set to: 1
  9872                           ;WaypointProgram.c: 144: if (ret == -1) goto labelInputWaypoint2;
  9873  002DEC  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
  9874  002DEE  E0B9               	bz	l19149
  9875                           
  9876                           ; BSR set to: 1
  9877                           ;WaypointProgram.c: 145: CurrentPath.DwellTimes_sec[idx + 1] = (unsigned int) (DwellTime
      +                          );
  9878  002DF0  C1B6  F0AA         	movff	CreateWaypointProgram@DwellTime,?___fttol
  9879  002DF4  C1B7  F0AB         	movff	CreateWaypointProgram@DwellTime+1,?___fttol+1
  9880  002DF8  C1B8  F0AC         	movff	CreateWaypointProgram@DwellTime+2,?___fttol+2
  9881  002DFC  EC3B  F034         	call	___fttol	;wreg free
  9882  002E00  0101               	movlb	1	; () banked
  9883  002E02  90D8               	bcf	status,0,c
  9884  002E04  35BC               	rlcf	CreateWaypointProgram@idx& (0+255),w,b
  9885  002E06  6F91               	movwf	??_CreateWaypointProgram& (0+255),b
  9886  002E08  0E69               	movlw	low (_CurrentPath+81)
  9887  002E0A  2591               	addwf	??_CreateWaypointProgram& (0+255),w,b
  9888  002E0C  6ED9               	movwf	fsr2l,c
  9889  002E0E  6ADA               	clrf	fsr2h,c
  9890  002E10  0E04               	movlw	high (_CurrentPath+81)
  9891  002E12  22DA               	addwfc	fsr2h,f,c
  9892  002E14  C0AA  FFDE         	movff	?___fttol,postinc2
  9893  002E18  C0AB  FFDD         	movff	?___fttol+1,postdec2
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;WaypointProgram.c: 147: if (idx < 17) {
  9897  002E1C  51BC               	movf	CreateWaypointProgram@idx& (0+255),w,b
  9898  002E1E  0A80               	xorlw	128
  9899  002E20  0F6F               	addlw	-145
  9900  002E22  E21F               	bc	l19199
  9901                           
  9902                           ; BSR set to: 1
  9903                           ;WaypointProgram.c: 148: ret = GetYesNo("ADD ANOTHER POINT?", 1);
  9904  002E24  0E1A               	movlw	high STR_81
  9905  002E26  0100               	movlb	0	; () banked
  9906  002E28  6F90               	movwf	(?_GetYesNo+1)& (0+255),b
  9907  002E2A  0ED8               	movlw	low STR_81
  9908  002E2C  6F8F               	movwf	?_GetYesNo& (0+255),b
  9909  002E2E  0E01               	movlw	1
  9910  002E30  6F91               	movwf	(?_GetYesNo+2)& (0+255),b
  9911  002E32  EC94  F034         	call	_GetYesNo	;wreg free
  9912  002E36  0101               	movlb	1	; () banked
  9913  002E38  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9914                           
  9915                           ; BSR set to: 1
  9916                           ;WaypointProgram.c: 149: if (ret == -2) return -2;
  9917  002E3A  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9918  002E3C  0AFE               	xorlw	254
  9919  002E3E  E101 D678          	bz	l19043
  9920                           
  9921                           ; BSR set to: 1
  9922                           ;WaypointProgram.c: 150: if (ret == -1) goto labelInputWaypoint3;
  9923  002E42  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
  9924  002E44  E0C4               	bz	l19163
  9925                           
  9926                           ; BSR set to: 1
  9927                           ;WaypointProgram.c: 151: if (ret == 0) Done = 1;
  9928  002E46  67BD               	tstfsz	CreateWaypointProgram@ret& (0+255),b
  9929  002E48  D002               	goto	l19193
  9930                           
  9931                           ; BSR set to: 1
  9932  002E4A  0E01               	movlw	1
  9933  002E4C  6FA5               	movwf	CreateWaypointProgram@Done& (0+255),b
  9934  002E4E                     l19193:
  9935                           
  9936                           ; BSR set to: 1
  9937                           ;WaypointProgram.c: 152: if (ret == 1) {
  9938  002E4E  05BD               	decf	CreateWaypointProgram@ret& (0+255),w,b
  9939  002E50  E126               	bnz	l2457
  9940                           
  9941                           ; BSR set to: 1
  9942                           ;WaypointProgram.c: 153: idx++;
  9943  002E52  2BBC               	incf	CreateWaypointProgram@idx& (0+255),f,b
  9944                           
  9945                           ; BSR set to: 1
  9946                           ;WaypointProgram.c: 154: LastPos = CurrentPos;
  9947  002E54  C1A6  F1A2         	movff	CreateWaypointProgram@CurrentPos,CreateWaypointProgram@LastPos
  9948  002E58  C1A7  F1A3         	movff	CreateWaypointProgram@CurrentPos+1,CreateWaypointProgram@LastPos+1
  9949  002E5C  C1A8  F1A4         	movff	CreateWaypointProgram@CurrentPos+2,CreateWaypointProgram@LastPos+2
  9950                           
  9951                           ;WaypointProgram.c: 155: goto labelInputWaypoint1;
  9952  002E60  D678               	goto	l19053
  9953  002E62                     l19199:
  9954                           
  9955                           ; BSR set to: 1
  9956                           ;WaypointProgram.c: 158: LCD_ClearDisplay();
  9957  002E62  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;WaypointProgram.c: 159: LCD_PrintString("MAX WAYPOINTS HAVE\0");
  9961  002E66  0E1A               	movlw	high STR_82
  9962  002E68  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9963  002E6A  0E76               	movlw	low STR_82
  9964  002E6C  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9965  002E6E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9966                           
  9967                           ; BSR set to: 0
  9968                           ;WaypointProgram.c: 160: LCD_SetPosition(1, 0);
  9969  002E72  6B75               	clrf	?_LCD_SetPosition& (0+255),b
  9970  002E74  0E01               	movlw	1
  9971  002E76  ECDF  F036         	call	_LCD_SetPosition
  9972                           
  9973                           ; BSR set to: 0
  9974                           ;WaypointProgram.c: 161: LCD_PrintString("BEEN ADDED\0");
  9975  002E7A  0E1D               	movlw	high STR_83
  9976  002E7C  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
  9977  002E7E  0E08               	movlw	low STR_83
  9978  002E80  6F76               	movwf	?_LCD_PrintString& (0+255),b
  9979  002E82  ECAB  F03A         	call	_LCD_PrintString	;wreg free
  9980                           
  9981                           ; BSR set to: 0
  9982                           ;WaypointProgram.c: 162: ret = GetClick();
  9983  002E86  ECFC  F03B         	call	_GetClick	;wreg free
  9984  002E8A  0101               	movlb	1	; () banked
  9985  002E8C  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
  9986                           
  9987                           ; BSR set to: 1
  9988                           ;WaypointProgram.c: 163: if (ret == -2) return -2;
  9989  002E8E  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
  9990  002E90  0AFE               	xorlw	254
  9991  002E92  E101 D64E          	bz	l19043
  9992                           
  9993                           ; BSR set to: 1
  9994                           ;WaypointProgram.c: 164: if (ret == -1) goto labelInputWaypoint3;
  9995  002E96  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
  9996  002E98  E09A               	bz	l19163
  9997                           
  9998                           ; BSR set to: 1
  9999                           ;WaypointProgram.c: 165: Done = 1;
 10000  002E9A  0E01               	movlw	1
 10001  002E9C  6FA5               	movwf	CreateWaypointProgram@Done& (0+255),b
 10002  002E9E                     l2457:
 10003  002E9E  0101               	movlb	1	; () banked
 10004  002EA0  51A5               	movf	CreateWaypointProgram@Done& (0+255),w,b
 10005  002EA2  E101 D656          	bz	l19053
 10006                           
 10007                           ; BSR set to: 1
 10008                           ;WaypointProgram.c: 166: }
 10009                           ;WaypointProgram.c: 167: }
 10010                           ;WaypointProgram.c: 169: CurrentPath.PointCount = idx;
 10011  002EA6  C1BC  F41B         	movff	CreateWaypointProgram@idx,_CurrentPath+3
 10012  002EAA                     l19221:
 10013                           
 10014                           ; BSR set to: 1
 10015                           ;WaypointProgram.c: 171: ret = DisplayChoices(DirectionMenu, 1, "LOOP MODE?\0", CurrentP
      +                          ath.Bounce);
 10016  002EAA  0E01               	movlw	high CreateWaypointProgram@DirectionMenu
 10017  002EAC  0100               	movlb	0	; () banked
 10018  002EAE  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
 10019  002EB0  0E9A               	movlw	low CreateWaypointProgram@DirectionMenu
 10020  002EB2  6F8F               	movwf	?_DisplayChoices& (0+255),b
 10021  002EB4  0E01               	movlw	1
 10022  002EB6  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
 10023  002EB8  0E1C               	movlw	high STR_84
 10024  002EBA  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
 10025  002EBC  0EFC               	movlw	low STR_84
 10026  002EBE  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
 10027  002EC0  C41C  F094         	movff	_CurrentPath+4,?_DisplayChoices+5
 10028  002EC4  EC28  F035         	call	_DisplayChoices	;wreg free
 10029  002EC8  0101               	movlb	1	; () banked
 10030  002ECA  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
 10031                           
 10032                           ; BSR set to: 1
 10033                           ;WaypointProgram.c: 172: if (ret == -1) goto labelInputWaypoint3;
 10034  002ECC  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
 10035  002ECE  E101 D77E          	bz	l19163
 10036                           
 10037                           ; BSR set to: 1
 10038                           ;WaypointProgram.c: 173: if (ret == -2) return (-2);
 10039  002ED2  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
 10040  002ED4  0AFE               	xorlw	254
 10041  002ED6  E101 D62C          	bz	l19043
 10042                           
 10043                           ; BSR set to: 1
 10044                           ;WaypointProgram.c: 174: CurrentPath.Bounce = ret;
 10045  002EDA  C1BD  F41C         	movff	CreateWaypointProgram@ret,_CurrentPath+4
 10046  002EDE                     l19233:
 10047                           
 10048                           ; BSR set to: 1
 10049                           ;WaypointProgram.c: 177: ret = GetFloat("CYCLE COUNT:0=INF.\0", " CYCLES\0", &CycleCount
      +                          , 0, 999, 1.0);
 10050  002EDE  0E1A               	movlw	high STR_85
 10051  002EE0  0100               	movlb	0	; () banked
 10052  002EE2  6FC8               	movwf	(?_GetFloat+1)& (0+255),b
 10053  002EE4  0E4E               	movlw	low STR_85
 10054  002EE6  6FC7               	movwf	?_GetFloat& (0+255),b
 10055  002EE8  0E1B               	movlw	high (STR_91+8)
 10056  002EEA  6FCA               	movwf	(?_GetFloat+3)& (0+255),b
 10057  002EEC  0E86               	movlw	low (STR_91+8)
 10058  002EEE  6FC9               	movwf	(?_GetFloat+2)& (0+255),b
 10059  002EF0  0E01               	movlw	high CreateWaypointProgram@CycleCount
 10060  002EF2  6FCC               	movwf	(?_GetFloat+5)& (0+255),b
 10061  002EF4  0EAE               	movlw	low CreateWaypointProgram@CycleCount
 10062  002EF6  6FCB               	movwf	(?_GetFloat+4)& (0+255),b
 10063  002EF8  6BCD               	clrf	(?_GetFloat+6)& (0+255),b
 10064  002EFA  6BCE               	clrf	(?_GetFloat+7)& (0+255),b
 10065  002EFC  6BCF               	clrf	(?_GetFloat+8)& (0+255),b
 10066  002EFE  0EC0               	movlw	192
 10067  002F00  6FD0               	movwf	(?_GetFloat+9)& (0+255),b
 10068  002F02  0E79               	movlw	121
 10069  002F04  6FD1               	movwf	(?_GetFloat+10)& (0+255),b
 10070  002F06  0E44               	movlw	68
 10071  002F08  6FD2               	movwf	(?_GetFloat+11)& (0+255),b
 10072  002F0A  6BD3               	clrf	(?_GetFloat+12)& (0+255),b
 10073  002F0C  0E80               	movlw	128
 10074  002F0E  6FD4               	movwf	(?_GetFloat+13)& (0+255),b
 10075  002F10  0E3F               	movlw	63
 10076  002F12  6FD5               	movwf	(?_GetFloat+14)& (0+255),b
 10077  002F14  EC53  F020         	call	_GetFloat	;wreg free
 10078  002F18  0101               	movlb	1	; () banked
 10079  002F1A  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
 10080                           
 10081                           ; BSR set to: 1
 10082                           ;WaypointProgram.c: 178: if (ret == -1) goto labelDirection;
 10083  002F1C  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
 10084  002F1E  E0C5               	bz	l19221
 10085                           
 10086                           ; BSR set to: 1
 10087                           ;WaypointProgram.c: 179: if (ret == -2) return (-2);
 10088  002F20  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
 10089  002F22  0AFE               	xorlw	254
 10090  002F24  E101 D605          	bz	l19043
 10091                           
 10092                           ; BSR set to: 1
 10093                           ;WaypointProgram.c: 180: CurrentPath.LoopCount = (unsigned int) (CycleCount);
 10094  002F28  C1AE  F0AA         	movff	CreateWaypointProgram@CycleCount,?___fttol
 10095  002F2C  C1AF  F0AB         	movff	CreateWaypointProgram@CycleCount+1,?___fttol+1
 10096  002F30  C1B0  F0AC         	movff	CreateWaypointProgram@CycleCount+2,?___fttol+2
 10097  002F34  EC3B  F034         	call	___fttol	;wreg free
 10098  002F38  C0AA  F41D         	movff	?___fttol,_CurrentPath+5
 10099  002F3C  C0AB  F41E         	movff	?___fttol+1,_CurrentPath+6
 10100  002F40                     l19247:
 10101                           
 10102                           ;WaypointProgram.c: 183: ret = DisplayChoices(CommandMenu, 1, "ACTION:\0", 0);
 10103  002F40  0E01               	movlw	high CreateWaypointProgram@CommandMenu
 10104  002F42  0100               	movlb	0	; () banked
 10105  002F44  6F90               	movwf	(?_DisplayChoices+1)& (0+255),b
 10106  002F46  0E9E               	movlw	low CreateWaypointProgram@CommandMenu
 10107  002F48  6F8F               	movwf	?_DisplayChoices& (0+255),b
 10108  002F4A  0E01               	movlw	1
 10109  002F4C  6F91               	movwf	(?_DisplayChoices+2)& (0+255),b
 10110  002F4E  0E1D               	movlw	high STR_43
 10111  002F50  6F93               	movwf	(?_DisplayChoices+4)& (0+255),b
 10112  002F52  0E64               	movlw	low STR_43
 10113  002F54  6F92               	movwf	(?_DisplayChoices+3)& (0+255),b
 10114  002F56  0E00               	movlw	0
 10115  002F58  6B94               	clrf	(?_DisplayChoices+5)& (0+255),b
 10116  002F5A  EC28  F035         	call	_DisplayChoices	;wreg free
 10117  002F5E  0101               	movlb	1	; () banked
 10118  002F60  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
 10119                           
 10120                           ; BSR set to: 1
 10121                           ;WaypointProgram.c: 184: if (ret == -1) goto labelCycleCount;
 10122  002F62  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
 10123  002F64  E0BC               	bz	l19233
 10124                           
 10125                           ; BSR set to: 1
 10126                           ;WaypointProgram.c: 185: if (ret == -2) return (-2);
 10127  002F66  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
 10128  002F68  0AFE               	xorlw	254
 10129  002F6A  E101 D5E2          	bz	l19043
 10130                           
 10131                           ; BSR set to: 1
 10132                           ;WaypointProgram.c: 187: if (ret == 0) {
 10133  002F6E  67BD               	tstfsz	CreateWaypointProgram@ret& (0+255),b
 10134  002F70  D002               	goto	l19263
 10135                           
 10136                           ; BSR set to: 1
 10137                           ;WaypointProgram.c: 188: return RunWaypointProgram();
 10138  002F72  EFEE  F017         	goto	_RunWaypointProgram	;wreg free
 10139  002F76                     l19263:
 10140                           
 10141                           ; BSR set to: 1
 10142                           ;WaypointProgram.c: 189: }
 10143                           ;WaypointProgram.c: 191: ret = GetPresetNumber();
 10144  002F76  ECDF  F033         	call	_GetPresetNumber	;wreg free
 10145  002F7A  0101               	movlb	1	; () banked
 10146  002F7C  6FBD               	movwf	CreateWaypointProgram@ret& (0+255),b
 10147                           
 10148                           ; BSR set to: 1
 10149                           ;WaypointProgram.c: 192: if (ret == -1) goto labelActions;
 10150  002F7E  29BD               	incf	CreateWaypointProgram@ret& (0+255),w,b
 10151  002F80  E0DF               	bz	l19247
 10152                           
 10153                           ; BSR set to: 1
 10154                           ;WaypointProgram.c: 193: if (ret == -2) return (-2);
 10155  002F82  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
 10156  002F84  0AFE               	xorlw	254
 10157  002F86  E101 D5D4          	bz	l19043
 10158                           
 10159                           ; BSR set to: 1
 10160                           ;WaypointProgram.c: 195: CurrentPath.Type = 1;
 10161  002F8A  0E01               	movlw	1
 10162  002F8C  0104               	movlb	4	; () banked
 10163  002F8E  6F18               	movwf	_CurrentPath& (0+255),b
 10164                           
 10165                           ; BSR set to: 4
 10166                           ;WaypointProgram.c: 196: SavePreset(ret, (unsigned char *) &CurrentPath);
 10167  002F90  0E04               	movlw	high _CurrentPath
 10168  002F92  0100               	movlb	0	; () banked
 10169  002F94  6F74               	movwf	(?_SavePreset+1)& (0+255),b
 10170  002F96  0E18               	movlw	low _CurrentPath
 10171  002F98  6F73               	movwf	?_SavePreset& (0+255),b
 10172  002F9A  0101               	movlb	1	; () banked
 10173  002F9C  51BD               	movf	CreateWaypointProgram@ret& (0+255),w,b
 10174  002F9E  ECF5  F03A         	call	_SavePreset
 10175                           
 10176                           ;WaypointProgram.c: 198: goto labelActions;
 10177  002FA2  D7CE               	goto	l19247
 10178  002FA4                     __end_of_CreateWaypointProgram:
 10179                           	opt stack 0
 10180  002FA4                     PL37:
 10181  002FA4  6FDA               	movwf	(?_GetTime+3)& (0+255),b
 10182  002FA6  0EB6               	movlw	low CreateWaypointProgram@DwellTime
 10183  002FA8  6FD9               	movwf	(?_GetTime+2)& (0+255),b
 10184  002FAA  6BDB               	clrf	(?_GetTime+4)& (0+255),b
 10185  002FAC  6BDC               	clrf	(?_GetTime+5)& (0+255),b
 10186  002FAE  6BDD               	clrf	(?_GetTime+6)& (0+255),b
 10187  002FB0  69DE               	setf	(?_GetTime+7)& (0+255),b
 10188  002FB2  0E7F               	movlw	127
 10189  002FB4  6FDF               	movwf	(?_GetTime+8)& (0+255),b
 10190  002FB6  0E47               	movlw	71
 10191  002FB8  6FE0               	movwf	(?_GetTime+9)& (0+255),b
 10192  002FBA  0E0E               	movlw	14
 10193  002FBC  6FE1               	movwf	(?_GetTime+10)& (0+255),b
 10194  002FBE  0C0E               	retlw	14
 10195  002FC0                     PL60:
 10196  002FC0  6BB1               	clrf	CreateWaypointProgram@TravelTime& (0+255),b
 10197  002FC2  6BB2               	clrf	(CreateWaypointProgram@TravelTime+1)& (0+255),b
 10198  002FC4  6BB3               	clrf	(CreateWaypointProgram@TravelTime+2)& (0+255),b
 10199  002FC6  6BB9               	clrf	CreateWaypointProgram@MinTravelTime& (0+255),b
 10200  002FC8  6BBA               	clrf	(CreateWaypointProgram@MinTravelTime+1)& (0+255),b
 10201  002FCA  6BBB               	clrf	(CreateWaypointProgram@MinTravelTime+2)& (0+255),b
 10202  002FCC  0012               	return	
 10203  002FCE                     PL61:
 10204  002FCE  6F02               	movwf	(?_Move+2)& (0+255),b
 10205  002FD0  6B03               	clrf	(?_Move+3)& (0+255),b
 10206  002FD2  0EB4               	movlw	180
 10207  002FD4  6F04               	movwf	(?_Move+4)& (0+255),b
 10208  002FD6  0E42               	movlw	66
 10209  002FD8  6F05               	movwf	(?_Move+5)& (0+255),b
 10210  002FDA  0C42               	retlw	66
 10211                           tblptru	equ	0xFF8
 10212                           tblptrh	equ	0xFF7
 10213                           tblptrl	equ	0xFF6
 10214                           tablat	equ	0xFF5
 10215                           prodh	equ	0xFF4
 10216                           prodl	equ	0xFF3
 10217                           intcon	equ	0xFF2
 10218                           intcon2	equ	0xFF1
 10219                           postinc0	equ	0xFEE
 10220                           wreg	equ	0xFE8
 10221                           postinc1	equ	0xFE6
 10222                           postdec1	equ	0xFE5
 10223                           fsr1h	equ	0xFE2
 10224                           fsr1l	equ	0xFE1
 10225                           indf2	equ	0xFDF
 10226                           postinc2	equ	0xFDE
 10227                           postdec2	equ	0xFDD
 10228                           fsr2h	equ	0xFDA
 10229                           fsr2l	equ	0xFD9
 10230                           status	equ	0xFD8
 10231                           
 10232 ;; *************** function _GetPresetNumber *****************
 10233 ;; Defined at:
 10234 ;;		line 523 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;		None
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;  pnum            1   49[BANK0 ] unsigned char 
 10239 ;;  ptype           1   48[BANK0 ] char 
 10240 ;;  inp             1   47[BANK0 ] char 
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      char 
 10243 ;; Registers used:
 10244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 10245 ;; Tracked objects:
 10246 ;;		On entry : A/4
 10247 ;;		On exit  : F/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10254 ;;Total ram usage:        3 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    8
 10257 ;; This function calls:
 10258 ;;		_LCD_ClearDisplay
 10259 ;;		_LCD_PrintString
 10260 ;;		_LCD_SetPosition
 10261 ;;		_LCD_PrintLong
 10262 ;;		_GetPresetType
 10263 ;;		_GetInput
 10264 ;; This function is called by:
 10265 ;;		_main
 10266 ;;		_CreateOrbitProgram
 10267 ;;		_CreateWaypointProgram
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           	psect	text11
 10272  0067BE                     __ptext11:
 10273                           	opt stack 0
 10274  0067BE                     _GetPresetNumber:
 10275                           	opt stack 22
 10276                           
 10277                           ;UserInterface.c: 524: signed char inp;
 10278                           ;UserInterface.c: 525: char pnum;
 10279                           ;UserInterface.c: 526: signed char ptype;
 10280                           ;UserInterface.c: 527: LCD_ClearDisplay();
 10281  0067BE  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;UserInterface.c: 528: LCD_PrintString("PRESET SLOT:\0");
 10285  0067C2  0E1C               	movlw	high STR_65
 10286  0067C4  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10287  0067C6  0E5B               	movlw	low STR_65
 10288  0067C8  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10289  0067CA  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;UserInterface.c: 529: LCD_SetPosition(1, 0);
 10293  0067CE  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 10294  0067D0  0E01               	movlw	1
 10295  0067D2  ECDF  F036         	call	_LCD_SetPosition
 10296                           
 10297                           ; BSR set to: 0
 10298                           ;UserInterface.c: 530: LCD_PrintString("PRESET 01\0");
 10299  0067D6  0E1D               	movlw	high STR_66
 10300  0067D8  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10301  0067DA  0E50               	movlw	low STR_66
 10302  0067DC  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10303  0067DE  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;UserInterface.c: 531: pnum = 1;
 10307  0067E2  0E01               	movlw	1
 10308  0067E4  6F91               	movwf	GetPresetNumber@pnum& (0+255),b
 10309  0067E6                     l19289:
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;UserInterface.c: 534: LCD_SetPosition(1, 7);
 10313  0067E6  0E07               	movlw	7
 10314  0067E8  6F75               	movwf	?_LCD_SetPosition& (0+255),b
 10315  0067EA  0E01               	movlw	1
 10316  0067EC  ECDF  F036         	call	_LCD_SetPosition
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;UserInterface.c: 535: LCD_PrintLong((int) pnum, 2, 0);
 10320  0067F0  5191               	movf	GetPresetNumber@pnum& (0+255),w,b
 10321  0067F2  ECC6  F030         	call	PL22	;call to abstracted procedure
 10322  0067F6  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;UserInterface.c: 537: ptype = GetPresetType(pnum);
 10326  0067FA  5191               	movf	GetPresetNumber@pnum& (0+255),w,b
 10327  0067FC  ECC5  F03A         	call	_GetPresetType
 10328  006800  6F90               	movwf	GetPresetNumber@ptype& (0+255),b
 10329                           
 10330                           ;UserInterface.c: 539: switch (ptype) {
 10331  006802  D015               	goto	l19303
 10332  006804                     l19295:
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;UserInterface.c: 541: LCD_PrintString("-EMPTY    \0");
 10336  006804  0E1D               	movlw	high STR_67
 10337  006806  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10338  006808  0E20               	movlw	low STR_67
 10339  00680A  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10340  00680C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10341                           
 10342                           ;UserInterface.c: 542: break;
 10343  006810  D014               	goto	l19305
 10344  006812                     l19297:
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;UserInterface.c: 544: LCD_PrintString("-WAYPOINT \0");
 10348  006812  0E1D               	movlw	high STR_68
 10349  006814  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10350  006816  0E2C               	movlw	low STR_68
 10351  006818  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10352  00681A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10353                           
 10354                           ;UserInterface.c: 545: break;
 10355  00681E  D00D               	goto	l19305
 10356  006820                     l19299:
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;UserInterface.c: 547: LCD_PrintString("-ORBIT    \0");
 10360  006820  0E1D               	movlw	high STR_69
 10361  006822  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10362  006824  0E14               	movlw	low STR_69
 10363  006826  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10364  006828  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10365                           
 10366                           ;UserInterface.c: 548: break;
 10367  00682C  D006               	goto	l19305
 10368  00682E                     l19303:
 10369                           
 10370                           ; BSR set to: 0
 10371  00682E  5190               	movf	GetPresetNumber@ptype& (0+255),w,b
 10372                           
 10373                           ; Switch size 1, requested type "space"
 10374                           ; Number of cases is 3, Range of values is 0 to 2
 10375                           ; switch strategies available:
 10376                           ; Name         Instructions Cycles
 10377                           ; simple_byte           10     6 (average)
 10378                           ;	Chosen strategy is simple_byte
 10379  006830  E0E9               	bz	l19295
 10380  006832  0A01               	xorlw	1	; case 1
 10381  006834  E0EE               	bz	l19297
 10382  006836  0A03               	xorlw	3	; case 2
 10383  006838  E0F3               	bz	l19299
 10384  00683A                     l19305:
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;UserInterface.c: 551: inp = GetInput();
 10388  00683A  EC39  F03B         	call	_GetInput	;wreg free
 10389  00683E  6F8F               	movwf	GetPresetNumber@inp& (0+255),b
 10390                           
 10391                           ;UserInterface.c: 552: switch (inp) {
 10392  006840  D00E               	goto	l19329
 10393  006842                     l19307:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;UserInterface.c: 554: if (pnum > 1) pnum--;
 10397  006842  0E01               	movlw	1
 10398  006844  6591               	cpfsgt	GetPresetNumber@pnum& (0+255),b
 10399  006846  D7CF               	goto	l19289
 10400                           
 10401                           ; BSR set to: 0
 10402  006848  0791               	decf	GetPresetNumber@pnum& (0+255),f,b
 10403  00684A  D7CD               	goto	l19289
 10404  00684C                     l19311:
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;UserInterface.c: 557: if (pnum < 5) pnum++;
 10408  00684C  0E05               	movlw	5
 10409  00684E  6191               	cpfslt	GetPresetNumber@pnum& (0+255),b
 10410  006850  D7CA               	goto	l19289
 10411                           
 10412                           ; BSR set to: 0
 10413  006852  2B91               	incf	GetPresetNumber@pnum& (0+255),f,b
 10414  006854  D7C8               	goto	l19289
 10415  006856                     l19315:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;UserInterface.c: 560: return (pnum);
 10419  006856  5191               	movf	GetPresetNumber@pnum& (0+255),w,b
 10420  006858  0012               	return	
 10421  00685A                     l19319:
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;UserInterface.c: 562: return (-1);
 10425  00685A  0CFF               	retlw	255
 10426  00685C                     l19323:
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;UserInterface.c: 564: return (-2);
 10430  00685C  0CFE               	retlw	254
 10431  00685E                     l19329:
 10432                           
 10433                           ; BSR set to: 0
 10434  00685E  518F               	movf	GetPresetNumber@inp& (0+255),w,b
 10435                           
 10436                           ; Switch size 1, requested type "space"
 10437                           ; Number of cases is 5, Range of values is 1 to 5
 10438                           ; switch strategies available:
 10439                           ; Name         Instructions Cycles
 10440                           ; simple_byte           16     9 (average)
 10441                           ;	Chosen strategy is simple_byte
 10442  006860  0A01               	xorlw	1	; case 1
 10443  006862  E0F9               	bz	l19315
 10444  006864  0A03               	xorlw	3	; case 2
 10445  006866  E0F9               	bz	l19319
 10446  006868  0A01               	xorlw	1	; case 3
 10447  00686A  E0F8               	bz	l19323
 10448  00686C  0A07               	xorlw	7	; case 4
 10449  00686E  E0EE               	bz	l19311
 10450  006870  0A01               	xorlw	1	; case 5
 10451  006872  E0E7               	bz	l19307
 10452  006874  D7B8               	goto	l19289
 10453  006876                     __end_of_GetPresetNumber:
 10454                           	opt stack 0
 10455                           tblptru	equ	0xFF8
 10456                           tblptrh	equ	0xFF7
 10457                           tblptrl	equ	0xFF6
 10458                           tablat	equ	0xFF5
 10459                           prodh	equ	0xFF4
 10460                           prodl	equ	0xFF3
 10461                           intcon	equ	0xFF2
 10462                           intcon2	equ	0xFF1
 10463                           postinc0	equ	0xFEE
 10464                           wreg	equ	0xFE8
 10465                           postinc1	equ	0xFE6
 10466                           postdec1	equ	0xFE5
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function _RunWaypointProgram *****************
 10477 ;; Defined at:
 10478 ;;		line 202 in file "Z:\CineFlux\Dropbox\Orbit\WaypointProgram.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;		None
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  D               3  136[BANK1 ] char 
 10483 ;;  S               3  133[BANK1 ] char 
 10484 ;;  T               3  127[BANK1 ] char 
 10485 ;;  CycleIndex      2  141[BANK1 ] unsigned int 
 10486 ;;  idx             1  144[BANK1 ] char 
 10487 ;;  ret             1  143[BANK1 ] char 
 10488 ;;  PingPong        1  140[BANK1 ] unsigned char 
 10489 ;;  EarlyExit       1  139[BANK1 ] unsigned char 
 10490 ;; Return value:  Size  Location     Type
 10491 ;;                  1    wreg      char 
 10492 ;; Registers used:
 10493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 10494 ;; Tracked objects:
 10495 ;;		On entry : E/0
 10496 ;;		On exit  : F/1
 10497 ;;		Unchanged: 0/0
 10498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Totals:         0       2      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;Total ram usage:       20 bytes
 10504 ;; Hardware stack levels used:    1
 10505 ;; Hardware stack levels required when called:    9
 10506 ;; This function calls:
 10507 ;;		_LCD_ClearDisplay
 10508 ;;		_LCD_PrintString
 10509 ;;		___lwtoft
 10510 ;;		_MoveToAngle
 10511 ;;		_Idle
 10512 ;;		_GetInput_nonblocking
 10513 ;;		_Wait_seconds_nonblocking
 10514 ;;		___awtoft
 10515 ;;		_SpeedRequiredToMoveInTime
 10516 ;;		_LCD_PrintLong
 10517 ;;		_LCD_SetPosition
 10518 ;;		___ftneg
 10519 ;;		_Move
 10520 ;;		_Wait_ms
 10521 ;; This function is called by:
 10522 ;;		_main
 10523 ;;		_CreateWaypointProgram
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text12
 10528  002FDC                     __ptext12:
 10529                           	opt stack 0
 10530  002FDC                     _RunWaypointProgram:
 10531                           	opt stack 21
 10532                           
 10533                           ;WaypointProgram.c: 203: char EarlyExit = 0;
 10534                           
 10535                           ; BSR set to: 0
 10536  002FDC  0101               	movlb	1	; () banked
 10537  002FDE  6B8B               	clrf	RunWaypointProgram@EarlyExit& (0+255),b
 10538                           
 10539                           ;WaypointProgram.c: 204: signed char ret;
 10540                           ;WaypointProgram.c: 205: double D;
 10541                           ;WaypointProgram.c: 206: double T;
 10542                           ;WaypointProgram.c: 207: double S;
 10543                           ;WaypointProgram.c: 208: char PingPong = 0;
 10544  002FE0  6B8C               	clrf	RunWaypointProgram@PingPong& (0+255),b
 10545                           
 10546                           ; BSR set to: 1
 10547                           ;WaypointProgram.c: 209: signed char idx;
 10548                           ;WaypointProgram.c: 210: unsigned int CycleIndex = 1;
 10549  002FE2  6B8E               	clrf	(RunWaypointProgram@CycleIndex+1)& (0+255),b
 10550  002FE4  0E01               	movlw	1
 10551  002FE6  6F8D               	movwf	RunWaypointProgram@CycleIndex& (0+255),b
 10552                           
 10553                           ; BSR set to: 1
 10554                           ;WaypointProgram.c: 212: LCD_ClearDisplay();
 10555  002FE8  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;WaypointProgram.c: 213: LCD_PrintString("MOVING TO START\0");
 10559  002FEC  0E1B               	movlw	high STR_44
 10560  002FEE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10561  002FF0  0EA0               	movlw	low STR_44
 10562  002FF2  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10563  002FF4  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;WaypointProgram.c: 214: MoveToAngle(CurrentPath.Origin_deg, 90);
 10567  002FF8  C419  F073         	movff	_CurrentPath+1,?___lwtoft
 10568  002FFC  C41A  F074         	movff	_CurrentPath+2,?___lwtoft+1
 10569  003000  ECCB  F03B         	call	___lwtoft	;wreg free
 10570  003004  EC46  F023         	call	PL19	;call to abstracted procedure
 10571  003008  ECC2  F028         	call	_MoveToAngle	;wreg free
 10572                           
 10573                           ;WaypointProgram.c: 215: while (bMove_InProgress) {
 10574  00300C  D00C               	goto	l2515
 10575  00300E                     l19345:
 10576                           
 10577                           ;WaypointProgram.c: 216: Idle();
 10578  00300E  ECDF  F024         	call	_Idle	;wreg free
 10579                           
 10580                           ;WaypointProgram.c: 217: ret = GetInput_nonblocking();
 10581  003012  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 10582  003016  0101               	movlb	1	; () banked
 10583  003018  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 10584                           
 10585                           ; BSR set to: 1
 10586                           ;WaypointProgram.c: 218: if (ret == 3) {
 10587  00301A  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 10588  00301C  0A03               	xorlw	3
 10589  00301E  E103               	bnz	l2515
 10590  003020                     l19351:
 10591                           
 10592                           ; BSR set to: 1
 10593                           ;WaypointProgram.c: 219: EarlyExit = 1;
 10594  003020  0E01               	movlw	1
 10595  003022  6F8B               	movwf	RunWaypointProgram@EarlyExit& (0+255),b
 10596                           
 10597                           ;WaypointProgram.c: 220: goto labelFinished;
 10598  003024  D255               	goto	l2518
 10599  003026                     l2515:
 10600  003026  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 10601  003028  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 10602  00302A  D7F1               	goto	l19345
 10603                           
 10604                           ;WaypointProgram.c: 221: }
 10605                           ;WaypointProgram.c: 222: }
 10606                           ;WaypointProgram.c: 224: LCD_ClearDisplay();
 10607  00302C  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;WaypointProgram.c: 225: LCD_PrintString("DWELL ON START\0");
 10611  003030  0E1B               	movlw	high STR_89
 10612  003032  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10613  003034  0EC2               	movlw	low STR_89
 10614  003036  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10615  003038  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;WaypointProgram.c: 226: Wait_seconds_nonblocking(CurrentPath.DwellTimes_sec[0]);
 10619  00303C  C467  F071         	movff	_CurrentPath+79,?_Wait_seconds_nonblocking
 10620  003040  C468  F072         	movff	_CurrentPath+80,?_Wait_seconds_nonblocking+1
 10621  003044  ECA3  F03B         	call	_Wait_seconds_nonblocking	;wreg free
 10622                           
 10623                           ;WaypointProgram.c: 227: while (bWaiting) {
 10624  003048  D009               	goto	l2520
 10625  00304A                     l19359:
 10626                           
 10627                           ;WaypointProgram.c: 228: Idle();
 10628  00304A  ECDF  F024         	call	_Idle	;wreg free
 10629                           
 10630                           ;WaypointProgram.c: 229: ret = GetInput_nonblocking();
 10631  00304E  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 10632  003052  0101               	movlb	1	; () banked
 10633  003054  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 10634                           
 10635                           ; BSR set to: 1
 10636                           ;WaypointProgram.c: 230: if (ret == 3) {
 10637  003056  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 10638  003058  0A03               	xorlw	3
 10639  00305A  E0E2               	bz	l19351
 10640  00305C                     l2520:
 10641  00305C  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 10642  00305E  B85A               	btfsc	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 10643  003060  D7F4               	goto	l19359
 10644  003062                     l19367:
 10645                           
 10646                           ;WaypointProgram.c: 237: if (PingPong) idx = CurrentPath.PointCount;
 10647  003062  0101               	movlb	1	; () banked
 10648  003064  518C               	movf	RunWaypointProgram@PingPong& (0+255),w,b
 10649  003066  E003               	bz	l2525
 10650                           
 10651                           ; BSR set to: 1
 10652  003068  C41B  F190         	movff	_CurrentPath+3,RunWaypointProgram@idx
 10653  00306C  D185               	goto	l19493
 10654  00306E                     l2525:
 10655                           
 10656                           ; BSR set to: 1
 10657                           ;WaypointProgram.c: 238: else idx = 0;
 10658  00306E  6B90               	clrf	RunWaypointProgram@idx& (0+255),b
 10659  003070  D183               	goto	l19493
 10660  003072                     l19371:
 10661                           
 10662                           ; BSR set to: 1
 10663                           ;WaypointProgram.c: 241: D = CurrentPath.Distances_deg[idx];
 10664  003072  5190               	movf	RunWaypointProgram@idx& (0+255),w,b
 10665  003074  0D02               	mullw	2
 10666  003076  0E1F               	movlw	low (_CurrentPath+7)
 10667  003078  24F3               	addwf	prodl,w,c
 10668  00307A  6ED9               	movwf	fsr2l,c
 10669  00307C  6ADA               	clrf	fsr2h,c
 10670  00307E  0E04               	movlw	high (_CurrentPath+7)
 10671  003080  22DA               	addwfc	fsr2h,f,c
 10672  003082  0100               	movlb	0	; () banked
 10673  003084  CFDE F073          	movff	postinc2,?___awtoft
 10674  003088  CFDD F074          	movff	postdec2,?___awtoft+1
 10675  00308C  EC8F  F03A         	call	___awtoft	;wreg free
 10676  003090  C073  F188         	movff	?___awtoft,RunWaypointProgram@D
 10677  003094  C074  F189         	movff	?___awtoft+1,RunWaypointProgram@D+1
 10678  003098  C075  F18A         	movff	?___awtoft+2,RunWaypointProgram@D+2
 10679                           
 10680                           ;WaypointProgram.c: 242: T = CurrentPath.TravelTimes_sec[idx];
 10681  00309C  0101               	movlb	1	; () banked
 10682  00309E  5190               	movf	RunWaypointProgram@idx& (0+255),w,b
 10683  0030A0  0D02               	mullw	2
 10684  0030A2  0E43               	movlw	low (_CurrentPath+43)
 10685  0030A4  24F3               	addwf	prodl,w,c
 10686  0030A6  6ED9               	movwf	fsr2l,c
 10687  0030A8  6ADA               	clrf	fsr2h,c
 10688  0030AA  0E04               	movlw	high (_CurrentPath+43)
 10689  0030AC  22DA               	addwfc	fsr2h,f,c
 10690  0030AE  0100               	movlb	0	; () banked
 10691  0030B0  CFDE F073          	movff	postinc2,?___lwtoft
 10692  0030B4  CFDD F074          	movff	postdec2,?___lwtoft+1
 10693  0030B8  ECCB  F03B         	call	___lwtoft	;wreg free
 10694  0030BC  C073  F17F         	movff	?___lwtoft,RunWaypointProgram@T
 10695  0030C0  C074  F180         	movff	?___lwtoft+1,RunWaypointProgram@T+1
 10696  0030C4  C075  F181         	movff	?___lwtoft+2,RunWaypointProgram@T+2
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;WaypointProgram.c: 243: S = SpeedRequiredToMoveInTime(D, T);
 10700  0030C8  C188  F0B4         	movff	RunWaypointProgram@D,?_SpeedRequiredToMoveInTime
 10701  0030CC  C189  F0B5         	movff	RunWaypointProgram@D+1,?_SpeedRequiredToMoveInTime+1
 10702  0030D0  C18A  F0B6         	movff	RunWaypointProgram@D+2,?_SpeedRequiredToMoveInTime+2
 10703  0030D4  C17F  F0B7         	movff	RunWaypointProgram@T,?_SpeedRequiredToMoveInTime+3
 10704  0030D8  C180  F0B8         	movff	RunWaypointProgram@T+1,?_SpeedRequiredToMoveInTime+4
 10705  0030DC  C181  F0B9         	movff	RunWaypointProgram@T+2,?_SpeedRequiredToMoveInTime+5
 10706  0030E0  ECE9  F029         	call	_SpeedRequiredToMoveInTime	;wreg free
 10707  0030E4  C0B4  F185         	movff	?_SpeedRequiredToMoveInTime,RunWaypointProgram@S
 10708  0030E8  C0B5  F186         	movff	?_SpeedRequiredToMoveInTime+1,RunWaypointProgram@S+1
 10709  0030EC  C0B6  F187         	movff	?_SpeedRequiredToMoveInTime+2,RunWaypointProgram@S+2
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;WaypointProgram.c: 244: if (PingPong) {
 10713  0030F0  0101               	movlb	1	; () banked
 10714  0030F2  518C               	movf	RunWaypointProgram@PingPong& (0+255),w,b
 10715  0030F4  E101 D0A7          	bz	l19437
 10716                           
 10717                           ; BSR set to: 1
 10718                           ;WaypointProgram.c: 245: LCD_ClearDisplay();
 10719  0030F8  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;WaypointProgram.c: 246: LCD_PrintString("MOVING TO POINT #\0");
 10723  0030FC  0E1A               	movlw	high STR_90
 10724  0030FE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10725  003100  0EB2               	movlw	low STR_90
 10726  003102  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10727  003104  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;WaypointProgram.c: 247: LCD_PrintLong(idx, 2, 0);
 10731  003108  DA28               	call	PL35	;call to abstracted procedure
 10732  00310A  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;WaypointProgram.c: 248: LCD_SetPosition(1, 0);
 10736  00310E  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 10737  003110  0E01               	movlw	1
 10738  003112  ECDF  F036         	call	_LCD_SetPosition
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;WaypointProgram.c: 249: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 10742  003116  0104               	movlb	4	; () banked
 10743  003118  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 10744  00311A  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 10745  00311C  E108               	bnz	l19389
 10746                           
 10747                           ; BSR set to: 4
 10748  00311E  0E1B               	movlw	high STR_91
 10749  003120  0100               	movlb	0	; () banked
 10750  003122  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10751  003124  0E7E               	movlw	low STR_91
 10752  003126  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10753  003128  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10754  00312C  D013               	goto	l19395
 10755  00312E                     l19389:
 10756                           
 10757                           ; BSR set to: 4
 10758                           ;WaypointProgram.c: 250: else {
 10759                           ;WaypointProgram.c: 251: LCD_PrintString("CYCLE \0");
 10760  00312E  0E1D               	movlw	high STR_92
 10761  003130  0100               	movlb	0	; () banked
 10762  003132  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10763  003134  0E6D               	movlw	low STR_92
 10764  003136  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10765  003138  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;WaypointProgram.c: 252: LCD_PrintLong(CycleIndex, 3, 0);
 10769  00313C  D9EE               	call	PL7	;call to abstracted procedure
 10770  00313E  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;WaypointProgram.c: 253: LCD_PrintString(" OF \0");
 10774  003142  0E1D               	movlw	high STR_93
 10775  003144  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10776  003146  0EA2               	movlw	low STR_93
 10777  003148  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10778  00314A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10779                           
 10780                           ;WaypointProgram.c: 254: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 10781  00314E  D9DA               	call	PL6	;call to abstracted procedure
 10782  003150  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10783  003154                     l19395:
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;WaypointProgram.c: 255: }
 10787                           ;WaypointProgram.c: 257: Move(-D, S);
 10788  003154  C188  F06B         	movff	RunWaypointProgram@D,?___ftneg
 10789  003158  C189  F06C         	movff	RunWaypointProgram@D+1,?___ftneg+1
 10790  00315C  C18A  F06D         	movff	RunWaypointProgram@D+2,?___ftneg+2
 10791  003160  ECED  F03B         	call	___ftneg	;wreg free
 10792  003164  C06B  F182         	movff	?___ftneg,_RunWaypointProgram$3899
 10793  003168  C06C  F183         	movff	?___ftneg+1,_RunWaypointProgram$3899+1
 10794  00316C  C06D  F184         	movff	?___ftneg+2,_RunWaypointProgram$3899+2
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;WaypointProgram.c: 255: }
 10798                           ;WaypointProgram.c: 257: Move(-D, S);
 10799  003170  C182  F100         	movff	_RunWaypointProgram$3899,?_Move
 10800  003174  C183  F101         	movff	_RunWaypointProgram$3899+1,?_Move+1
 10801  003178  C184  F102         	movff	_RunWaypointProgram$3899+2,?_Move+2
 10802  00317C  C185  F103         	movff	RunWaypointProgram@S,?_Move+3
 10803  003180  C186  F104         	movff	RunWaypointProgram@S+1,?_Move+4
 10804  003184  C187  F105         	movff	RunWaypointProgram@S+2,?_Move+5
 10805  003188  ECB7  F03B         	call	_Move	;wreg free
 10806                           
 10807                           ;WaypointProgram.c: 258: while (bMove_InProgress) {
 10808  00318C  D00A               	goto	l2532
 10809  00318E                     l19399:
 10810                           
 10811                           ;WaypointProgram.c: 259: Idle();
 10812  00318E  ECDF  F024         	call	_Idle	;wreg free
 10813                           
 10814                           ;WaypointProgram.c: 260: ret = GetInput_nonblocking();
 10815  003192  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 10816  003196  0101               	movlb	1	; () banked
 10817  003198  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 10818                           
 10819                           ; BSR set to: 1
 10820                           ;WaypointProgram.c: 261: if (ret == 3) {
 10821  00319A  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 10822  00319C  0A03               	xorlw	3
 10823  00319E  E101 D73F          	bz	l19351
 10824  0031A2                     l2532:
 10825  0031A2  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 10826  0031A4  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 10827  0031A6  D7F3               	goto	l19399
 10828                           
 10829                           ;WaypointProgram.c: 264: }
 10830                           ;WaypointProgram.c: 265: }
 10831                           ;WaypointProgram.c: 267: LCD_ClearDisplay();
 10832  0031A8  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;WaypointProgram.c: 268: LCD_PrintString("DWELL ON POINT #\0");
 10836  0031AC  0E1B               	movlw	high STR_94
 10837  0031AE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10838  0031B0  0E24               	movlw	low STR_94
 10839  0031B2  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10840  0031B4  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;WaypointProgram.c: 269: LCD_PrintLong(idx, 2, 0);
 10844  0031B8  D9D0               	call	PL35	;call to abstracted procedure
 10845  0031BA  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;WaypointProgram.c: 270: LCD_SetPosition(1, 0);
 10849  0031BE  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 10850  0031C0  0E01               	movlw	1
 10851  0031C2  ECDF  F036         	call	_LCD_SetPosition
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;WaypointProgram.c: 271: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 10855  0031C6  0104               	movlb	4	; () banked
 10856  0031C8  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 10857  0031CA  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 10858  0031CC  E108               	bnz	l19419
 10859                           
 10860                           ; BSR set to: 4
 10861  0031CE  0E1B               	movlw	high STR_91
 10862  0031D0  0100               	movlb	0	; () banked
 10863  0031D2  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10864  0031D4  0E7E               	movlw	low STR_91
 10865  0031D6  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10866  0031D8  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10867  0031DC  D013               	goto	l19425
 10868  0031DE                     l19419:
 10869                           
 10870                           ; BSR set to: 4
 10871                           ;WaypointProgram.c: 272: else {
 10872                           ;WaypointProgram.c: 273: LCD_PrintString("CYCLE \0");
 10873  0031DE  0E1D               	movlw	high STR_92
 10874  0031E0  0100               	movlb	0	; () banked
 10875  0031E2  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10876  0031E4  0E6D               	movlw	low STR_92
 10877  0031E6  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10878  0031E8  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;WaypointProgram.c: 274: LCD_PrintLong(CycleIndex, 3, 0);
 10882  0031EC  D996               	call	PL7	;call to abstracted procedure
 10883  0031EE  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;WaypointProgram.c: 275: LCD_PrintString(" OF \0");
 10887  0031F2  0E1D               	movlw	high STR_93
 10888  0031F4  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10889  0031F6  0EA2               	movlw	low STR_93
 10890  0031F8  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10891  0031FA  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10892                           
 10893                           ;WaypointProgram.c: 276: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 10894  0031FE  D982               	call	PL6	;call to abstracted procedure
 10895  003200  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10896  003204                     l19425:
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;WaypointProgram.c: 277: }
 10900                           ;WaypointProgram.c: 279: Wait_seconds_nonblocking(CurrentPath.DwellTimes_sec[idx]);
 10901  003204  0101               	movlb	1	; () banked
 10902  003206  5190               	movf	RunWaypointProgram@idx& (0+255),w,b
 10903  003208  0D02               	mullw	2
 10904  00320A  0E67               	movlw	low (_CurrentPath+79)
 10905  00320C  24F3               	addwf	prodl,w,c
 10906  00320E  6ED9               	movwf	fsr2l,c
 10907  003210  6ADA               	clrf	fsr2h,c
 10908  003212  0E04               	movlw	high (_CurrentPath+79)
 10909  003214  22DA               	addwfc	fsr2h,f,c
 10910  003216  0100               	movlb	0	; () banked
 10911  003218  CFDE F071          	movff	postinc2,?_Wait_seconds_nonblocking
 10912  00321C  CFDD F072          	movff	postdec2,?_Wait_seconds_nonblocking+1
 10913  003220  ECA3  F03B         	call	_Wait_seconds_nonblocking	;wreg free
 10914                           
 10915                           ;WaypointProgram.c: 280: while (bWaiting) {
 10916  003224  D00A               	goto	l2538
 10917  003226                     l19427:
 10918                           
 10919                           ;WaypointProgram.c: 281: Idle();
 10920  003226  ECDF  F024         	call	_Idle	;wreg free
 10921                           
 10922                           ;WaypointProgram.c: 282: ret = GetInput_nonblocking();
 10923  00322A  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 10924  00322E  0101               	movlb	1	; () banked
 10925  003230  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 10926                           
 10927                           ; BSR set to: 1
 10928                           ;WaypointProgram.c: 283: if (ret == 3) {
 10929  003232  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 10930  003234  0A03               	xorlw	3
 10931  003236  E101 D6F3          	bz	l19351
 10932  00323A                     l2538:
 10933  00323A  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 10934  00323C  B85A               	btfsc	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 10935  00323E  D7F3               	goto	l19427
 10936                           
 10937                           ;WaypointProgram.c: 286: }
 10938                           ;WaypointProgram.c: 287: }
 10939                           ;WaypointProgram.c: 288: idx--;
 10940  003240  0101               	movlb	1	; () banked
 10941  003242  0790               	decf	RunWaypointProgram@idx& (0+255),f,b
 10942                           
 10943                           ;WaypointProgram.c: 289: } else {
 10944  003244  D099               	goto	l19493
 10945  003246                     l19437:
 10946                           
 10947                           ; BSR set to: 1
 10948                           ;WaypointProgram.c: 291: LCD_ClearDisplay();
 10949  003246  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;WaypointProgram.c: 292: LCD_PrintString("MOVING TO POINT #\0");
 10953  00324A  0E1A               	movlw	high STR_90
 10954  00324C  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10955  00324E  0EB2               	movlw	low STR_90
 10956  003250  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10957  003252  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10958                           
 10959                           ; BSR set to: 0
 10960                           ;WaypointProgram.c: 293: LCD_PrintLong(idx + 1, 2, 0);
 10961  003256  D96C               	call	PL20	;call to abstracted procedure
 10962  003258  EC66  F023         	call	_LCD_PrintLong	;wreg free
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;WaypointProgram.c: 294: LCD_SetPosition(1, 0);
 10966  00325C  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 10967  00325E  0E01               	movlw	1
 10968  003260  ECDF  F036         	call	_LCD_SetPosition
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;WaypointProgram.c: 295: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 10972  003264  0104               	movlb	4	; () banked
 10973  003266  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 10974  003268  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 10975  00326A  E108               	bnz	l19449
 10976                           
 10977                           ; BSR set to: 4
 10978  00326C  0E1B               	movlw	high STR_91
 10979  00326E  0100               	movlb	0	; () banked
 10980  003270  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10981  003272  0E7E               	movlw	low STR_91
 10982  003274  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10983  003276  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10984  00327A  D013               	goto	l19455
 10985  00327C                     l19449:
 10986                           
 10987                           ; BSR set to: 4
 10988                           ;WaypointProgram.c: 296: else {
 10989                           ;WaypointProgram.c: 297: LCD_PrintString("CYCLE \0");
 10990  00327C  0E1D               	movlw	high STR_92
 10991  00327E  0100               	movlb	0	; () banked
 10992  003280  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 10993  003282  0E6D               	movlw	low STR_92
 10994  003284  6F76               	movwf	?_LCD_PrintString& (0+255),b
 10995  003286  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 10996                           
 10997                           ; BSR set to: 0
 10998                           ;WaypointProgram.c: 298: LCD_PrintLong(CycleIndex, 3, 0);
 10999  00328A  D947               	call	PL7	;call to abstracted procedure
 11000  00328C  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;WaypointProgram.c: 299: LCD_PrintString(" OF \0");
 11004  003290  0E1D               	movlw	high STR_93
 11005  003292  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11006  003294  0EA2               	movlw	low STR_93
 11007  003296  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11008  003298  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11009                           
 11010                           ;WaypointProgram.c: 300: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 11011  00329C  D933               	call	PL6	;call to abstracted procedure
 11012  00329E  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11013  0032A2                     l19455:
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;WaypointProgram.c: 301: }
 11017                           ;WaypointProgram.c: 303: Move(D, S);
 11018  0032A2  C188  F100         	movff	RunWaypointProgram@D,?_Move
 11019  0032A6  C189  F101         	movff	RunWaypointProgram@D+1,?_Move+1
 11020  0032AA  C18A  F102         	movff	RunWaypointProgram@D+2,?_Move+2
 11021  0032AE  C185  F103         	movff	RunWaypointProgram@S,?_Move+3
 11022  0032B2  C186  F104         	movff	RunWaypointProgram@S+1,?_Move+4
 11023  0032B6  C187  F105         	movff	RunWaypointProgram@S+2,?_Move+5
 11024  0032BA  ECB7  F03B         	call	_Move	;wreg free
 11025                           
 11026                           ;WaypointProgram.c: 304: while (bMove_InProgress) {
 11027  0032BE  D00A               	goto	l2545
 11028  0032C0                     l19457:
 11029                           
 11030                           ;WaypointProgram.c: 305: Idle();
 11031  0032C0  ECDF  F024         	call	_Idle	;wreg free
 11032                           
 11033                           ;WaypointProgram.c: 306: ret = GetInput_nonblocking();
 11034  0032C4  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 11035  0032C8  0101               	movlb	1	; () banked
 11036  0032CA  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 11037                           
 11038                           ; BSR set to: 1
 11039                           ;WaypointProgram.c: 307: if (ret == 3) {
 11040  0032CC  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 11041  0032CE  0A03               	xorlw	3
 11042  0032D0  E101 D6A6          	bz	l19351
 11043  0032D4                     l2545:
 11044  0032D4  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 11045  0032D6  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 11046  0032D8  D7F3               	goto	l19457
 11047                           
 11048                           ;WaypointProgram.c: 310: }
 11049                           ;WaypointProgram.c: 311: }
 11050                           ;WaypointProgram.c: 313: LCD_ClearDisplay();
 11051  0032DA  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;WaypointProgram.c: 314: LCD_PrintString("DWELL ON POINT #\0");
 11055  0032DE  0E1B               	movlw	high STR_94
 11056  0032E0  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11057  0032E2  0E24               	movlw	low STR_94
 11058  0032E4  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11059  0032E6  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;WaypointProgram.c: 315: LCD_PrintLong(idx + 1, 2, 0);
 11063  0032EA  D922               	call	PL20	;call to abstracted procedure
 11064  0032EC  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;WaypointProgram.c: 316: LCD_SetPosition(1, 0);
 11068  0032F0  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 11069  0032F2  0E01               	movlw	1
 11070  0032F4  ECDF  F036         	call	_LCD_SetPosition
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;WaypointProgram.c: 317: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 11074  0032F8  0104               	movlb	4	; () banked
 11075  0032FA  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 11076  0032FC  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 11077  0032FE  E108               	bnz	l19477
 11078                           
 11079                           ; BSR set to: 4
 11080  003300  0E1B               	movlw	high STR_91
 11081  003302  0100               	movlb	0	; () banked
 11082  003304  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11083  003306  0E7E               	movlw	low STR_91
 11084  003308  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11085  00330A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11086  00330E  D013               	goto	l2550
 11087  003310                     l19477:
 11088                           
 11089                           ; BSR set to: 4
 11090                           ;WaypointProgram.c: 318: else {
 11091                           ;WaypointProgram.c: 319: LCD_PrintString("CYCLE \0");
 11092  003310  0E1D               	movlw	high STR_92
 11093  003312  0100               	movlb	0	; () banked
 11094  003314  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11095  003316  0E6D               	movlw	low STR_92
 11096  003318  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11097  00331A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;WaypointProgram.c: 320: LCD_PrintLong(CycleIndex, 3, 0);
 11101  00331E  D8FD               	call	PL7	;call to abstracted procedure
 11102  003320  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;WaypointProgram.c: 321: LCD_PrintString(" OF \0");
 11106  003324  0E1D               	movlw	high STR_93
 11107  003326  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11108  003328  0EA2               	movlw	low STR_93
 11109  00332A  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11110  00332C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11111                           
 11112                           ;WaypointProgram.c: 322: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 11113  003330  D8E9               	call	PL6	;call to abstracted procedure
 11114  003332  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11115  003336                     l2550:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;WaypointProgram.c: 323: }
 11119                           ;WaypointProgram.c: 325: Wait_seconds_nonblocking(CurrentPath.DwellTimes_sec[idx + 1]);
 11120  003336  0101               	movlb	1	; () banked
 11121  003338  90D8               	bcf	status,0,c
 11122  00333A  3590               	rlcf	RunWaypointProgram@idx& (0+255),w,b
 11123  00333C  0100               	movlb	0	; () banked
 11124  00333E  6FE8               	movwf	??_RunWaypointProgram& (0+255),b
 11125  003340  0E69               	movlw	low (_CurrentPath+81)
 11126  003342  25E8               	addwf	??_RunWaypointProgram& (0+255),w,b
 11127  003344  6ED9               	movwf	fsr2l,c
 11128  003346  6ADA               	clrf	fsr2h,c
 11129  003348  0E04               	movlw	high (_CurrentPath+81)
 11130  00334A  22DA               	addwfc	fsr2h,f,c
 11131  00334C  CFDE F071          	movff	postinc2,?_Wait_seconds_nonblocking
 11132  003350  CFDD F072          	movff	postdec2,?_Wait_seconds_nonblocking+1
 11133  003354  ECA3  F03B         	call	_Wait_seconds_nonblocking	;wreg free
 11134                           
 11135                           ;WaypointProgram.c: 326: while (bWaiting) {
 11136  003358  D00A               	goto	l2551
 11137  00335A                     l19483:
 11138                           
 11139                           ;WaypointProgram.c: 327: Idle();
 11140  00335A  ECDF  F024         	call	_Idle	;wreg free
 11141                           
 11142                           ;WaypointProgram.c: 328: ret = GetInput_nonblocking();
 11143  00335E  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 11144  003362  0101               	movlb	1	; () banked
 11145  003364  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 11146                           
 11147                           ; BSR set to: 1
 11148                           ;WaypointProgram.c: 329: if (ret == 3) {
 11149  003366  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 11150  003368  0A03               	xorlw	3
 11151  00336A  E101 D659          	bz	l19351
 11152  00336E                     l2551:
 11153  00336E  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 11154  003370  B85A               	btfsc	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 11155  003372  D7F3               	goto	l19483
 11156                           
 11157                           ;WaypointProgram.c: 332: }
 11158                           ;WaypointProgram.c: 333: }
 11159                           ;WaypointProgram.c: 334: idx++;
 11160  003374  0101               	movlb	1	; () banked
 11161  003376  2B90               	incf	RunWaypointProgram@idx& (0+255),f,b
 11162  003378                     l19493:
 11163                           
 11164                           ; BSR set to: 1
 11165  003378  BF90               	btfsc	RunWaypointProgram@idx& (0+255),7,b
 11166  00337A  D00B               	goto	l19497
 11167                           
 11168                           ; BSR set to: 1
 11169  00337C  0104               	movlb	4	; () banked
 11170  00337E  511B               	movf	(_CurrentPath+3)& (0+255),w,b
 11171  003380  80D8               	bsf	status,0,c
 11172  003382  84D8               	bsf	status,2,c
 11173  003384  0101               	movlb	1	; () banked
 11174  003386  AF90               	btfss	RunWaypointProgram@idx& (0+255),7,b
 11175  003388  5D90               	subwf	RunWaypointProgram@idx& (0+255),w,b
 11176  00338A  A0D8               	btfss	status,0,c
 11177  00338C  84D8               	bsf	status,2,c
 11178  00338E  E101 D670          	bz	l19371
 11179  003392                     l19497:
 11180                           
 11181                           ; BSR set to: 1
 11182                           ;WaypointProgram.c: 335: }
 11183                           ;WaypointProgram.c: 336: }
 11184                           ;WaypointProgram.c: 338: if (CurrentPath.Bounce) PingPong = !PingPong;
 11185  003392  0104               	movlb	4	; () banked
 11186  003394  511C               	movf	(_CurrentPath+4)& (0+255),w,b
 11187  003396  E007               	bz	l2558
 11188                           
 11189                           ; BSR set to: 4
 11190  003398  0101               	movlb	1	; () banked
 11191  00339A  518C               	movf	RunWaypointProgram@PingPong& (0+255),w,b
 11192  00339C  0E01               	movlw	1
 11193  00339E  A4D8               	btfss	status,2,c
 11194  0033A0  0E00               	movlw	0
 11195  0033A2  6F8C               	movwf	RunWaypointProgram@PingPong& (0+255),b
 11196  0033A4  D084               	goto	l19553
 11197  0033A6                     l2558:
 11198                           
 11199                           ; BSR set to: 4
 11200                           ;WaypointProgram.c: 339: else {
 11201                           ;WaypointProgram.c: 340: PingPong = 0;
 11202  0033A6  0101               	movlb	1	; () banked
 11203  0033A8  6B8C               	clrf	RunWaypointProgram@PingPong& (0+255),b
 11204                           
 11205                           ; BSR set to: 1
 11206                           ;WaypointProgram.c: 341: LCD_ClearDisplay();
 11207  0033AA  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;WaypointProgram.c: 342: LCD_PrintString("MOVING TO ORIGIN\0");
 11211  0033AE  0E1B               	movlw	high STR_106
 11212  0033B0  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11213  0033B2  0E36               	movlw	low STR_106
 11214  0033B4  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11215  0033B6  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;WaypointProgram.c: 343: LCD_SetPosition(1, 0);
 11219  0033BA  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 11220  0033BC  0E01               	movlw	1
 11221  0033BE  ECDF  F036         	call	_LCD_SetPosition
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;WaypointProgram.c: 344: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 11225  0033C2  0104               	movlb	4	; () banked
 11226  0033C4  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 11227  0033C6  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 11228  0033C8  E108               	bnz	l19511
 11229                           
 11230                           ; BSR set to: 4
 11231  0033CA  0E1B               	movlw	high STR_91
 11232  0033CC  0100               	movlb	0	; () banked
 11233  0033CE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11234  0033D0  0E7E               	movlw	low STR_91
 11235  0033D2  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11236  0033D4  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11237  0033D8  D013               	goto	l19517
 11238  0033DA                     l19511:
 11239                           
 11240                           ; BSR set to: 4
 11241                           ;WaypointProgram.c: 345: else {
 11242                           ;WaypointProgram.c: 346: LCD_PrintString("CYCLE \0");
 11243  0033DA  0E1D               	movlw	high STR_92
 11244  0033DC  0100               	movlb	0	; () banked
 11245  0033DE  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11246  0033E0  0E6D               	movlw	low STR_92
 11247  0033E2  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11248  0033E4  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;WaypointProgram.c: 347: LCD_PrintLong(CycleIndex, 3, 0);
 11252  0033E8  D898               	call	PL7	;call to abstracted procedure
 11253  0033EA  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;WaypointProgram.c: 348: LCD_PrintString(" OF \0");
 11257  0033EE  0E1D               	movlw	high STR_93
 11258  0033F0  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11259  0033F2  0EA2               	movlw	low STR_93
 11260  0033F4  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11261  0033F6  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11262                           
 11263                           ;WaypointProgram.c: 349: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 11264  0033FA  D884               	call	PL6	;call to abstracted procedure
 11265  0033FC  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11266  003400                     l19517:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;WaypointProgram.c: 350: }
 11270                           ;WaypointProgram.c: 352: MoveToAngle(CurrentPath.Origin_deg, 90);
 11271  003400  C419  F073         	movff	_CurrentPath+1,?___lwtoft
 11272  003404  C41A  F074         	movff	_CurrentPath+2,?___lwtoft+1
 11273  003408  ECCB  F03B         	call	___lwtoft	;wreg free
 11274  00340C  EC46  F023         	call	PL19	;call to abstracted procedure
 11275  003410  ECC2  F028         	call	_MoveToAngle	;wreg free
 11276                           
 11277                           ;WaypointProgram.c: 353: while (bMove_InProgress) {
 11278  003414  D00A               	goto	l2562
 11279  003416                     l19519:
 11280                           
 11281                           ;WaypointProgram.c: 354: Idle();
 11282  003416  ECDF  F024         	call	_Idle	;wreg free
 11283                           
 11284                           ;WaypointProgram.c: 355: ret = GetInput_nonblocking();
 11285  00341A  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 11286  00341E  0101               	movlb	1	; () banked
 11287  003420  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 11288                           
 11289                           ; BSR set to: 1
 11290                           ;WaypointProgram.c: 356: if (ret == 3) {
 11291  003422  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 11292  003424  0A03               	xorlw	3
 11293  003426  E101 D5FB          	bz	l19351
 11294  00342A                     l2562:
 11295  00342A  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 11296  00342C  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 11297  00342E  D7F3               	goto	l19519
 11298                           
 11299                           ;WaypointProgram.c: 359: }
 11300                           ;WaypointProgram.c: 360: }
 11301                           ;WaypointProgram.c: 362: LCD_ClearDisplay();
 11302  003430  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;WaypointProgram.c: 363: LCD_PrintString("DWELL ON POINT #00\0");
 11306  003434  0E1A               	movlw	high STR_110
 11307  003436  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11308  003438  0E62               	movlw	low STR_110
 11309  00343A  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11310  00343C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;WaypointProgram.c: 364: LCD_SetPosition(1, 0);
 11314  003440  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 11315  003442  0E01               	movlw	1
 11316  003444  ECDF  F036         	call	_LCD_SetPosition
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;WaypointProgram.c: 365: if (CurrentPath.LoopCount == 0) LCD_PrintString("INFINITE CYCLE
      +                          S\0");
 11320  003448  0104               	movlb	4	; () banked
 11321  00344A  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 11322  00344C  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 11323  00344E  E108               	bnz	l19537
 11324                           
 11325                           ; BSR set to: 4
 11326  003450  0E1B               	movlw	high STR_91
 11327  003452  0100               	movlb	0	; () banked
 11328  003454  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11329  003456  0E7E               	movlw	low STR_91
 11330  003458  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11331  00345A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11332  00345E  D013               	goto	l19543
 11333  003460                     l19537:
 11334                           
 11335                           ; BSR set to: 4
 11336                           ;WaypointProgram.c: 366: else {
 11337                           ;WaypointProgram.c: 367: LCD_PrintString("CYCLE \0");
 11338  003460  0E1D               	movlw	high STR_92
 11339  003462  0100               	movlb	0	; () banked
 11340  003464  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11341  003466  0E6D               	movlw	low STR_92
 11342  003468  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11343  00346A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;WaypointProgram.c: 368: LCD_PrintLong(CycleIndex, 3, 0);
 11347  00346E  D855               	call	PL7	;call to abstracted procedure
 11348  003470  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;WaypointProgram.c: 369: LCD_PrintString(" OF \0");
 11352  003474  0E1D               	movlw	high STR_93
 11353  003476  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11354  003478  0EA2               	movlw	low STR_93
 11355  00347A  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11356  00347C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11357                           
 11358                           ;WaypointProgram.c: 370: LCD_PrintLong(CurrentPath.LoopCount, 3, 0);
 11359  003480  D841               	call	PL6	;call to abstracted procedure
 11360  003482  EC66  F023         	call	_LCD_PrintLong	;wreg free
 11361  003486                     l19543:
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;WaypointProgram.c: 371: }
 11365                           ;WaypointProgram.c: 372: Wait_seconds_nonblocking(CurrentPath.DwellTimes_sec[0]);
 11366  003486  C467  F071         	movff	_CurrentPath+79,?_Wait_seconds_nonblocking
 11367  00348A  C468  F072         	movff	_CurrentPath+80,?_Wait_seconds_nonblocking+1
 11368  00348E  ECA3  F03B         	call	_Wait_seconds_nonblocking	;wreg free
 11369                           
 11370                           ;WaypointProgram.c: 373: while (bWaiting) {
 11371  003492  D00A               	goto	l2568
 11372  003494                     l19545:
 11373                           
 11374                           ;WaypointProgram.c: 374: Idle();
 11375  003494  ECDF  F024         	call	_Idle	;wreg free
 11376                           
 11377                           ;WaypointProgram.c: 375: ret = GetInput_nonblocking();
 11378  003498  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 11379  00349C  0101               	movlb	1	; () banked
 11380  00349E  6F8F               	movwf	RunWaypointProgram@ret& (0+255),b
 11381                           
 11382                           ; BSR set to: 1
 11383                           ;WaypointProgram.c: 376: if (ret == 3) {
 11384  0034A0  518F               	movf	RunWaypointProgram@ret& (0+255),w,b
 11385  0034A2  0A03               	xorlw	3
 11386  0034A4  E101 D5BC          	bz	l19351
 11387  0034A8                     l2568:
 11388  0034A8  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 11389  0034AA  B85A               	btfsc	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 11390  0034AC  D7F3               	goto	l19545
 11391  0034AE                     l19553:
 11392                           
 11393                           ;WaypointProgram.c: 379: }
 11394                           ;WaypointProgram.c: 380: }
 11395                           ;WaypointProgram.c: 381: }
 11396                           ;WaypointProgram.c: 383: if (CurrentPath.LoopCount) {
 11397  0034AE  0104               	movlb	4	; () banked
 11398  0034B0  511E               	movf	(_CurrentPath+6)& (0+255),w,b
 11399  0034B2  111D               	iorwf	(_CurrentPath+5)& (0+255),w,b
 11400  0034B4  E101 D5D5          	bz	l19367
 11401                           
 11402                           ; BSR set to: 4
 11403                           ;WaypointProgram.c: 384: CycleIndex++;
 11404  0034B8  0101               	movlb	1	; () banked
 11405  0034BA  4B8D               	infsnz	RunWaypointProgram@CycleIndex& (0+255),f,b
 11406  0034BC  2B8E               	incf	(RunWaypointProgram@CycleIndex+1)& (0+255),f,b
 11407                           
 11408                           ; BSR set to: 1
 11409                           ;WaypointProgram.c: 385: if (CycleIndex > CurrentPath.LoopCount) goto labelFinished;
 11410  0034BE  518D               	movf	RunWaypointProgram@CycleIndex& (0+255),w,b
 11411  0034C0  0104               	movlb	4	; () banked
 11412  0034C2  5D1D               	subwf	(_CurrentPath+5)& (0+255),w,b
 11413  0034C4  0101               	movlb	1	; () banked
 11414  0034C6  518E               	movf	(RunWaypointProgram@CycleIndex+1)& (0+255),w,b
 11415  0034C8  0104               	movlb	4	; () banked
 11416  0034CA  591E               	subwfb	(_CurrentPath+6)& (0+255),w,b
 11417  0034CC  E301 D5C9          	bc	l19367
 11418  0034D0                     l2518:
 11419                           
 11420                           ;WaypointProgram.c: 390: bMove_InProgress = 0;
 11421  0034D0  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 11422                           
 11423                           ;WaypointProgram.c: 391: bFollowMode = 1;
 11424  0034D2  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
 11425  0034D4  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 11426                           
 11427                           ;WaypointProgram.c: 392: LCD_ClearDisplay();
 11428  0034D6  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;WaypointProgram.c: 393: LCD_PrintString("STOPPING...\0");
 11432  0034DA  0E1C               	movlw	high STR_49
 11433  0034DC  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 11434  0034DE  0EAE               	movlw	low STR_49
 11435  0034E0  6F76               	movwf	?_LCD_PrintString& (0+255),b
 11436  0034E2  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;WaypointProgram.c: 394: Idle();
 11440  0034E6  ECDF  F024         	call	_Idle	;wreg free
 11441                           
 11442                           ;WaypointProgram.c: 395: bMove_InProgress = 0;
 11443  0034EA  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 11444                           
 11445                           ;WaypointProgram.c: 396: bFollowMode = 1;
 11446  0034EC  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 11447                           
 11448                           ;WaypointProgram.c: 397: Wait_ms(500);
 11449  0034EE  0E01               	movlw	1
 11450  0034F0  0100               	movlb	0	; () banked
 11451  0034F2  6F8F               	movwf	(?_Wait_ms+1)& (0+255),b
 11452  0034F4  0EF4               	movlw	244
 11453  0034F6  6F8E               	movwf	?_Wait_ms& (0+255),b
 11454  0034F8  EC0A  F03C         	call	_Wait_ms	;wreg free
 11455                           
 11456                           ;WaypointProgram.c: 398: bFollowMode = 0;
 11457  0034FC  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 11458                           
 11459                           ;WaypointProgram.c: 399: return EarlyExit;
 11460  0034FE  0101               	movlb	1	; () banked
 11461  003500  518B               	movf	RunWaypointProgram@EarlyExit& (0+255),w,b
 11462                           
 11463                           ; BSR set to: 1
 11464  003502  0012               	return	
 11465  003504                     __end_of_RunWaypointProgram:
 11466                           	opt stack 0
 11467  003504                     PL6:
 11468  003504  C41D  F079         	movff	_CurrentPath+5,?_LCD_PrintLong
 11469  003508  0100               	movlb	0	; () banked
 11470  00350A  C41E  F07A         	movff	_CurrentPath+6,?_LCD_PrintLong+1
 11471  00350E  6B7B               	clrf	(?_LCD_PrintLong+2)& (0+255),b
 11472  003510  6B7C               	clrf	(?_LCD_PrintLong+3)& (0+255),b
 11473  003512  0E03               	movlw	3
 11474  003514  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 11475  003516  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 11476  003518  0C00               	retlw	0
 11477  00351A                     PL7:
 11478  00351A  C18D  F079         	movff	RunWaypointProgram@CycleIndex,?_LCD_PrintLong
 11479  00351E  0100               	movlb	0	; () banked
 11480  003520  C18E  F07A         	movff	RunWaypointProgram@CycleIndex+1,?_LCD_PrintLong+1
 11481  003524  6B7B               	clrf	(?_LCD_PrintLong+2)& (0+255),b
 11482  003526  6B7C               	clrf	(?_LCD_PrintLong+3)& (0+255),b
 11483  003528  0E03               	movlw	3
 11484  00352A  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 11485  00352C  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 11486  00352E  0C00               	retlw	0
 11487  003530                     PL20:
 11488  003530  C190  F0E8         	movff	RunWaypointProgram@idx,??_RunWaypointProgram
 11489  003534  0100               	movlb	0	; () banked
 11490  003536  6BE9               	clrf	(??_RunWaypointProgram+1)& (0+255),b
 11491  003538  BFE8               	btfsc	??_RunWaypointProgram& (0+255),7,b
 11492  00353A  07E9               	decf	(??_RunWaypointProgram+1)& (0+255),f,b
 11493  00353C  2BE8               	incf	??_RunWaypointProgram& (0+255),f,b
 11494  00353E  0E00               	movlw	0
 11495  003540  23E9               	addwfc	(??_RunWaypointProgram+1)& (0+255),f,b
 11496  003542  C0E8  F079         	movff	??_RunWaypointProgram,?_LCD_PrintLong
 11497  003546  C0E9  F07A         	movff	??_RunWaypointProgram+1,?_LCD_PrintLong+1
 11498  00354A  BF7A               	btfsc	(?_LCD_PrintLong+1)& (0+255),7,b
 11499  00354C  0EFF               	movlw	-1
 11500  00354E  6F7B               	movwf	(?_LCD_PrintLong+2)& (0+255),b
 11501  003550  6F7C               	movwf	(?_LCD_PrintLong+3)& (0+255),b
 11502  003552  0E02               	movlw	2
 11503  003554  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 11504  003556  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 11505  003558  0C00               	retlw	0
 11506  00355A                     PL35:
 11507  00355A  0101               	movlb	1	; () banked
 11508  00355C  5190               	movf	RunWaypointProgram@idx& (0+255),w,b
 11509  00355E  0100               	movlb	0	; () banked
 11510  003560  6F79               	movwf	?_LCD_PrintLong& (0+255),b
 11511  003562  0E00               	movlw	0
 11512  003564  BF79               	btfsc	?_LCD_PrintLong& (0+255),7,b
 11513  003566  0EFF               	movlw	-1
 11514  003568  6F7A               	movwf	(?_LCD_PrintLong+1)& (0+255),b
 11515  00356A  6F7B               	movwf	(?_LCD_PrintLong+2)& (0+255),b
 11516  00356C  6F7C               	movwf	(?_LCD_PrintLong+3)& (0+255),b
 11517  00356E  0E02               	movlw	2
 11518  003570  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 11519  003572  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 11520  003574  0C00               	retlw	0
 11521                           tblptru	equ	0xFF8
 11522                           tblptrh	equ	0xFF7
 11523                           tblptrl	equ	0xFF6
 11524                           tablat	equ	0xFF5
 11525                           prodh	equ	0xFF4
 11526                           prodl	equ	0xFF3
 11527                           intcon	equ	0xFF2
 11528                           intcon2	equ	0xFF1
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           postinc1	equ	0xFE6
 11532                           postdec1	equ	0xFE5
 11533                           fsr1h	equ	0xFE2
 11534                           fsr1l	equ	0xFE1
 11535                           indf2	equ	0xFDF
 11536                           postinc2	equ	0xFDE
 11537                           postdec2	equ	0xFDD
 11538                           fsr2h	equ	0xFDA
 11539                           fsr2l	equ	0xFD9
 11540                           status	equ	0xFD8
 11541                           
 11542 ;; *************** function _Wait_seconds_nonblocking *****************
 11543 ;; Defined at:
 11544 ;;		line 5 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;  time            2   17[BANK0 ] unsigned int 
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  msWait          2   19[BANK0 ] unsigned int 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;		None               void
 11551 ;; Registers used:
 11552 ;;		wreg, status,2, status,0, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : F/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: FFFFFFF0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11558 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;Total ram usage:        4 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    4
 11565 ;; This function calls:
 11566 ;;		___wmul
 11567 ;;		_Wait_ms_nonblocking
 11568 ;; This function is called by:
 11569 ;;		_ExtMode
 11570 ;;		_RunWaypointProgram
 11571 ;; This function uses a non-reentrant model
 11572 ;;
 11573                           
 11574                           	psect	text13
 11575  007746                     __ptext13:
 11576                           	opt stack 0
 11577  007746                     _Wait_seconds_nonblocking:
 11578                           	opt stack 25
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;Timings.c: 6: unsigned int msWait = time * 1000;
 11582                           
 11583                           ; BSR set to: 1
 11584  007746  C071  F06B         	movff	Wait_seconds_nonblocking@time,?___wmul
 11585  00774A  C072  F06C         	movff	Wait_seconds_nonblocking@time+1,?___wmul+1
 11586  00774E  0E03               	movlw	3
 11587  007750  6F6E               	movwf	(?___wmul+3)& (0+255),b
 11588  007752  0EE8               	movlw	232
 11589  007754  6F6D               	movwf	(?___wmul+2)& (0+255),b
 11590  007756  EC23  F03B         	call	___wmul	;wreg free
 11591  00775A  C06B  F073         	movff	?___wmul,Wait_seconds_nonblocking@msWait
 11592  00775E  C06C  F074         	movff	?___wmul+1,Wait_seconds_nonblocking@msWait+1
 11593                           
 11594                           ;Timings.c: 7: Wait_ms_nonblocking(msWait);
 11595  007762  C073  F06B         	movff	Wait_seconds_nonblocking@msWait,?_Wait_ms_nonblocking
 11596  007766  C074  F06C         	movff	Wait_seconds_nonblocking@msWait+1,?_Wait_ms_nonblocking+1
 11597  00776A  EF58  F039         	goto	_Wait_ms_nonblocking	;wreg free
 11598  00776E                     __end_of_Wait_seconds_nonblocking:
 11599                           	opt stack 0
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodh	equ	0xFF4
 11605                           prodl	equ	0xFF3
 11606                           intcon	equ	0xFF2
 11607                           intcon2	equ	0xFF1
 11608                           postinc0	equ	0xFEE
 11609                           wreg	equ	0xFE8
 11610                           postinc1	equ	0xFE6
 11611                           postdec1	equ	0xFE5
 11612                           fsr1h	equ	0xFE2
 11613                           fsr1l	equ	0xFE1
 11614                           indf2	equ	0xFDF
 11615                           postinc2	equ	0xFDE
 11616                           postdec2	equ	0xFDD
 11617                           fsr2h	equ	0xFDA
 11618                           fsr2l	equ	0xFD9
 11619                           status	equ	0xFD8
 11620                           
 11621 ;; *************** function _SpeedRequiredToMoveInTime *****************
 11622 ;; Defined at:
 11623 ;;		line 28 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;  _Distance       3   84[BANK0 ] unsigned int 
 11626 ;;  _Time           3   87[BANK0 ] unsigned int 
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;  T               3  105[BANK0 ] unsigned int 
 11629 ;;  D               3  102[BANK0 ] unsigned int 
 11630 ;;  Speed           3   99[BANK0 ] unsigned int 
 11631 ;;  RootPrime       3   96[BANK0 ] unsigned int 
 11632 ;;  AccelTime       3   90[BANK0 ] unsigned int 
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  3   84[BANK0 ] unsigned int 
 11635 ;; Registers used:
 11636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : F/0
 11639 ;;		On exit  : F/0
 11640 ;;		Unchanged: FFFFFFF0/0
 11641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11642 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11646 ;;Total ram usage:       24 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    8
 11649 ;; This function calls:
 11650 ;;		___ftmul
 11651 ;;		___ftge
 11652 ;;		___ftdiv
 11653 ;;		___ftsub
 11654 ;;		_sqrt
 11655 ;; This function is called by:
 11656 ;;		_ExtMode
 11657 ;;		_RunWaypointProgram
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text14
 11662  0053D2                     __ptext14:
 11663                           	opt stack 0
 11664  0053D2                     _SpeedRequiredToMoveInTime:
 11665                           	opt stack 21
 11666                           
 11667                           ; BSR set to: 0
 11668                           ;MotionEngine.c: 29: double D;
 11669                           ;MotionEngine.c: 30: double T;
 11670                           ;MotionEngine.c: 32: if (_Distance < 0) D = _Distance * -0.5;
 11671  0053D2  51B6               	movf	(SpeedRequiredToMoveInTime@_Distance+2)& (0+255),w,b
 11672  0053D4  0A80               	xorlw	128
 11673  0053D6  0F80               	addlw	128
 11674  0053D8  E105               	bnz	u9825
 11675  0053DA  0E00               	movlw	0
 11676  0053DC  5DB5               	subwf	(SpeedRequiredToMoveInTime@_Distance+1)& (0+255),w,b
 11677  0053DE  E102               	bnz	u9825
 11678  0053E0  0E00               	movlw	0
 11679  0053E2  5DB4               	subwf	SpeedRequiredToMoveInTime@_Distance& (0+255),w,b
 11680  0053E4                     u9825:
 11681  0053E4  E20D               	bc	l17431
 11682                           
 11683                           ; BSR set to: 0
 11684  0053E6  C0B4  F077         	movff	SpeedRequiredToMoveInTime@_Distance,?___ftmul
 11685  0053EA  C0B5  F078         	movff	SpeedRequiredToMoveInTime@_Distance+1,?___ftmul+1
 11686  0053EE  C0B6  F079         	movff	SpeedRequiredToMoveInTime@_Distance+2,?___ftmul+2
 11687  0053F2  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 11688  0053F4  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 11689  0053F6  0EBF               	movlw	191
 11690  0053F8  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 11691  0053FA  EC52  F031         	call	___ftmul	;wreg free
 11692  0053FE  D00C               	goto	L10
 11693  005400                     l17431:
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;MotionEngine.c: 33: else D = _Distance * 0.5;
 11697  005400  C0B4  F077         	movff	SpeedRequiredToMoveInTime@_Distance,?___ftmul
 11698  005404  C0B5  F078         	movff	SpeedRequiredToMoveInTime@_Distance+1,?___ftmul+1
 11699  005408  C0B6  F079         	movff	SpeedRequiredToMoveInTime@_Distance+2,?___ftmul+2
 11700  00540C  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 11701  00540E  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 11702  005410  0E3F               	movlw	63
 11703  005412  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 11704  005414  EC52  F031         	call	___ftmul	;wreg free
 11705  005418                     L10:
 11706  005418  C077  F0C6         	movff	?___ftmul,SpeedRequiredToMoveInTime@D
 11707  00541C  C078  F0C7         	movff	?___ftmul+1,SpeedRequiredToMoveInTime@D+1
 11708  005420  C079  F0C8         	movff	?___ftmul+2,SpeedRequiredToMoveInTime@D+2
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;MotionEngine.c: 35: if (_Time < 0) T = _Time * -0.5;
 11712  005424  51B9               	movf	(SpeedRequiredToMoveInTime@_Time+2)& (0+255),w,b
 11713  005426  0A80               	xorlw	128
 11714  005428  0F80               	addlw	128
 11715  00542A  E105               	bnz	u9835
 11716  00542C  0E00               	movlw	0
 11717  00542E  5DB8               	subwf	(SpeedRequiredToMoveInTime@_Time+1)& (0+255),w,b
 11718  005430  E102               	bnz	u9835
 11719  005432  0E00               	movlw	0
 11720  005434  5DB7               	subwf	SpeedRequiredToMoveInTime@_Time& (0+255),w,b
 11721  005436                     u9835:
 11722  005436  E20D               	bc	l17437
 11723                           
 11724                           ; BSR set to: 0
 11725  005438  C0B7  F077         	movff	SpeedRequiredToMoveInTime@_Time,?___ftmul
 11726  00543C  C0B8  F078         	movff	SpeedRequiredToMoveInTime@_Time+1,?___ftmul+1
 11727  005440  C0B9  F079         	movff	SpeedRequiredToMoveInTime@_Time+2,?___ftmul+2
 11728  005444  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 11729  005446  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 11730  005448  0EBF               	movlw	191
 11731  00544A  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 11732  00544C  EC52  F031         	call	___ftmul	;wreg free
 11733  005450  D00C               	goto	L11
 11734  005452                     l17437:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;MotionEngine.c: 36: else T = _Time * 0.5;
 11738  005452  C0B7  F077         	movff	SpeedRequiredToMoveInTime@_Time,?___ftmul
 11739  005456  C0B8  F078         	movff	SpeedRequiredToMoveInTime@_Time+1,?___ftmul+1
 11740  00545A  C0B9  F079         	movff	SpeedRequiredToMoveInTime@_Time+2,?___ftmul+2
 11741  00545E  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 11742  005460  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 11743  005462  0E3F               	movlw	63
 11744  005464  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 11745  005466  EC52  F031         	call	___ftmul	;wreg free
 11746  00546A                     L11:
 11747  00546A  C077  F0C9         	movff	?___ftmul,SpeedRequiredToMoveInTime@T
 11748  00546E  C078  F0CA         	movff	?___ftmul+1,SpeedRequiredToMoveInTime@T+1
 11749  005472  C079  F0CB         	movff	?___ftmul+2,SpeedRequiredToMoveInTime@T+2
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;MotionEngine.c: 38: if (T > 4096) return D / T;
 11753  005476  6B88               	clrf	?___ftge& (0+255),b
 11754  005478  0E80               	movlw	128
 11755  00547A  6F89               	movwf	(?___ftge+1)& (0+255),b
 11756  00547C  0E45               	movlw	69
 11757  00547E  6F8A               	movwf	(?___ftge+2)& (0+255),b
 11758  005480  C0C9  F08B         	movff	SpeedRequiredToMoveInTime@T,?___ftge+3
 11759  005484  C0CA  F08C         	movff	SpeedRequiredToMoveInTime@T+1,?___ftge+4
 11760  005488  C0CB  F08D         	movff	SpeedRequiredToMoveInTime@T+2,?___ftge+5
 11761  00548C  ECB1  F037         	call	___ftge	;wreg free
 11762  005490  E215               	bc	l17443
 11763                           
 11764                           ; BSR set to: 0
 11765  005492  C0C6  F088         	movff	SpeedRequiredToMoveInTime@D,?___ftdiv
 11766  005496  C0C7  F089         	movff	SpeedRequiredToMoveInTime@D+1,?___ftdiv+1
 11767  00549A  C0C8  F08A         	movff	SpeedRequiredToMoveInTime@D+2,?___ftdiv+2
 11768  00549E  C0C9  F08B         	movff	SpeedRequiredToMoveInTime@T,?___ftdiv+3
 11769  0054A2  C0CA  F08C         	movff	SpeedRequiredToMoveInTime@T+1,?___ftdiv+4
 11770  0054A6  C0CB  F08D         	movff	SpeedRequiredToMoveInTime@T+2,?___ftdiv+5
 11771  0054AA  ECD0  F031         	call	___ftdiv	;wreg free
 11772  0054AE  C088  F0B4         	movff	?___ftdiv,?_SpeedRequiredToMoveInTime
 11773  0054B2  C089  F0B5         	movff	?___ftdiv+1,?_SpeedRequiredToMoveInTime+1
 11774  0054B6  C08A  F0B6         	movff	?___ftdiv+2,?_SpeedRequiredToMoveInTime+2
 11775  0054BA  0012               	return	
 11776  0054BC                     l17443:
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;MotionEngine.c: 40: double RootPrime = (T * T)-(2 * D / Config.SystemAcceleration);
 11780  0054BC  C0C9  F07A         	movff	SpeedRequiredToMoveInTime@T,?___ftmul+3
 11781  0054C0  C0CA  F07B         	movff	SpeedRequiredToMoveInTime@T+1,?___ftmul+4
 11782  0054C4  C0CB  F07C         	movff	SpeedRequiredToMoveInTime@T+2,?___ftmul+5
 11783  0054C8  C0C9  F077         	movff	SpeedRequiredToMoveInTime@T,?___ftmul
 11784  0054CC  C0CA  F078         	movff	SpeedRequiredToMoveInTime@T+1,?___ftmul+1
 11785  0054D0  C0CB  F079         	movff	SpeedRequiredToMoveInTime@T+2,?___ftmul+2
 11786  0054D4  EC52  F031         	call	___ftmul	;wreg free
 11787  0054D8  C077  F099         	movff	?___ftmul,?___ftsub
 11788  0054DC  C078  F09A         	movff	?___ftmul+1,?___ftsub+1
 11789  0054E0  C079  F09B         	movff	?___ftmul+2,?___ftsub+2
 11790  0054E4  C2E6  F08B         	movff	_Config+16,?___ftdiv+3
 11791  0054E8  C2E7  F08C         	movff	_Config+17,?___ftdiv+4
 11792  0054EC  C2E8  F08D         	movff	_Config+18,?___ftdiv+5
 11793  0054F0  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 11794  0054F2  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 11795  0054F4  0E40               	movlw	64
 11796  0054F6  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 11797  0054F8  C0C6  F077         	movff	SpeedRequiredToMoveInTime@D,?___ftmul
 11798  0054FC  C0C7  F078         	movff	SpeedRequiredToMoveInTime@D+1,?___ftmul+1
 11799  005500  C0C8  F079         	movff	SpeedRequiredToMoveInTime@D+2,?___ftmul+2
 11800  005504  EC52  F031         	call	___ftmul	;wreg free
 11801  005508  C077  F088         	movff	?___ftmul,?___ftdiv
 11802  00550C  C078  F089         	movff	?___ftmul+1,?___ftdiv+1
 11803  005510  C079  F08A         	movff	?___ftmul+2,?___ftdiv+2
 11804  005514  ECD0  F031         	call	___ftdiv	;wreg free
 11805  005518  C088  F09C         	movff	?___ftdiv,?___ftsub+3
 11806  00551C  C089  F09D         	movff	?___ftdiv+1,?___ftsub+4
 11807  005520  C08A  F09E         	movff	?___ftdiv+2,?___ftsub+5
 11808  005524  ECDE  F03A         	call	___ftsub	;wreg free
 11809  005528  C099  F0C0         	movff	?___ftsub,SpeedRequiredToMoveInTime@RootPrime
 11810  00552C  C09A  F0C1         	movff	?___ftsub+1,SpeedRequiredToMoveInTime@RootPrime+1
 11811  005530  C09B  F0C2         	movff	?___ftsub+2,SpeedRequiredToMoveInTime@RootPrime+2
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;MotionEngine.c: 41: if (RootPrime < 0) return -1;
 11815  005534  51C2               	movf	(SpeedRequiredToMoveInTime@RootPrime+2)& (0+255),w,b
 11816  005536  0A80               	xorlw	128
 11817  005538  0F80               	addlw	128
 11818  00553A  E105               	bnz	u9855
 11819  00553C  0E00               	movlw	0
 11820  00553E  5DC1               	subwf	(SpeedRequiredToMoveInTime@RootPrime+1)& (0+255),w,b
 11821  005540  E102               	bnz	u9855
 11822  005542  0E00               	movlw	0
 11823  005544  5DC0               	subwf	SpeedRequiredToMoveInTime@RootPrime& (0+255),w,b
 11824  005546                     u9855:
 11825  005546  E207               	bc	l17451
 11826                           
 11827                           ; BSR set to: 0
 11828  005548  0E00               	movlw	0
 11829  00554A  6FB4               	movwf	?_SpeedRequiredToMoveInTime& (0+255),b
 11830  00554C  0E80               	movlw	128
 11831  00554E  6FB5               	movwf	(?_SpeedRequiredToMoveInTime+1)& (0+255),b
 11832  005550  0EBF               	movlw	191
 11833  005552  6FB6               	movwf	(?_SpeedRequiredToMoveInTime+2)& (0+255),b
 11834  005554  0CBF               	retlw	191
 11835  005556                     l17451:
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;MotionEngine.c: 43: double AccelTime = T - sqrt(RootPrime);
 11839  005556  C0C0  F0A4         	movff	SpeedRequiredToMoveInTime@RootPrime,?_sqrt
 11840  00555A  C0C1  F0A5         	movff	SpeedRequiredToMoveInTime@RootPrime+1,?_sqrt+1
 11841  00555E  C0C2  F0A6         	movff	SpeedRequiredToMoveInTime@RootPrime+2,?_sqrt+2
 11842  005562  ECCE  F030         	call	_sqrt	;wreg free
 11843  005566  C0A4  F0BD         	movff	?_sqrt,_SpeedRequiredToMoveInTime$3892
 11844  00556A  C0A5  F0BE         	movff	?_sqrt+1,_SpeedRequiredToMoveInTime$3892+1
 11845  00556E  C0A6  F0BF         	movff	?_sqrt+2,_SpeedRequiredToMoveInTime$3892+2
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;MotionEngine.c: 43: double AccelTime = T - sqrt(RootPrime);
 11849  005572  C0C9  F099         	movff	SpeedRequiredToMoveInTime@T,?___ftsub
 11850  005576  C0CA  F09A         	movff	SpeedRequiredToMoveInTime@T+1,?___ftsub+1
 11851  00557A  C0CB  F09B         	movff	SpeedRequiredToMoveInTime@T+2,?___ftsub+2
 11852  00557E  C0BD  F09C         	movff	_SpeedRequiredToMoveInTime$3892,?___ftsub+3
 11853  005582  C0BE  F09D         	movff	_SpeedRequiredToMoveInTime$3892+1,?___ftsub+4
 11854  005586  C0BF  F09E         	movff	_SpeedRequiredToMoveInTime$3892+2,?___ftsub+5
 11855  00558A  ECDE  F03A         	call	___ftsub	;wreg free
 11856  00558E  C099  F0BA         	movff	?___ftsub,SpeedRequiredToMoveInTime@AccelTime
 11857  005592  C09A  F0BB         	movff	?___ftsub+1,SpeedRequiredToMoveInTime@AccelTime+1
 11858  005596  C09B  F0BC         	movff	?___ftsub+2,SpeedRequiredToMoveInTime@AccelTime+2
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;MotionEngine.c: 44: double Speed = AccelTime*Config.SystemAcceleration;
 11862  00559A  C2E6  F077         	movff	_Config+16,?___ftmul
 11863  00559E  C2E7  F078         	movff	_Config+17,?___ftmul+1
 11864  0055A2  C2E8  F079         	movff	_Config+18,?___ftmul+2
 11865  0055A6  C0BA  F07A         	movff	SpeedRequiredToMoveInTime@AccelTime,?___ftmul+3
 11866  0055AA  C0BB  F07B         	movff	SpeedRequiredToMoveInTime@AccelTime+1,?___ftmul+4
 11867  0055AE  C0BC  F07C         	movff	SpeedRequiredToMoveInTime@AccelTime+2,?___ftmul+5
 11868  0055B2  EC52  F031         	call	___ftmul	;wreg free
 11869  0055B6  C077  F0C3         	movff	?___ftmul,SpeedRequiredToMoveInTime@Speed
 11870  0055BA  C078  F0C4         	movff	?___ftmul+1,SpeedRequiredToMoveInTime@Speed+1
 11871  0055BE  C079  F0C5         	movff	?___ftmul+2,SpeedRequiredToMoveInTime@Speed+2
 11872                           
 11873                           ; BSR set to: 0
 11874                           ;MotionEngine.c: 45: if (Speed > Config.MaxSpeed) return -2;
 11875  0055C2  C2E9  F088         	movff	_Config+19,?___ftge
 11876  0055C6  C2EA  F089         	movff	_Config+20,?___ftge+1
 11877  0055CA  C2EB  F08A         	movff	_Config+21,?___ftge+2
 11878  0055CE  C0C3  F08B         	movff	SpeedRequiredToMoveInTime@Speed,?___ftge+3
 11879  0055D2  C0C4  F08C         	movff	SpeedRequiredToMoveInTime@Speed+1,?___ftge+4
 11880  0055D6  C0C5  F08D         	movff	SpeedRequiredToMoveInTime@Speed+2,?___ftge+5
 11881  0055DA  ECB1  F037         	call	___ftge	;wreg free
 11882  0055DE  E206               	bc	l1110
 11883                           
 11884                           ; BSR set to: 0
 11885  0055E0  0E00               	movlw	0
 11886  0055E2  6FB4               	movwf	?_SpeedRequiredToMoveInTime& (0+255),b
 11887  0055E4  6FB5               	movwf	(?_SpeedRequiredToMoveInTime+1)& (0+255),b
 11888  0055E6  0EC0               	movlw	192
 11889  0055E8  6FB6               	movwf	(?_SpeedRequiredToMoveInTime+2)& (0+255),b
 11890  0055EA  0CC0               	retlw	192
 11891  0055EC                     l1110:
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;MotionEngine.c: 46: return Speed;
 11895  0055EC  C0C3  F0B4         	movff	SpeedRequiredToMoveInTime@Speed,?_SpeedRequiredToMoveInTime
 11896  0055F0  C0C4  F0B5         	movff	SpeedRequiredToMoveInTime@Speed+1,?_SpeedRequiredToMoveInTime+1
 11897  0055F4  C0C5  F0B6         	movff	SpeedRequiredToMoveInTime@Speed+2,?_SpeedRequiredToMoveInTime+2
 11898                           
 11899                           ; BSR set to: 0
 11900  0055F8  0012               	return	
 11901  0055FA                     __end_of_SpeedRequiredToMoveInTime:
 11902                           	opt stack 0
 11903                           tblptru	equ	0xFF8
 11904                           tblptrh	equ	0xFF7
 11905                           tblptrl	equ	0xFF6
 11906                           tablat	equ	0xFF5
 11907                           prodh	equ	0xFF4
 11908                           prodl	equ	0xFF3
 11909                           intcon	equ	0xFF2
 11910                           intcon2	equ	0xFF1
 11911                           postinc0	equ	0xFEE
 11912                           wreg	equ	0xFE8
 11913                           postinc1	equ	0xFE6
 11914                           postdec1	equ	0xFE5
 11915                           fsr1h	equ	0xFE2
 11916                           fsr1l	equ	0xFE1
 11917                           indf2	equ	0xFDF
 11918                           postinc2	equ	0xFDE
 11919                           postdec2	equ	0xFDD
 11920                           fsr2h	equ	0xFDA
 11921                           fsr2l	equ	0xFD9
 11922                           status	equ	0xFD8
 11923                           
 11924 ;; *************** function _RunOrbitProgram *****************
 11925 ;; Defined at:
 11926 ;;		line 174 in file "Z:\CineFlux\Dropbox\Orbit\OrbitProgram.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;  DistanceRema    3  144[BANK1 ] unsigned int 
 11931 ;;  CurrentPos      3  141[BANK1 ] unsigned int 
 11932 ;;  Distance        3  138[BANK1 ] unsigned int 
 11933 ;;  SpdConvert      3  133[BANK1 ] unsigned int 
 11934 ;;  TimeRemainin    3  130[BANK1 ] unsigned int 
 11935 ;;  EndPos          3  127[BANK1 ] unsigned int 
 11936 ;;  ret             1  137[BANK1 ] unsigned char 
 11937 ;;  EarlyExit       1  136[BANK1 ] unsigned char 
 11938 ;; Return value:  Size  Location     Type
 11939 ;;                  1    wreg      char 
 11940 ;; Registers used:
 11941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 11942 ;; Tracked objects:
 11943 ;;		On entry : E/0
 11944 ;;		On exit  : F/1
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;Total ram usage:       20 bytes
 11952 ;; Hardware stack levels used:    1
 11953 ;; Hardware stack levels required when called:    9
 11954 ;; This function calls:
 11955 ;;		_LCD_ClearDisplay
 11956 ;;		_LCD_PrintString
 11957 ;;		___lwtoft
 11958 ;;		_MoveToAngle
 11959 ;;		_Idle
 11960 ;;		_GetInput_nonblocking
 11961 ;;		___ftmul
 11962 ;;		___ftneg
 11963 ;;		___altoft
 11964 ;;		___asftmul
 11965 ;;		___ftadd
 11966 ;;		_LCD_SetPosition
 11967 ;;		___ftdiv
 11968 ;;		_Move
 11969 ;;		___ftsub
 11970 ;;		_PrintTime
 11971 ;;		_LCD_PrintFloat
 11972 ;;		_Wait_ms
 11973 ;; This function is called by:
 11974 ;;		_main
 11975 ;;		_CreateOrbitProgram
 11976 ;; This function uses a non-reentrant model
 11977 ;;
 11978                           
 11979                           	psect	text15
 11980  0043D8                     __ptext15:
 11981                           	opt stack 0
 11982  0043D8                     _RunOrbitProgram:
 11983                           	opt stack 21
 11984                           
 11985                           ;OrbitProgram.c: 175: char EarlyExit = 0;
 11986                           
 11987                           ; BSR set to: 0
 11988  0043D8  0101               	movlb	1	; () banked
 11989  0043DA  6B88               	clrf	RunOrbitProgram@EarlyExit& (0+255),b
 11990                           
 11991                           ; BSR set to: 1
 11992                           ;OrbitProgram.c: 176: char ret;
 11993                           ;OrbitProgram.c: 177: double EndPos;
 11994                           ;OrbitProgram.c: 178: double CurrentPos;
 11995                           ;OrbitProgram.c: 179: double TimeRemaining;
 11996                           ;OrbitProgram.c: 180: double DistanceRemaining;
 11997                           ;OrbitProgram.c: 182: LCD_ClearDisplay();
 11998  0043DC  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;OrbitProgram.c: 183: LCD_PrintString("MOVING TO START\0");
 12002  0043E0  0E1B               	movlw	high STR_44
 12003  0043E2  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12004  0043E4  0EA0               	movlw	low STR_44
 12005  0043E6  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12006  0043E8  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;OrbitProgram.c: 184: MoveToAngle(CurrentOrbitProgram.Origin_deg, 90);
 12010  0043EC  C48E  F073         	movff	_CurrentOrbitProgram+1,?___lwtoft
 12011  0043F0  C48F  F074         	movff	_CurrentOrbitProgram+2,?___lwtoft+1
 12012  0043F4  ECCB  F03B         	call	___lwtoft	;wreg free
 12013  0043F8  D949               	call	PL19	;call to abstracted procedure
 12014  0043FA  ECC2  F028         	call	_MoveToAngle	;wreg free
 12015                           
 12016                           ;OrbitProgram.c: 185: while (bMove_InProgress) {
 12017  0043FE  D00C               	goto	l1393
 12018  004400                     l19587:
 12019                           
 12020                           ;OrbitProgram.c: 186: Idle();
 12021  004400  ECDF  F024         	call	_Idle	;wreg free
 12022                           
 12023                           ;OrbitProgram.c: 187: ret = GetInput_nonblocking();
 12024  004404  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 12025  004408  0101               	movlb	1	; () banked
 12026  00440A  6F89               	movwf	RunOrbitProgram@ret& (0+255),b
 12027                           
 12028                           ; BSR set to: 1
 12029                           ;OrbitProgram.c: 188: if (ret == 3) {
 12030  00440C  5189               	movf	RunOrbitProgram@ret& (0+255),w,b
 12031  00440E  0A03               	xorlw	3
 12032  004410  E103               	bnz	l1393
 12033  004412                     l19593:
 12034                           
 12035                           ; BSR set to: 1
 12036                           ;OrbitProgram.c: 189: EarlyExit = 1;
 12037  004412  0E01               	movlw	1
 12038  004414  6F88               	movwf	RunOrbitProgram@EarlyExit& (0+255),b
 12039                           
 12040                           ;OrbitProgram.c: 190: goto labelFinished;
 12041  004416  D120               	goto	l1396
 12042  004418                     l1393:
 12043  004418  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 12044  00441A  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 12045  00441C  D7F1               	goto	l19587
 12046                           
 12047                           ;OrbitProgram.c: 191: }
 12048                           ;OrbitProgram.c: 192: }
 12049                           ;OrbitProgram.c: 195: double Distance = CurrentOrbitProgram.CycleCount_rev * 360;
 12050  00441E  C495  F077         	movff	_CurrentOrbitProgram+8,?___ftmul
 12051  004422  C496  F078         	movff	_CurrentOrbitProgram+9,?___ftmul+1
 12052  004426  C497  F079         	movff	_CurrentOrbitProgram+10,?___ftmul+2
 12053  00442A  0100               	movlb	0	; () banked
 12054  00442C  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 12055  00442E  0EB4               	movlw	180
 12056  004430  6F7B               	movwf	(?___ftmul+4)& (0+255),b
 12057  004432  0E43               	movlw	67
 12058  004434  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 12059  004436  EC52  F031         	call	___ftmul	;wreg free
 12060  00443A  C077  F18A         	movff	?___ftmul,RunOrbitProgram@Distance
 12061  00443E  C078  F18B         	movff	?___ftmul+1,RunOrbitProgram@Distance+1
 12062  004442  C079  F18C         	movff	?___ftmul+2,RunOrbitProgram@Distance+2
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;OrbitProgram.c: 196: if (CurrentOrbitProgram.EndMode == 2) Distance = 7776000;
 12066  004446  0104               	movlb	4	; () banked
 12067  004448  5190               	movf	(_CurrentOrbitProgram+3)& (0+255),w,b
 12068  00444A  0A02               	xorlw	2
 12069  00444C  E107               	bnz	l19601
 12070                           
 12071                           ; BSR set to: 4
 12072  00444E  0E4E               	movlw	78
 12073  004450  0101               	movlb	1	; () banked
 12074  004452  6F8A               	movwf	RunOrbitProgram@Distance& (0+255),b
 12075  004454  0EED               	movlw	237
 12076  004456  6F8B               	movwf	(RunOrbitProgram@Distance+1)& (0+255),b
 12077  004458  0E4A               	movlw	74
 12078  00445A  6F8C               	movwf	(RunOrbitProgram@Distance+2)& (0+255),b
 12079  00445C                     l19601:
 12080                           
 12081                           ;OrbitProgram.c: 197: if (!CurrentOrbitProgram.IsClockWise) Distance = -Distance;
 12082  00445C  0104               	movlb	4	; () banked
 12083  00445E  6791               	tstfsz	(_CurrentOrbitProgram+4)& (0+255),b
 12084  004460  D00E               	goto	l19605
 12085                           
 12086                           ; BSR set to: 4
 12087  004462  C18A  F06B         	movff	RunOrbitProgram@Distance,?___ftneg
 12088  004466  C18B  F06C         	movff	RunOrbitProgram@Distance+1,?___ftneg+1
 12089  00446A  C18C  F06D         	movff	RunOrbitProgram@Distance+2,?___ftneg+2
 12090  00446E  ECED  F03B         	call	___ftneg	;wreg free
 12091  004472  C06B  F18A         	movff	?___ftneg,RunOrbitProgram@Distance
 12092  004476  C06C  F18B         	movff	?___ftneg+1,RunOrbitProgram@Distance+1
 12093  00447A  C06D  F18C         	movff	?___ftneg+2,RunOrbitProgram@Distance+2
 12094  00447E                     l19605:
 12095                           
 12096                           ;OrbitProgram.c: 199: bLock_Motor_Position = 1;
 12097                           
 12098                           ;OrbitProgram.c: 200: CurrentPos = Motor_Position;
 12099  00447E  EC26  F038         	call	PL11	;call to abstracted procedure
 12100  004482  EC49  F037         	call	___altoft	;wreg free
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;OrbitProgram.c: 201: bLock_Motor_Position = 0;
 12104                           
 12105                           ;OrbitProgram.c: 202: CurrentPos *= Config.Degrees_Per_Count;
 12106  004486  D90F               	call	PL29	;call to abstracted procedure
 12107  004488  ECF9  F039         	call	___asftmul	;wreg free
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;OrbitProgram.c: 204: EndPos = CurrentPos + Distance;
 12111  00448C  C18D  F073         	movff	RunOrbitProgram@CurrentPos,?___ftadd
 12112  004490  C18E  F074         	movff	RunOrbitProgram@CurrentPos+1,?___ftadd+1
 12113  004494  C18F  F075         	movff	RunOrbitProgram@CurrentPos+2,?___ftadd+2
 12114  004498  C18A  F076         	movff	RunOrbitProgram@Distance,?___ftadd+3
 12115  00449C  C18B  F077         	movff	RunOrbitProgram@Distance+1,?___ftadd+4
 12116  0044A0  C18C  F078         	movff	RunOrbitProgram@Distance+2,?___ftadd+5
 12117  0044A4  EC06  F02D         	call	___ftadd	;wreg free
 12118  0044A8  C073  F17F         	movff	?___ftadd,RunOrbitProgram@EndPos
 12119  0044AC  C074  F180         	movff	?___ftadd+1,RunOrbitProgram@EndPos+1
 12120  0044B0  C075  F181         	movff	?___ftadd+2,RunOrbitProgram@EndPos+2
 12121                           
 12122                           ;OrbitProgram.c: 207: LCD_ClearDisplay();
 12123  0044B4  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;OrbitProgram.c: 208: LCD_PrintString("RUNNING: T-HH:MM:SS\0");
 12127  0044B8  0E1A               	movlw	high STR_45
 12128  0044BA  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12129  0044BC  0E24               	movlw	low STR_45
 12130  0044BE  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12131  0044C0  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;OrbitProgram.c: 210: if (CurrentOrbitProgram.EndMode == 2) {
 12135  0044C4  0104               	movlb	4	; () banked
 12136  0044C6  5190               	movf	(_CurrentOrbitProgram+3)& (0+255),w,b
 12137  0044C8  0A02               	xorlw	2
 12138  0044CA  E112               	bnz	l19625
 12139                           
 12140                           ; BSR set to: 4
 12141                           ;OrbitProgram.c: 211: LCD_ClearDisplay();
 12142  0044CC  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;OrbitProgram.c: 212: LCD_PrintString("ORBIT RUNNING\0");
 12146  0044D0  0E1C               	movlw	high STR_46
 12147  0044D2  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12148  0044D4  0E11               	movlw	low STR_46
 12149  0044D6  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12150  0044D8  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;OrbitProgram.c: 213: LCD_SetPosition(1, 0);
 12154  0044DC  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 12155  0044DE  0E01               	movlw	1
 12156  0044E0  ECDF  F036         	call	_LCD_SetPosition
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;OrbitProgram.c: 214: LCD_PrintString("INFINITE RUNTIME\0");
 12160  0044E4  0E1B               	movlw	high STR_47
 12161  0044E6  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12162  0044E8  0E6C               	movlw	low STR_47
 12163  0044EA  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12164  0044EC  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12165  0044F0                     l19625:
 12166                           
 12167                           ;OrbitProgram.c: 215: }
 12168                           ;OrbitProgram.c: 217: double SpdConvert = 1 / CurrentOrbitProgram.Speed_deg_sec;
 12169  0044F0  0100               	movlb	0	; () banked
 12170  0044F2  6B88               	clrf	?___ftdiv& (0+255),b
 12171  0044F4  0E80               	movlw	128
 12172  0044F6  6F89               	movwf	(?___ftdiv+1)& (0+255),b
 12173  0044F8  0E3F               	movlw	63
 12174  0044FA  6F8A               	movwf	(?___ftdiv+2)& (0+255),b
 12175  0044FC  C49B  F08B         	movff	_CurrentOrbitProgram+14,?___ftdiv+3
 12176  004500  C49C  F08C         	movff	_CurrentOrbitProgram+15,?___ftdiv+4
 12177  004504  C49D  F08D         	movff	_CurrentOrbitProgram+16,?___ftdiv+5
 12178  004508  ECD0  F031         	call	___ftdiv	;wreg free
 12179  00450C  C088  F185         	movff	?___ftdiv,RunOrbitProgram@SpdConvert
 12180  004510  C089  F186         	movff	?___ftdiv+1,RunOrbitProgram@SpdConvert+1
 12181  004514  C08A  F187         	movff	?___ftdiv+2,RunOrbitProgram@SpdConvert+2
 12182                           
 12183                           ; BSR set to: 0
 12184  004518  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;OrbitProgram.c: 220: Move(Distance, CurrentOrbitProgram.Speed_deg_sec);
 12188  00451C  C18A  F100         	movff	RunOrbitProgram@Distance,?_Move
 12189  004520  C18B  F101         	movff	RunOrbitProgram@Distance+1,?_Move+1
 12190  004524  C18C  F102         	movff	RunOrbitProgram@Distance+2,?_Move+2
 12191  004528  C49B  F103         	movff	_CurrentOrbitProgram+14,?_Move+3
 12192  00452C  C49C  F104         	movff	_CurrentOrbitProgram+15,?_Move+4
 12193  004530  C49D  F105         	movff	_CurrentOrbitProgram+16,?_Move+5
 12194  004534  ECB7  F03B         	call	_Move	;wreg free
 12195                           
 12196                           ;OrbitProgram.c: 221: while (bMove_InProgress) {
 12197  004538  D08D               	goto	l19661
 12198  00453A                     l1402:
 12199                           
 12200                           ;OrbitProgram.c: 223: bLock_Motor_Position = 1;
 12201                           
 12202                           ;OrbitProgram.c: 224: CurrentPos = Motor_Position;
 12203  00453A  EC26  F038         	call	PL11	;call to abstracted procedure
 12204  00453E  EC49  F037         	call	___altoft	;wreg free
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;OrbitProgram.c: 225: bLock_Motor_Position = 0;
 12208                           
 12209                           ;OrbitProgram.c: 226: CurrentPos *= Config.Degrees_Per_Count;
 12210  004542  D8B1               	call	PL29	;call to abstracted procedure
 12211  004544  ECF9  F039         	call	___asftmul	;wreg free
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;OrbitProgram.c: 228: DistanceRemaining = EndPos - CurrentPos;
 12215  004548  C17F  F099         	movff	RunOrbitProgram@EndPos,?___ftsub
 12216  00454C  C180  F09A         	movff	RunOrbitProgram@EndPos+1,?___ftsub+1
 12217  004550  C181  F09B         	movff	RunOrbitProgram@EndPos+2,?___ftsub+2
 12218  004554  C18D  F09C         	movff	RunOrbitProgram@CurrentPos,?___ftsub+3
 12219  004558  C18E  F09D         	movff	RunOrbitProgram@CurrentPos+1,?___ftsub+4
 12220  00455C  C18F  F09E         	movff	RunOrbitProgram@CurrentPos+2,?___ftsub+5
 12221  004560  ECDE  F03A         	call	___ftsub	;wreg free
 12222  004564  C099  F190         	movff	?___ftsub,RunOrbitProgram@DistanceRemaining
 12223  004568  C09A  F191         	movff	?___ftsub+1,RunOrbitProgram@DistanceRemaining+1
 12224  00456C  C09B  F192         	movff	?___ftsub+2,RunOrbitProgram@DistanceRemaining+2
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;OrbitProgram.c: 229: if (DistanceRemaining < 0) DistanceRemaining = -DistanceRemaining;
 12228  004570  0101               	movlb	1	; () banked
 12229  004572  5192               	movf	(RunOrbitProgram@DistanceRemaining+2)& (0+255),w,b
 12230  004574  0A80               	xorlw	128
 12231  004576  0F80               	addlw	128
 12232  004578  E105               	bnz	u11995
 12233  00457A  0E00               	movlw	0
 12234  00457C  5D91               	subwf	(RunOrbitProgram@DistanceRemaining+1)& (0+255),w,b
 12235  00457E  E102               	bnz	u11995
 12236  004580  0E00               	movlw	0
 12237  004582  5D90               	subwf	RunOrbitProgram@DistanceRemaining& (0+255),w,b
 12238  004584                     u11995:
 12239  004584  E20E               	bc	l1403
 12240                           
 12241                           ; BSR set to: 1
 12242  004586  C190  F06B         	movff	RunOrbitProgram@DistanceRemaining,?___ftneg
 12243  00458A  C191  F06C         	movff	RunOrbitProgram@DistanceRemaining+1,?___ftneg+1
 12244  00458E  C192  F06D         	movff	RunOrbitProgram@DistanceRemaining+2,?___ftneg+2
 12245  004592  ECED  F03B         	call	___ftneg	;wreg free
 12246  004596  C06B  F190         	movff	?___ftneg,RunOrbitProgram@DistanceRemaining
 12247  00459A  C06C  F191         	movff	?___ftneg+1,RunOrbitProgram@DistanceRemaining+1
 12248  00459E  C06D  F192         	movff	?___ftneg+2,RunOrbitProgram@DistanceRemaining+2
 12249  0045A2                     l1403:
 12250                           
 12251                           ;OrbitProgram.c: 230: TimeRemaining = DistanceRemaining*SpdConvert;
 12252  0045A2  C190  F077         	movff	RunOrbitProgram@DistanceRemaining,?___ftmul
 12253  0045A6  C191  F078         	movff	RunOrbitProgram@DistanceRemaining+1,?___ftmul+1
 12254  0045AA  C192  F079         	movff	RunOrbitProgram@DistanceRemaining+2,?___ftmul+2
 12255  0045AE  C185  F07A         	movff	RunOrbitProgram@SpdConvert,?___ftmul+3
 12256  0045B2  C186  F07B         	movff	RunOrbitProgram@SpdConvert+1,?___ftmul+4
 12257  0045B6  C187  F07C         	movff	RunOrbitProgram@SpdConvert+2,?___ftmul+5
 12258  0045BA  EC52  F031         	call	___ftmul	;wreg free
 12259  0045BE  C077  F182         	movff	?___ftmul,RunOrbitProgram@TimeRemaining
 12260  0045C2  C078  F183         	movff	?___ftmul+1,RunOrbitProgram@TimeRemaining+1
 12261  0045C6  C079  F184         	movff	?___ftmul+2,RunOrbitProgram@TimeRemaining+2
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;OrbitProgram.c: 231: DistanceRemaining *= 0.002778;
 12265  0045CA  0E01               	movlw	high RunOrbitProgram@DistanceRemaining
 12266  0045CC  0100               	movlb	0	; () banked
 12267  0045CE  6F89               	movwf	(?___asftmul+1)& (0+255),b
 12268  0045D0  0E90               	movlw	low RunOrbitProgram@DistanceRemaining
 12269  0045D2  6F88               	movwf	?___asftmul& (0+255),b
 12270  0045D4  0E0F               	movlw	15
 12271  0045D6  6F8A               	movwf	(?___asftmul+2)& (0+255),b
 12272  0045D8  0E36               	movlw	54
 12273  0045DA  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 12274  0045DC  0E3B               	movlw	59
 12275  0045DE  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 12276  0045E0  ECF9  F039         	call	___asftmul	;wreg free
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;OrbitProgram.c: 233: if (!(CurrentOrbitProgram.EndMode == 2)) {
 12280  0045E4  0104               	movlb	4	; () banked
 12281  0045E6  5190               	movf	(_CurrentOrbitProgram+3)& (0+255),w,b
 12282  0045E8  0A02               	xorlw	2
 12283  0045EA  E02A               	bz	l19653
 12284                           
 12285                           ; BSR set to: 4
 12286                           ;OrbitProgram.c: 234: LCD_SetPosition(0, 11);
 12287  0045EC  0E0B               	movlw	11
 12288  0045EE  0100               	movlb	0	; () banked
 12289  0045F0  6F75               	movwf	?_LCD_SetPosition& (0+255),b
 12290  0045F2  0E00               	movlw	0
 12291  0045F4  ECDF  F036         	call	_LCD_SetPosition
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;OrbitProgram.c: 235: PrintTime(TimeRemaining, 0b1110, 0);
 12295  0045F8  C182  F0CD         	movff	RunOrbitProgram@TimeRemaining,?_PrintTime
 12296  0045FC  C183  F0CE         	movff	RunOrbitProgram@TimeRemaining+1,?_PrintTime+1
 12297  004600  C184  F0CF         	movff	RunOrbitProgram@TimeRemaining+2,?_PrintTime+2
 12298  004604  0E0E               	movlw	14
 12299  004606  6FD0               	movwf	(?_PrintTime+3)& (0+255),b
 12300  004608  0E00               	movlw	0
 12301  00460A  6BD1               	clrf	(?_PrintTime+4)& (0+255),b
 12302  00460C  EC47  F030         	call	_PrintTime	;wreg free
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;OrbitProgram.c: 236: LCD_SetPosition(1, 0);
 12306  004610  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 12307  004612  0E01               	movlw	1
 12308  004614  ECDF  F036         	call	_LCD_SetPosition
 12309                           
 12310                           ;OrbitProgram.c: 237: LCD_PrintFloat(DistanceRemaining, 5, 2, 0);
 12311  004618  C190  F0B9         	movff	RunOrbitProgram@DistanceRemaining,?_LCD_PrintFloat
 12312  00461C  C191  F0BA         	movff	RunOrbitProgram@DistanceRemaining+1,?_LCD_PrintFloat+1
 12313  004620  C192  F0BB         	movff	RunOrbitProgram@DistanceRemaining+2,?_LCD_PrintFloat+2
 12314  004624  0E05               	movlw	5
 12315  004626  6FBC               	movwf	(?_LCD_PrintFloat+3)& (0+255),b
 12316  004628  0E02               	movlw	2
 12317  00462A  6FBD               	movwf	(?_LCD_PrintFloat+4)& (0+255),b
 12318  00462C  0E00               	movlw	0
 12319  00462E  6BBE               	clrf	(?_LCD_PrintFloat+5)& (0+255),b
 12320  004630  ECFD  F02A         	call	_LCD_PrintFloat	;wreg free
 12321                           
 12322                           ;OrbitProgram.c: 238: LCD_PrintString(" REV REMAIN\0");
 12323  004634  0E1C               	movlw	high STR_48
 12324  004636  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12325  004638  0ED5               	movlw	low STR_48
 12326  00463A  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12327  00463C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12328  004640                     l19653:
 12329                           
 12330                           ;OrbitProgram.c: 239: }
 12331                           ;OrbitProgram.c: 241: ret = GetInput_nonblocking();
 12332  004640  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 12333  004644  0101               	movlb	1	; () banked
 12334  004646  6F89               	movwf	RunOrbitProgram@ret& (0+255),b
 12335                           
 12336                           ; BSR set to: 1
 12337                           ;OrbitProgram.c: 242: if (ret == 3) {
 12338  004648  5189               	movf	RunOrbitProgram@ret& (0+255),w,b
 12339  00464A  0A03               	xorlw	3
 12340  00464C  E101 D6E1          	bz	l19593
 12341                           
 12342                           ; BSR set to: 1
 12343                           ;OrbitProgram.c: 245: }
 12344                           ;OrbitProgram.c: 247: Idle();
 12345  004650  ECDF  F024         	call	_Idle	;wreg free
 12346  004654                     l19661:
 12347  004654  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 12348  004656  D771               	goto	l1402
 12349  004658                     l1396:
 12350                           
 12351                           ;OrbitProgram.c: 251: bMove_InProgress = 0;
 12352  004658  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 12353                           
 12354                           ;OrbitProgram.c: 252: bFollowMode = 1;
 12355  00465A  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
 12356  00465C  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 12357                           
 12358                           ;OrbitProgram.c: 253: LCD_ClearDisplay();
 12359  00465E  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;OrbitProgram.c: 254: LCD_PrintString("STOPPING...\0");
 12363  004662  0E1C               	movlw	high STR_49
 12364  004664  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12365  004666  0EAE               	movlw	low STR_49
 12366  004668  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12367  00466A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;OrbitProgram.c: 255: Idle();
 12371  00466E  ECDF  F024         	call	_Idle	;wreg free
 12372                           
 12373                           ;OrbitProgram.c: 256: bMove_InProgress = 0;
 12374  004672  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 12375                           
 12376                           ;OrbitProgram.c: 257: bFollowMode = 1;
 12377  004674  8A58               	bsf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 12378                           
 12379                           ;OrbitProgram.c: 258: Wait_ms(500);
 12380  004676  0E01               	movlw	1
 12381  004678  0100               	movlb	0	; () banked
 12382  00467A  6F8F               	movwf	(?_Wait_ms+1)& (0+255),b
 12383  00467C  0EF4               	movlw	244
 12384  00467E  6F8E               	movwf	?_Wait_ms& (0+255),b
 12385  004680  EC0A  F03C         	call	_Wait_ms	;wreg free
 12386                           
 12387                           ;OrbitProgram.c: 259: bFollowMode = 0;
 12388  004684  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 12389                           
 12390                           ;OrbitProgram.c: 260: return EarlyExit;
 12391  004686  0101               	movlb	1	; () banked
 12392  004688  5188               	movf	RunOrbitProgram@EarlyExit& (0+255),w,b
 12393                           
 12394                           ; BSR set to: 1
 12395  00468A  0012               	return	
 12396  00468C                     __end_of_RunOrbitProgram:
 12397                           	opt stack 0
 12398  00468C                     PL19:
 12399  00468C  C073  F106         	movff	?___lwtoft,?_MoveToAngle
 12400  004690  C074  F107         	movff	?___lwtoft+1,?_MoveToAngle+1
 12401  004694  C075  F108         	movff	?___lwtoft+2,?_MoveToAngle+2
 12402  004698  0101               	movlb	1	; () banked
 12403  00469A  6B09               	clrf	(?_MoveToAngle+3)& (0+255),b
 12404  00469C  0EB4               	movlw	180
 12405  00469E  6F0A               	movwf	(?_MoveToAngle+4)& (0+255),b
 12406  0046A0  0E42               	movlw	66
 12407  0046A2  6F0B               	movwf	(?_MoveToAngle+5)& (0+255),b
 12408  0046A4  0C42               	retlw	66
 12409  0046A6                     PL29:
 12410  0046A6  C073  F18D         	movff	?___altoft,RunOrbitProgram@CurrentPos
 12411  0046AA  C074  F18E         	movff	?___altoft+1,RunOrbitProgram@CurrentPos+1
 12412  0046AE  C075  F18F         	movff	?___altoft+2,RunOrbitProgram@CurrentPos+2
 12413  0046B2  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 12414  0046B4  0E01               	movlw	high RunOrbitProgram@CurrentPos
 12415  0046B6  0100               	movlb	0	; () banked
 12416  0046B8  6F89               	movwf	(?___asftmul+1)& (0+255),b
 12417  0046BA  0E8D               	movlw	low RunOrbitProgram@CurrentPos
 12418  0046BC  6F88               	movwf	?___asftmul& (0+255),b
 12419  0046BE  C2F5  F08A         	movff	_Config+31,?___asftmul+2
 12420  0046C2  C2F6  F08B         	movff	_Config+32,?___asftmul+3
 12421  0046C6  C2F7  F08C         	movff	_Config+33,?___asftmul+4
 12422  0046CA  0012               	return	
 12423                           tblptru	equ	0xFF8
 12424                           tblptrh	equ	0xFF7
 12425                           tblptrl	equ	0xFF6
 12426                           tablat	equ	0xFF5
 12427                           prodh	equ	0xFF4
 12428                           prodl	equ	0xFF3
 12429                           intcon	equ	0xFF2
 12430                           intcon2	equ	0xFF1
 12431                           postinc0	equ	0xFEE
 12432                           wreg	equ	0xFE8
 12433                           postinc1	equ	0xFE6
 12434                           postdec1	equ	0xFE5
 12435                           fsr1h	equ	0xFE2
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           fsr2h	equ	0xFDA
 12441                           fsr2l	equ	0xFD9
 12442                           status	equ	0xFD8
 12443                           
 12444 ;; *************** function _Wait_ms *****************
 12445 ;; Defined at:
 12446 ;;		line 30 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;  time            2   46[BANK0 ] unsigned int 
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;		None
 12451 ;; Return value:  Size  Location     Type
 12452 ;;		None               void
 12453 ;; Registers used:
 12454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 12455 ;; Tracked objects:
 12456 ;;		On entry : F/0
 12457 ;;		On exit  : 0/0
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12460 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12464 ;;Total ram usage:        2 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:    7
 12467 ;; This function calls:
 12468 ;;		_Wait_ms_nonblocking
 12469 ;;		_Idle
 12470 ;; This function is called by:
 12471 ;;		_LCD_PowerUp
 12472 ;;		_main
 12473 ;;		_RunOrbitProgram
 12474 ;;		_RunWaypointProgram
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           	psect	text16
 12479  007814                     __ptext16:
 12480                           	opt stack 0
 12481  007814                     _Wait_ms:
 12482                           	opt stack 22
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;Timings.c: 31: Wait_ms_nonblocking(time);
 12486                           
 12487                           ; BSR set to: 1
 12488  007814  C08E  F06B         	movff	Wait_ms@time,?_Wait_ms_nonblocking
 12489  007818  C08F  F06C         	movff	Wait_ms@time+1,?_Wait_ms_nonblocking+1
 12490  00781C  EC58  F039         	call	_Wait_ms_nonblocking	;wreg free
 12491                           
 12492                           ;Timings.c: 32: while (bWaiting) Idle();
 12493  007820  D002               	goto	l17825
 12494  007822                     l17823:
 12495  007822  ECDF  F024         	call	_Idle	;wreg free
 12496  007826                     l17825:
 12497  007826  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 12498  007828  A85A               	btfss	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 12499  00782A  0012               	return	
 12500  00782C  D7FA               	goto	l17823
 12501  00782E                     __end_of_Wait_ms:
 12502                           	opt stack 0
 12503                           tblptru	equ	0xFF8
 12504                           tblptrh	equ	0xFF7
 12505                           tblptrl	equ	0xFF6
 12506                           tablat	equ	0xFF5
 12507                           prodh	equ	0xFF4
 12508                           prodl	equ	0xFF3
 12509                           intcon	equ	0xFF2
 12510                           intcon2	equ	0xFF1
 12511                           postinc0	equ	0xFEE
 12512                           wreg	equ	0xFE8
 12513                           postinc1	equ	0xFE6
 12514                           postdec1	equ	0xFE5
 12515                           fsr1h	equ	0xFE2
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           fsr2h	equ	0xFDA
 12521                           fsr2l	equ	0xFD9
 12522                           status	equ	0xFD8
 12523                           
 12524 ;; *************** function _GetPresetType *****************
 12525 ;; Defined at:
 12526 ;;		line 78 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;  pnum            1    wreg     unsigned char 
 12529 ;; Auto vars:     Size  Location     Type
 12530 ;;  pnum            1   18[BANK0 ] unsigned char 
 12531 ;;  addr            2   19[BANK0 ] unsigned int 
 12532 ;;  ret             1   21[BANK0 ] unsigned char 
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  1    wreg      unsigned char 
 12535 ;; Registers used:
 12536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 12537 ;; Tracked objects:
 12538 ;;		On entry : B/4
 12539 ;;		On exit  : F/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12543 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;Total ram usage:        4 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    5
 12549 ;; This function calls:
 12550 ;;		_EEprom_read
 12551 ;; This function is called by:
 12552 ;;		_main
 12553 ;;		_GetPresetNumber
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text17
 12558  00758A                     __ptext17:
 12559                           	opt stack 0
 12560  00758A                     _GetPresetType:
 12561                           	opt stack 25
 12562                           
 12563                           ;GetPresetType@pnum stored from wreg
 12564  00758A  CFE8 F072          	movff	wreg,GetPresetType@pnum
 12565                           
 12566                           ;Settings.c: 79: unsigned char ret;
 12567                           ;Settings.c: 80: unsigned int addr;
 12568                           ;Settings.c: 81: addr = sizeof (ConfigStruct)+(pnum * sizeof (PRESET));
 12569  00758E  0100               	movlb	0	; () banked
 12570  007590  5172               	movf	GetPresetType@pnum& (0+255),w,b
 12571  007592  0D78               	mullw	120
 12572  007594  0E22               	movlw	34
 12573  007596  24F3               	addwf	prodl,w,c
 12574  007598  6F73               	movwf	GetPresetType@addr& (0+255),b
 12575  00759A  0E00               	movlw	0
 12576  00759C  20F4               	addwfc	prodh,w,c
 12577  00759E  6F74               	movwf	(GetPresetType@addr+1)& (0+255),b
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;Settings.c: 82: EEprom_read(&addr, &ret, 1);
 12581  0075A0  0E00               	movlw	high GetPresetType@addr
 12582  0075A2  6F6E               	movwf	(?_EEprom_read+1)& (0+255),b
 12583  0075A4  0E73               	movlw	low GetPresetType@addr
 12584  0075A6  6F6D               	movwf	?_EEprom_read& (0+255),b
 12585  0075A8  0E00               	movlw	high GetPresetType@ret
 12586  0075AA  6F70               	movwf	(?_EEprom_read+3)& (0+255),b
 12587  0075AC  0E75               	movlw	low GetPresetType@ret
 12588  0075AE  6F6F               	movwf	(?_EEprom_read+2)& (0+255),b
 12589  0075B0  0E01               	movlw	1
 12590  0075B2  6F71               	movwf	(?_EEprom_read+4)& (0+255),b
 12591  0075B4  EC71  F03A         	call	_EEprom_read	;wreg free
 12592                           
 12593                           ; BSR set to: 0
 12594                           ;Settings.c: 83: return ret;
 12595  0075B8  5175               	movf	GetPresetType@ret& (0+255),w,b
 12596                           
 12597                           ; BSR set to: 0
 12598  0075BA  0012               	return	
 12599  0075BC                     __end_of_GetPresetType:
 12600                           	opt stack 0
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           intcon	equ	0xFF2
 12608                           intcon2	equ	0xFF1
 12609                           postinc0	equ	0xFEE
 12610                           wreg	equ	0xFE8
 12611                           postinc1	equ	0xFE6
 12612                           postdec1	equ	0xFE5
 12613                           fsr1h	equ	0xFE2
 12614                           fsr1l	equ	0xFE1
 12615                           indf2	equ	0xFDF
 12616                           postinc2	equ	0xFDE
 12617                           postdec2	equ	0xFDD
 12618                           fsr2h	equ	0xFDA
 12619                           fsr2l	equ	0xFD9
 12620                           status	equ	0xFD8
 12621                           
 12622 ;; *************** function _ShowVoltage *****************
 12623 ;; Defined at:
 12624 ;;		line 9 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;		None
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  Batt            3  103[BANK0 ] unsigned char 
 12629 ;; Return value:  Size  Location     Type
 12630 ;;		None               void
 12631 ;; Registers used:
 12632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 12633 ;; Tracked objects:
 12634 ;;		On entry : F/4
 12635 ;;		On exit  : F/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;Total ram usage:        3 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; Hardware stack levels required when called:    9
 12645 ;; This function calls:
 12646 ;;		_LCD_ClearDisplay
 12647 ;;		___lwtoft
 12648 ;;		___asftmul
 12649 ;;		_LCD_PrintString
 12650 ;;		_LCD_SetPosition
 12651 ;;		_LCD_PrintFloat
 12652 ;;		_GetClick
 12653 ;; This function is called by:
 12654 ;;		_main
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           	psect	text18
 12659  006C5C                     __ptext18:
 12660                           	opt stack 0
 12661  006C5C                     _ShowVoltage:
 12662                           	opt stack 21
 12663                           
 12664                           ; BSR set to: 4
 12665                           ;UserInterface.c: 10: double Batt;
 12666                           ;UserInterface.c: 11: LCD_ClearDisplay();
 12667                           
 12668                           ; BSR set to: 0
 12669  006C5C  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;UserInterface.c: 12: bLock_BatteryVoltage=1;
 12673  006C60  0100               	movlb	(_bLock_BatteryVoltage/(0+8)) shr (0+8)
 12674  006C62  8E58               	bsf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
 12675                           
 12676                           ;UserInterface.c: 13: Batt=BatteryVoltage;
 12677  006C64  C1FC  F073         	movff	_BatteryVoltage,?___lwtoft
 12678  006C68  C1FD  F074         	movff	_BatteryVoltage+1,?___lwtoft+1
 12679  006C6C  ECCB  F03B         	call	___lwtoft	;wreg free
 12680  006C70  C073  F0C7         	movff	?___lwtoft,ShowVoltage@Batt
 12681  006C74  C074  F0C8         	movff	?___lwtoft+1,ShowVoltage@Batt+1
 12682  006C78  C075  F0C9         	movff	?___lwtoft+2,ShowVoltage@Batt+2
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;UserInterface.c: 14: bLock_BatteryVoltage=0;
 12686  006C7C  9E58               	bcf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
 12687                           
 12688                           ;UserInterface.c: 15: Batt*=Config.Volts_per_Count;
 12689  006C7E  0100               	movlb	0	; () banked
 12690  006C80  0E00               	movlw	high ShowVoltage@Batt
 12691  006C82  6F89               	movwf	(?___asftmul+1)& (0+255),b
 12692  006C84  0EC7               	movlw	low ShowVoltage@Batt
 12693  006C86  6F88               	movwf	?___asftmul& (0+255),b
 12694  006C88  C2E0  F08A         	movff	_Config+10,?___asftmul+2
 12695  006C8C  C2E1  F08B         	movff	_Config+11,?___asftmul+3
 12696  006C90  C2E2  F08C         	movff	_Config+12,?___asftmul+4
 12697  006C94  ECF9  F039         	call	___asftmul	;wreg free
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;UserInterface.c: 16: LCD_PrintString("BATTERY VOLTAGE:\0");
 12701  006C98  0E1B               	movlw	high STR_53
 12702  006C9A  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12703  006C9C  0E48               	movlw	low STR_53
 12704  006C9E  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12705  006CA0  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;UserInterface.c: 17: LCD_SetPosition(1,0);
 12709  006CA4  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 12710  006CA6  0E01               	movlw	1
 12711  006CA8  ECDF  F036         	call	_LCD_SetPosition
 12712                           
 12713                           ;UserInterface.c: 18: LCD_PrintFloat(Batt,2,2,0);
 12714  006CAC  C0C7  F0B9         	movff	ShowVoltage@Batt,?_LCD_PrintFloat
 12715  006CB0  C0C8  F0BA         	movff	ShowVoltage@Batt+1,?_LCD_PrintFloat+1
 12716  006CB4  C0C9  F0BB         	movff	ShowVoltage@Batt+2,?_LCD_PrintFloat+2
 12717  006CB8  0E02               	movlw	2
 12718  006CBA  6FBC               	movwf	(?_LCD_PrintFloat+3)& (0+255),b
 12719  006CBC  6FBD               	movwf	(?_LCD_PrintFloat+4)& (0+255),b
 12720  006CBE  0E00               	movlw	0
 12721  006CC0  6BBE               	clrf	(?_LCD_PrintFloat+5)& (0+255),b
 12722  006CC2  ECFD  F02A         	call	_LCD_PrintFloat	;wreg free
 12723                           
 12724                           ;UserInterface.c: 19: LCD_PrintString(" VOLTS\0");
 12725  006CC6  0E1D               	movlw	high STR_54
 12726  006CC8  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12727  006CCA  0E7D               	movlw	low STR_54
 12728  006CCC  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12729  006CCE  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12730                           
 12731                           ;UserInterface.c: 20: GetClick();
 12732  006CD2  EFFC  F03B         	goto	_GetClick	;wreg free
 12733  006CD6                     __end_of_ShowVoltage:
 12734                           	opt stack 0
 12735                           tblptru	equ	0xFF8
 12736                           tblptrh	equ	0xFF7
 12737                           tblptrl	equ	0xFF6
 12738                           tablat	equ	0xFF5
 12739                           prodh	equ	0xFF4
 12740                           prodl	equ	0xFF3
 12741                           intcon	equ	0xFF2
 12742                           intcon2	equ	0xFF1
 12743                           postinc0	equ	0xFEE
 12744                           wreg	equ	0xFE8
 12745                           postinc1	equ	0xFE6
 12746                           postdec1	equ	0xFE5
 12747                           fsr1h	equ	0xFE2
 12748                           fsr1l	equ	0xFE1
 12749                           indf2	equ	0xFDF
 12750                           postinc2	equ	0xFDE
 12751                           postdec2	equ	0xFDD
 12752                           fsr2h	equ	0xFDA
 12753                           fsr2l	equ	0xFD9
 12754                           status	equ	0xFD8
 12755                           
 12756 ;; *************** function _GetClick *****************
 12757 ;; Defined at:
 12758 ;;		line 23 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 12759 ;; Parameters:    Size  Location     Type
 12760 ;;		None
 12761 ;; Auto vars:     Size  Location     Type
 12762 ;;  ret             1   47[BANK0 ] char 
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  1    wreg      char 
 12765 ;; Registers used:
 12766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : F/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12776 ;;Total ram usage:        1 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:    8
 12779 ;; This function calls:
 12780 ;;		_GetInput
 12781 ;; This function is called by:
 12782 ;;		_main
 12783 ;;		_CreateOrbitProgram
 12784 ;;		_ShowVoltage
 12785 ;;		_CreateWaypointProgram
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text19
 12790  0077F8                     __ptext19:
 12791                           	opt stack 0
 12792  0077F8                     _GetClick:
 12793                           	opt stack 21
 12794  0077F8                     l18279:
 12795                           
 12796                           ;UserInterface.c: 26: ret = GetInput();
 12797  0077F8  EC39  F03B         	call	_GetInput	;wreg free
 12798  0077FC  6F8F               	movwf	GetClick@ret& (0+255),b
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;UserInterface.c: 27: if (ret == 1) return 0;
 12802  0077FE  058F               	decf	GetClick@ret& (0+255),w,b
 12803  007800  E101               	bnz	l18287
 12804                           
 12805                           ; BSR set to: 0
 12806  007802  0C00               	retlw	0
 12807  007804                     l18287:
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;UserInterface.c: 28: if (ret == 2) return -1;
 12811  007804  518F               	movf	GetClick@ret& (0+255),w,b
 12812  007806  0A02               	xorlw	2
 12813  007808  E101               	bnz	l18293
 12814                           
 12815                           ; BSR set to: 0
 12816  00780A  0CFF               	retlw	255
 12817  00780C                     l18293:
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;UserInterface.c: 29: if (ret == 3) return -2;
 12821  00780C  518F               	movf	GetClick@ret& (0+255),w,b
 12822  00780E  0A03               	xorlw	3
 12823  007810  E1F3               	bnz	l18279
 12824                           
 12825                           ; BSR set to: 0
 12826                           
 12827                           ; BSR set to: 0
 12828  007812  0CFE               	retlw	254
 12829  007814                     __end_of_GetClick:
 12830                           	opt stack 0
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           intcon2	equ	0xFF1
 12839                           postinc0	equ	0xFEE
 12840                           wreg	equ	0xFE8
 12841                           postinc1	equ	0xFE6
 12842                           postdec1	equ	0xFE5
 12843                           fsr1h	equ	0xFE2
 12844                           fsr1l	equ	0xFE1
 12845                           indf2	equ	0xFDF
 12846                           postinc2	equ	0xFDE
 12847                           postdec2	equ	0xFDD
 12848                           fsr2h	equ	0xFDA
 12849                           fsr2l	equ	0xFD9
 12850                           status	equ	0xFD8
 12851                           
 12852 ;; *************** function _GoToSleep *****************
 12853 ;; Defined at:
 12854 ;;		line 913 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;		None
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;  Expires         3   56[BANK0 ] char 
 12859 ;;  Time            3   49[BANK0 ] char 
 12860 ;;  bin             2   52[BANK0 ] int 
 12861 ;;  idx             1   55[BANK0 ] unsigned char 
 12862 ;;  inp             1   54[BANK0 ] unsigned char 
 12863 ;; Return value:  Size  Location     Type
 12864 ;;		None               void
 12865 ;; Registers used:
 12866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : F/4
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12876 ;;Total ram usage:       10 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    7
 12879 ;; This function calls:
 12880 ;;		_LCD_ClearDisplay
 12881 ;;		_LCD_PrintString
 12882 ;;		_LCD_DisplayOnOff
 12883 ;;		_GetInput_nonblocking
 12884 ;;		_Now
 12885 ;;		___asftadd
 12886 ;;		___ftge
 12887 ;; This function is called by:
 12888 ;;		_main
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text20
 12893  006484                     __ptext20:
 12894                           	opt stack 0
 12895  006484                     _GoToSleep:
 12896                           	opt stack 23
 12897                           
 12898                           ; BSR set to: 4
 12899                           ;Main.c: 914: char inp;
 12900                           ;Main.c: 915: int bin;
 12901                           ;Main.c: 916: char idx;
 12902                           ;Main.c: 918: LCD_ClearDisplay();
 12903                           
 12904                           ; BSR set to: 0
 12905  006484  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;Main.c: 919: LCD_PrintString("SLEEP\0");
 12909  006488  0E1C               	movlw	high (STR_7+6)
 12910  00648A  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 12911  00648C  0EF5               	movlw	low (STR_7+6)
 12912  00648E  6F76               	movwf	?_LCD_PrintString& (0+255),b
 12913  006490  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;Main.c: 920: LCD_DisplayOnOff(0, 0, 0);
 12917  006494  0E00               	movlw	0
 12918  006496  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 12919  006498  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 12920  00649A  EC7D  F037         	call	_LCD_DisplayOnOff
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;Main.c: 921: bPowerOff = 1;
 12924  00649E  825A               	bsf	_bPowerOff/(0+8),_bPowerOff& (0+7),c	;volatile
 12925  0064A0                     l19703:
 12926                           
 12927                           ;Main.c: 927: ClearUI_Event = 1;
 12928  0064A0  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
 12929  0064A2  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 12930  0064A4                     l19705:
 12931                           
 12932                           ;Main.c: 929: inp = GetInput_nonblocking();
 12933  0064A4  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 12934  0064A8  6F96               	movwf	GoToSleep@inp& (0+255),b
 12935                           
 12936                           ;Main.c: 930: switch (inp) {
 12937  0064AA  D016               	goto	l19715
 12938  0064AC                     l19707:
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;Main.c: 932: Expires = Now();
 12942  0064AC  EC58  F038         	call	_Now	;wreg free
 12943  0064B0  C088  F098         	movff	?_Now,GoToSleep@Expires
 12944  0064B4  C089  F099         	movff	?_Now+1,GoToSleep@Expires+1
 12945  0064B8  C08A  F09A         	movff	?_Now+2,GoToSleep@Expires+2
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;Main.c: 933: Expires += 5;
 12949  0064BC  0E00               	movlw	high GoToSleep@Expires
 12950  0064BE  6F89               	movwf	(?___asftadd+1)& (0+255),b
 12951  0064C0  0E98               	movlw	low GoToSleep@Expires
 12952  0064C2  6F88               	movwf	?___asftadd& (0+255),b
 12953  0064C4  6B8A               	clrf	(?___asftadd+2)& (0+255),b
 12954  0064C6  0EA0               	movlw	160
 12955  0064C8  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 12956  0064CA  0E40               	movlw	64
 12957  0064CC  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 12958  0064CE  EC53  F03A         	call	___asftadd	;wreg free
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;Main.c: 934: bin = 0;
 12962  0064D2  6B94               	clrf	GoToSleep@bin& (0+255),b
 12963  0064D4  6B95               	clrf	(GoToSleep@bin+1)& (0+255),b
 12964                           
 12965                           ;Main.c: 935: goto step2;
 12966  0064D6  D009               	goto	l19719
 12967  0064D8                     l19715:
 12968                           
 12969                           ; BSR set to: 0
 12970  0064D8  5196               	movf	GoToSleep@inp& (0+255),w,b
 12971                           
 12972                           ; Switch size 1, requested type "space"
 12973                           ; Number of cases is 1, Range of values is 3 to 3
 12974                           ; switch strategies available:
 12975                           ; Name         Instructions Cycles
 12976                           ; simple_byte            4     3 (average)
 12977                           ;	Chosen strategy is simple_byte
 12978  0064DA  0A03               	xorlw	3	; case 3
 12979  0064DC  E0E7               	bz	l19707
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;Main.c: 937: idx = 0xff;
 12983  0064DE  6997               	setf	GoToSleep@idx& (0+255),b
 12984  0064E0                     l19717:
 12985                           
 12986                           ; BSR set to: 0
 12987  0064E0  0797               	decf	GoToSleep@idx& (0+255),f,b
 12988  0064E2  0100               	movlb	0	; () banked
 12989  0064E4  2997               	incf	GoToSleep@idx& (0+255),w,b
 12990  0064E6  E0DE               	bz	l19705
 12991  0064E8  D7FB               	goto	l19717
 12992  0064EA                     l19719:
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;Main.c: 943: inp = GetInput_nonblocking();
 12996  0064EA  ECDE  F03B         	call	_GetInput_nonblocking	;wreg free
 12997  0064EE  6F96               	movwf	GoToSleep@inp& (0+255),b
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;Main.c: 944: Time = Now();
 13001  0064F0  EC58  F038         	call	_Now	;wreg free
 13002  0064F4  C088  F091         	movff	?_Now,GoToSleep@Time
 13003  0064F8  C089  F092         	movff	?_Now+1,GoToSleep@Time+1
 13004  0064FC  C08A  F093         	movff	?_Now+2,GoToSleep@Time+2
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;Main.c: 945: if (Time > Expires) goto step1;
 13008  006500  C098  F088         	movff	GoToSleep@Expires,?___ftge
 13009  006504  C099  F089         	movff	GoToSleep@Expires+1,?___ftge+1
 13010  006508  C09A  F08A         	movff	GoToSleep@Expires+2,?___ftge+2
 13011  00650C  C091  F08B         	movff	GoToSleep@Time,?___ftge+3
 13012  006510  C092  F08C         	movff	GoToSleep@Time+1,?___ftge+4
 13013  006514  C093  F08D         	movff	GoToSleep@Time+2,?___ftge+5
 13014  006518  ECB1  F037         	call	___ftge	;wreg free
 13015  00651C  E3C1               	bnc	l19703
 13016  00651E  D006               	goto	l19731
 13017  006520                     l19727:
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;Main.c: 949: bin++;
 13021  006520  4B94               	infsnz	GoToSleep@bin& (0+255),f,b
 13022  006522  2B95               	incf	(GoToSleep@bin+1)& (0+255),f,b
 13023                           
 13024                           ;Main.c: 950: break;
 13025  006524  D009               	goto	l19733
 13026  006526                     l977:
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;Main.c: 952: bin = 0;
 13030  006526  6B94               	clrf	GoToSleep@bin& (0+255),b
 13031  006528  6B95               	clrf	(GoToSleep@bin+1)& (0+255),b
 13032                           
 13033                           ;Main.c: 953: break;
 13034  00652A  D006               	goto	l19733
 13035  00652C                     l19731:
 13036                           
 13037                           ; BSR set to: 0
 13038  00652C  5196               	movf	GoToSleep@inp& (0+255),w,b
 13039                           
 13040                           ; Switch size 1, requested type "space"
 13041                           ; Number of cases is 2, Range of values is 4 to 5
 13042                           ; switch strategies available:
 13043                           ; Name         Instructions Cycles
 13044                           ; simple_byte            7     4 (average)
 13045                           ;	Chosen strategy is simple_byte
 13046  00652E  0A04               	xorlw	4	; case 4
 13047  006530  E0F7               	bz	l19727
 13048  006532  0A01               	xorlw	1	; case 5
 13049  006534  E0F8               	bz	l977
 13050  006536  D7B4               	goto	l19703
 13051  006538                     l19733:
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;Main.c: 958: if (bin > 8) goto WAKEUP;
 13055  006538  5195               	movf	(GoToSleep@bin+1)& (0+255),w,b
 13056  00653A  0A80               	xorlw	128
 13057  00653C  0F80               	addlw	-128
 13058  00653E  0E09               	movlw	9
 13059  006540  B4D8               	btfsc	status,2,c
 13060  006542  5D94               	subwf	GoToSleep@bin& (0+255),w,b
 13061  006544  E206               	bc	l19739
 13062                           
 13063                           ; BSR set to: 0
 13064                           ;Main.c: 959: idx = 0xff;
 13065  006546  6997               	setf	GoToSleep@idx& (0+255),b
 13066  006548                     l19737:
 13067                           
 13068                           ; BSR set to: 0
 13069  006548  0797               	decf	GoToSleep@idx& (0+255),f,b
 13070  00654A  0100               	movlb	0	; () banked
 13071  00654C  2997               	incf	GoToSleep@idx& (0+255),w,b
 13072  00654E  E0CD               	bz	l19719
 13073  006550  D7FB               	goto	l19737
 13074  006552                     l19739:
 13075                           
 13076                           ; BSR set to: 0
 13077                           ;Main.c: 963: LCD_DisplayOnOff(1, 0, 0);
 13078  006552  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 13079  006554  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 13080  006556  0E01               	movlw	1
 13081  006558  EC7D  F037         	call	_LCD_DisplayOnOff
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;Main.c: 964: bPowerOff = 0;
 13085  00655C  0100               	movlb	(_bPowerOff/(0+8)) shr (0+8)
 13086  00655E  925A               	bcf	_bPowerOff/(0+8),_bPowerOff& (0+7),c	;volatile
 13087  006560  0012               	return	
 13088  006562                     __end_of_GoToSleep:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           intcon2	equ	0xFF1
 13098                           postinc0	equ	0xFEE
 13099                           wreg	equ	0xFE8
 13100                           postinc1	equ	0xFE6
 13101                           postdec1	equ	0xFE5
 13102                           fsr1h	equ	0xFE2
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           postdec2	equ	0xFDD
 13107                           fsr2h	equ	0xFDA
 13108                           fsr2l	equ	0xFD9
 13109                           status	equ	0xFD8
 13110                           
 13111 ;; *************** function _GetInput_nonblocking *****************
 13112 ;; Defined at:
 13113 ;;		line 48 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;		None
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  ret             1   11[BANK0 ] char 
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      char 
 13120 ;; Registers used:
 13121 ;;		wreg, status,2
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : F/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:        1 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:    3
 13134 ;; This function calls:
 13135 ;;		Nothing
 13136 ;; This function is called by:
 13137 ;;		_ExtMode
 13138 ;;		_GoToSleep
 13139 ;;		_RunOrbitProgram
 13140 ;;		_RealtimeMode
 13141 ;;		_RunWaypointProgram
 13142 ;; This function uses a non-reentrant model
 13143 ;;
 13144                           
 13145                           	psect	text21
 13146  0077BC                     __ptext21:
 13147                           	opt stack 0
 13148  0077BC                     _GetInput_nonblocking:
 13149                           	opt stack 26
 13150                           
 13151                           ;UserInterface.c: 50: while (ClearUI_Event) asm(" nop");
 13152  0077BC  D001               	goto	l2048
 13153  0077BE                     l2049:
 13154  0077BE  F000               	nop		;# 
 13155  0077C0                     l2048:
 13156  0077C0  B657               	btfsc	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 13157  0077C2  D7FD               	goto	l2049
 13158                           
 13159                           ;UserInterface.c: 51: bLock_UI_Event = 1;
 13160  0077C4  8859               	bsf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 13161                           
 13162                           ;UserInterface.c: 52: ret = UI_Event;
 13163  0077C6  C0F2  F06B         	movff	_UI_Event,GetInput_nonblocking@ret	;volatile
 13164                           
 13165                           ;UserInterface.c: 53: bLock_UI_Event = 0;
 13166  0077CA  9859               	bcf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 13167                           
 13168                           ;UserInterface.c: 54: if (ret) {
 13169  0077CC  0100               	movlb	0	; () banked
 13170  0077CE  516B               	movf	GetInput_nonblocking@ret& (0+255),w,b
 13171  0077D0  E001               	bz	l17421
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;UserInterface.c: 55: ClearUI_Event = 1;
 13175  0077D2  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 13176  0077D4                     l17421:
 13177                           
 13178                           ;UserInterface.c: 56: }
 13179                           ;UserInterface.c: 57: return ret;
 13180  0077D4  0100               	movlb	0	; () banked
 13181  0077D6  516B               	movf	GetInput_nonblocking@ret& (0+255),w,b
 13182                           
 13183                           ; BSR set to: 0
 13184  0077D8  0012               	return	
 13185  0077DA                     __end_of_GetInput_nonblocking:
 13186                           	opt stack 0
 13187                           tblptru	equ	0xFF8
 13188                           tblptrh	equ	0xFF7
 13189                           tblptrl	equ	0xFF6
 13190                           tablat	equ	0xFF5
 13191                           prodh	equ	0xFF4
 13192                           prodl	equ	0xFF3
 13193                           intcon	equ	0xFF2
 13194                           intcon2	equ	0xFF1
 13195                           postinc0	equ	0xFEE
 13196                           wreg	equ	0xFE8
 13197                           postinc1	equ	0xFE6
 13198                           postdec1	equ	0xFE5
 13199                           fsr1h	equ	0xFE2
 13200                           fsr1l	equ	0xFE1
 13201                           indf2	equ	0xFDF
 13202                           postinc2	equ	0xFDE
 13203                           postdec2	equ	0xFDD
 13204                           fsr2h	equ	0xFDA
 13205                           fsr2l	equ	0xFD9
 13206                           status	equ	0xFD8
 13207                           
 13208 ;; *************** function _Now *****************
 13209 ;; Defined at:
 13210 ;;		line 58 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 13211 ;; Parameters:    Size  Location     Type
 13212 ;;		None
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;  ret             3   43[BANK0 ] char 
 13215 ;; Return value:  Size  Location     Type
 13216 ;;                  3   40[BANK0 ] char 
 13217 ;; Registers used:
 13218 ;;		wreg, status,2, status,0, cstack
 13219 ;; Tracked objects:
 13220 ;;		On entry : B/0
 13221 ;;		On exit  : F/0
 13222 ;;		Unchanged: FFFFFFF0/0
 13223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13224 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13228 ;;Total ram usage:        6 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:    5
 13231 ;; This function calls:
 13232 ;;		___lltoft
 13233 ;;		___ftmul
 13234 ;; This function is called by:
 13235 ;;		_GoToSleep
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text22
 13240  0070B0                     __ptext22:
 13241                           	opt stack 0
 13242  0070B0                     _Now:
 13243                           	opt stack 24
 13244                           
 13245                           ;Timings.c: 59: double ret;
 13246                           ;Timings.c: 60: bLock_Tick500Hz = 1;
 13247                           
 13248                           ; BSR set to: 0
 13249  0070B0  0100               	movlb	(_bLock_Tick500Hz/(0+8)) shr (0+8)
 13250  0070B2  8659               	bsf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
 13251                           
 13252                           ;Timings.c: 61: ret = Tick500Hz;
 13253  0070B4  C1F8  F073         	movff	_Tick500Hz,?___lltoft	;volatile
 13254  0070B8  C1F9  F074         	movff	_Tick500Hz+1,?___lltoft+1	;volatile
 13255  0070BC  C1FA  F075         	movff	_Tick500Hz+2,?___lltoft+2	;volatile
 13256  0070C0  C1FB  F076         	movff	_Tick500Hz+3,?___lltoft+3	;volatile
 13257  0070C4  EC31  F038         	call	___lltoft	;wreg free
 13258  0070C8  C073  F08B         	movff	?___lltoft,Now@ret
 13259  0070CC  C074  F08C         	movff	?___lltoft+1,Now@ret+1
 13260  0070D0  C075  F08D         	movff	?___lltoft+2,Now@ret+2
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;Timings.c: 62: bLock_Tick500Hz = 0;
 13264  0070D4  9659               	bcf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
 13265                           
 13266                           ;Timings.c: 63: return (ret * 2);
 13267  0070D6  C08B  F077         	movff	Now@ret,?___ftmul
 13268  0070DA  C08C  F078         	movff	Now@ret+1,?___ftmul+1
 13269  0070DE  C08D  F079         	movff	Now@ret+2,?___ftmul+2
 13270  0070E2  0100               	movlb	0	; () banked
 13271  0070E4  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 13272  0070E6  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 13273  0070E8  0E40               	movlw	64
 13274  0070EA  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 13275  0070EC  EC52  F031         	call	___ftmul	;wreg free
 13276  0070F0  C077  F088         	movff	?___ftmul,?_Now
 13277  0070F4  C078  F089         	movff	?___ftmul+1,?_Now+1
 13278  0070F8  C079  F08A         	movff	?___ftmul+2,?_Now+2
 13279                           
 13280                           ; BSR set to: 0
 13281  0070FC  0012               	return	
 13282  0070FE                     __end_of_Now:
 13283                           	opt stack 0
 13284                           tblptru	equ	0xFF8
 13285                           tblptrh	equ	0xFF7
 13286                           tblptrl	equ	0xFF6
 13287                           tablat	equ	0xFF5
 13288                           prodh	equ	0xFF4
 13289                           prodl	equ	0xFF3
 13290                           intcon	equ	0xFF2
 13291                           intcon2	equ	0xFF1
 13292                           postinc0	equ	0xFEE
 13293                           wreg	equ	0xFE8
 13294                           postinc1	equ	0xFE6
 13295                           postdec1	equ	0xFE5
 13296                           fsr1h	equ	0xFE2
 13297                           fsr1l	equ	0xFE1
 13298                           indf2	equ	0xFDF
 13299                           postinc2	equ	0xFDE
 13300                           postdec2	equ	0xFDD
 13301                           fsr2h	equ	0xFDA
 13302                           fsr2l	equ	0xFD9
 13303                           status	equ	0xFD8
 13304                           
 13305 ;; *************** function _MinTimeToMove *****************
 13306 ;; Defined at:
 13307 ;;		line 6 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 13308 ;; Parameters:    Size  Location     Type
 13309 ;;  _Distance       3   84[BANK0 ] char 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  AccelTime       3  114[BANK0 ] char 
 13312 ;;  D               3  111[BANK0 ] char 
 13313 ;;  TotalTime       3  108[BANK0 ] char 
 13314 ;;  AccelDist       3   99[BANK0 ] char 
 13315 ;;  CoastTime       3   96[BANK0 ] char 
 13316 ;;  CoastDistanc    3   93[BANK0 ] char 
 13317 ;;  RealSpeed       3   90[BANK0 ] char 
 13318 ;;  HalfD           3   87[BANK0 ] char 
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  3   84[BANK0 ] char 
 13321 ;; Registers used:
 13322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13323 ;; Tracked objects:
 13324 ;;		On entry : F/1
 13325 ;;		On exit  : F/0
 13326 ;;		Unchanged: FFFFFFF0/0
 13327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13328 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13329 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13331 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13332 ;;Total ram usage:       33 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:    8
 13335 ;; This function calls:
 13336 ;;		___ftneg
 13337 ;;		___ftmul
 13338 ;;		___ftdiv
 13339 ;;		___ftge
 13340 ;;		_sqrt
 13341 ;;		___ftsub
 13342 ;;		___asftadd
 13343 ;; This function is called by:
 13344 ;;		_CreateWaypointProgram
 13345 ;; This function uses a non-reentrant model
 13346 ;;
 13347                           
 13348                           	psect	text23
 13349  004F2A                     __ptext23:
 13350                           	opt stack 0
 13351  004F2A                     _MinTimeToMove:
 13352                           	opt stack 21
 13353                           
 13354                           ; BSR set to: 1
 13355                           ;MotionEngine.c: 7: double D;
 13356                           ;MotionEngine.c: 8: double HalfD;
 13357                           ;MotionEngine.c: 10: if (_Distance < 0) D = -_Distance;
 13358                           
 13359                           ; BSR set to: 0
 13360  004F2A  0100               	movlb	0	; () banked
 13361  004F2C  51B6               	movf	(MinTimeToMove@_Distance+2)& (0+255),w,b
 13362  004F2E  0A80               	xorlw	128
 13363  004F30  0F80               	addlw	128
 13364  004F32  E105               	bnz	u12075
 13365  004F34  0E00               	movlw	0
 13366  004F36  5DB5               	subwf	(MinTimeToMove@_Distance+1)& (0+255),w,b
 13367  004F38  E102               	bnz	u12075
 13368  004F3A  0E00               	movlw	0
 13369  004F3C  5DB4               	subwf	MinTimeToMove@_Distance& (0+255),w,b
 13370  004F3E                     u12075:
 13371  004F3E  E20F               	bc	l1097
 13372                           
 13373                           ; BSR set to: 0
 13374  004F40  C0B4  F06B         	movff	MinTimeToMove@_Distance,?___ftneg
 13375  004F44  C0B5  F06C         	movff	MinTimeToMove@_Distance+1,?___ftneg+1
 13376  004F48  C0B6  F06D         	movff	MinTimeToMove@_Distance+2,?___ftneg+2
 13377  004F4C  ECED  F03B         	call	___ftneg	;wreg free
 13378  004F50  C06B  F0CF         	movff	?___ftneg,MinTimeToMove@D
 13379  004F54  C06C  F0D0         	movff	?___ftneg+1,MinTimeToMove@D+1
 13380  004F58  C06D  F0D1         	movff	?___ftneg+2,MinTimeToMove@D+2
 13381  004F5C  D006               	goto	l19787
 13382  004F5E                     l1097:
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;MotionEngine.c: 11: else D = _Distance;
 13386  004F5E  C0B4  F0CF         	movff	MinTimeToMove@_Distance,MinTimeToMove@D
 13387  004F62  C0B5  F0D0         	movff	MinTimeToMove@_Distance+1,MinTimeToMove@D+1
 13388  004F66  C0B6  F0D1         	movff	MinTimeToMove@_Distance+2,MinTimeToMove@D+2
 13389  004F6A                     l19787:
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;MotionEngine.c: 12: HalfD = D * 0.5;
 13393  004F6A  C0CF  F077         	movff	MinTimeToMove@D,?___ftmul
 13394  004F6E  C0D0  F078         	movff	MinTimeToMove@D+1,?___ftmul+1
 13395  004F72  C0D1  F079         	movff	MinTimeToMove@D+2,?___ftmul+2
 13396  004F76  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 13397  004F78  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 13398  004F7A  0E3F               	movlw	63
 13399  004F7C  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 13400  004F7E  EC52  F031         	call	___ftmul	;wreg free
 13401  004F82  C077  F0B7         	movff	?___ftmul,MinTimeToMove@HalfD
 13402  004F86  C078  F0B8         	movff	?___ftmul+1,MinTimeToMove@HalfD+1
 13403  004F8A  C079  F0B9         	movff	?___ftmul+2,MinTimeToMove@HalfD+2
 13404                           
 13405                           ;MotionEngine.c: 14: double AccelTime = Config.MaxSpeed / Config.SystemAcceleration;
 13406  004F8E  C2E9  F088         	movff	_Config+19,?___ftdiv
 13407  004F92  C2EA  F089         	movff	_Config+20,?___ftdiv+1
 13408  004F96  C2EB  F08A         	movff	_Config+21,?___ftdiv+2
 13409  004F9A  C2E6  F08B         	movff	_Config+16,?___ftdiv+3
 13410  004F9E  C2E7  F08C         	movff	_Config+17,?___ftdiv+4
 13411  004FA2  C2E8  F08D         	movff	_Config+18,?___ftdiv+5
 13412  004FA6  ECD0  F031         	call	___ftdiv	;wreg free
 13413  004FAA  C088  F0D2         	movff	?___ftdiv,MinTimeToMove@AccelTime
 13414  004FAE  C089  F0D3         	movff	?___ftdiv+1,MinTimeToMove@AccelTime+1
 13415  004FB2  C08A  F0D4         	movff	?___ftdiv+2,MinTimeToMove@AccelTime+2
 13416                           
 13417                           ;MotionEngine.c: 15: double AccelDist = ((Config.SystemAcceleration * AccelTime) * Accel
      +                          Time)*0.5;
 13418  004FB6  D8D9               	call	PL43	;call to abstracted procedure
 13419  004FB8  EC52  F031         	call	___ftmul	;wreg free
 13420                           
 13421                           ;MotionEngine.c: 15: double AccelDist = ((Config.SystemAcceleration * AccelTime) * Accel
      +                          Time)*0.5;
 13422  004FBC  D8B2               	call	PL27	;call to abstracted procedure
 13423  004FBE  EC52  F031         	call	___ftmul	;wreg free
 13424                           
 13425                           ;MotionEngine.c: 15: double AccelDist = ((Config.SystemAcceleration * AccelTime) * Accel
      +                          Time)*0.5;
 13426  004FC2  D8C2               	call	PL34	;call to abstracted procedure
 13427  004FC4  EC52  F031         	call	___ftmul	;wreg free
 13428  004FC8  C077  F0C3         	movff	?___ftmul,MinTimeToMove@AccelDist
 13429  004FCC  C078  F0C4         	movff	?___ftmul+1,MinTimeToMove@AccelDist+1
 13430  004FD0  C079  F0C5         	movff	?___ftmul+2,MinTimeToMove@AccelDist+2
 13431                           
 13432                           ;MotionEngine.c: 16: if (AccelDist > HalfD) {
 13433  004FD4  C0B7  F088         	movff	MinTimeToMove@HalfD,?___ftge
 13434  004FD8  C0B8  F089         	movff	MinTimeToMove@HalfD+1,?___ftge+1
 13435  004FDC  C0B9  F08A         	movff	MinTimeToMove@HalfD+2,?___ftge+2
 13436  004FE0  C0C3  F08B         	movff	MinTimeToMove@AccelDist,?___ftge+3
 13437  004FE4  C0C4  F08C         	movff	MinTimeToMove@AccelDist+1,?___ftge+4
 13438  004FE8  C0C5  F08D         	movff	MinTimeToMove@AccelDist+2,?___ftge+5
 13439  004FEC  ECB1  F037         	call	___ftge	;wreg free
 13440  004FF0  E22B               	bc	l19797
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;MotionEngine.c: 17: AccelTime = sqrt(D / Config.SystemAcceleration);
 13444  004FF2  C0CF  F088         	movff	MinTimeToMove@D,?___ftdiv
 13445  004FF6  C0D0  F089         	movff	MinTimeToMove@D+1,?___ftdiv+1
 13446  004FFA  C0D1  F08A         	movff	MinTimeToMove@D+2,?___ftdiv+2
 13447  004FFE  C2E6  F08B         	movff	_Config+16,?___ftdiv+3
 13448  005002  C2E7  F08C         	movff	_Config+17,?___ftdiv+4
 13449  005006  C2E8  F08D         	movff	_Config+18,?___ftdiv+5
 13450  00500A  ECD0  F031         	call	___ftdiv	;wreg free
 13451  00500E  C088  F0A4         	movff	?___ftdiv,?_sqrt
 13452  005012  C089  F0A5         	movff	?___ftdiv+1,?_sqrt+1
 13453  005016  C08A  F0A6         	movff	?___ftdiv+2,?_sqrt+2
 13454  00501A  ECCE  F030         	call	_sqrt	;wreg free
 13455  00501E  C0A4  F0D2         	movff	?_sqrt,MinTimeToMove@AccelTime
 13456  005022  C0A5  F0D3         	movff	?_sqrt+1,MinTimeToMove@AccelTime+1
 13457  005026  C0A6  F0D4         	movff	?_sqrt+2,MinTimeToMove@AccelTime+2
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;MotionEngine.c: 18: AccelDist = ((Config.SystemAcceleration * AccelTime) * AccelTime)*0
      +                          .5;
 13461  00502A  D89F               	call	PL43	;call to abstracted procedure
 13462  00502C  EC52  F031         	call	___ftmul	;wreg free
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;MotionEngine.c: 18: AccelDist = ((Config.SystemAcceleration * AccelTime) * AccelTime)*0
      +                          .5;
 13466  005030  D878               	call	PL27	;call to abstracted procedure
 13467  005032  EC52  F031         	call	___ftmul	;wreg free
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;MotionEngine.c: 18: AccelDist = ((Config.SystemAcceleration * AccelTime) * AccelTime)*0
      +                          .5;
 13471  005036  D888               	call	PL34	;call to abstracted procedure
 13472  005038  EC52  F031         	call	___ftmul	;wreg free
 13473  00503C  C077  F0C3         	movff	?___ftmul,MinTimeToMove@AccelDist
 13474  005040  C078  F0C4         	movff	?___ftmul+1,MinTimeToMove@AccelDist+1
 13475  005044  C079  F0C5         	movff	?___ftmul+2,MinTimeToMove@AccelDist+2
 13476  005048                     l19797:
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;MotionEngine.c: 19: }
 13480                           ;MotionEngine.c: 20: double RealSpeed = AccelTime * Config.SystemAcceleration;
 13481  005048  C2E6  F077         	movff	_Config+16,?___ftmul
 13482  00504C  C2E7  F078         	movff	_Config+17,?___ftmul+1
 13483  005050  C2E8  F079         	movff	_Config+18,?___ftmul+2
 13484  005054  C0D2  F07A         	movff	MinTimeToMove@AccelTime,?___ftmul+3
 13485  005058  C0D3  F07B         	movff	MinTimeToMove@AccelTime+1,?___ftmul+4
 13486  00505C  C0D4  F07C         	movff	MinTimeToMove@AccelTime+2,?___ftmul+5
 13487  005060  EC52  F031         	call	___ftmul	;wreg free
 13488  005064  C077  F0BA         	movff	?___ftmul,MinTimeToMove@RealSpeed
 13489  005068  C078  F0BB         	movff	?___ftmul+1,MinTimeToMove@RealSpeed+1
 13490  00506C  C079  F0BC         	movff	?___ftmul+2,MinTimeToMove@RealSpeed+2
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;MotionEngine.c: 21: double CoastDistance = D - (2 * AccelDist);
 13494  005070  C0CF  F099         	movff	MinTimeToMove@D,?___ftsub
 13495  005074  C0D0  F09A         	movff	MinTimeToMove@D+1,?___ftsub+1
 13496  005078  C0D1  F09B         	movff	MinTimeToMove@D+2,?___ftsub+2
 13497  00507C  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 13498  00507E  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 13499  005080  0E40               	movlw	64
 13500  005082  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 13501  005084  C0C3  F077         	movff	MinTimeToMove@AccelDist,?___ftmul
 13502  005088  C0C4  F078         	movff	MinTimeToMove@AccelDist+1,?___ftmul+1
 13503  00508C  C0C5  F079         	movff	MinTimeToMove@AccelDist+2,?___ftmul+2
 13504  005090  EC52  F031         	call	___ftmul	;wreg free
 13505  005094  C077  F09C         	movff	?___ftmul,?___ftsub+3
 13506  005098  C078  F09D         	movff	?___ftmul+1,?___ftsub+4
 13507  00509C  C079  F09E         	movff	?___ftmul+2,?___ftsub+5
 13508  0050A0  ECDE  F03A         	call	___ftsub	;wreg free
 13509  0050A4  C099  F0BD         	movff	?___ftsub,MinTimeToMove@CoastDistance
 13510  0050A8  C09A  F0BE         	movff	?___ftsub+1,MinTimeToMove@CoastDistance+1
 13511  0050AC  C09B  F0BF         	movff	?___ftsub+2,MinTimeToMove@CoastDistance+2
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;MotionEngine.c: 22: double CoastTime = CoastDistance / RealSpeed;
 13515  0050B0  C0BD  F088         	movff	MinTimeToMove@CoastDistance,?___ftdiv
 13516  0050B4  C0BE  F089         	movff	MinTimeToMove@CoastDistance+1,?___ftdiv+1
 13517  0050B8  C0BF  F08A         	movff	MinTimeToMove@CoastDistance+2,?___ftdiv+2
 13518  0050BC  C0BA  F08B         	movff	MinTimeToMove@RealSpeed,?___ftdiv+3
 13519  0050C0  C0BB  F08C         	movff	MinTimeToMove@RealSpeed+1,?___ftdiv+4
 13520  0050C4  C0BC  F08D         	movff	MinTimeToMove@RealSpeed+2,?___ftdiv+5
 13521  0050C8  ECD0  F031         	call	___ftdiv	;wreg free
 13522  0050CC  C088  F0C0         	movff	?___ftdiv,MinTimeToMove@CoastTime
 13523  0050D0  C089  F0C1         	movff	?___ftdiv+1,MinTimeToMove@CoastTime+1
 13524  0050D4  C08A  F0C2         	movff	?___ftdiv+2,MinTimeToMove@CoastTime+2
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;MotionEngine.c: 23: double TotalTime = AccelTime * 2;
 13528  0050D8  C0D2  F077         	movff	MinTimeToMove@AccelTime,?___ftmul
 13529  0050DC  C0D3  F078         	movff	MinTimeToMove@AccelTime+1,?___ftmul+1
 13530  0050E0  C0D4  F079         	movff	MinTimeToMove@AccelTime+2,?___ftmul+2
 13531  0050E4  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 13532  0050E6  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 13533  0050E8  0E40               	movlw	64
 13534  0050EA  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 13535  0050EC  EC52  F031         	call	___ftmul	;wreg free
 13536  0050F0  C077  F0CC         	movff	?___ftmul,MinTimeToMove@TotalTime
 13537  0050F4  C078  F0CD         	movff	?___ftmul+1,MinTimeToMove@TotalTime+1
 13538  0050F8  C079  F0CE         	movff	?___ftmul+2,MinTimeToMove@TotalTime+2
 13539                           
 13540                           ; BSR set to: 0
 13541                           ;MotionEngine.c: 24: TotalTime += CoastTime;
 13542  0050FC  0E00               	movlw	high MinTimeToMove@TotalTime
 13543  0050FE  6F89               	movwf	(?___asftadd+1)& (0+255),b
 13544  005100  0ECC               	movlw	low MinTimeToMove@TotalTime
 13545  005102  6F88               	movwf	?___asftadd& (0+255),b
 13546  005104  C0C0  F08A         	movff	MinTimeToMove@CoastTime,?___asftadd+2
 13547  005108  C0C1  F08B         	movff	MinTimeToMove@CoastTime+1,?___asftadd+3
 13548  00510C  C0C2  F08C         	movff	MinTimeToMove@CoastTime+2,?___asftadd+4
 13549  005110  EC53  F03A         	call	___asftadd	;wreg free
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;MotionEngine.c: 25: return TotalTime;
 13553  005114  C0CC  F0B4         	movff	MinTimeToMove@TotalTime,?_MinTimeToMove
 13554  005118  C0CD  F0B5         	movff	MinTimeToMove@TotalTime+1,?_MinTimeToMove+1
 13555  00511C  C0CE  F0B6         	movff	MinTimeToMove@TotalTime+2,?_MinTimeToMove+2
 13556                           
 13557                           ; BSR set to: 0
 13558  005120  0012               	return	
 13559  005122                     __end_of_MinTimeToMove:
 13560                           	opt stack 0
 13561  005122                     PL27:
 13562  005122  C077  F0C6         	movff	?___ftmul,_MinTimeToMove$3890
 13563  005126  C078  F0C7         	movff	?___ftmul+1,_MinTimeToMove$3890+1
 13564  00512A  C079  F0C8         	movff	?___ftmul+2,_MinTimeToMove$3890+2
 13565  00512E  C0D2  F07A         	movff	MinTimeToMove@AccelTime,?___ftmul+3
 13566  005132  C0D3  F07B         	movff	MinTimeToMove@AccelTime+1,?___ftmul+4
 13567  005136  C0D4  F07C         	movff	MinTimeToMove@AccelTime+2,?___ftmul+5
 13568  00513A  C0C6  F077         	movff	_MinTimeToMove$3890,?___ftmul
 13569  00513E  C0C7  F078         	movff	_MinTimeToMove$3890+1,?___ftmul+1
 13570  005142  C0C8  F079         	movff	_MinTimeToMove$3890+2,?___ftmul+2
 13571  005146  0012               	return	
 13572  005148                     PL34:
 13573  005148  C077  F0C9         	movff	?___ftmul,_MinTimeToMove$3891
 13574  00514C  C078  F0CA         	movff	?___ftmul+1,_MinTimeToMove$3891+1
 13575  005150  C079  F0CB         	movff	?___ftmul+2,_MinTimeToMove$3891+2
 13576  005154  C0C9  F077         	movff	_MinTimeToMove$3891,?___ftmul
 13577  005158  C0CA  F078         	movff	_MinTimeToMove$3891+1,?___ftmul+1
 13578  00515C  C0CB  F079         	movff	_MinTimeToMove$3891+2,?___ftmul+2
 13579  005160  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 13580  005162  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 13581  005164  0E3F               	movlw	63
 13582  005166  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 13583  005168  0C3F               	retlw	63
 13584  00516A                     PL43:
 13585  00516A  C0D2  F07A         	movff	MinTimeToMove@AccelTime,?___ftmul+3
 13586  00516E  C0D3  F07B         	movff	MinTimeToMove@AccelTime+1,?___ftmul+4
 13587  005172  C0D4  F07C         	movff	MinTimeToMove@AccelTime+2,?___ftmul+5
 13588  005176  C2E6  F077         	movff	_Config+16,?___ftmul
 13589  00517A  C2E7  F078         	movff	_Config+17,?___ftmul+1
 13590  00517E  C2E8  F079         	movff	_Config+18,?___ftmul+2
 13591  005182  0012               	return	
 13592                           tblptru	equ	0xFF8
 13593                           tblptrh	equ	0xFF7
 13594                           tblptrl	equ	0xFF6
 13595                           tablat	equ	0xFF5
 13596                           prodh	equ	0xFF4
 13597                           prodl	equ	0xFF3
 13598                           intcon	equ	0xFF2
 13599                           intcon2	equ	0xFF1
 13600                           postinc0	equ	0xFEE
 13601                           wreg	equ	0xFE8
 13602                           postinc1	equ	0xFE6
 13603                           postdec1	equ	0xFE5
 13604                           fsr1h	equ	0xFE2
 13605                           fsr1l	equ	0xFE1
 13606                           indf2	equ	0xFDF
 13607                           postinc2	equ	0xFDE
 13608                           postdec2	equ	0xFDD
 13609                           fsr2h	equ	0xFDA
 13610                           fsr2l	equ	0xFD9
 13611                           status	equ	0xFD8
 13612                           
 13613 ;; *************** function _sqrt *****************
 13614 ;; Defined at:
 13615 ;;		line 14 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\sqrt.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;  y               3   68[BANK0 ] char 
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;  x               3   81[BANK0 ] char 
 13620 ;;  q               3   78[BANK0 ] char 
 13621 ;;  z               3   74[BANK0 ] char 
 13622 ;;  og              3    0        char 
 13623 ;;  i               1   77[BANK0 ] unsigned char 
 13624 ;; Return value:  Size  Location     Type
 13625 ;;                  3   68[BANK0 ] unsigned char 
 13626 ;; Registers used:
 13627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13628 ;; Tracked objects:
 13629 ;;		On entry : F/0
 13630 ;;		On exit  : F/0
 13631 ;;		Unchanged: FFFFFFF0/0
 13632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13633 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13636 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13637 ;;Total ram usage:       16 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:    7
 13640 ;; This function calls:
 13641 ;;		___ftge
 13642 ;;		___ftmul
 13643 ;;		___asftmul
 13644 ;;		___asftsub
 13645 ;; This function is called by:
 13646 ;;		_MinTimeToMove
 13647 ;;		_SpeedRequiredToMoveInTime
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           	psect	text24
 13652  00619C                     __ptext24:
 13653                           	opt stack 0
 13654  00619C                     _sqrt:
 13655                           	opt stack 21
 13656                           
 13657                           ; BSR set to: 0
 13658                           
 13659                           ; BSR set to: 0
 13660  00619C  0E00               	movlw	0
 13661  00619E  6B88               	clrf	?___ftge& (0+255),b
 13662  0061A0  6B89               	clrf	(?___ftge+1)& (0+255),b
 13663  0061A2  6B8A               	clrf	(?___ftge+2)& (0+255),b
 13664  0061A4  C0A4  F08B         	movff	sqrt@y,?___ftge+3
 13665  0061A8  C0A5  F08C         	movff	sqrt@y+1,?___ftge+4
 13666  0061AC  C0A6  F08D         	movff	sqrt@y+2,?___ftge+5
 13667  0061B0  ECB1  F037         	call	___ftge	;wreg free
 13668  0061B4  E304               	bnc	l3106
 13669                           
 13670                           ; BSR set to: 0
 13671  0061B6  6BA4               	clrf	?_sqrt& (0+255),b
 13672  0061B8  6BA5               	clrf	(?_sqrt+1)& (0+255),b
 13673  0061BA  6BA6               	clrf	(?_sqrt+2)& (0+255),b
 13674  0061BC  0012               	return	
 13675  0061BE                     l3106:
 13676                           
 13677                           ; BSR set to: 0
 13678  0061BE  C0A4  F0AA         	movff	sqrt@y,sqrt@z
 13679  0061C2  C0A5  F0AB         	movff	sqrt@y+1,sqrt@z+1
 13680  0061C6  C0A6  F0AC         	movff	sqrt@y+2,sqrt@z+2
 13681                           
 13682                           ; BSR set to: 0
 13683  0061CA  0EC8               	movlw	200
 13684  0061CC  6FA7               	movwf	??_sqrt& (0+255),b
 13685  0061CE  0E6E               	movlw	110
 13686  0061D0  6FA8               	movwf	(??_sqrt+1)& (0+255),b
 13687  0061D2  0EBE               	movlw	190
 13688  0061D4  6FA9               	movwf	(??_sqrt+2)& (0+255),b
 13689  0061D6  51A4               	movf	sqrt@y& (0+255),w,b
 13690  0061D8  5DA7               	subwf	??_sqrt& (0+255),w,b
 13691  0061DA  6FB1               	movwf	sqrt@x& (0+255),b
 13692  0061DC  51A5               	movf	(sqrt@y+1)& (0+255),w,b
 13693  0061DE  59A8               	subwfb	(??_sqrt+1)& (0+255),w,b
 13694  0061E0  6FB2               	movwf	(sqrt@x+1)& (0+255),b
 13695  0061E2  51A6               	movf	(sqrt@y+2)& (0+255),w,b
 13696  0061E4  59A9               	subwfb	(??_sqrt+2)& (0+255),w,b
 13697  0061E6  6FB3               	movwf	(sqrt@x+2)& (0+255),b
 13698                           
 13699                           ; BSR set to: 0
 13700  0061E8  90D8               	bcf	status,0,c
 13701  0061EA  33B3               	rrcf	(sqrt@x+2)& (0+255),f,b
 13702  0061EC  33B2               	rrcf	(sqrt@x+1)& (0+255),f,b
 13703  0061EE  33B1               	rrcf	sqrt@x& (0+255),f,b
 13704                           
 13705                           ; BSR set to: 0
 13706  0061F0  80D8               	bsf	status,0
 13707  0061F2  0E80               	movlw	128
 13708  0061F4  5BAB               	subwfb	(sqrt@z+1)& (0+255),f,b
 13709  0061F6  0E00               	movlw	0
 13710  0061F8  5BAC               	subwfb	(sqrt@z+2)& (0+255),f,b
 13711                           
 13712                           ; BSR set to: 0
 13713  0061FA  0E04               	movlw	4
 13714  0061FC  6FAD               	movwf	sqrt@i& (0+255),b
 13715  0061FE                     l19823:
 13716                           
 13717                           ; BSR set to: 0
 13718  0061FE  C0B1  F077         	movff	sqrt@x,?___ftmul
 13719  006202  C0B2  F078         	movff	sqrt@x+1,?___ftmul+1
 13720  006206  C0B3  F079         	movff	sqrt@x+2,?___ftmul+2
 13721  00620A  C0AA  F07A         	movff	sqrt@z,?___ftmul+3
 13722  00620E  C0AB  F07B         	movff	sqrt@z+1,?___ftmul+4
 13723  006212  C0AC  F07C         	movff	sqrt@z+2,?___ftmul+5
 13724  006216  EC52  F031         	call	___ftmul	;wreg free
 13725  00621A  C077  F0AE         	movff	?___ftmul,sqrt@q
 13726  00621E  C078  F0AF         	movff	?___ftmul+1,sqrt@q+1
 13727  006222  C079  F0B0         	movff	?___ftmul+2,sqrt@q+2
 13728                           
 13729                           ; BSR set to: 0
 13730  006226  D833               	call	PL52	;call to abstracted procedure
 13731  006228  ECF9  F039         	call	___asftmul	;wreg free
 13732                           
 13733                           ; BSR set to: 0
 13734  00622C  D830               	call	PL52	;call to abstracted procedure
 13735  00622E  ECF9  F039         	call	___asftmul	;wreg free
 13736                           
 13737                           ; BSR set to: 0
 13738  006232  0E00               	movlw	high sqrt@x
 13739  006234  6F89               	movwf	(?___asftmul+1)& (0+255),b
 13740  006236  0EB1               	movlw	low sqrt@x
 13741  006238  6F88               	movwf	?___asftmul& (0+255),b
 13742  00623A  6B8A               	clrf	(?___asftmul+2)& (0+255),b
 13743  00623C  0EC0               	movlw	192
 13744  00623E  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 13745  006240  0E3F               	movlw	63
 13746  006242  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 13747  006244  ECF9  F039         	call	___asftmul	;wreg free
 13748                           
 13749                           ; BSR set to: 0
 13750  006248  0E00               	movlw	high sqrt@x
 13751  00624A  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 13752  00624C  0EB1               	movlw	low sqrt@x
 13753  00624E  6F9F               	movwf	?___asftsub& (0+255),b
 13754  006250  C0AE  F0A1         	movff	sqrt@q,?___asftsub+2
 13755  006254  C0AF  F0A2         	movff	sqrt@q+1,?___asftsub+3
 13756  006258  C0B0  F0A3         	movff	sqrt@q+2,?___asftsub+4
 13757  00625C  EC17  F03A         	call	___asftsub	;wreg free
 13758                           
 13759                           ; BSR set to: 0
 13760  006260  2FAD               	decfsz	sqrt@i& (0+255),f,b
 13761  006262  D7CD               	goto	l19823
 13762                           
 13763                           ; BSR set to: 0
 13764  006264  C0B1  F077         	movff	sqrt@x,?___ftmul
 13765  006268  C0B2  F078         	movff	sqrt@x+1,?___ftmul+1
 13766  00626C  C0B3  F079         	movff	sqrt@x+2,?___ftmul+2
 13767  006270  C0A4  F07A         	movff	sqrt@y,?___ftmul+3
 13768  006274  C0A5  F07B         	movff	sqrt@y+1,?___ftmul+4
 13769  006278  C0A6  F07C         	movff	sqrt@y+2,?___ftmul+5
 13770  00627C  EC52  F031         	call	___ftmul	;wreg free
 13771  006280  C077  F0A4         	movff	?___ftmul,?_sqrt
 13772  006284  C078  F0A5         	movff	?___ftmul+1,?_sqrt+1
 13773  006288  C079  F0A6         	movff	?___ftmul+2,?_sqrt+2
 13774                           
 13775                           ; BSR set to: 0
 13776  00628C  0012               	return	
 13777  00628E                     __end_of_sqrt:
 13778                           	opt stack 0
 13779  00628E                     PL52:
 13780  00628E  0E00               	movlw	high sqrt@q
 13781  006290  6F89               	movwf	(?___asftmul+1)& (0+255),b
 13782  006292  0EAE               	movlw	low sqrt@q
 13783  006294  6F88               	movwf	?___asftmul& (0+255),b
 13784  006296  C0B1  F08A         	movff	sqrt@x,?___asftmul+2
 13785  00629A  C0B2  F08B         	movff	sqrt@x+1,?___asftmul+3
 13786  00629E  C0B3  F08C         	movff	sqrt@x+2,?___asftmul+4
 13787  0062A2  0012               	return	
 13788                           tblptru	equ	0xFF8
 13789                           tblptrh	equ	0xFF7
 13790                           tblptrl	equ	0xFF6
 13791                           tablat	equ	0xFF5
 13792                           prodh	equ	0xFF4
 13793                           prodl	equ	0xFF3
 13794                           intcon	equ	0xFF2
 13795                           intcon2	equ	0xFF1
 13796                           postinc0	equ	0xFEE
 13797                           wreg	equ	0xFE8
 13798                           postinc1	equ	0xFE6
 13799                           postdec1	equ	0xFE5
 13800                           fsr1h	equ	0xFE2
 13801                           fsr1l	equ	0xFE1
 13802                           indf2	equ	0xFDF
 13803                           postinc2	equ	0xFDE
 13804                           postdec2	equ	0xFDD
 13805                           fsr2h	equ	0xFDA
 13806                           fsr2l	equ	0xFD9
 13807                           status	equ	0xFD8
 13808                           
 13809 ;; *************** function _GetCurrentLinearPosition *****************
 13810 ;; Defined at:
 13811 ;;		line 49 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;		None
 13814 ;; Auto vars:     Size  Location     Type
 13815 ;;  MotorPos        3   48[BANK0 ] unsigned char 
 13816 ;; Return value:  Size  Location     Type
 13817 ;;                  3   45[BANK0 ] unsigned char 
 13818 ;; Registers used:
 13819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13820 ;; Tracked objects:
 13821 ;;		On entry : E/0
 13822 ;;		On exit  : F/0
 13823 ;;		Unchanged: FFFFFFF0/0
 13824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13829 ;;Total ram usage:        6 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    6
 13832 ;; This function calls:
 13833 ;;		___altoft
 13834 ;;		___asftmul
 13835 ;; This function is called by:
 13836 ;;		_CreateWaypointProgram
 13837 ;; This function uses a non-reentrant model
 13838 ;;
 13839                           
 13840                           	psect	text25
 13841  007010                     __ptext25:
 13842                           	opt stack 0
 13843  007010                     _GetCurrentLinearPosition:
 13844                           	opt stack 0
 13845                           
 13846                           ;MotionEngine.c: 50: double MotorPos;
 13847                           ;MotionEngine.c: 52: bLock_Motor_Position = 1;
 13848                           
 13849                           ; BSR set to: 0
 13850                           
 13851                           ;MotionEngine.c: 53: MotorPos = Motor_Position;
 13852  007010  D81D               	call	PL11	;call to abstracted procedure
 13853  007012  EC49  F037         	call	___altoft	;wreg free
 13854  007016  C073  F090         	movff	?___altoft,GetCurrentLinearPosition@MotorPos
 13855  00701A  C074  F091         	movff	?___altoft+1,GetCurrentLinearPosition@MotorPos+1
 13856  00701E  C075  F092         	movff	?___altoft+2,GetCurrentLinearPosition@MotorPos+2
 13857                           
 13858                           ; BSR set to: 0
 13859                           ;MotionEngine.c: 54: bLock_Motor_Position = 0;
 13860  007022  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 13861                           
 13862                           ;MotionEngine.c: 56: MotorPos *= Config.Degrees_Per_Count;
 13863  007024  0100               	movlb	0	; () banked
 13864  007026  0E00               	movlw	high GetCurrentLinearPosition@MotorPos
 13865  007028  6F89               	movwf	(?___asftmul+1)& (0+255),b
 13866  00702A  0E90               	movlw	low GetCurrentLinearPosition@MotorPos
 13867  00702C  6F88               	movwf	?___asftmul& (0+255),b
 13868  00702E  C2F5  F08A         	movff	_Config+31,?___asftmul+2
 13869  007032  C2F6  F08B         	movff	_Config+32,?___asftmul+3
 13870  007036  C2F7  F08C         	movff	_Config+33,?___asftmul+4
 13871  00703A  ECF9  F039         	call	___asftmul	;wreg free
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;MotionEngine.c: 57: return MotorPos;
 13875  00703E  C090  F08D         	movff	GetCurrentLinearPosition@MotorPos,?_GetCurrentLinearPosition
 13876  007042  C091  F08E         	movff	GetCurrentLinearPosition@MotorPos+1,?_GetCurrentLinearPosition+1
 13877  007046  C092  F08F         	movff	GetCurrentLinearPosition@MotorPos+2,?_GetCurrentLinearPosition+2
 13878                           
 13879                           ; BSR set to: 0
 13880  00704A  0012               	return	
 13881  00704C                     __end_of_GetCurrentLinearPosition:
 13882                           	opt stack 0
 13883  00704C                     PL11:
 13884  00704C  0100               	movlb	(_bLock_Motor_Position/(0+8)) shr (0+8)
 13885  00704E  8059               	bsf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 13886  007050  C1E4  F073         	movff	_Motor_Position,?___altoft
 13887  007054  C1E5  F074         	movff	_Motor_Position+1,?___altoft+1
 13888  007058  C1E6  F075         	movff	_Motor_Position+2,?___altoft+2
 13889  00705C  C1E7  F076         	movff	_Motor_Position+3,?___altoft+3
 13890  007060  0012               	return	
 13891                           tblptru	equ	0xFF8
 13892                           tblptrh	equ	0xFF7
 13893                           tblptrl	equ	0xFF6
 13894                           tablat	equ	0xFF5
 13895                           prodh	equ	0xFF4
 13896                           prodl	equ	0xFF3
 13897                           intcon	equ	0xFF2
 13898                           intcon2	equ	0xFF1
 13899                           postinc0	equ	0xFEE
 13900                           wreg	equ	0xFE8
 13901                           postinc1	equ	0xFE6
 13902                           postdec1	equ	0xFE5
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           fsr2h	equ	0xFDA
 13909                           fsr2l	equ	0xFD9
 13910                           status	equ	0xFD8
 13911                           
 13912 ;; *************** function _MoveToAngle *****************
 13913 ;; Defined at:
 13914 ;;		line 84 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  _Destination    3    6[BANK1 ] unsigned char 
 13917 ;;  _Speed_Deg_S    3    9[BANK1 ] unsigned char 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  DestinationA    3   30[BANK1 ] unsigned char 
 13920 ;;  CurrentAngle    3   27[BANK1 ] unsigned char 
 13921 ;;  CCW_Distance    3   21[BANK1 ] unsigned char 
 13922 ;;  CW_Distance     3   18[BANK1 ] unsigned char 
 13923 ;;  Speed_Deg_Se    3   15[BANK1 ] unsigned char 
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      unsigned char 
 13926 ;; Registers used:
 13927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13928 ;; Tracked objects:
 13929 ;;		On entry : F/1
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: FFFFFFF0/0
 13932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13933 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;      Totals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13937 ;;Total ram usage:       27 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:    8
 13940 ;; This function calls:
 13941 ;;		___ftneg
 13942 ;;		___asftadd
 13943 ;;		___ftge
 13944 ;;		___asftsub
 13945 ;;		_GetCurrentAngle
 13946 ;;		___ftsub
 13947 ;;		___ftadd
 13948 ;;		_Move
 13949 ;; This function is called by:
 13950 ;;		_RunOrbitProgram
 13951 ;;		_RunWaypointProgram
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           	psect	text26
 13956  005184                     __ptext26:
 13957                           	opt stack 0
 13958  005184                     _MoveToAngle:
 13959                           	opt stack 21
 13960                           
 13961                           ; BSR set to: 1
 13962                           ;MotionEngine.c: 85: double DestinationAngle;
 13963                           ;MotionEngine.c: 86: double Speed_Deg_Sec;
 13964                           ;MotionEngine.c: 88: if (_Speed_Deg_Sec < 0) Speed_Deg_Sec = -_Speed_Deg_Sec;
 13965                           
 13966                           ; BSR set to: 0
 13967  005184  510B               	movf	(MoveToAngle@_Speed_Deg_Sec+2)& (0+255),w,b
 13968  005186  0A80               	xorlw	128
 13969  005188  0F80               	addlw	128
 13970  00518A  E105               	bnz	u12135
 13971  00518C  0E00               	movlw	0
 13972  00518E  5D0A               	subwf	(MoveToAngle@_Speed_Deg_Sec+1)& (0+255),w,b
 13973  005190  E102               	bnz	u12135
 13974  005192  0E00               	movlw	0
 13975  005194  5D09               	subwf	MoveToAngle@_Speed_Deg_Sec& (0+255),w,b
 13976  005196                     u12135:
 13977  005196  E20F               	bc	l1130
 13978                           
 13979                           ; BSR set to: 1
 13980  005198  C109  F06B         	movff	MoveToAngle@_Speed_Deg_Sec,?___ftneg
 13981  00519C  C10A  F06C         	movff	MoveToAngle@_Speed_Deg_Sec+1,?___ftneg+1
 13982  0051A0  C10B  F06D         	movff	MoveToAngle@_Speed_Deg_Sec+2,?___ftneg+2
 13983  0051A4  ECED  F03B         	call	___ftneg	;wreg free
 13984  0051A8  C06B  F10F         	movff	?___ftneg,MoveToAngle@Speed_Deg_Sec
 13985  0051AC  C06C  F110         	movff	?___ftneg+1,MoveToAngle@Speed_Deg_Sec+1
 13986  0051B0  C06D  F111         	movff	?___ftneg+2,MoveToAngle@Speed_Deg_Sec+2
 13987  0051B4  D006               	goto	l19881
 13988  0051B6                     l1130:
 13989                           
 13990                           ; BSR set to: 1
 13991                           ;MotionEngine.c: 89: else Speed_Deg_Sec = _Speed_Deg_Sec;
 13992  0051B6  C109  F10F         	movff	MoveToAngle@_Speed_Deg_Sec,MoveToAngle@Speed_Deg_Sec
 13993  0051BA  C10A  F110         	movff	MoveToAngle@_Speed_Deg_Sec+1,MoveToAngle@Speed_Deg_Sec+1
 13994  0051BE  C10B  F111         	movff	MoveToAngle@_Speed_Deg_Sec+2,MoveToAngle@Speed_Deg_Sec+2
 13995  0051C2                     l19881:
 13996                           
 13997                           ;MotionEngine.c: 91: if (_DestinationAngle < 0) {
 13998  0051C2  0101               	movlb	1	; () banked
 13999  0051C4  5108               	movf	(MoveToAngle@_DestinationAngle+2)& (0+255),w,b
 14000  0051C6  0A80               	xorlw	128
 14001  0051C8  0F80               	addlw	128
 14002  0051CA  E105               	bnz	u12145
 14003  0051CC  0E00               	movlw	0
 14004  0051CE  5D07               	subwf	(MoveToAngle@_DestinationAngle+1)& (0+255),w,b
 14005  0051D0  E102               	bnz	u12145
 14006  0051D2  0E00               	movlw	0
 14007  0051D4  5D06               	subwf	MoveToAngle@_DestinationAngle& (0+255),w,b
 14008  0051D6                     u12145:
 14009  0051D6  E222               	bc	l1132
 14010                           
 14011                           ; BSR set to: 1
 14012                           ;MotionEngine.c: 92: DestinationAngle = _DestinationAngle;
 14013  0051D8  D8F5               	call	PL64	;call to abstracted procedure
 14014                           
 14015                           ;MotionEngine.c: 93: while (DestinationAngle<-360) DestinationAngle += 360;
 14016  0051DA  D008               	goto	l19887
 14017  0051DC                     l19885:
 14018                           
 14019                           ; BSR set to: 0
 14020  0051DC  0E01               	movlw	high MoveToAngle@DestinationAngle
 14021  0051DE  0100               	movlb	0	; () banked
 14022  0051E0  6F89               	movwf	(?___asftadd+1)& (0+255),b
 14023  0051E2  0E1E               	movlw	low MoveToAngle@DestinationAngle
 14024  0051E4  EC12  F033         	call	PL36	;call to abstracted procedure
 14025  0051E8  EC53  F03A         	call	___asftadd	;wreg free
 14026  0051EC                     l19887:
 14027  0051EC  C11E  F088         	movff	MoveToAngle@DestinationAngle,?___ftge
 14028  0051F0  C11F  F089         	movff	MoveToAngle@DestinationAngle+1,?___ftge+1
 14029  0051F4  C120  F08A         	movff	MoveToAngle@DestinationAngle+2,?___ftge+2
 14030  0051F8  0100               	movlb	0	; () banked
 14031  0051FA  6B8B               	clrf	(?___ftge+3)& (0+255),b
 14032  0051FC  0EB4               	movlw	180
 14033  0051FE  6F8C               	movwf	(?___ftge+4)& (0+255),b
 14034  005200  0EC3               	movlw	195
 14035  005202  6F8D               	movwf	(?___ftge+5)& (0+255),b
 14036  005204  ECB1  F037         	call	___ftge	;wreg free
 14037  005208  E3E9               	bnc	l19885
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;MotionEngine.c: 94: DestinationAngle += 360;
 14041  00520A  0E01               	movlw	high MoveToAngle@DestinationAngle
 14042  00520C  0100               	movlb	0	; () banked
 14043  00520E  6F89               	movwf	(?___asftadd+1)& (0+255),b
 14044  005210  0E1E               	movlw	low MoveToAngle@DestinationAngle
 14045  005212  EC12  F033         	call	PL36	;call to abstracted procedure
 14046  005216  EC53  F03A         	call	___asftadd	;wreg free
 14047                           
 14048                           ;MotionEngine.c: 95: } else {
 14049  00521A  D01D               	goto	l19895
 14050  00521C                     l1132:
 14051                           
 14052                           ; BSR set to: 1
 14053                           ;MotionEngine.c: 96: DestinationAngle = _DestinationAngle;
 14054  00521C  D8D3               	call	PL64	;call to abstracted procedure
 14055                           
 14056                           ;MotionEngine.c: 97: while (DestinationAngle > 360) DestinationAngle -= 360;
 14057  00521E  D00C               	goto	l19893
 14058  005220                     l19891:
 14059                           
 14060                           ; BSR set to: 0
 14061  005220  0E01               	movlw	high MoveToAngle@DestinationAngle
 14062  005222  0100               	movlb	0	; () banked
 14063  005224  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 14064  005226  0E1E               	movlw	low MoveToAngle@DestinationAngle
 14065  005228  6F9F               	movwf	?___asftsub& (0+255),b
 14066  00522A  6BA1               	clrf	(?___asftsub+2)& (0+255),b
 14067  00522C  0EB4               	movlw	180
 14068  00522E  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 14069  005230  0E43               	movlw	67
 14070  005232  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 14071  005234  EC17  F03A         	call	___asftsub	;wreg free
 14072  005238                     l19893:
 14073  005238  0100               	movlb	0	; () banked
 14074  00523A  6B88               	clrf	?___ftge& (0+255),b
 14075  00523C  0EB4               	movlw	180
 14076  00523E  6F89               	movwf	(?___ftge+1)& (0+255),b
 14077  005240  0E43               	movlw	67
 14078  005242  6F8A               	movwf	(?___ftge+2)& (0+255),b
 14079  005244  C11E  F08B         	movff	MoveToAngle@DestinationAngle,?___ftge+3
 14080  005248  C11F  F08C         	movff	MoveToAngle@DestinationAngle+1,?___ftge+4
 14081  00524C  C120  F08D         	movff	MoveToAngle@DestinationAngle+2,?___ftge+5
 14082  005250  ECB1  F037         	call	___ftge	;wreg free
 14083  005254  E3E5               	bnc	l19891
 14084  005256                     l19895:
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;MotionEngine.c: 98: }
 14088                           ;MotionEngine.c: 101: double CurrentAngle;
 14089                           ;MotionEngine.c: 102: CurrentAngle = GetCurrentAngle();
 14090  005256  ECB1  F032         	call	_GetCurrentAngle	;wreg free
 14091  00525A  C0A4  F11B         	movff	?_GetCurrentAngle,MoveToAngle@CurrentAngle
 14092  00525E  C0A5  F11C         	movff	?_GetCurrentAngle+1,MoveToAngle@CurrentAngle+1
 14093  005262  C0A6  F11D         	movff	?_GetCurrentAngle+2,MoveToAngle@CurrentAngle+2
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;MotionEngine.c: 104: double CW_Distance;
 14097                           ;MotionEngine.c: 105: double CCW_Distance;
 14098                           ;MotionEngine.c: 107: if (DestinationAngle > CurrentAngle) {
 14099  005266  C11B  F088         	movff	MoveToAngle@CurrentAngle,?___ftge
 14100  00526A  C11C  F089         	movff	MoveToAngle@CurrentAngle+1,?___ftge+1
 14101  00526E  C11D  F08A         	movff	MoveToAngle@CurrentAngle+2,?___ftge+2
 14102  005272  C11E  F08B         	movff	MoveToAngle@DestinationAngle,?___ftge+3
 14103  005276  C11F  F08C         	movff	MoveToAngle@DestinationAngle+1,?___ftge+4
 14104  00527A  C120  F08D         	movff	MoveToAngle@DestinationAngle+2,?___ftge+5
 14105  00527E  ECB1  F037         	call	___ftge	;wreg free
 14106  005282  E231               	bc	l19901
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;MotionEngine.c: 108: CW_Distance = DestinationAngle - CurrentAngle;
 14110  005284  C11E  F099         	movff	MoveToAngle@DestinationAngle,?___ftsub
 14111  005288  C11F  F09A         	movff	MoveToAngle@DestinationAngle+1,?___ftsub+1
 14112  00528C  C120  F09B         	movff	MoveToAngle@DestinationAngle+2,?___ftsub+2
 14113  005290  C11B  F09C         	movff	MoveToAngle@CurrentAngle,?___ftsub+3
 14114  005294  C11C  F09D         	movff	MoveToAngle@CurrentAngle+1,?___ftsub+4
 14115  005298  C11D  F09E         	movff	MoveToAngle@CurrentAngle+2,?___ftsub+5
 14116  00529C  ECDE  F03A         	call	___ftsub	;wreg free
 14117  0052A0  C099  F112         	movff	?___ftsub,MoveToAngle@CW_Distance
 14118  0052A4  C09A  F113         	movff	?___ftsub+1,MoveToAngle@CW_Distance+1
 14119  0052A8  C09B  F114         	movff	?___ftsub+2,MoveToAngle@CW_Distance+2
 14120                           
 14121                           ;MotionEngine.c: 109: CCW_Distance = CurrentAngle + (360 - DestinationAngle);
 14122  0052AC  C11E  F09C         	movff	MoveToAngle@DestinationAngle,?___ftsub+3
 14123  0052B0  C11F  F09D         	movff	MoveToAngle@DestinationAngle+1,?___ftsub+4
 14124  0052B4  C120  F09E         	movff	MoveToAngle@DestinationAngle+2,?___ftsub+5
 14125  0052B8  6B99               	clrf	?___ftsub& (0+255),b
 14126  0052BA  0EB4               	movlw	180
 14127  0052BC  6F9A               	movwf	(?___ftsub+1)& (0+255),b
 14128  0052BE  0E43               	movlw	67
 14129  0052C0  6F9B               	movwf	(?___ftsub+2)& (0+255),b
 14130  0052C2  ECDE  F03A         	call	___ftsub	;wreg free
 14131                           
 14132                           ;MotionEngine.c: 109: CCW_Distance = CurrentAngle + (360 - DestinationAngle);
 14133  0052C6  D871               	call	PL41	;call to abstracted procedure
 14134  0052C8  C11B  F076         	movff	MoveToAngle@CurrentAngle,?___ftadd+3
 14135  0052CC  C11C  F077         	movff	MoveToAngle@CurrentAngle+1,?___ftadd+4
 14136  0052D0  C11D  F078         	movff	MoveToAngle@CurrentAngle+2,?___ftadd+5
 14137  0052D4  EC06  F02D         	call	___ftadd	;wreg free
 14138  0052D8  C073  F115         	movff	?___ftadd,MoveToAngle@CCW_Distance
 14139  0052DC  C074  F116         	movff	?___ftadd+1,MoveToAngle@CCW_Distance+1
 14140  0052E0  C075  F117         	movff	?___ftadd+2,MoveToAngle@CCW_Distance+2
 14141                           
 14142                           ;MotionEngine.c: 110: } else {
 14143  0052E4  D030               	goto	l1141
 14144  0052E6                     l19901:
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;MotionEngine.c: 111: CW_Distance = (360 - CurrentAngle) + DestinationAngle;
 14148  0052E6  C11B  F09C         	movff	MoveToAngle@CurrentAngle,?___ftsub+3
 14149  0052EA  C11C  F09D         	movff	MoveToAngle@CurrentAngle+1,?___ftsub+4
 14150  0052EE  C11D  F09E         	movff	MoveToAngle@CurrentAngle+2,?___ftsub+5
 14151  0052F2  6B99               	clrf	?___ftsub& (0+255),b
 14152  0052F4  0EB4               	movlw	180
 14153  0052F6  6F9A               	movwf	(?___ftsub+1)& (0+255),b
 14154  0052F8  0E43               	movlw	67
 14155  0052FA  6F9B               	movwf	(?___ftsub+2)& (0+255),b
 14156  0052FC  ECDE  F03A         	call	___ftsub	;wreg free
 14157                           
 14158                           ;MotionEngine.c: 111: CW_Distance = (360 - CurrentAngle) + DestinationAngle;
 14159  005300  D854               	call	PL41	;call to abstracted procedure
 14160  005302  C11E  F076         	movff	MoveToAngle@DestinationAngle,?___ftadd+3
 14161  005306  C11F  F077         	movff	MoveToAngle@DestinationAngle+1,?___ftadd+4
 14162  00530A  C120  F078         	movff	MoveToAngle@DestinationAngle+2,?___ftadd+5
 14163  00530E  EC06  F02D         	call	___ftadd	;wreg free
 14164  005312  C073  F112         	movff	?___ftadd,MoveToAngle@CW_Distance
 14165  005316  C074  F113         	movff	?___ftadd+1,MoveToAngle@CW_Distance+1
 14166  00531A  C075  F114         	movff	?___ftadd+2,MoveToAngle@CW_Distance+2
 14167                           
 14168                           ;MotionEngine.c: 112: CCW_Distance = CurrentAngle - DestinationAngle;
 14169  00531E  C11B  F099         	movff	MoveToAngle@CurrentAngle,?___ftsub
 14170  005322  C11C  F09A         	movff	MoveToAngle@CurrentAngle+1,?___ftsub+1
 14171  005326  C11D  F09B         	movff	MoveToAngle@CurrentAngle+2,?___ftsub+2
 14172  00532A  C11E  F09C         	movff	MoveToAngle@DestinationAngle,?___ftsub+3
 14173  00532E  C11F  F09D         	movff	MoveToAngle@DestinationAngle+1,?___ftsub+4
 14174  005332  C120  F09E         	movff	MoveToAngle@DestinationAngle+2,?___ftsub+5
 14175  005336  ECDE  F03A         	call	___ftsub	;wreg free
 14176  00533A  C099  F115         	movff	?___ftsub,MoveToAngle@CCW_Distance
 14177  00533E  C09A  F116         	movff	?___ftsub+1,MoveToAngle@CCW_Distance+1
 14178  005342  C09B  F117         	movff	?___ftsub+2,MoveToAngle@CCW_Distance+2
 14179  005346                     l1141:
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;MotionEngine.c: 113: }
 14183                           ;MotionEngine.c: 115: if (CW_Distance < CCW_Distance)
 14184  005346  C112  F088         	movff	MoveToAngle@CW_Distance,?___ftge
 14185  00534A  C113  F089         	movff	MoveToAngle@CW_Distance+1,?___ftge+1
 14186  00534E  C114  F08A         	movff	MoveToAngle@CW_Distance+2,?___ftge+2
 14187  005352  C115  F08B         	movff	MoveToAngle@CCW_Distance,?___ftge+3
 14188  005356  C116  F08C         	movff	MoveToAngle@CCW_Distance+1,?___ftge+4
 14189  00535A  C117  F08D         	movff	MoveToAngle@CCW_Distance+2,?___ftge+5
 14190  00535E  ECB1  F037         	call	___ftge	;wreg free
 14191  005362  E207               	bc	l19909
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;MotionEngine.c: 116: return Move(CW_Distance, Speed_Deg_Sec);
 14195                           ;	Return value of _MoveToAngle is never used
 14196  005364  C112  F100         	movff	MoveToAngle@CW_Distance,?_Move
 14197  005368  C113  F101         	movff	MoveToAngle@CW_Distance+1,?_Move+1
 14198  00536C  C114  F102         	movff	MoveToAngle@CW_Distance+2,?_Move+2
 14199  005370  D014               	goto	L12
 14200  005372                     l19909:
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;MotionEngine.c: 117: else
 14204                           ;MotionEngine.c: 118: return Move(-CCW_Distance, Speed_Deg_Sec);
 14205                           ;	Return value of _MoveToAngle is never used
 14206  005372  C115  F06B         	movff	MoveToAngle@CCW_Distance,?___ftneg
 14207  005376  C116  F06C         	movff	MoveToAngle@CCW_Distance+1,?___ftneg+1
 14208  00537A  C117  F06D         	movff	MoveToAngle@CCW_Distance+2,?___ftneg+2
 14209  00537E  ECED  F03B         	call	___ftneg	;wreg free
 14210  005382  C06B  F10C         	movff	?___ftneg,_MoveToAngle$3894
 14211  005386  C06C  F10D         	movff	?___ftneg+1,_MoveToAngle$3894+1
 14212  00538A  C06D  F10E         	movff	?___ftneg+2,_MoveToAngle$3894+2
 14213                           
 14214                           ;MotionEngine.c: 117: else
 14215                           ;MotionEngine.c: 118: return Move(-CCW_Distance, Speed_Deg_Sec);
 14216                           ;	Return value of _MoveToAngle is never used
 14217  00538E  C10C  F100         	movff	_MoveToAngle$3894,?_Move
 14218  005392  C10D  F101         	movff	_MoveToAngle$3894+1,?_Move+1
 14219  005396  C10E  F102         	movff	_MoveToAngle$3894+2,?_Move+2
 14220  00539A                     L12:
 14221  00539A  C10F  F103         	movff	MoveToAngle@Speed_Deg_Sec,?_Move+3
 14222  00539E  C110  F104         	movff	MoveToAngle@Speed_Deg_Sec+1,?_Move+4
 14223  0053A2  C111  F105         	movff	MoveToAngle@Speed_Deg_Sec+2,?_Move+5
 14224  0053A6  EFB7  F03B         	goto	_Move	;wreg free
 14225  0053AA                     __end_of_MoveToAngle:
 14226                           	opt stack 0
 14227  0053AA                     PL41:
 14228  0053AA  C099  F118         	movff	?___ftsub,_MoveToAngle$3893
 14229  0053AE  C09A  F119         	movff	?___ftsub+1,_MoveToAngle$3893+1
 14230  0053B2  C09B  F11A         	movff	?___ftsub+2,_MoveToAngle$3893+2
 14231  0053B6  C118  F073         	movff	_MoveToAngle$3893,?___ftadd
 14232  0053BA  C119  F074         	movff	_MoveToAngle$3893+1,?___ftadd+1
 14233  0053BE  C11A  F075         	movff	_MoveToAngle$3893+2,?___ftadd+2
 14234  0053C2  0012               	return	
 14235  0053C4                     PL64:
 14236  0053C4  C106  F11E         	movff	MoveToAngle@_DestinationAngle,MoveToAngle@DestinationAngle
 14237  0053C8  C107  F11F         	movff	MoveToAngle@_DestinationAngle+1,MoveToAngle@DestinationAngle+1
 14238  0053CC  C108  F120         	movff	MoveToAngle@_DestinationAngle+2,MoveToAngle@DestinationAngle+2
 14239  0053D0  0012               	return	
 14240                           tblptru	equ	0xFF8
 14241                           tblptrh	equ	0xFF7
 14242                           tblptrl	equ	0xFF6
 14243                           tablat	equ	0xFF5
 14244                           prodh	equ	0xFF4
 14245                           prodl	equ	0xFF3
 14246                           intcon	equ	0xFF2
 14247                           intcon2	equ	0xFF1
 14248                           postinc0	equ	0xFEE
 14249                           wreg	equ	0xFE8
 14250                           postinc1	equ	0xFE6
 14251                           postdec1	equ	0xFE5
 14252                           fsr1h	equ	0xFE2
 14253                           fsr1l	equ	0xFE1
 14254                           indf2	equ	0xFDF
 14255                           postinc2	equ	0xFDE
 14256                           postdec2	equ	0xFDD
 14257                           fsr2h	equ	0xFDA
 14258                           fsr2l	equ	0xFD9
 14259                           status	equ	0xFD8
 14260                           
 14261 ;; *************** function _Move *****************
 14262 ;; Defined at:
 14263 ;;		line 121 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;  Distance_deg    3    0[BANK1 ] unsigned char 
 14266 ;;  _Speed_Deg_S    3    3[BANK1 ] unsigned char 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;		None
 14269 ;; Return value:  Size  Location     Type
 14270 ;;                  1    wreg      unsigned char 
 14271 ;; Registers used:
 14272 ;;		wreg, status,2, status,0, cstack
 14273 ;; Tracked objects:
 14274 ;;		On entry : E/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: FFFFFFF0/0
 14277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14278 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14281 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14282 ;;Total ram usage:        6 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    7
 14285 ;; This function calls:
 14286 ;;		_MoveAdvanced
 14287 ;; This function is called by:
 14288 ;;		_ExtMode
 14289 ;;		_MoveToAngle
 14290 ;;		_RunOrbitProgram
 14291 ;;		_CreateWaypointProgram
 14292 ;;		_RunWaypointProgram
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           	psect	text27
 14297  00776E                     __ptext27:
 14298                           	opt stack 0
 14299  00776E                     _Move:
 14300                           	opt stack 22
 14301                           
 14302                           ;MotionEngine.c: 122: return MoveAdvanced(Distance_deg, _Speed_Deg_Sec, Config.SystemAcc
      +                          eleration);
 14303  00776E  C100  F0B9         	movff	Move@Distance_deg,?_MoveAdvanced
 14304  007772  C101  F0BA         	movff	Move@Distance_deg+1,?_MoveAdvanced+1
 14305  007776  C102  F0BB         	movff	Move@Distance_deg+2,?_MoveAdvanced+2
 14306  00777A  C103  F0BC         	movff	Move@_Speed_Deg_Sec,?_MoveAdvanced+3
 14307  00777E  C104  F0BD         	movff	Move@_Speed_Deg_Sec+1,?_MoveAdvanced+4
 14308  007782  C105  F0BE         	movff	Move@_Speed_Deg_Sec+2,?_MoveAdvanced+5
 14309  007786  C2E6  F0BF         	movff	_Config+16,?_MoveAdvanced+6
 14310  00778A  C2E7  F0C0         	movff	_Config+17,?_MoveAdvanced+7
 14311  00778E  C2E8  F0C1         	movff	_Config+18,?_MoveAdvanced+8
 14312  007792  EF8A  F01E         	goto	_MoveAdvanced	;wreg free
 14313  007796                     __end_of_Move:
 14314                           	opt stack 0
 14315                           tblptru	equ	0xFF8
 14316                           tblptrh	equ	0xFF7
 14317                           tblptrl	equ	0xFF6
 14318                           tablat	equ	0xFF5
 14319                           prodh	equ	0xFF4
 14320                           prodl	equ	0xFF3
 14321                           intcon	equ	0xFF2
 14322                           intcon2	equ	0xFF1
 14323                           postinc0	equ	0xFEE
 14324                           wreg	equ	0xFE8
 14325                           postinc1	equ	0xFE6
 14326                           postdec1	equ	0xFE5
 14327                           fsr1h	equ	0xFE2
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           postdec2	equ	0xFDD
 14332                           fsr2h	equ	0xFDA
 14333                           fsr2l	equ	0xFD9
 14334                           status	equ	0xFD8
 14335                           
 14336 ;; *************** function _MoveAdvanced *****************
 14337 ;; Defined at:
 14338 ;;		line 125 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 14339 ;; Parameters:    Size  Location     Type
 14340 ;;  Distance_deg    3   89[BANK0 ] unsigned char 
 14341 ;;  _Speed_Deg_S    3   92[BANK0 ] unsigned char 
 14342 ;;  _Acceleratio    3   95[BANK0 ] unsigned char 
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;  Distance_cou    4  114[BANK0 ] long 
 14345 ;;  CurrentPosit    4  110[BANK0 ] long 
 14346 ;;  DD              3  130[BANK0 ] long 
 14347 ;;  Accel_Deg_Se    3  127[BANK0 ] long 
 14348 ;;  AccelDist       3  124[BANK0 ] long 
 14349 ;;  Speed_Deg_Se    3  121[BANK0 ] long 
 14350 ;;  AccelTime       3  118[BANK0 ] long 
 14351 ;;  CS              3  104[BANK0 ] long 
 14352 ;;  AV              3  101[BANK0 ] long 
 14353 ;;  DP              3   98[BANK0 ] long 
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  1    wreg      unsigned char 
 14356 ;; Registers used:
 14357 ;;		wreg, status,2, status,0, cstack
 14358 ;; Tracked objects:
 14359 ;;		On entry : C/2
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: FFFFFFF0/0
 14362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14363 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14364 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14366 ;;      Totals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14367 ;;Total ram usage:       47 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    6
 14370 ;; This function calls:
 14371 ;;		___ftneg
 14372 ;;		___ftmul
 14373 ;;		___fttol
 14374 ;;		___ftdiv
 14375 ;;		___ftge
 14376 ;;		___ftsub
 14377 ;; This function is called by:
 14378 ;;		_ExtMode
 14379 ;;		_Move
 14380 ;; This function uses a non-reentrant model
 14381 ;;
 14382                           
 14383                           	psect	text28
 14384  003D14                     __ptext28:
 14385                           	opt stack 0
 14386  003D14                     _MoveAdvanced:
 14387                           	opt stack 23
 14388                           
 14389                           ;MotionEngine.c: 126: if (bMove_InProgress) return -1;
 14390  003D14  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 14391  003D16  BE59               	btfsc	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 14392  003D18  0CFF               	retlw	255
 14393                           
 14394                           ;MotionEngine.c: 128: signed long CurrentPosition_counts;
 14395                           ;MotionEngine.c: 129: double Speed_Deg_Sec;
 14396                           ;MotionEngine.c: 130: double Accel_Deg_Sec_Sec;
 14397                           ;MotionEngine.c: 132: if (_Speed_Deg_Sec < 0) Speed_Deg_Sec = -_Speed_Deg_Sec;
 14398  003D1A  0100               	movlb	0	; () banked
 14399  003D1C  51BE               	movf	(MoveAdvanced@_Speed_Deg_Sec+2)& (0+255),w,b
 14400  003D1E  0A80               	xorlw	128
 14401  003D20  0F80               	addlw	128
 14402  003D22  E105               	bnz	u9885
 14403  003D24  0E00               	movlw	0
 14404  003D26  5DBD               	subwf	(MoveAdvanced@_Speed_Deg_Sec+1)& (0+255),w,b
 14405  003D28  E102               	bnz	u9885
 14406  003D2A  0E00               	movlw	0
 14407  003D2C  5DBC               	subwf	MoveAdvanced@_Speed_Deg_Sec& (0+255),w,b
 14408  003D2E                     u9885:
 14409  003D2E  E20F               	bc	l1152
 14410                           
 14411                           ; BSR set to: 0
 14412  003D30  C0BC  F06B         	movff	MoveAdvanced@_Speed_Deg_Sec,?___ftneg
 14413  003D34  C0BD  F06C         	movff	MoveAdvanced@_Speed_Deg_Sec+1,?___ftneg+1
 14414  003D38  C0BE  F06D         	movff	MoveAdvanced@_Speed_Deg_Sec+2,?___ftneg+2
 14415  003D3C  ECED  F03B         	call	___ftneg	;wreg free
 14416  003D40  C06B  F0D9         	movff	?___ftneg,MoveAdvanced@Speed_Deg_Sec
 14417  003D44  C06C  F0DA         	movff	?___ftneg+1,MoveAdvanced@Speed_Deg_Sec+1
 14418  003D48  C06D  F0DB         	movff	?___ftneg+2,MoveAdvanced@Speed_Deg_Sec+2
 14419  003D4C  D006               	goto	l17523
 14420  003D4E                     l1152:
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;MotionEngine.c: 133: else Speed_Deg_Sec = _Speed_Deg_Sec;
 14424  003D4E  C0BC  F0D9         	movff	MoveAdvanced@_Speed_Deg_Sec,MoveAdvanced@Speed_Deg_Sec
 14425  003D52  C0BD  F0DA         	movff	MoveAdvanced@_Speed_Deg_Sec+1,MoveAdvanced@Speed_Deg_Sec+1
 14426  003D56  C0BE  F0DB         	movff	MoveAdvanced@_Speed_Deg_Sec+2,MoveAdvanced@Speed_Deg_Sec+2
 14427  003D5A                     l17523:
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;MotionEngine.c: 135: if (_Acceleration_Deg_Sec_Sec < 0) Accel_Deg_Sec_Sec = -_Accelerat
      +                          ion_Deg_Sec_Sec;
 14431  003D5A  51C1               	movf	(MoveAdvanced@_Acceleration_Deg_Sec_Sec+2)& (0+255),w,b
 14432  003D5C  0A80               	xorlw	128
 14433  003D5E  0F80               	addlw	128
 14434  003D60  E105               	bnz	u9895
 14435  003D62  0E00               	movlw	0
 14436  003D64  5DC0               	subwf	(MoveAdvanced@_Acceleration_Deg_Sec_Sec+1)& (0+255),w,b
 14437  003D66  E102               	bnz	u9895
 14438  003D68  0E00               	movlw	0
 14439  003D6A  5DBF               	subwf	MoveAdvanced@_Acceleration_Deg_Sec_Sec& (0+255),w,b
 14440  003D6C                     u9895:
 14441  003D6C  E20F               	bc	l1154
 14442                           
 14443                           ; BSR set to: 0
 14444  003D6E  C0BF  F06B         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec,?___ftneg
 14445  003D72  C0C0  F06C         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec+1,?___ftneg+1
 14446  003D76  C0C1  F06D         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec+2,?___ftneg+2
 14447  003D7A  ECED  F03B         	call	___ftneg	;wreg free
 14448  003D7E  C06B  F0DF         	movff	?___ftneg,MoveAdvanced@Accel_Deg_Sec_Sec
 14449  003D82  C06C  F0E0         	movff	?___ftneg+1,MoveAdvanced@Accel_Deg_Sec_Sec+1
 14450  003D86  C06D  F0E1         	movff	?___ftneg+2,MoveAdvanced@Accel_Deg_Sec_Sec+2
 14451  003D8A  D006               	goto	l17527
 14452  003D8C                     l1154:
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;MotionEngine.c: 136: else Accel_Deg_Sec_Sec = _Acceleration_Deg_Sec_Sec;
 14456  003D8C  C0BF  F0DF         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec,MoveAdvanced@Accel_Deg_Sec_Sec
 14457  003D90  C0C0  F0E0         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec+1,MoveAdvanced@Accel_Deg_Sec_Sec+1
 14458  003D94  C0C1  F0E1         	movff	MoveAdvanced@_Acceleration_Deg_Sec_Sec+2,MoveAdvanced@Accel_Deg_Sec_Sec+2
 14459  003D98                     l17527:
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;MotionEngine.c: 138: signed long Distance_counts = (signed long) (Distance_deg * Config
      +                          .Counts_Per_Degree);
 14463  003D98  C0B9  F07A         	movff	MoveAdvanced@Distance_deg,?___ftmul+3
 14464  003D9C  C0BA  F07B         	movff	MoveAdvanced@Distance_deg+1,?___ftmul+4
 14465  003DA0  C0BB  F07C         	movff	MoveAdvanced@Distance_deg+2,?___ftmul+5
 14466  003DA4  C2F2  F077         	movff	_Config+28,?___ftmul
 14467  003DA8  C2F3  F078         	movff	_Config+29,?___ftmul+1
 14468  003DAC  C2F4  F079         	movff	_Config+30,?___ftmul+2
 14469  003DB0  EC52  F031         	call	___ftmul	;wreg free
 14470  003DB4  C077  F0AA         	movff	?___ftmul,?___fttol
 14471  003DB8  C078  F0AB         	movff	?___ftmul+1,?___fttol+1
 14472  003DBC  C079  F0AC         	movff	?___ftmul+2,?___fttol+2
 14473  003DC0  EC3B  F034         	call	___fttol	;wreg free
 14474  003DC4  C0AA  F0D2         	movff	?___fttol,MoveAdvanced@Distance_counts
 14475  003DC8  C0AB  F0D3         	movff	?___fttol+1,MoveAdvanced@Distance_counts+1
 14476  003DCC  C0AC  F0D4         	movff	?___fttol+2,MoveAdvanced@Distance_counts+2
 14477  003DD0  C0AD  F0D5         	movff	?___fttol+3,MoveAdvanced@Distance_counts+3
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;MotionEngine.c: 139: if (Distance_counts == 0) return 0;
 14481  003DD4  51D5               	movf	(MoveAdvanced@Distance_counts+3)& (0+255),w,b
 14482  003DD6  11D2               	iorwf	MoveAdvanced@Distance_counts& (0+255),w,b
 14483  003DD8  11D3               	iorwf	(MoveAdvanced@Distance_counts+1)& (0+255),w,b
 14484  003DDA  11D4               	iorwf	(MoveAdvanced@Distance_counts+2)& (0+255),w,b
 14485  003DDC  E101               	bnz	l1156
 14486  003DDE  0C00               	retlw	0
 14487  003DE0                     l1156:
 14488                           
 14489                           ; BSR set to: 0
 14490                           ;MotionEngine.c: 141: bLock_Motor_Position = 1;
 14491  003DE0  8059               	bsf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 14492                           
 14493                           ;MotionEngine.c: 142: CurrentPosition_counts = Motor_Position;
 14494  003DE2  C1E4  F0CE         	movff	_Motor_Position,MoveAdvanced@CurrentPosition_counts
 14495  003DE6  C1E5  F0CF         	movff	_Motor_Position+1,MoveAdvanced@CurrentPosition_counts+1
 14496  003DEA  C1E6  F0D0         	movff	_Motor_Position+2,MoveAdvanced@CurrentPosition_counts+2
 14497  003DEE  C1E7  F0D1         	movff	_Motor_Position+3,MoveAdvanced@CurrentPosition_counts+3
 14498                           
 14499                           ;MotionEngine.c: 143: bLock_Motor_Position = 0;
 14500  003DF2  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 14501                           
 14502                           ;MotionEngine.c: 145: Move_FinalPosition = CurrentPosition_counts + Distance_counts;
 14503  003DF4  0100               	movlb	0	; () banked
 14504  003DF6  51D2               	movf	MoveAdvanced@Distance_counts& (0+255),w,b
 14505  003DF8  25CE               	addwf	MoveAdvanced@CurrentPosition_counts& (0+255),w,b
 14506  003DFA  0101               	movlb	1	; () banked
 14507  003DFC  6FEC               	movwf	_Move_FinalPosition& (0+255),b
 14508  003DFE  0100               	movlb	0	; () banked
 14509  003E00  51D3               	movf	(MoveAdvanced@Distance_counts+1)& (0+255),w,b
 14510  003E02  21CF               	addwfc	(MoveAdvanced@CurrentPosition_counts+1)& (0+255),w,b
 14511  003E04  0101               	movlb	1	; () banked
 14512  003E06  6FED               	movwf	(_Move_FinalPosition+1)& (0+255),b
 14513  003E08  0100               	movlb	0	; () banked
 14514  003E0A  51D4               	movf	(MoveAdvanced@Distance_counts+2)& (0+255),w,b
 14515  003E0C  21D0               	addwfc	(MoveAdvanced@CurrentPosition_counts+2)& (0+255),w,b
 14516  003E0E  0101               	movlb	1	; () banked
 14517  003E10  6FEE               	movwf	(_Move_FinalPosition+2)& (0+255),b
 14518  003E12  0100               	movlb	0	; () banked
 14519  003E14  51D5               	movf	(MoveAdvanced@Distance_counts+3)& (0+255),w,b
 14520  003E16  21D1               	addwfc	(MoveAdvanced@CurrentPosition_counts+3)& (0+255),w,b
 14521  003E18  0101               	movlb	1	; () banked
 14522  003E1A  6FEF               	movwf	(_Move_FinalPosition+3)& (0+255),b
 14523                           
 14524                           ; BSR set to: 1
 14525                           ;MotionEngine.c: 146: Move_Origin = CurrentPosition_counts;
 14526  003E1C  C0CE  F03D         	movff	MoveAdvanced@CurrentPosition_counts,_Move_Origin
 14527  003E20  C0CF  F03E         	movff	MoveAdvanced@CurrentPosition_counts+1,_Move_Origin+1
 14528  003E24  C0D0  F03F         	movff	MoveAdvanced@CurrentPosition_counts+2,_Move_Origin+2
 14529  003E28  C0D1  F040         	movff	MoveAdvanced@CurrentPosition_counts+3,_Move_Origin+3
 14530                           
 14531                           ;MotionEngine.c: 148: double DD;
 14532                           ;MotionEngine.c: 149: if (Distance_deg < 0) {
 14533  003E2C  0100               	movlb	0	; () banked
 14534  003E2E  51BB               	movf	(MoveAdvanced@Distance_deg+2)& (0+255),w,b
 14535  003E30  0A80               	xorlw	128
 14536  003E32  0F80               	addlw	128
 14537  003E34  E105               	bnz	u9915
 14538  003E36  0E00               	movlw	0
 14539  003E38  5DBA               	subwf	(MoveAdvanced@Distance_deg+1)& (0+255),w,b
 14540  003E3A  E102               	bnz	u9915
 14541  003E3C  0E00               	movlw	0
 14542  003E3E  5DB9               	subwf	MoveAdvanced@Distance_deg& (0+255),w,b
 14543  003E40                     u9915:
 14544  003E40  E211               	bc	l1157
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;MotionEngine.c: 150: DD = -Distance_deg;
 14548  003E42  C0B9  F06B         	movff	MoveAdvanced@Distance_deg,?___ftneg
 14549  003E46  C0BA  F06C         	movff	MoveAdvanced@Distance_deg+1,?___ftneg+1
 14550  003E4A  C0BB  F06D         	movff	MoveAdvanced@Distance_deg+2,?___ftneg+2
 14551  003E4E  ECED  F03B         	call	___ftneg	;wreg free
 14552  003E52  C06B  F0E2         	movff	?___ftneg,MoveAdvanced@DD
 14553  003E56  C06C  F0E3         	movff	?___ftneg+1,MoveAdvanced@DD+1
 14554  003E5A  C06D  F0E4         	movff	?___ftneg+2,MoveAdvanced@DD+2
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;MotionEngine.c: 151: bMove_Neg = 1;
 14558  003E5E  0100               	movlb	(_bMove_Neg/(0+8)) shr (0+8)
 14559  003E60  805A               	bsf	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
 14560                           
 14561                           ;MotionEngine.c: 152: } else {
 14562  003E62  D008               	goto	l17543
 14563  003E64                     l1157:
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;MotionEngine.c: 153: DD = Distance_deg;
 14567  003E64  C0B9  F0E2         	movff	MoveAdvanced@Distance_deg,MoveAdvanced@DD
 14568  003E68  C0BA  F0E3         	movff	MoveAdvanced@Distance_deg+1,MoveAdvanced@DD+1
 14569  003E6C  C0BB  F0E4         	movff	MoveAdvanced@Distance_deg+2,MoveAdvanced@DD+2
 14570                           
 14571                           ;MotionEngine.c: 154: bMove_Neg = 0;
 14572  003E70  0100               	movlb	(_bMove_Neg/(0+8)) shr (0+8)
 14573  003E72  905A               	bcf	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
 14574  003E74                     l17543:
 14575                           
 14576                           ;MotionEngine.c: 155: }
 14577                           ;MotionEngine.c: 157: double AccelTime = Speed_Deg_Sec / Accel_Deg_Sec_Sec;
 14578  003E74  C0D9  F088         	movff	MoveAdvanced@Speed_Deg_Sec,?___ftdiv
 14579  003E78  C0DA  F089         	movff	MoveAdvanced@Speed_Deg_Sec+1,?___ftdiv+1
 14580  003E7C  C0DB  F08A         	movff	MoveAdvanced@Speed_Deg_Sec+2,?___ftdiv+2
 14581  003E80  C0DF  F08B         	movff	MoveAdvanced@Accel_Deg_Sec_Sec,?___ftdiv+3
 14582  003E84  C0E0  F08C         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+1,?___ftdiv+4
 14583  003E88  C0E1  F08D         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+2,?___ftdiv+5
 14584  003E8C  ECD0  F031         	call	___ftdiv	;wreg free
 14585  003E90  C088  F0D6         	movff	?___ftdiv,MoveAdvanced@AccelTime
 14586  003E94  C089  F0D7         	movff	?___ftdiv+1,MoveAdvanced@AccelTime+1
 14587  003E98  C08A  F0D8         	movff	?___ftdiv+2,MoveAdvanced@AccelTime+2
 14588                           
 14589                           ;MotionEngine.c: 158: double AccelDist = (0.5 * Accel_Deg_Sec_Sec * AccelTime * AccelTim
      +                          e);
 14590  003E9C  C0D6  F07A         	movff	MoveAdvanced@AccelTime,?___ftmul+3
 14591  003EA0  C0D7  F07B         	movff	MoveAdvanced@AccelTime+1,?___ftmul+4
 14592  003EA4  C0D8  F07C         	movff	MoveAdvanced@AccelTime+2,?___ftmul+5
 14593  003EA8  C0DF  F077         	movff	MoveAdvanced@Accel_Deg_Sec_Sec,?___ftmul
 14594  003EAC  C0E0  F078         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+1,?___ftmul+1
 14595  003EB0  C0E1  F079         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+2,?___ftmul+2
 14596  003EB4  EC52  F031         	call	___ftmul	;wreg free
 14597  003EB8  C077  F0E5         	movff	?___ftmul,_MoveAdvanced$3895
 14598  003EBC  C078  F0E6         	movff	?___ftmul+1,_MoveAdvanced$3895+1
 14599  003EC0  C079  F0E7         	movff	?___ftmul+2,_MoveAdvanced$3895+2
 14600                           
 14601                           ;MotionEngine.c: 158: double AccelDist = (0.5 * Accel_Deg_Sec_Sec * AccelTime * AccelTim
      +                          e);
 14602  003EC4  C0D6  F07A         	movff	MoveAdvanced@AccelTime,?___ftmul+3
 14603  003EC8  C0D7  F07B         	movff	MoveAdvanced@AccelTime+1,?___ftmul+4
 14604  003ECC  C0D8  F07C         	movff	MoveAdvanced@AccelTime+2,?___ftmul+5
 14605  003ED0  C0E5  F077         	movff	_MoveAdvanced$3895,?___ftmul
 14606  003ED4  C0E6  F078         	movff	_MoveAdvanced$3895+1,?___ftmul+1
 14607  003ED8  C0E7  F079         	movff	_MoveAdvanced$3895+2,?___ftmul+2
 14608  003EDC  EC52  F031         	call	___ftmul	;wreg free
 14609  003EE0  C077  F0CB         	movff	?___ftmul,_MoveAdvanced$3896
 14610  003EE4  C078  F0CC         	movff	?___ftmul+1,_MoveAdvanced$3896+1
 14611  003EE8  C079  F0CD         	movff	?___ftmul+2,_MoveAdvanced$3896+2
 14612                           
 14613                           ;MotionEngine.c: 158: double AccelDist = (0.5 * Accel_Deg_Sec_Sec * AccelTime * AccelTim
      +                          e);
 14614  003EEC  C0CB  F077         	movff	_MoveAdvanced$3896,?___ftmul
 14615  003EF0  C0CC  F078         	movff	_MoveAdvanced$3896+1,?___ftmul+1
 14616  003EF4  C0CD  F079         	movff	_MoveAdvanced$3896+2,?___ftmul+2
 14617  003EF8  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 14618  003EFA  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 14619  003EFC  0E3F               	movlw	63
 14620  003EFE  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 14621  003F00  EC52  F031         	call	___ftmul	;wreg free
 14622  003F04  C077  F0DC         	movff	?___ftmul,MoveAdvanced@AccelDist
 14623  003F08  C078  F0DD         	movff	?___ftmul+1,MoveAdvanced@AccelDist+1
 14624  003F0C  C079  F0DE         	movff	?___ftmul+2,MoveAdvanced@AccelDist+2
 14625                           
 14626                           ;MotionEngine.c: 160: if ((AccelDist * 2) > DD) {
 14627  003F10  C0E2  F088         	movff	MoveAdvanced@DD,?___ftge
 14628  003F14  C0E3  F089         	movff	MoveAdvanced@DD+1,?___ftge+1
 14629  003F18  C0E4  F08A         	movff	MoveAdvanced@DD+2,?___ftge+2
 14630  003F1C  6B7A               	clrf	(?___ftmul+3)& (0+255),b
 14631  003F1E  6B7B               	clrf	(?___ftmul+4)& (0+255),b
 14632  003F20  0E40               	movlw	64
 14633  003F22  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 14634  003F24  C0DC  F077         	movff	MoveAdvanced@AccelDist,?___ftmul
 14635  003F28  C0DD  F078         	movff	MoveAdvanced@AccelDist+1,?___ftmul+1
 14636  003F2C  C0DE  F079         	movff	MoveAdvanced@AccelDist+2,?___ftmul+2
 14637  003F30  EC52  F031         	call	___ftmul	;wreg free
 14638  003F34  C077  F08B         	movff	?___ftmul,?___ftge+3
 14639  003F38  C078  F08C         	movff	?___ftmul+1,?___ftge+4
 14640  003F3C  C079  F08D         	movff	?___ftmul+2,?___ftge+5
 14641  003F40  ECB1  F037         	call	___ftge	;wreg free
 14642  003F44  E212               	bc	l1159
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;MotionEngine.c: 161: AccelDist = DD / 2;
 14646  003F46  C0E2  F088         	movff	MoveAdvanced@DD,?___ftdiv
 14647  003F4A  C0E3  F089         	movff	MoveAdvanced@DD+1,?___ftdiv+1
 14648  003F4E  C0E4  F08A         	movff	MoveAdvanced@DD+2,?___ftdiv+2
 14649  003F52  6B8B               	clrf	(?___ftdiv+3)& (0+255),b
 14650  003F54  6B8C               	clrf	(?___ftdiv+4)& (0+255),b
 14651  003F56  0E40               	movlw	64
 14652  003F58  6F8D               	movwf	(?___ftdiv+5)& (0+255),b
 14653  003F5A  ECD0  F031         	call	___ftdiv	;wreg free
 14654  003F5E  C088  F0DC         	movff	?___ftdiv,MoveAdvanced@AccelDist
 14655  003F62  C089  F0DD         	movff	?___ftdiv+1,MoveAdvanced@AccelDist+1
 14656  003F66  C08A  F0DE         	movff	?___ftdiv+2,MoveAdvanced@AccelDist+2
 14657  003F6A                     l1159:
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;MotionEngine.c: 162: }
 14661                           ;MotionEngine.c: 164: double DP = (DD - AccelDist) * Config.Counts_Per_Degree;
 14662  003F6A  C0DC  F09C         	movff	MoveAdvanced@AccelDist,?___ftsub+3
 14663  003F6E  C0DD  F09D         	movff	MoveAdvanced@AccelDist+1,?___ftsub+4
 14664  003F72  C0DE  F09E         	movff	MoveAdvanced@AccelDist+2,?___ftsub+5
 14665  003F76  C0E2  F099         	movff	MoveAdvanced@DD,?___ftsub
 14666  003F7A  C0E3  F09A         	movff	MoveAdvanced@DD+1,?___ftsub+1
 14667  003F7E  C0E4  F09B         	movff	MoveAdvanced@DD+2,?___ftsub+2
 14668  003F82  ECDE  F03A         	call	___ftsub	;wreg free
 14669  003F86  C099  F077         	movff	?___ftsub,?___ftmul
 14670  003F8A  C09A  F078         	movff	?___ftsub+1,?___ftmul+1
 14671  003F8E  C09B  F079         	movff	?___ftsub+2,?___ftmul+2
 14672  003F92  C2F2  F07A         	movff	_Config+28,?___ftmul+3
 14673  003F96  C2F3  F07B         	movff	_Config+29,?___ftmul+4
 14674  003F9A  C2F4  F07C         	movff	_Config+30,?___ftmul+5
 14675  003F9E  EC52  F031         	call	___ftmul	;wreg free
 14676  003FA2  C077  F0C2         	movff	?___ftmul,MoveAdvanced@DP
 14677  003FA6  C078  F0C3         	movff	?___ftmul+1,MoveAdvanced@DP+1
 14678  003FAA  C079  F0C4         	movff	?___ftmul+2,MoveAdvanced@DP+2
 14679                           
 14680                           ;MotionEngine.c: 165: Move_DecelPosition = (unsigned long) DP;
 14681  003FAE  C0C2  F0AA         	movff	MoveAdvanced@DP,?___fttol
 14682  003FB2  C0C3  F0AB         	movff	MoveAdvanced@DP+1,?___fttol+1
 14683  003FB6  C0C4  F0AC         	movff	MoveAdvanced@DP+2,?___fttol+2
 14684  003FBA  EC3B  F034         	call	___fttol	;wreg free
 14685  003FBE  C0AA  F1E8         	movff	?___fttol,_Move_DecelPosition
 14686  003FC2  C0AB  F1E9         	movff	?___fttol+1,_Move_DecelPosition+1
 14687  003FC6  C0AC  F1EA         	movff	?___fttol+2,_Move_DecelPosition+2
 14688  003FCA  C0AD  F1EB         	movff	?___fttol+3,_Move_DecelPosition+3
 14689                           
 14690                           ;MotionEngine.c: 167: double AV = Accel_Deg_Sec_Sec * Config.Counts_Per_Degree * 67.1088
      +                          640;
 14691  003FCE  C0DF  F07A         	movff	MoveAdvanced@Accel_Deg_Sec_Sec,?___ftmul+3
 14692  003FD2  C0E0  F07B         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+1,?___ftmul+4
 14693  003FD6  C0E1  F07C         	movff	MoveAdvanced@Accel_Deg_Sec_Sec+2,?___ftmul+5
 14694  003FDA  C2F2  F077         	movff	_Config+28,?___ftmul
 14695  003FDE  C2F3  F078         	movff	_Config+29,?___ftmul+1
 14696  003FE2  C2F4  F079         	movff	_Config+30,?___ftmul+2
 14697  003FE6  EC52  F031         	call	___ftmul	;wreg free
 14698                           
 14699                           ;MotionEngine.c: 167: double AV = Accel_Deg_Sec_Sec * Config.Counts_Per_Degree * 67.1088
      +                          640;
 14700  003FEA  D850               	call	PL39	;call to abstracted procedure
 14701  003FEC  0E38               	movlw	56
 14702  003FEE  6F7A               	movwf	(?___ftmul+3)& (0+255),b
 14703  003FF0  0E86               	movlw	134
 14704  003FF2  6F7B               	movwf	(?___ftmul+4)& (0+255),b
 14705  003FF4  0E42               	movlw	66
 14706  003FF6  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 14707  003FF8  EC52  F031         	call	___ftmul	;wreg free
 14708  003FFC  C077  F0C5         	movff	?___ftmul,MoveAdvanced@AV
 14709  004000  C078  F0C6         	movff	?___ftmul+1,MoveAdvanced@AV+1
 14710  004004  C079  F0C7         	movff	?___ftmul+2,MoveAdvanced@AV+2
 14711                           
 14712                           ;MotionEngine.c: 168: Move_AccelValueQ24 = (unsigned long) AV;
 14713  004008  C0C5  F0AA         	movff	MoveAdvanced@AV,?___fttol
 14714  00400C  C0C6  F0AB         	movff	MoveAdvanced@AV+1,?___fttol+1
 14715  004010  C0C7  F0AC         	movff	MoveAdvanced@AV+2,?___fttol+2
 14716  004014  EC3B  F034         	call	___fttol	;wreg free
 14717  004018  C0AA  F035         	movff	?___fttol,_Move_AccelValueQ24
 14718  00401C  C0AB  F036         	movff	?___fttol+1,_Move_AccelValueQ24+1
 14719  004020  C0AC  F037         	movff	?___fttol+2,_Move_AccelValueQ24+2
 14720  004024  C0AD  F038         	movff	?___fttol+3,_Move_AccelValueQ24+3
 14721                           
 14722                           ;MotionEngine.c: 170: double CS = Speed_Deg_Sec * Config.Counts_Per_Degree * 33554.4320;
 14723  004028  C0D9  F07A         	movff	MoveAdvanced@Speed_Deg_Sec,?___ftmul+3
 14724  00402C  C0DA  F07B         	movff	MoveAdvanced@Speed_Deg_Sec+1,?___ftmul+4
 14725  004030  C0DB  F07C         	movff	MoveAdvanced@Speed_Deg_Sec+2,?___ftmul+5
 14726  004034  C2F2  F077         	movff	_Config+28,?___ftmul
 14727  004038  C2F3  F078         	movff	_Config+29,?___ftmul+1
 14728  00403C  C2F4  F079         	movff	_Config+30,?___ftmul+2
 14729  004040  EC52  F031         	call	___ftmul	;wreg free
 14730                           
 14731                           ;MotionEngine.c: 170: double CS = Speed_Deg_Sec * Config.Counts_Per_Degree * 33554.4320;
 14732  004044  D823               	call	PL39	;call to abstracted procedure
 14733  004046  0E12               	movlw	18
 14734  004048  6F7A               	movwf	(?___ftmul+3)& (0+255),b
 14735  00404A  0E03               	movlw	3
 14736  00404C  6F7B               	movwf	(?___ftmul+4)& (0+255),b
 14737  00404E  0E47               	movlw	71
 14738  004050  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 14739  004052  EC52  F031         	call	___ftmul	;wreg free
 14740  004056  C077  F0C8         	movff	?___ftmul,MoveAdvanced@CS
 14741  00405A  C078  F0C9         	movff	?___ftmul+1,MoveAdvanced@CS+1
 14742  00405E  C079  F0CA         	movff	?___ftmul+2,MoveAdvanced@CS+2
 14743                           
 14744                           ;MotionEngine.c: 171: Move_CoastSpeedQ24 = (unsigned long) CS;
 14745  004062  C0C8  F0AA         	movff	MoveAdvanced@CS,?___fttol
 14746  004066  C0C9  F0AB         	movff	MoveAdvanced@CS+1,?___fttol+1
 14747  00406A  C0CA  F0AC         	movff	MoveAdvanced@CS+2,?___fttol+2
 14748  00406E  EC3B  F034         	call	___fttol	;wreg free
 14749  004072  C0AA  F039         	movff	?___fttol,_Move_CoastSpeedQ24
 14750  004076  C0AB  F03A         	movff	?___fttol+1,_Move_CoastSpeedQ24+1
 14751  00407A  C0AC  F03B         	movff	?___fttol+2,_Move_CoastSpeedQ24+2
 14752  00407E  C0AD  F03C         	movff	?___fttol+3,_Move_CoastSpeedQ24+3
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;MotionEngine.c: 173: Move_shifted_position.ul = 0;
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;MotionEngine.c: 174: Move_speedQ24 = 0;
 14759                           
 14760                           ; BSR set to: 1
 14761                           ;MotionEngine.c: 175: Move_position[0].ul = 0;
 14762                           
 14763                           ; BSR set to: 4
 14764                           ;MotionEngine.c: 176: Move_position[1].ul = 0;
 14765  004082  EC36  F01E         	call	PL5	;call to abstracted procedure
 14766                           
 14767                           ; BSR set to: 4
 14768                           ;MotionEngine.c: 178: bMove_InProgress = 1;
 14769  004086  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 14770  004088  8E59               	bsf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 14771  00408A  0C00               	retlw	0
 14772  00408C                     __end_of_MoveAdvanced:
 14773                           	opt stack 0
 14774  00408C                     PL39:
 14775  00408C  C077  F0E5         	movff	?___ftmul,_MoveAdvanced$3895
 14776  004090  C078  F0E6         	movff	?___ftmul+1,_MoveAdvanced$3895+1
 14777  004094  C079  F0E7         	movff	?___ftmul+2,_MoveAdvanced$3895+2
 14778  004098  C0E5  F077         	movff	_MoveAdvanced$3895,?___ftmul
 14779  00409C  C0E6  F078         	movff	_MoveAdvanced$3895+1,?___ftmul+1
 14780  0040A0  C0E7  F079         	movff	_MoveAdvanced$3895+2,?___ftmul+2
 14781  0040A4  0012               	return	
 14782                           tblptru	equ	0xFF8
 14783                           tblptrh	equ	0xFF7
 14784                           tblptrl	equ	0xFF6
 14785                           tablat	equ	0xFF5
 14786                           prodh	equ	0xFF4
 14787                           prodl	equ	0xFF3
 14788                           intcon	equ	0xFF2
 14789                           intcon2	equ	0xFF1
 14790                           postinc0	equ	0xFEE
 14791                           wreg	equ	0xFE8
 14792                           postinc1	equ	0xFE6
 14793                           postdec1	equ	0xFE5
 14794                           fsr1h	equ	0xFE2
 14795                           fsr1l	equ	0xFE1
 14796                           indf2	equ	0xFDF
 14797                           postinc2	equ	0xFDE
 14798                           postdec2	equ	0xFDD
 14799                           fsr2h	equ	0xFDA
 14800                           fsr2l	equ	0xFD9
 14801                           status	equ	0xFD8
 14802                           
 14803 ;; *************** function _GetCurrentAngle *****************
 14804 ;; Defined at:
 14805 ;;		line 60 in file "Z:\CineFlux\Dropbox\Orbit\MotionEngine.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;		None
 14808 ;; Auto vars:     Size  Location     Type
 14809 ;;  MotorPos        3   71[BANK0 ] unsigned char 
 14810 ;; Return value:  Size  Location     Type
 14811 ;;                  3   68[BANK0 ] unsigned char 
 14812 ;; Registers used:
 14813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14814 ;; Tracked objects:
 14815 ;;		On entry : 0/1
 14816 ;;		On exit  : F/0
 14817 ;;		Unchanged: FFFFFFF0/0
 14818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14819 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;Total ram usage:        6 bytes
 14824 ;; Hardware stack levels used:    1
 14825 ;; Hardware stack levels required when called:    7
 14826 ;; This function calls:
 14827 ;;		___altoft
 14828 ;;		___asftmul
 14829 ;;		___ftge
 14830 ;;		___asftsub
 14831 ;;		___asftadd
 14832 ;; This function is called by:
 14833 ;;		_MoveToAngle
 14834 ;;		_CreateOrbitProgram
 14835 ;;		_CreateWaypointProgram
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           	psect	text29
 14840  006562                     __ptext29:
 14841                           	opt stack 0
 14842  006562                     _GetCurrentAngle:
 14843                           	opt stack 0
 14844                           
 14845                           ;MotionEngine.c: 61: double MotorPos;
 14846                           ;MotionEngine.c: 63: bLock_Motor_Position = 1;
 14847                           
 14848                           ;MotionEngine.c: 64: MotorPos = Motor_Position;
 14849  006562  EC26  F038         	call	PL11	;call to abstracted procedure
 14850  006566  EC49  F037         	call	___altoft	;wreg free
 14851  00656A  C073  F0A7         	movff	?___altoft,GetCurrentAngle@MotorPos
 14852  00656E  C074  F0A8         	movff	?___altoft+1,GetCurrentAngle@MotorPos+1
 14853  006572  C075  F0A9         	movff	?___altoft+2,GetCurrentAngle@MotorPos+2
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;MotionEngine.c: 65: bLock_Motor_Position = 0;
 14857  006576  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 14858                           
 14859                           ;MotionEngine.c: 67: MotorPos *= Config.Degrees_Per_Count;
 14860  006578  0100               	movlb	0	; () banked
 14861  00657A  0E00               	movlw	high GetCurrentAngle@MotorPos
 14862  00657C  6F89               	movwf	(?___asftmul+1)& (0+255),b
 14863  00657E  0EA7               	movlw	low GetCurrentAngle@MotorPos
 14864  006580  6F88               	movwf	?___asftmul& (0+255),b
 14865  006582  C2F5  F08A         	movff	_Config+31,?___asftmul+2
 14866  006586  C2F6  F08B         	movff	_Config+32,?___asftmul+3
 14867  00658A  C2F7  F08C         	movff	_Config+33,?___asftmul+4
 14868  00658E  ECF9  F039         	call	___asftmul	;wreg free
 14869                           
 14870                           ; BSR set to: 0
 14871                           ;MotionEngine.c: 69: if (MotorPos > 0) {
 14872  006592  0E00               	movlw	0
 14873  006594  6B88               	clrf	?___ftge& (0+255),b
 14874  006596  6B89               	clrf	(?___ftge+1)& (0+255),b
 14875  006598  6B8A               	clrf	(?___ftge+2)& (0+255),b
 14876  00659A  C0A7  F08B         	movff	GetCurrentAngle@MotorPos,?___ftge+3
 14877  00659E  C0A8  F08C         	movff	GetCurrentAngle@MotorPos+1,?___ftge+4
 14878  0065A2  C0A9  F08D         	movff	GetCurrentAngle@MotorPos+2,?___ftge+5
 14879  0065A6  ECB1  F037         	call	___ftge	;wreg free
 14880  0065AA  E30C               	bnc	l19865
 14881  0065AC  D020               	goto	l19869
 14882  0065AE                     l19863:
 14883                           
 14884                           ; BSR set to: 0
 14885  0065AE  0E00               	movlw	high GetCurrentAngle@MotorPos
 14886  0065B0  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 14887  0065B2  0EA7               	movlw	low GetCurrentAngle@MotorPos
 14888  0065B4  6F9F               	movwf	?___asftsub& (0+255),b
 14889  0065B6  6BA1               	clrf	(?___asftsub+2)& (0+255),b
 14890  0065B8  0EB4               	movlw	180
 14891  0065BA  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 14892  0065BC  0E43               	movlw	67
 14893  0065BE  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 14894  0065C0  EC17  F03A         	call	___asftsub	;wreg free
 14895  0065C4                     l19865:
 14896                           
 14897                           ; BSR set to: 0
 14898  0065C4  6B88               	clrf	?___ftge& (0+255),b
 14899  0065C6  0EB4               	movlw	180
 14900  0065C8  6F89               	movwf	(?___ftge+1)& (0+255),b
 14901  0065CA  0E43               	movlw	67
 14902  0065CC  6F8A               	movwf	(?___ftge+2)& (0+255),b
 14903  0065CE  C0A7  F08B         	movff	GetCurrentAngle@MotorPos,?___ftge+3
 14904  0065D2  C0A8  F08C         	movff	GetCurrentAngle@MotorPos+1,?___ftge+4
 14905  0065D6  C0A9  F08D         	movff	GetCurrentAngle@MotorPos+2,?___ftge+5
 14906  0065DA  ECB1  F037         	call	___ftge	;wreg free
 14907  0065DE  E21B               	bc	l19873
 14908  0065E0  D7E6               	goto	l19863
 14909  0065E2                     l19867:
 14910                           
 14911                           ; BSR set to: 0
 14912  0065E2  0E00               	movlw	high GetCurrentAngle@MotorPos
 14913  0065E4  6F89               	movwf	(?___asftadd+1)& (0+255),b
 14914  0065E6  0EA7               	movlw	low GetCurrentAngle@MotorPos
 14915  0065E8  D81D               	call	PL36	;call to abstracted procedure
 14916  0065EA  EC53  F03A         	call	___asftadd	;wreg free
 14917  0065EE                     l19869:
 14918                           
 14919                           ; BSR set to: 0
 14920  0065EE  C0A7  F088         	movff	GetCurrentAngle@MotorPos,?___ftge
 14921  0065F2  C0A8  F089         	movff	GetCurrentAngle@MotorPos+1,?___ftge+1
 14922  0065F6  C0A9  F08A         	movff	GetCurrentAngle@MotorPos+2,?___ftge+2
 14923  0065FA  6B8B               	clrf	(?___ftge+3)& (0+255),b
 14924  0065FC  0EB4               	movlw	180
 14925  0065FE  6F8C               	movwf	(?___ftge+4)& (0+255),b
 14926  006600  0EC3               	movlw	195
 14927  006602  6F8D               	movwf	(?___ftge+5)& (0+255),b
 14928  006604  ECB1  F037         	call	___ftge	;wreg free
 14929  006608  E3EC               	bnc	l19867
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;MotionEngine.c: 73: MotorPos += 360;
 14933  00660A  0E00               	movlw	high GetCurrentAngle@MotorPos
 14934  00660C  6F89               	movwf	(?___asftadd+1)& (0+255),b
 14935  00660E  0EA7               	movlw	low GetCurrentAngle@MotorPos
 14936  006610  D809               	call	PL36	;call to abstracted procedure
 14937  006612  EC53  F03A         	call	___asftadd	;wreg free
 14938  006616                     l19873:
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;MotionEngine.c: 74: }
 14942                           ;MotionEngine.c: 75: return MotorPos;
 14943  006616  C0A7  F0A4         	movff	GetCurrentAngle@MotorPos,?_GetCurrentAngle
 14944  00661A  C0A8  F0A5         	movff	GetCurrentAngle@MotorPos+1,?_GetCurrentAngle+1
 14945  00661E  C0A9  F0A6         	movff	GetCurrentAngle@MotorPos+2,?_GetCurrentAngle+2
 14946                           
 14947                           ; BSR set to: 0
 14948  006622  0012               	return	
 14949  006624                     __end_of_GetCurrentAngle:
 14950                           	opt stack 0
 14951  006624                     PL36:
 14952  006624  6F88               	movwf	?___asftadd& (0+255),b
 14953  006626  6B8A               	clrf	(?___asftadd+2)& (0+255),b
 14954  006628  0EB4               	movlw	180
 14955  00662A  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 14956  00662C  0E43               	movlw	67
 14957  00662E  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 14958  006630  0C43               	retlw	67
 14959                           tblptru	equ	0xFF8
 14960                           tblptrh	equ	0xFF7
 14961                           tblptrl	equ	0xFF6
 14962                           tablat	equ	0xFF5
 14963                           prodh	equ	0xFF4
 14964                           prodl	equ	0xFF3
 14965                           intcon	equ	0xFF2
 14966                           intcon2	equ	0xFF1
 14967                           postinc0	equ	0xFEE
 14968                           wreg	equ	0xFE8
 14969                           postinc1	equ	0xFE6
 14970                           postdec1	equ	0xFE5
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           fsr2h	equ	0xFDA
 14977                           fsr2l	equ	0xFD9
 14978                           status	equ	0xFD8
 14979                           
 14980 ;; *************** function _DisplayChoices *****************
 14981 ;; Defined at:
 14982 ;;		line 233 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;  Menu            2   47[BANK0 ] PTR PTR const unsigned c
 14985 ;;		 -> CreateWaypointProgram@CommandMenu(4), CreateWaypointProgram@DirectionMenu(4), CreateOrbitProgram@CommandMenu(4),
      + CreateOrbitProgram@EndModeMenu(6), 
 14986 ;;		 -> CreateOrbitProgram@SpeedModeMenu(6), CreateOrbitProgram@DirectionMenu(4), 
 14987 ;;  ItemCount       1   49[BANK0 ] unsigned char 
 14988 ;;  Prompt          2   50[BANK0 ] PTR const unsigned char 
 14989 ;;		 -> STR_87(9), STR_84(12), STR_43(9), STR_39(14), 
 14990 ;;		 -> STR_35(14), STR_29(14), STR_28(14), STR_25(19), 
 14991 ;;		 -> STR_24(21), 
 14992 ;;  Initial         1   52[BANK0 ] unsigned char 
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;  SelectedItem    1   54[BANK0 ] unsigned char 
 14995 ;;  ret             1   53[BANK0 ] char 
 14996 ;; Return value:  Size  Location     Type
 14997 ;;                  1    wreg      char 
 14998 ;; Registers used:
 14999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 15000 ;; Tracked objects:
 15001 ;;		On entry : F/0
 15002 ;;		On exit  : F/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15009 ;;Total ram usage:        8 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; Hardware stack levels required when called:    8
 15012 ;; This function calls:
 15013 ;;		_LCD_ClearDisplay
 15014 ;;		_LCD_PrintString
 15015 ;;		_LCD_SetPosition
 15016 ;;		_LCD_PrintChar
 15017 ;;		_GetInput
 15018 ;; This function is called by:
 15019 ;;		_CreateOrbitProgram
 15020 ;;		_CreateWaypointProgram
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text30
 15025  006A50                     __ptext30:
 15026                           	opt stack 0
 15027  006A50                     _DisplayChoices:
 15028                           	opt stack 21
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;UserInterface.c: 234: char SelectedItem = 0;
 15032                           
 15033                           ; BSR set to: 0
 15034  006A50  6B96               	clrf	DisplayChoices@SelectedItem& (0+255),b
 15035                           
 15036                           ;UserInterface.c: 236: SelectedItem = Initial;
 15037  006A52  C094  F096         	movff	DisplayChoices@Initial,DisplayChoices@SelectedItem
 15038  006A56                     l19915:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;UserInterface.c: 238: LCD_ClearDisplay();
 15042  006A56  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;UserInterface.c: 239: LCD_PrintString(Prompt);
 15046  006A5A  C092  F076         	movff	DisplayChoices@Prompt,?_LCD_PrintString
 15047  006A5E  C093  F077         	movff	DisplayChoices@Prompt+1,?_LCD_PrintString+1
 15048  006A62  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;UserInterface.c: 240: LCD_SetPosition(1, 0);
 15052  006A66  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 15053  006A68  0E01               	movlw	1
 15054  006A6A  ECDF  F036         	call	_LCD_SetPosition
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;UserInterface.c: 241: LCD_PrintChar('*');
 15058  006A6E  0E2A               	movlw	42
 15059  006A70  EC6A  F035         	call	_LCD_PrintChar
 15060                           
 15061                           ; BSR set to: 0
 15062                           ;UserInterface.c: 242: LCD_PrintString(Menu[SelectedItem]);
 15063  006A74  5196               	movf	DisplayChoices@SelectedItem& (0+255),w,b
 15064  006A76  0D02               	mullw	2
 15065  006A78  50F3               	movf	prodl,w,c
 15066  006A7A  258F               	addwf	DisplayChoices@Menu& (0+255),w,b
 15067  006A7C  6ED9               	movwf	fsr2l,c
 15068  006A7E  0E00               	movlw	0
 15069  006A80  2190               	addwfc	(DisplayChoices@Menu+1)& (0+255),w,b
 15070  006A82  6EDA               	movwf	fsr2h,c
 15071  006A84  CFDE F076          	movff	postinc2,?_LCD_PrintString
 15072  006A88  CFDD F077          	movff	postdec2,?_LCD_PrintString+1
 15073  006A8C  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;UserInterface.c: 244: ret = GetInput();
 15077  006A90  EC39  F03B         	call	_GetInput	;wreg free
 15078  006A94  6F95               	movwf	DisplayChoices@ret& (0+255),b
 15079                           
 15080                           ;UserInterface.c: 246: switch (ret) {
 15081  006A96  D012               	goto	l19951
 15082  006A98                     l19927:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;UserInterface.c: 248: return (SelectedItem);
 15086  006A98  5196               	movf	DisplayChoices@SelectedItem& (0+255),w,b
 15087  006A9A  0012               	return	
 15088  006A9C                     l19931:
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;UserInterface.c: 250: return (-1);
 15092  006A9C  0CFF               	retlw	255
 15093  006A9E                     l19935:
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;UserInterface.c: 252: return (-2);
 15097  006A9E  0CFE               	retlw	254
 15098  006AA0                     l19939:
 15099                           
 15100                           ; BSR set to: 0
 15101                           ;UserInterface.c: 254: if (SelectedItem == ItemCount) SelectedItem = ItemCount;
 15102  006AA0  5191               	movf	DisplayChoices@ItemCount& (0+255),w,b
 15103  006AA2  6396               	cpfseq	DisplayChoices@SelectedItem& (0+255),b
 15104  006AA4  D003               	goto	l19943
 15105                           
 15106                           ; BSR set to: 0
 15107  006AA6  C091  F096         	movff	DisplayChoices@ItemCount,DisplayChoices@SelectedItem
 15108  006AAA  D7D5               	goto	l19915
 15109  006AAC                     l19943:
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;UserInterface.c: 255: else SelectedItem++;
 15113  006AAC  2B96               	incf	DisplayChoices@SelectedItem& (0+255),f,b
 15114  006AAE  D7D3               	goto	l19915
 15115  006AB0                     l2156:
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;UserInterface.c: 258: if (SelectedItem == 0) SelectedItem = 0;
 15119  006AB0  6796               	tstfsz	DisplayChoices@SelectedItem& (0+255),b
 15120  006AB2  D002               	goto	l19947
 15121                           
 15122                           ; BSR set to: 0
 15123  006AB4  6B96               	clrf	DisplayChoices@SelectedItem& (0+255),b
 15124  006AB6  D7CF               	goto	l19915
 15125  006AB8                     l19947:
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;UserInterface.c: 259: else SelectedItem--;
 15129  006AB8  0796               	decf	DisplayChoices@SelectedItem& (0+255),f,b
 15130  006ABA  D7CD               	goto	l19915
 15131  006ABC                     l19951:
 15132                           
 15133                           ; BSR set to: 0
 15134  006ABC  5195               	movf	DisplayChoices@ret& (0+255),w,b
 15135                           
 15136                           ; Switch size 1, requested type "space"
 15137                           ; Number of cases is 5, Range of values is 1 to 5
 15138                           ; switch strategies available:
 15139                           ; Name         Instructions Cycles
 15140                           ; simple_byte           16     9 (average)
 15141                           ;	Chosen strategy is simple_byte
 15142  006ABE  0A01               	xorlw	1	; case 1
 15143  006AC0  E0EB               	bz	l19927
 15144  006AC2  0A03               	xorlw	3	; case 2
 15145  006AC4  E0EB               	bz	l19931
 15146  006AC6  0A01               	xorlw	1	; case 3
 15147  006AC8  E0EA               	bz	l19935
 15148  006ACA  0A07               	xorlw	7	; case 4
 15149  006ACC  E0E9               	bz	l19939
 15150  006ACE  0A01               	xorlw	1	; case 5
 15151  006AD0  E0EF               	bz	l2156
 15152  006AD2  D7C1               	goto	l19915
 15153  006AD4                     __end_of_DisplayChoices:
 15154                           	opt stack 0
 15155                           tblptru	equ	0xFF8
 15156                           tblptrh	equ	0xFF7
 15157                           tblptrl	equ	0xFF6
 15158                           tablat	equ	0xFF5
 15159                           prodh	equ	0xFF4
 15160                           prodl	equ	0xFF3
 15161                           intcon	equ	0xFF2
 15162                           intcon2	equ	0xFF1
 15163                           postinc0	equ	0xFEE
 15164                           wreg	equ	0xFE8
 15165                           postinc1	equ	0xFE6
 15166                           postdec1	equ	0xFE5
 15167                           fsr1h	equ	0xFE2
 15168                           fsr1l	equ	0xFE1
 15169                           indf2	equ	0xFDF
 15170                           postinc2	equ	0xFDE
 15171                           postdec2	equ	0xFDD
 15172                           fsr2h	equ	0xFDA
 15173                           fsr2l	equ	0xFD9
 15174                           status	equ	0xFD8
 15175                           
 15176 ;; *************** function _GetFloat *****************
 15177 ;; Defined at:
 15178 ;;		line 94 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 15179 ;; Parameters:    Size  Location     Type
 15180 ;;  prompt          2  103[BANK0 ] PTR const unsigned char 
 15181 ;;		 -> STR_85(20), STR_40(7), STR_36(7), STR_30(7), 
 15182 ;;		 -> STR_26(14), 
 15183 ;;  unit            2  105[BANK0 ] PTR const unsigned char 
 15184 ;;		 -> STR_86(9), STR_41(7), STR_37(7), STR_31(7), 
 15185 ;;		 -> STR_27(1), 
 15186 ;;  Value           2  107[BANK0 ] PTR 
 15187 ;;		 -> CreateWaypointProgram@CycleCount(3), CurrentOrbitProgram(18), 
 15188 ;;  Min             3  109[BANK0 ] PTR 
 15189 ;;  Max             3  112[BANK0 ] PTR 
 15190 ;;  Precision       3  115[BANK0 ] PTR 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;  Output          3  120[BANK0 ] PTR 
 15193 ;;  FractionalPl    1  119[BANK0 ] unsigned char 
 15194 ;;  WholePlaces     1  118[BANK0 ] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  1    wreg      char 
 15197 ;; Registers used:
 15198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : F/0
 15201 ;;		On exit  : F/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15204 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15207 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15208 ;;Total ram usage:       20 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    8
 15211 ;; This function calls:
 15212 ;;		_LCD_DisplayOnOff
 15213 ;;		___ftge
 15214 ;;		_LCD_ClearDisplay
 15215 ;;		_LCD_PrintString
 15216 ;;		_LCD_SetPosition
 15217 ;;		_LCD_PrintFloat
 15218 ;;		_GetRotaryMultiplier
 15219 ;;		___lbtoft
 15220 ;;		___ftmul
 15221 ;;		___asftadd
 15222 ;;		___asftsub
 15223 ;;		_GetInput
 15224 ;; This function is called by:
 15225 ;;		_CreateOrbitProgram
 15226 ;;		_CreateWaypointProgram
 15227 ;; This function uses a non-reentrant model
 15228 ;;
 15229                           
 15230                           	psect	text31
 15231  0040A6                     __ptext31:
 15232                           	opt stack 0
 15233  0040A6                     _GetFloat:
 15234                           	opt stack 21
 15235                           
 15236                           ; BSR set to: 0
 15237                           ;UserInterface.c: 95: double Output;
 15238                           ;UserInterface.c: 96: char WholePlaces;
 15239                           ;UserInterface.c: 97: char FractionalPlaces;
 15240                           ;UserInterface.c: 100: LCD_DisplayOnOff(1, 0, 0);
 15241                           
 15242                           ; BSR set to: 0
 15243  0040A6  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 15244  0040A8  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 15245  0040AA  0E01               	movlw	1
 15246  0040AC  EC7D  F037         	call	_LCD_DisplayOnOff
 15247                           
 15248                           ;UserInterface.c: 102: if ((Max >= 10000) || (Min <= -10000)) WholePlaces = 5;
 15249  0040B0  C0D0  F088         	movff	GetFloat@Max,?___ftge
 15250  0040B4  C0D1  F089         	movff	GetFloat@Max+1,?___ftge+1
 15251  0040B8  C0D2  F08A         	movff	GetFloat@Max+2,?___ftge+2
 15252  0040BC  0E40               	movlw	64
 15253  0040BE  6F8B               	movwf	(?___ftge+3)& (0+255),b
 15254  0040C0  0E1C               	movlw	28
 15255  0040C2  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15256  0040C4  0E46               	movlw	70
 15257  0040C6  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15258  0040C8  ECB1  F037         	call	___ftge	;wreg free
 15259  0040CC  E20F               	bc	l19961
 15260                           
 15261                           ; BSR set to: 0
 15262  0040CE  0E40               	movlw	64
 15263  0040D0  6F88               	movwf	?___ftge& (0+255),b
 15264  0040D2  0E1C               	movlw	28
 15265  0040D4  6F89               	movwf	(?___ftge+1)& (0+255),b
 15266  0040D6  0EC6               	movlw	198
 15267  0040D8  6F8A               	movwf	(?___ftge+2)& (0+255),b
 15268  0040DA  C0CD  F08B         	movff	GetFloat@Min,?___ftge+3
 15269  0040DE  C0CE  F08C         	movff	GetFloat@Min+1,?___ftge+4
 15270  0040E2  C0CF  F08D         	movff	GetFloat@Min+2,?___ftge+5
 15271  0040E6  ECB1  F037         	call	___ftge	;wreg free
 15272  0040EA  E302               	bnc	l19963
 15273  0040EC                     l19961:
 15274                           
 15275                           ; BSR set to: 0
 15276  0040EC  0E05               	movlw	5
 15277  0040EE  D058               	goto	L13
 15278  0040F0                     l19963:
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;UserInterface.c: 103: else if (Max >= 1000 | Min <= -1000) WholePlaces = 4;
 15282  0040F0  C0D0  F088         	movff	GetFloat@Max,?___ftge
 15283  0040F4  C0D1  F089         	movff	GetFloat@Max+1,?___ftge+1
 15284  0040F8  C0D2  F08A         	movff	GetFloat@Max+2,?___ftge+2
 15285  0040FC  6B8B               	clrf	(?___ftge+3)& (0+255),b
 15286  0040FE  0E7A               	movlw	122
 15287  004100  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15288  004102  0E44               	movlw	68
 15289  004104  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15290  004106  ECB1  F037         	call	___ftge	;wreg free
 15291  00410A  E20E               	bc	l19967
 15292                           
 15293                           ; BSR set to: 0
 15294  00410C  6B88               	clrf	?___ftge& (0+255),b
 15295  00410E  0E7A               	movlw	122
 15296  004110  6F89               	movwf	(?___ftge+1)& (0+255),b
 15297  004112  0EC4               	movlw	196
 15298  004114  6F8A               	movwf	(?___ftge+2)& (0+255),b
 15299  004116  C0CD  F08B         	movff	GetFloat@Min,?___ftge+3
 15300  00411A  C0CE  F08C         	movff	GetFloat@Min+1,?___ftge+4
 15301  00411E  C0CF  F08D         	movff	GetFloat@Min+2,?___ftge+5
 15302  004122  ECB1  F037         	call	___ftge	;wreg free
 15303  004126  E302               	bnc	l19969
 15304  004128                     l19967:
 15305                           
 15306                           ; BSR set to: 0
 15307  004128  0E04               	movlw	4
 15308  00412A  D03A               	goto	L13
 15309  00412C                     l19969:
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;UserInterface.c: 104: else if (Max >= 100 | Min <= -100) WholePlaces = 3;
 15313  00412C  C0D0  F088         	movff	GetFloat@Max,?___ftge
 15314  004130  C0D1  F089         	movff	GetFloat@Max+1,?___ftge+1
 15315  004134  C0D2  F08A         	movff	GetFloat@Max+2,?___ftge+2
 15316  004138  6B8B               	clrf	(?___ftge+3)& (0+255),b
 15317  00413A  0EC8               	movlw	200
 15318  00413C  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15319  00413E  0E42               	movlw	66
 15320  004140  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15321  004142  ECB1  F037         	call	___ftge	;wreg free
 15322  004146  E20E               	bc	l19973
 15323                           
 15324                           ; BSR set to: 0
 15325  004148  6B88               	clrf	?___ftge& (0+255),b
 15326  00414A  0EC8               	movlw	200
 15327  00414C  6F89               	movwf	(?___ftge+1)& (0+255),b
 15328  00414E  0EC2               	movlw	194
 15329  004150  6F8A               	movwf	(?___ftge+2)& (0+255),b
 15330  004152  C0CD  F08B         	movff	GetFloat@Min,?___ftge+3
 15331  004156  C0CE  F08C         	movff	GetFloat@Min+1,?___ftge+4
 15332  00415A  C0CF  F08D         	movff	GetFloat@Min+2,?___ftge+5
 15333  00415E  ECB1  F037         	call	___ftge	;wreg free
 15334  004162  E302               	bnc	l19975
 15335  004164                     l19973:
 15336                           
 15337                           ; BSR set to: 0
 15338  004164  0E03               	movlw	3
 15339  004166  D01C               	goto	L13
 15340  004168                     l19975:
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;UserInterface.c: 105: else if (Max >= 10 | Min <= -10) WholePlaces = 2;
 15344  004168  C0D0  F088         	movff	GetFloat@Max,?___ftge
 15345  00416C  C0D1  F089         	movff	GetFloat@Max+1,?___ftge+1
 15346  004170  C0D2  F08A         	movff	GetFloat@Max+2,?___ftge+2
 15347  004174  6B8B               	clrf	(?___ftge+3)& (0+255),b
 15348  004176  0E20               	movlw	32
 15349  004178  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15350  00417A  0E41               	movlw	65
 15351  00417C  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15352  00417E  ECB1  F037         	call	___ftge	;wreg free
 15353  004182  E20D               	bc	l19979
 15354                           
 15355                           ; BSR set to: 0
 15356  004184  6B88               	clrf	?___ftge& (0+255),b
 15357  004186  0E20               	movlw	32
 15358  004188  6F89               	movwf	(?___ftge+1)& (0+255),b
 15359  00418A  0EC1               	movlw	193
 15360  00418C  6F8A               	movwf	(?___ftge+2)& (0+255),b
 15361  00418E  C0CD  F08B         	movff	GetFloat@Min,?___ftge+3
 15362  004192  C0CE  F08C         	movff	GetFloat@Min+1,?___ftge+4
 15363  004196  C0CF  F08D         	movff	GetFloat@Min+2,?___ftge+5
 15364  00419A  ECB1  F037         	call	___ftge	;wreg free
 15365  00419E                     l19979:
 15366                           
 15367                           ; BSR set to: 0
 15368  00419E  0E02               	movlw	2
 15369  0041A0                     L13:
 15370  0041A0  6FD6               	movwf	GetFloat@WholePlaces& (0+255),b
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;UserInterface.c: 108: if (Precision >=1.0) FractionalPlaces=0;
 15374  0041A2  C0D3  F088         	movff	GetFloat@Precision,?___ftge
 15375  0041A6  C0D4  F089         	movff	GetFloat@Precision+1,?___ftge+1
 15376  0041AA  C0D5  F08A         	movff	GetFloat@Precision+2,?___ftge+2
 15377  0041AE  6B8B               	clrf	(?___ftge+3)& (0+255),b
 15378  0041B0  0E80               	movlw	128
 15379  0041B2  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15380  0041B4  0E3F               	movlw	63
 15381  0041B6  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15382  0041B8  ECB1  F037         	call	___ftge	;wreg free
 15383  0041BC  E302               	bnc	l19987
 15384                           
 15385                           ; BSR set to: 0
 15386  0041BE  6BD7               	clrf	GetFloat@FractionalPlaces& (0+255),b
 15387  0041C0  D044               	goto	l20003
 15388  0041C2                     l19987:
 15389                           
 15390                           ; BSR set to: 0
 15391                           ;UserInterface.c: 109: else if (Precision >= 0.1) FractionalPlaces = 1;
 15392  0041C2  C0D3  F088         	movff	GetFloat@Precision,?___ftge
 15393  0041C6  C0D4  F089         	movff	GetFloat@Precision+1,?___ftge+1
 15394  0041CA  C0D5  F08A         	movff	GetFloat@Precision+2,?___ftge+2
 15395  0041CE  0ECD               	movlw	205
 15396  0041D0  6F8B               	movwf	(?___ftge+3)& (0+255),b
 15397  0041D2  0ECC               	movlw	204
 15398  0041D4  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15399  0041D6  0E3D               	movlw	61
 15400  0041D8  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15401  0041DA  ECB1  F037         	call	___ftge	;wreg free
 15402  0041DE  E302               	bnc	l19991
 15403                           
 15404                           ; BSR set to: 0
 15405  0041E0  0E01               	movlw	1
 15406  0041E2  D032               	goto	L16
 15407  0041E4                     l19991:
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;UserInterface.c: 110: else if (Precision >= 0.01) FractionalPlaces = 2;
 15411  0041E4  C0D3  F088         	movff	GetFloat@Precision,?___ftge
 15412  0041E8  C0D4  F089         	movff	GetFloat@Precision+1,?___ftge+1
 15413  0041EC  C0D5  F08A         	movff	GetFloat@Precision+2,?___ftge+2
 15414  0041F0  0ED7               	movlw	215
 15415  0041F2  6F8B               	movwf	(?___ftge+3)& (0+255),b
 15416  0041F4  0E23               	movlw	35
 15417  0041F6  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15418  0041F8  0E3C               	movlw	60
 15419  0041FA  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15420  0041FC  ECB1  F037         	call	___ftge	;wreg free
 15421  004200  E302               	bnc	l19995
 15422                           
 15423                           ; BSR set to: 0
 15424  004202  0E02               	movlw	2
 15425  004204  D021               	goto	L16
 15426  004206                     l19995:
 15427                           
 15428                           ; BSR set to: 0
 15429                           ;UserInterface.c: 111: else if (Precision >= 0.001) FractionalPlaces = 3;
 15430  004206  C0D3  F088         	movff	GetFloat@Precision,?___ftge
 15431  00420A  C0D4  F089         	movff	GetFloat@Precision+1,?___ftge+1
 15432  00420E  C0D5  F08A         	movff	GetFloat@Precision+2,?___ftge+2
 15433  004212  0E12               	movlw	18
 15434  004214  6F8B               	movwf	(?___ftge+3)& (0+255),b
 15435  004216  0E83               	movlw	131
 15436  004218  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15437  00421A  0E3A               	movlw	58
 15438  00421C  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15439  00421E  ECB1  F037         	call	___ftge	;wreg free
 15440  004222  E302               	bnc	l19999
 15441                           
 15442                           ; BSR set to: 0
 15443  004224  0E03               	movlw	3
 15444  004226  D010               	goto	L16
 15445  004228                     l19999:
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;UserInterface.c: 112: else if (Precision >= 0.0001) FractionalPlaces = 4;
 15449  004228  C0D3  F088         	movff	GetFloat@Precision,?___ftge
 15450  00422C  C0D4  F089         	movff	GetFloat@Precision+1,?___ftge+1
 15451  004230  C0D5  F08A         	movff	GetFloat@Precision+2,?___ftge+2
 15452  004234  0EB7               	movlw	183
 15453  004236  6F8B               	movwf	(?___ftge+3)& (0+255),b
 15454  004238  0ED1               	movlw	209
 15455  00423A  6F8C               	movwf	(?___ftge+4)& (0+255),b
 15456  00423C  0E38               	movlw	56
 15457  00423E  6F8D               	movwf	(?___ftge+5)& (0+255),b
 15458  004240  ECB1  F037         	call	___ftge	;wreg free
 15459  004244  E302               	bnc	l20003
 15460                           
 15461                           ; BSR set to: 0
 15462  004246  0E04               	movlw	4
 15463  004248                     L16:
 15464  004248  6FD7               	movwf	GetFloat@FractionalPlaces& (0+255),b
 15465  00424A                     l20003:
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;UserInterface.c: 115: Output = *Value;
 15469  00424A  C0CB  FFD9         	movff	GetFloat@Value,fsr2l
 15470  00424E  C0CC  FFDA         	movff	GetFloat@Value+1,fsr2h
 15471  004252  CFDE F0D8          	movff	postinc2,GetFloat@Output
 15472  004256  CFDE F0D9          	movff	postinc2,GetFloat@Output+1
 15473  00425A  CFDD F0DA          	movff	postdec2,GetFloat@Output+2
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;UserInterface.c: 116: LCD_ClearDisplay();
 15477  00425E  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;UserInterface.c: 117: LCD_PrintString(prompt);
 15481  004262  C0C7  F076         	movff	GetFloat@prompt,?_LCD_PrintString
 15482  004266  C0C8  F077         	movff	GetFloat@prompt+1,?_LCD_PrintString+1
 15483  00426A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;UserInterface.c: 119: LCD_SetPosition(1, 0);
 15487  00426E  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 15488  004270  0E01               	movlw	1
 15489  004272  ECDF  F036         	call	_LCD_SetPosition
 15490                           
 15491                           ; BSR set to: 0
 15492                           ;UserInterface.c: 120: LCD_PrintFloat(Output, WholePlaces, FractionalPlaces, 1);
 15493  004276  D8A3               	call	PL40	;call to abstracted procedure
 15494  004278  ECFD  F02A         	call	_LCD_PrintFloat	;wreg free
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;UserInterface.c: 121: LCD_PrintString(unit);
 15498  00427C  C0C9  F076         	movff	GetFloat@unit,?_LCD_PrintString
 15499  004280  C0CA  F077         	movff	GetFloat@unit+1,?_LCD_PrintString+1
 15500  004284  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 15501  004288                     l20015:
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;UserInterface.c: 124: LCD_SetPosition(1, 0);
 15505  004288  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 15506  00428A  0E01               	movlw	1
 15507  00428C  ECDF  F036         	call	_LCD_SetPosition
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;UserInterface.c: 125: LCD_PrintFloat(Output, WholePlaces, FractionalPlaces, 1);
 15511  004290  D896               	call	PL40	;call to abstracted procedure
 15512  004292  ECFD  F02A         	call	_LCD_PrintFloat	;wreg free
 15513                           
 15514                           ;UserInterface.c: 126: switch (GetInput()) {
 15515  004296  D085               	goto	l20053
 15516  004298                     l20019:
 15517                           
 15518                           ; BSR set to: 0
 15519                           ;UserInterface.c: 128: *Value = Output;
 15520  004298  C0CB  FFD9         	movff	GetFloat@Value,fsr2l
 15521  00429C  C0CC  FFDA         	movff	GetFloat@Value+1,fsr2h
 15522  0042A0  C0D8  FFDE         	movff	GetFloat@Output,postinc2
 15523  0042A4  C0D9  FFDE         	movff	GetFloat@Output+1,postinc2
 15524  0042A8  C0DA  FFDD         	movff	GetFloat@Output+2,postdec2
 15525                           
 15526                           ; BSR set to: 0
 15527                           ;UserInterface.c: 129: LCD_DisplayOnOff(1, 0, 0);
 15528  0042AC  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 15529  0042AE  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 15530  0042B0  0E01               	movlw	1
 15531  0042B2  EC7D  F037         	call	_LCD_DisplayOnOff
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;UserInterface.c: 130: return (0);
 15535  0042B6  0C00               	retlw	0
 15536  0042B8                     l20027:
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;UserInterface.c: 132: LCD_DisplayOnOff(1, 0, 0);
 15540  0042B8  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 15541  0042BA  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 15542  0042BC  0E01               	movlw	1
 15543  0042BE  EC7D  F037         	call	_LCD_DisplayOnOff
 15544                           
 15545                           ; BSR set to: 0
 15546                           ;UserInterface.c: 133: return (-1);
 15547  0042C2  0CFF               	retlw	255
 15548  0042C4                     l20033:
 15549                           
 15550                           ; BSR set to: 0
 15551                           ;UserInterface.c: 135: LCD_DisplayOnOff(1, 0, 0);
 15552  0042C4  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 15553  0042C6  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 15554  0042C8  0E01               	movlw	1
 15555  0042CA  EC7D  F037         	call	_LCD_DisplayOnOff
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;UserInterface.c: 136: return (-2);
 15559  0042CE  0CFE               	retlw	254
 15560  0042D0                     l20039:
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;UserInterface.c: 138: Output += GetRotaryMultiplier() * Precision;
 15564  0042D0  0E00               	movlw	high GetFloat@Output
 15565  0042D2  6F89               	movwf	(?___asftadd+1)& (0+255),b
 15566  0042D4  0ED8               	movlw	low GetFloat@Output
 15567  0042D6  6F88               	movwf	?___asftadd& (0+255),b
 15568  0042D8  C0D3  F07A         	movff	GetFloat@Precision,?___ftmul+3
 15569  0042DC  C0D4  F07B         	movff	GetFloat@Precision+1,?___ftmul+4
 15570  0042E0  C0D5  F07C         	movff	GetFloat@Precision+2,?___ftmul+5
 15571  0042E4  ECAC  F035         	call	_GetRotaryMultiplier	;wreg free
 15572  0042E8  EC8F  F03B         	call	___lbtoft
 15573  0042EC  C073  F077         	movff	?___lbtoft,?___ftmul
 15574  0042F0  C074  F078         	movff	?___lbtoft+1,?___ftmul+1
 15575  0042F4  C075  F079         	movff	?___lbtoft+2,?___ftmul+2
 15576  0042F8  EC52  F031         	call	___ftmul	;wreg free
 15577  0042FC  C077  F08A         	movff	?___ftmul,?___asftadd+2
 15578  004300  C078  F08B         	movff	?___ftmul+1,?___asftadd+3
 15579  004304  C079  F08C         	movff	?___ftmul+2,?___asftadd+4
 15580  004308  EC53  F03A         	call	___asftadd	;wreg free
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;UserInterface.c: 139: if (Output > Max) Output = Max;
 15584  00430C  C0D0  F088         	movff	GetFloat@Max,?___ftge
 15585  004310  C0D1  F089         	movff	GetFloat@Max+1,?___ftge+1
 15586  004314  C0D2  F08A         	movff	GetFloat@Max+2,?___ftge+2
 15587  004318  C0D8  F08B         	movff	GetFloat@Output,?___ftge+3
 15588  00431C  C0D9  F08C         	movff	GetFloat@Output+1,?___ftge+4
 15589  004320  C0DA  F08D         	movff	GetFloat@Output+2,?___ftge+5
 15590  004324  ECB1  F037         	call	___ftge	;wreg free
 15591  004328  E2AF               	bc	l20015
 15592                           
 15593                           ; BSR set to: 0
 15594  00432A  C0D0  F0D8         	movff	GetFloat@Max,GetFloat@Output
 15595  00432E  C0D1  F0D9         	movff	GetFloat@Max+1,GetFloat@Output+1
 15596  004332  C0D2  F0DA         	movff	GetFloat@Max+2,GetFloat@Output+2
 15597  004336  D7A8               	goto	l20015
 15598  004338                     l20045:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;UserInterface.c: 142: Output -= GetRotaryMultiplier() * Precision;
 15602  004338  0E00               	movlw	high GetFloat@Output
 15603  00433A  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 15604  00433C  0ED8               	movlw	low GetFloat@Output
 15605  00433E  6F9F               	movwf	?___asftsub& (0+255),b
 15606  004340  C0D3  F07A         	movff	GetFloat@Precision,?___ftmul+3
 15607  004344  C0D4  F07B         	movff	GetFloat@Precision+1,?___ftmul+4
 15608  004348  C0D5  F07C         	movff	GetFloat@Precision+2,?___ftmul+5
 15609  00434C  ECAC  F035         	call	_GetRotaryMultiplier	;wreg free
 15610  004350  EC8F  F03B         	call	___lbtoft
 15611  004354  C073  F077         	movff	?___lbtoft,?___ftmul
 15612  004358  C074  F078         	movff	?___lbtoft+1,?___ftmul+1
 15613  00435C  C075  F079         	movff	?___lbtoft+2,?___ftmul+2
 15614  004360  EC52  F031         	call	___ftmul	;wreg free
 15615  004364  C077  F0A1         	movff	?___ftmul,?___asftsub+2
 15616  004368  C078  F0A2         	movff	?___ftmul+1,?___asftsub+3
 15617  00436C  C079  F0A3         	movff	?___ftmul+2,?___asftsub+4
 15618  004370  EC17  F03A         	call	___asftsub	;wreg free
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;UserInterface.c: 143: if (Output < Min) Output = Min;
 15622  004374  C0D8  F088         	movff	GetFloat@Output,?___ftge
 15623  004378  C0D9  F089         	movff	GetFloat@Output+1,?___ftge+1
 15624  00437C  C0DA  F08A         	movff	GetFloat@Output+2,?___ftge+2
 15625  004380  C0CD  F08B         	movff	GetFloat@Min,?___ftge+3
 15626  004384  C0CE  F08C         	movff	GetFloat@Min+1,?___ftge+4
 15627  004388  C0CF  F08D         	movff	GetFloat@Min+2,?___ftge+5
 15628  00438C  ECB1  F037         	call	___ftge	;wreg free
 15629  004390  E301 D77A          	bc	l20015
 15630                           
 15631                           ; BSR set to: 0
 15632  004394  C0CD  F0D8         	movff	GetFloat@Min,GetFloat@Output
 15633  004398  C0CE  F0D9         	movff	GetFloat@Min+1,GetFloat@Output+1
 15634  00439C  C0CF  F0DA         	movff	GetFloat@Min+2,GetFloat@Output+2
 15635  0043A0  D773               	goto	l20015
 15636  0043A2                     l20053:
 15637                           
 15638                           ; BSR set to: 0
 15639  0043A2  EC39  F03B         	call	_GetInput	;wreg free
 15640                           
 15641                           ; Switch size 1, requested type "space"
 15642                           ; Number of cases is 5, Range of values is 1 to 5
 15643                           ; switch strategies available:
 15644                           ; Name         Instructions Cycles
 15645                           ; simple_byte           16     9 (average)
 15646                           ;	Chosen strategy is simple_byte
 15647  0043A6  0A01               	xorlw	1	; case 1
 15648  0043A8  E101 D776          	bz	l20019
 15649  0043AC  0A03               	xorlw	3	; case 2
 15650  0043AE  E084               	bz	l20027
 15651  0043B0  0A01               	xorlw	1	; case 3
 15652  0043B2  E088               	bz	l20033
 15653  0043B4  0A07               	xorlw	7	; case 4
 15654  0043B6  E08C               	bz	l20039
 15655  0043B8  0A01               	xorlw	1	; case 5
 15656  0043BA  E0BE               	bz	l20045
 15657  0043BC  D765               	goto	l20015
 15658  0043BE                     __end_of_GetFloat:
 15659                           	opt stack 0
 15660  0043BE                     PL40:
 15661  0043BE  C0D8  F0B9         	movff	GetFloat@Output,?_LCD_PrintFloat
 15662  0043C2  C0D9  F0BA         	movff	GetFloat@Output+1,?_LCD_PrintFloat+1
 15663  0043C6  C0DA  F0BB         	movff	GetFloat@Output+2,?_LCD_PrintFloat+2
 15664  0043CA  C0D6  F0BC         	movff	GetFloat@WholePlaces,?_LCD_PrintFloat+3
 15665  0043CE  C0D7  F0BD         	movff	GetFloat@FractionalPlaces,?_LCD_PrintFloat+4
 15666  0043D2  0E01               	movlw	1
 15667  0043D4  6FBE               	movwf	(?_LCD_PrintFloat+5)& (0+255),b
 15668  0043D6  0C01               	retlw	1
 15669                           tblptru	equ	0xFF8
 15670                           tblptrh	equ	0xFF7
 15671                           tblptrl	equ	0xFF6
 15672                           tablat	equ	0xFF5
 15673                           prodh	equ	0xFF4
 15674                           prodl	equ	0xFF3
 15675                           intcon	equ	0xFF2
 15676                           intcon2	equ	0xFF1
 15677                           postinc0	equ	0xFEE
 15678                           wreg	equ	0xFE8
 15679                           postinc1	equ	0xFE6
 15680                           postdec1	equ	0xFE5
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           fsr2h	equ	0xFDA
 15687                           fsr2l	equ	0xFD9
 15688                           status	equ	0xFD8
 15689                           
 15690 ;; *************** function _LCD_PrintFloat *****************
 15691 ;; Defined at:
 15692 ;;		line 6 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 15693 ;; Parameters:    Size  Location     Type
 15694 ;;  dat             3   89[BANK0 ] char 
 15695 ;;  whole           1   92[BANK0 ] unsigned char 
 15696 ;;  fract           1   93[BANK0 ] unsigned char 
 15697 ;;  sign            1   94[BANK0 ] unsigned char 
 15698 ;; Auto vars:     Size  Location     Type
 15699 ;;  fraction        4   99[BANK0 ] long 
 15700 ;;  wholepart       4   95[BANK0 ] long 
 15701 ;; Return value:  Size  Location     Type
 15702 ;;		None               void
 15703 ;; Registers used:
 15704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 15705 ;; Tracked objects:
 15706 ;;		On entry : F/0
 15707 ;;		On exit  : F/0
 15708 ;;		Unchanged: 0/0
 15709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15710 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15711 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15713 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15714 ;;Total ram usage:       14 bytes
 15715 ;; Hardware stack levels used:    1
 15716 ;; Hardware stack levels required when called:    7
 15717 ;; This function calls:
 15718 ;;		___fttol
 15719 ;;		_LCD_PrintChar
 15720 ;;		_LCD_PrintLong
 15721 ;;		___altoft
 15722 ;;		___asftsub
 15723 ;;		___ftsub
 15724 ;;		___asftmul
 15725 ;;		___aldiv
 15726 ;; This function is called by:
 15727 ;;		_RunOrbitProgram
 15728 ;;		_RealtimeMode
 15729 ;;		_ShowVoltage
 15730 ;;		_GetFloat
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           	psect	text32
 15735  0055FA                     __ptext32:
 15736                           	opt stack 0
 15737  0055FA                     _LCD_PrintFloat:
 15738                           	opt stack 22
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;LCD.c: 7: long wholepart;
 15742                           ;LCD.c: 8: long fraction;
 15743                           ;LCD.c: 10: wholepart = (long) dat;
 15744                           
 15745                           ; BSR set to: 0
 15746  0055FA  C0B9  F0AA         	movff	LCD_PrintFloat@dat,?___fttol
 15747  0055FE  C0BA  F0AB         	movff	LCD_PrintFloat@dat+1,?___fttol+1
 15748  005602  C0BB  F0AC         	movff	LCD_PrintFloat@dat+2,?___fttol+2
 15749  005606  EC3B  F034         	call	___fttol	;wreg free
 15750  00560A  C0AA  F0BF         	movff	?___fttol,LCD_PrintFloat@wholepart
 15751  00560E  C0AB  F0C0         	movff	?___fttol+1,LCD_PrintFloat@wholepart+1
 15752  005612  C0AC  F0C1         	movff	?___fttol+2,LCD_PrintFloat@wholepart+2
 15753  005616  C0AD  F0C2         	movff	?___fttol+3,LCD_PrintFloat@wholepart+3
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;LCD.c: 11: if (sign) {
 15757  00561A  51BE               	movf	LCD_PrintFloat@sign& (0+255),w,b
 15758  00561C  E021               	bz	l17583
 15759                           
 15760                           ; BSR set to: 0
 15761                           ;LCD.c: 12: if (wholepart == 0) {
 15762  00561E  51C2               	movf	(LCD_PrintFloat@wholepart+3)& (0+255),w,b
 15763  005620  11BF               	iorwf	LCD_PrintFloat@wholepart& (0+255),w,b
 15764  005622  11C0               	iorwf	(LCD_PrintFloat@wholepart+1)& (0+255),w,b
 15765  005624  11C1               	iorwf	(LCD_PrintFloat@wholepart+2)& (0+255),w,b
 15766  005626  E11C               	bnz	l17583
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;LCD.c: 13: if (dat < 0) LCD_PrintChar('-');
 15770  005628  51BB               	movf	(LCD_PrintFloat@dat+2)& (0+255),w,b
 15771  00562A  0A80               	xorlw	128
 15772  00562C  0F80               	addlw	128
 15773  00562E  E105               	bnz	u9955
 15774  005630  0E00               	movlw	0
 15775  005632  5DBA               	subwf	(LCD_PrintFloat@dat+1)& (0+255),w,b
 15776  005634  E102               	bnz	u9955
 15777  005636  0E00               	movlw	0
 15778  005638  5DB9               	subwf	LCD_PrintFloat@dat& (0+255),w,b
 15779  00563A                     u9955:
 15780  00563A  E204               	bc	l17581
 15781                           
 15782                           ; BSR set to: 0
 15783  00563C  0E2D               	movlw	45
 15784  00563E  EC6A  F035         	call	_LCD_PrintChar
 15785  005642  D003               	goto	l332
 15786  005644                     l17581:
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;LCD.c: 14: else LCD_PrintChar('+');
 15790  005644  0E2B               	movlw	43
 15791  005646  EC6A  F035         	call	_LCD_PrintChar
 15792  00564A                     l332:
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;LCD.c: 15: LCD_PrintLong(0,whole,0);
 15796  00564A  0E00               	movlw	0
 15797  00564C  6B79               	clrf	?_LCD_PrintLong& (0+255),b
 15798  00564E  6B7A               	clrf	(?_LCD_PrintLong+1)& (0+255),b
 15799  005650  6B7B               	clrf	(?_LCD_PrintLong+2)& (0+255),b
 15800  005652  6B7C               	clrf	(?_LCD_PrintLong+3)& (0+255),b
 15801  005654  C0BC  F07D         	movff	LCD_PrintFloat@whole,?_LCD_PrintLong+4
 15802  005658  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 15803  00565A  EC66  F023         	call	_LCD_PrintLong	;wreg free
 15804                           
 15805                           ;LCD.c: 16: } else LCD_PrintLong(wholepart, whole, sign);
 15806  00565E  D00E               	goto	l17587
 15807  005660                     l17583:
 15808                           
 15809                           ; BSR set to: 0
 15810  005660  C0BF  F079         	movff	LCD_PrintFloat@wholepart,?_LCD_PrintLong
 15811  005664  C0C0  F07A         	movff	LCD_PrintFloat@wholepart+1,?_LCD_PrintLong+1
 15812  005668  C0C1  F07B         	movff	LCD_PrintFloat@wholepart+2,?_LCD_PrintLong+2
 15813  00566C  C0C2  F07C         	movff	LCD_PrintFloat@wholepart+3,?_LCD_PrintLong+3
 15814  005670  C0BC  F07D         	movff	LCD_PrintFloat@whole,?_LCD_PrintLong+4
 15815  005674  C0BE  F07E         	movff	LCD_PrintFloat@sign,?_LCD_PrintLong+5
 15816  005678  EC66  F023         	call	_LCD_PrintLong	;wreg free
 15817  00567C                     l17587:
 15818                           
 15819                           ; BSR set to: 0
 15820                           ;LCD.c: 19: dat -= wholepart;
 15821  00567C  0E00               	movlw	high LCD_PrintFloat@dat
 15822  00567E  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 15823  005680  0EB9               	movlw	low LCD_PrintFloat@dat
 15824  005682  6F9F               	movwf	?___asftsub& (0+255),b
 15825  005684  C0BF  F073         	movff	LCD_PrintFloat@wholepart,?___altoft
 15826  005688  C0C0  F074         	movff	LCD_PrintFloat@wholepart+1,?___altoft+1
 15827  00568C  C0C1  F075         	movff	LCD_PrintFloat@wholepart+2,?___altoft+2
 15828  005690  C0C2  F076         	movff	LCD_PrintFloat@wholepart+3,?___altoft+3
 15829  005694  EC49  F037         	call	___altoft	;wreg free
 15830  005698  C073  F0A1         	movff	?___altoft,?___asftsub+2
 15831  00569C  C074  F0A2         	movff	?___altoft+1,?___asftsub+3
 15832  0056A0  C075  F0A3         	movff	?___altoft+2,?___asftsub+4
 15833  0056A4  EC17  F03A         	call	___asftsub	;wreg free
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;LCD.c: 20: if (dat < 0.0) dat = 0.0 - dat;
 15837  0056A8  51BB               	movf	(LCD_PrintFloat@dat+2)& (0+255),w,b
 15838  0056AA  0A80               	xorlw	128
 15839  0056AC  0F80               	addlw	128
 15840  0056AE  E105               	bnz	u9965
 15841  0056B0  0E00               	movlw	0
 15842  0056B2  5DBA               	subwf	(LCD_PrintFloat@dat+1)& (0+255),w,b
 15843  0056B4  E102               	bnz	u9965
 15844  0056B6  0E00               	movlw	0
 15845  0056B8  5DB9               	subwf	LCD_PrintFloat@dat& (0+255),w,b
 15846  0056BA                     u9965:
 15847  0056BA  E212               	bc	l17593
 15848                           
 15849                           ; BSR set to: 0
 15850  0056BC  0E00               	movlw	0
 15851  0056BE  6B99               	clrf	?___ftsub& (0+255),b
 15852  0056C0  6B9A               	clrf	(?___ftsub+1)& (0+255),b
 15853  0056C2  6B9B               	clrf	(?___ftsub+2)& (0+255),b
 15854  0056C4  C0B9  F09C         	movff	LCD_PrintFloat@dat,?___ftsub+3
 15855  0056C8  C0BA  F09D         	movff	LCD_PrintFloat@dat+1,?___ftsub+4
 15856  0056CC  C0BB  F09E         	movff	LCD_PrintFloat@dat+2,?___ftsub+5
 15857  0056D0  ECDE  F03A         	call	___ftsub	;wreg free
 15858  0056D4  C099  F0B9         	movff	?___ftsub,LCD_PrintFloat@dat
 15859  0056D8  C09A  F0BA         	movff	?___ftsub+1,LCD_PrintFloat@dat+1
 15860  0056DC  C09B  F0BB         	movff	?___ftsub+2,LCD_PrintFloat@dat+2
 15861  0056E0                     l17593:
 15862                           
 15863                           ; BSR set to: 0
 15864                           ;LCD.c: 21: dat *= 100000.0;
 15865  0056E0  0E00               	movlw	high LCD_PrintFloat@dat
 15866  0056E2  6F89               	movwf	(?___asftmul+1)& (0+255),b
 15867  0056E4  0EB9               	movlw	low LCD_PrintFloat@dat
 15868  0056E6  6F88               	movwf	?___asftmul& (0+255),b
 15869  0056E8  0E50               	movlw	80
 15870  0056EA  6F8A               	movwf	(?___asftmul+2)& (0+255),b
 15871  0056EC  0EC3               	movlw	195
 15872  0056EE  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 15873  0056F0  0E47               	movlw	71
 15874  0056F2  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 15875  0056F4  ECF9  F039         	call	___asftmul	;wreg free
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;LCD.c: 22: fraction = (long) dat;
 15879  0056F8  C0B9  F0AA         	movff	LCD_PrintFloat@dat,?___fttol
 15880  0056FC  C0BA  F0AB         	movff	LCD_PrintFloat@dat+1,?___fttol+1
 15881  005700  C0BB  F0AC         	movff	LCD_PrintFloat@dat+2,?___fttol+2
 15882  005704  EC3B  F034         	call	___fttol	;wreg free
 15883  005708  C0AA  F0C3         	movff	?___fttol,LCD_PrintFloat@fraction
 15884  00570C  C0AB  F0C4         	movff	?___fttol+1,LCD_PrintFloat@fraction+1
 15885  005710  C0AC  F0C5         	movff	?___fttol+2,LCD_PrintFloat@fraction+2
 15886  005714  C0AD  F0C6         	movff	?___fttol+3,LCD_PrintFloat@fraction+3
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;LCD.c: 24: if (fract) {
 15890  005718  51BD               	movf	LCD_PrintFloat@fract& (0+255),w,b
 15891  00571A  B4D8               	btfsc	status,2,c
 15892  00571C  0012               	return	
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;LCD.c: 25: LCD_PrintChar('.');
 15896  00571E  0E2E               	movlw	46
 15897  005720  EC6A  F035         	call	_LCD_PrintChar
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;LCD.c: 26: if (fract == 1) {
 15901  005724  05BD               	decf	LCD_PrintFloat@fract& (0+255),w,b
 15902  005726  E114               	bnz	l17607
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;LCD.c: 27: fraction /= 10000;
 15906  005728  C0C3  F06B         	movff	LCD_PrintFloat@fraction,?___aldiv
 15907  00572C  C0C4  F06C         	movff	LCD_PrintFloat@fraction+1,?___aldiv+1
 15908  005730  C0C5  F06D         	movff	LCD_PrintFloat@fraction+2,?___aldiv+2
 15909  005734  C0C6  F06E         	movff	LCD_PrintFloat@fraction+3,?___aldiv+3
 15910  005738  0E10               	movlw	16
 15911  00573A  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 15912  00573C  0E27               	movlw	39
 15913  00573E  6F70               	movwf	(?___aldiv+5)& (0+255),b
 15914  005740  0E00               	movlw	0
 15915  005742  6B71               	clrf	(?___aldiv+6)& (0+255),b
 15916  005744  6B72               	clrf	(?___aldiv+7)& (0+255),b
 15917  005746  EC81  F033         	call	___aldiv	;wreg free
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;LCD.c: 28: LCD_PrintLong(fraction, 1, 0);
 15921  00574A  D856               	call	PL8	;call to abstracted procedure
 15922  00574C  0E01               	movlw	1
 15923  00574E  D050               	goto	L20
 15924  005750                     l17607:
 15925                           
 15926                           ; BSR set to: 0
 15927  005750  51BD               	movf	LCD_PrintFloat@fract& (0+255),w,b
 15928  005752  0A02               	xorlw	2
 15929  005754  E114               	bnz	l17613
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;LCD.c: 30: fraction /= 1000;
 15933  005756  C0C3  F06B         	movff	LCD_PrintFloat@fraction,?___aldiv
 15934  00575A  C0C4  F06C         	movff	LCD_PrintFloat@fraction+1,?___aldiv+1
 15935  00575E  C0C5  F06D         	movff	LCD_PrintFloat@fraction+2,?___aldiv+2
 15936  005762  C0C6  F06E         	movff	LCD_PrintFloat@fraction+3,?___aldiv+3
 15937  005766  0EE8               	movlw	232
 15938  005768  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 15939  00576A  0E03               	movlw	3
 15940  00576C  6F70               	movwf	(?___aldiv+5)& (0+255),b
 15941  00576E  0E00               	movlw	0
 15942  005770  6B71               	clrf	(?___aldiv+6)& (0+255),b
 15943  005772  6B72               	clrf	(?___aldiv+7)& (0+255),b
 15944  005774  EC81  F033         	call	___aldiv	;wreg free
 15945                           
 15946                           ; BSR set to: 0
 15947                           ;LCD.c: 31: LCD_PrintLong(fraction, 2, 0);
 15948  005778  D83F               	call	PL8	;call to abstracted procedure
 15949  00577A  0E02               	movlw	2
 15950  00577C  D039               	goto	L20
 15951  00577E                     l17613:
 15952                           
 15953                           ; BSR set to: 0
 15954  00577E  51BD               	movf	LCD_PrintFloat@fract& (0+255),w,b
 15955  005780  0A03               	xorlw	3
 15956  005782  E113               	bnz	l17619
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;LCD.c: 33: fraction /= 100;
 15960  005784  C0C3  F06B         	movff	LCD_PrintFloat@fraction,?___aldiv
 15961  005788  C0C4  F06C         	movff	LCD_PrintFloat@fraction+1,?___aldiv+1
 15962  00578C  C0C5  F06D         	movff	LCD_PrintFloat@fraction+2,?___aldiv+2
 15963  005790  C0C6  F06E         	movff	LCD_PrintFloat@fraction+3,?___aldiv+3
 15964  005794  0E64               	movlw	100
 15965  005796  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 15966  005798  0E00               	movlw	0
 15967  00579A  6B70               	clrf	(?___aldiv+5)& (0+255),b
 15968  00579C  6B71               	clrf	(?___aldiv+6)& (0+255),b
 15969  00579E  6B72               	clrf	(?___aldiv+7)& (0+255),b
 15970  0057A0  EC81  F033         	call	___aldiv	;wreg free
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;LCD.c: 34: LCD_PrintLong(fraction, 3, 0);
 15974  0057A4  D829               	call	PL8	;call to abstracted procedure
 15975  0057A6  0E03               	movlw	3
 15976  0057A8  D023               	goto	L20
 15977  0057AA                     l17619:
 15978                           
 15979                           ; BSR set to: 0
 15980  0057AA  51BD               	movf	LCD_PrintFloat@fract& (0+255),w,b
 15981  0057AC  0A04               	xorlw	4
 15982  0057AE  E113               	bnz	l17625
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;LCD.c: 36: fraction /= 10;
 15986  0057B0  C0C3  F06B         	movff	LCD_PrintFloat@fraction,?___aldiv
 15987  0057B4  C0C4  F06C         	movff	LCD_PrintFloat@fraction+1,?___aldiv+1
 15988  0057B8  C0C5  F06D         	movff	LCD_PrintFloat@fraction+2,?___aldiv+2
 15989  0057BC  C0C6  F06E         	movff	LCD_PrintFloat@fraction+3,?___aldiv+3
 15990  0057C0  0E0A               	movlw	10
 15991  0057C2  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 15992  0057C4  0E00               	movlw	0
 15993  0057C6  6B70               	clrf	(?___aldiv+5)& (0+255),b
 15994  0057C8  6B71               	clrf	(?___aldiv+6)& (0+255),b
 15995  0057CA  6B72               	clrf	(?___aldiv+7)& (0+255),b
 15996  0057CC  EC81  F033         	call	___aldiv	;wreg free
 15997                           
 15998                           ; BSR set to: 0
 15999                           ;LCD.c: 37: LCD_PrintLong(fraction, 4, 0);
 16000  0057D0  D813               	call	PL8	;call to abstracted procedure
 16001  0057D2  0E04               	movlw	4
 16002  0057D4  D00D               	goto	L20
 16003  0057D6                     l17625:
 16004                           
 16005                           ; BSR set to: 0
 16006  0057D6  51BD               	movf	LCD_PrintFloat@fract& (0+255),w,b
 16007  0057D8  0A05               	xorlw	5
 16008  0057DA  A4D8               	btfss	status,2,c
 16009  0057DC  0012               	return	
 16010                           
 16011                           ; BSR set to: 0
 16012                           ;LCD.c: 39: LCD_PrintLong(fraction, 5, 0);
 16013  0057DE  C0C3  F079         	movff	LCD_PrintFloat@fraction,?_LCD_PrintLong
 16014  0057E2  C0C4  F07A         	movff	LCD_PrintFloat@fraction+1,?_LCD_PrintLong+1
 16015  0057E6  C0C5  F07B         	movff	LCD_PrintFloat@fraction+2,?_LCD_PrintLong+2
 16016  0057EA  C0C6  F07C         	movff	LCD_PrintFloat@fraction+3,?_LCD_PrintLong+3
 16017  0057EE  0E05               	movlw	5
 16018  0057F0                     L20:
 16019  0057F0  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 16020  0057F2  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 16021  0057F4  EF66  F023         	goto	_LCD_PrintLong	;wreg free
 16022  0057F8                     __end_of_LCD_PrintFloat:
 16023                           	opt stack 0
 16024  0057F8                     PL8:
 16025  0057F8  C06B  F0C3         	movff	?___aldiv,LCD_PrintFloat@fraction
 16026  0057FC  C06C  F0C4         	movff	?___aldiv+1,LCD_PrintFloat@fraction+1
 16027  005800  C06D  F0C5         	movff	?___aldiv+2,LCD_PrintFloat@fraction+2
 16028  005804  C06E  F0C6         	movff	?___aldiv+3,LCD_PrintFloat@fraction+3
 16029  005808  C0C3  F079         	movff	LCD_PrintFloat@fraction,?_LCD_PrintLong
 16030  00580C  C0C4  F07A         	movff	LCD_PrintFloat@fraction+1,?_LCD_PrintLong+1
 16031  005810  C0C5  F07B         	movff	LCD_PrintFloat@fraction+2,?_LCD_PrintLong+2
 16032  005814  C0C6  F07C         	movff	LCD_PrintFloat@fraction+3,?_LCD_PrintLong+3
 16033  005818  0012               	return	
 16034                           tblptru	equ	0xFF8
 16035                           tblptrh	equ	0xFF7
 16036                           tblptrl	equ	0xFF6
 16037                           tablat	equ	0xFF5
 16038                           prodh	equ	0xFF4
 16039                           prodl	equ	0xFF3
 16040                           intcon	equ	0xFF2
 16041                           intcon2	equ	0xFF1
 16042                           postinc0	equ	0xFEE
 16043                           wreg	equ	0xFE8
 16044                           postinc1	equ	0xFE6
 16045                           postdec1	equ	0xFE5
 16046                           fsr1h	equ	0xFE2
 16047                           fsr1l	equ	0xFE1
 16048                           indf2	equ	0xFDF
 16049                           postinc2	equ	0xFDE
 16050                           postdec2	equ	0xFDD
 16051                           fsr2h	equ	0xFDA
 16052                           fsr2l	equ	0xFD9
 16053                           status	equ	0xFD8
 16054                           
 16055 ;; *************** function _GetTime *****************
 16056 ;; Defined at:
 16057 ;;		line 300 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 16058 ;; Parameters:    Size  Location     Type
 16059 ;;  prompt          2  119[BANK0 ] PTR const unsigned char 
 16060 ;;		 -> STR_80(13), STR_79(14), STR_76(13), STR_42(17), 
 16061 ;;		 -> STR_38(17), STR_34(16), STR_33(21), STR_32(16), 
 16062 ;;  Time            2  121[BANK0 ] PTR 
 16063 ;;		 -> CreateWaypointProgram@DwellTime(3), CreateWaypointProgram@TravelTime(3), CurrentOrbitProgram(18), 
 16064 ;;  Min             3  123[BANK0 ] PTR 
 16065 ;;  Max             3  126[BANK0 ] PTR 
 16066 ;;  Precision       1  129[BANK0 ] unsigned char 
 16067 ;; Auto vars:     Size  Location     Type
 16068 ;;  Tm              3  135[BANK0 ] unsigned char 
 16069 ;;  Milliseconds    2  130[BANK0 ] int 
 16070 ;;  Hours           1  134[BANK0 ] unsigned char 
 16071 ;;  Minutes         1  133[BANK0 ] unsigned char 
 16072 ;;  Seconds         1  132[BANK0 ] unsigned char 
 16073 ;; Return value:  Size  Location     Type
 16074 ;;                  1    wreg      char 
 16075 ;; Registers used:
 16076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 16077 ;; Tracked objects:
 16078 ;;		On entry : F/0
 16079 ;;		On exit  : F/0
 16080 ;;		Unchanged: 0/0
 16081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16082 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16083 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16085 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16086 ;;Total ram usage:       19 bytes
 16087 ;; Hardware stack levels used:    1
 16088 ;; Hardware stack levels required when called:    9
 16089 ;; This function calls:
 16090 ;;		_ConvertTimeToDiscrete
 16091 ;;		_ConvertTimeFromDiscrete
 16092 ;;		___ftge
 16093 ;;		_LCD_ClearDisplay
 16094 ;;		_LCD_PrintString
 16095 ;;		_LCD_SetPosition
 16096 ;;		_PrintTime
 16097 ;;		___asftadd
 16098 ;;		___asftsub
 16099 ;;		_GetInput
 16100 ;; This function is called by:
 16101 ;;		_CreateOrbitProgram
 16102 ;;		_CreateWaypointProgram
 16103 ;; This function uses a non-reentrant model
 16104 ;;
 16105                           
 16106                           	psect	text33
 16107  003576                     __ptext33:
 16108                           	opt stack 0
 16109  003576                     _GetTime:
 16110                           	opt stack 20
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;UserInterface.c: 301: char Seconds, Minutes, Hours;
 16114                           ;UserInterface.c: 302: int Milliseconds;
 16115                           ;UserInterface.c: 303: double Tm = *Time;
 16116                           
 16117                           ; BSR set to: 0
 16118  003576  C0D9  FFD9         	movff	GetTime@Time,fsr2l
 16119  00357A  C0DA  FFDA         	movff	GetTime@Time+1,fsr2h
 16120  00357E  CFDE F0E7          	movff	postinc2,GetTime@Tm
 16121  003582  CFDE F0E8          	movff	postinc2,GetTime@Tm+1
 16122  003586  CFDD F0E9          	movff	postdec2,GetTime@Tm+2
 16123                           
 16124                           ; BSR set to: 0
 16125                           ;UserInterface.c: 304: ConvertTimeToDiscrete(Tm, &Hours, &Minutes, &Seconds, &Millisecon
      +                          ds);
 16126  00358A  C0E7  F0B9         	movff	GetTime@Tm,?_ConvertTimeToDiscrete
 16127  00358E  C0E8  F0BA         	movff	GetTime@Tm+1,?_ConvertTimeToDiscrete+1
 16128  003592  C0E9  F0BB         	movff	GetTime@Tm+2,?_ConvertTimeToDiscrete+2
 16129  003596  0E00               	movlw	high GetTime@Hours
 16130  003598  6FBD               	movwf	(?_ConvertTimeToDiscrete+4)& (0+255),b
 16131  00359A  0EE6               	movlw	low GetTime@Hours
 16132  00359C  6FBC               	movwf	(?_ConvertTimeToDiscrete+3)& (0+255),b
 16133  00359E  0E00               	movlw	high GetTime@Minutes
 16134  0035A0  6FBF               	movwf	(?_ConvertTimeToDiscrete+6)& (0+255),b
 16135  0035A2  0EE5               	movlw	low GetTime@Minutes
 16136  0035A4  6FBE               	movwf	(?_ConvertTimeToDiscrete+5)& (0+255),b
 16137  0035A6  0E00               	movlw	high GetTime@Seconds
 16138  0035A8  6FC1               	movwf	(?_ConvertTimeToDiscrete+8)& (0+255),b
 16139  0035AA  0EE4               	movlw	low GetTime@Seconds
 16140  0035AC  6FC0               	movwf	(?_ConvertTimeToDiscrete+7)& (0+255),b
 16141  0035AE  0E00               	movlw	high GetTime@Milliseconds
 16142  0035B0  6FC3               	movwf	(?_ConvertTimeToDiscrete+10)& (0+255),b
 16143  0035B2  0EE2               	movlw	low GetTime@Milliseconds
 16144  0035B4  6FC2               	movwf	(?_ConvertTimeToDiscrete+9)& (0+255),b
 16145  0035B6  ECC0  F02D         	call	_ConvertTimeToDiscrete	;wreg free
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;UserInterface.c: 305: if (!(Precision & 0b1000)) Hours = 0;
 16149  0035BA  A7E1               	btfss	GetTime@Precision& (0+255),3,b
 16150                           
 16151                           ; BSR set to: 0
 16152  0035BC  6BE6               	clrf	GetTime@Hours& (0+255),b
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;UserInterface.c: 306: if (!(Precision & 0b0100)) Minutes = 0;
 16156  0035BE  A5E1               	btfss	GetTime@Precision& (0+255),2,b
 16157                           
 16158                           ; BSR set to: 0
 16159  0035C0  6BE5               	clrf	GetTime@Minutes& (0+255),b
 16160                           
 16161                           ; BSR set to: 0
 16162                           ;UserInterface.c: 307: if (!(Precision & 0b0010)) Seconds = 0;
 16163  0035C2  A3E1               	btfss	GetTime@Precision& (0+255),1,b
 16164                           
 16165                           ; BSR set to: 0
 16166  0035C4  6BE4               	clrf	GetTime@Seconds& (0+255),b
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;UserInterface.c: 308: if (!(Precision & 0b0001)) Milliseconds = 0;
 16170  0035C6  B1E1               	btfsc	GetTime@Precision& (0+255),0,b
 16171  0035C8  D002               	goto	l20073
 16172                           
 16173                           ; BSR set to: 0
 16174  0035CA  6BE2               	clrf	GetTime@Milliseconds& (0+255),b
 16175  0035CC  6BE3               	clrf	(GetTime@Milliseconds+1)& (0+255),b
 16176  0035CE                     l20073:
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;UserInterface.c: 309: Tm = ConvertTimeFromDiscrete(Hours, Minutes, Seconds, Millisecond
      +                          s);
 16180  0035CE  C0E5  F08D         	movff	GetTime@Minutes,?_ConvertTimeFromDiscrete
 16181  0035D2  C0E4  F08E         	movff	GetTime@Seconds,?_ConvertTimeFromDiscrete+1
 16182  0035D6  C0E2  F08F         	movff	GetTime@Milliseconds,?_ConvertTimeFromDiscrete+2
 16183  0035DA  C0E3  F090         	movff	GetTime@Milliseconds+1,?_ConvertTimeFromDiscrete+3
 16184  0035DE  51E6               	movf	GetTime@Hours& (0+255),w,b
 16185  0035E0  ECBE  F02F         	call	_ConvertTimeFromDiscrete
 16186  0035E4  C08D  F0E7         	movff	?_ConvertTimeFromDiscrete,GetTime@Tm
 16187  0035E8  C08E  F0E8         	movff	?_ConvertTimeFromDiscrete+1,GetTime@Tm+1
 16188  0035EC  C08F  F0E9         	movff	?_ConvertTimeFromDiscrete+2,GetTime@Tm+2
 16189                           
 16190                           ; BSR set to: 0
 16191                           ;UserInterface.c: 310: if (Tm < Min) Tm = Min;
 16192  0035F0  D9AC               	call	PL10	;call to abstracted procedure
 16193  0035F2  ECB1  F037         	call	___ftge	;wreg free
 16194  0035F6  E206               	bc	l20079
 16195                           
 16196                           ; BSR set to: 0
 16197  0035F8  C0DB  F0E7         	movff	GetTime@Min,GetTime@Tm
 16198  0035FC  C0DC  F0E8         	movff	GetTime@Min+1,GetTime@Tm+1
 16199  003600  C0DD  F0E9         	movff	GetTime@Min+2,GetTime@Tm+2
 16200  003604                     l20079:
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;UserInterface.c: 311: if (Tm > Max) Tm = Max;
 16204  003604  D995               	call	PL9	;call to abstracted procedure
 16205  003606  ECB1  F037         	call	___ftge	;wreg free
 16206  00360A  E201               	bc	l2172
 16207                           
 16208                           ; BSR set to: 0
 16209  00360C  D9AB               	call	PL33	;call to abstracted procedure
 16210  00360E                     l2172:
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;UserInterface.c: 314: if (!(Precision & 0b1000)) goto labelMinutes;
 16214  00360E  A7E1               	btfss	GetTime@Precision& (0+255),3,b
 16215  003610  D05F               	goto	l2174
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;UserInterface.c: 315: LCD_ClearDisplay();
 16219  003612  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;UserInterface.c: 316: LCD_PrintString(prompt);
 16223  003616  C0D7  F076         	movff	GetTime@prompt,?_LCD_PrintString
 16224  00361A  C0D8  F077         	movff	GetTime@prompt+1,?_LCD_PrintString+1
 16225  00361E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;UserInterface.c: 317: LCD_PrintString("<H>");
 16229  003622  0E1D               	movlw	high STR_57
 16230  003624  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16231  003626  0EAD               	movlw	low STR_57
 16232  003628  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16233  00362A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;UserInterface.c: 318: LCD_SetPosition(1, 0);
 16237  00362E  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16238  003630  0E01               	movlw	1
 16239  003632  ECDF  F036         	call	_LCD_SetPosition
 16240                           
 16241                           ; BSR set to: 0
 16242                           ;UserInterface.c: 319: LCD_PrintString("                   \0");
 16243  003636  0E19               	movlw	high STR_58
 16244  003638  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16245  00363A  0EFA               	movlw	low STR_58
 16246  00363C  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16247  00363E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16248  003642                     l20095:
 16249                           
 16250                           ; BSR set to: 0
 16251                           ;UserInterface.c: 321: LCD_SetPosition(1, 0);
 16252  003642  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16253  003644  0E01               	movlw	1
 16254  003646  ECDF  F036         	call	_LCD_SetPosition
 16255                           
 16256                           ; BSR set to: 0
 16257                           ;UserInterface.c: 322: PrintTime(Tm, Precision, 0b1000);
 16258  00364A  C0E7  F0CD         	movff	GetTime@Tm,?_PrintTime
 16259  00364E  C0E8  F0CE         	movff	GetTime@Tm+1,?_PrintTime+1
 16260  003652  C0E9  F0CF         	movff	GetTime@Tm+2,?_PrintTime+2
 16261  003656  C0E1  F0D0         	movff	GetTime@Precision,?_PrintTime+3
 16262  00365A  0E08               	movlw	8
 16263  00365C  6FD1               	movwf	(?_PrintTime+4)& (0+255),b
 16264  00365E  EC47  F030         	call	_PrintTime	;wreg free
 16265                           
 16266                           ;UserInterface.c: 323: switch (GetInput()) {
 16267  003662  D029               	goto	l20121
 16268  003664                     l20099:
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;UserInterface.c: 327: return (-1);
 16272  003664  0CFF               	retlw	255
 16273  003666                     l20103:
 16274                           
 16275                           ; BSR set to: 0
 16276                           ;UserInterface.c: 329: return (-2);
 16277  003666  0CFE               	retlw	254
 16278  003668                     l20107:
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;UserInterface.c: 331: Tm += 3600;
 16282  003668  0E00               	movlw	high GetTime@Tm
 16283  00366A  6F89               	movwf	(?___asftadd+1)& (0+255),b
 16284  00366C  0EE7               	movlw	low GetTime@Tm
 16285  00366E  6F88               	movwf	?___asftadd& (0+255),b
 16286  003670  6B8A               	clrf	(?___asftadd+2)& (0+255),b
 16287  003672  0E61               	movlw	97
 16288  003674  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 16289  003676  0E45               	movlw	69
 16290  003678  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 16291  00367A  EC53  F03A         	call	___asftadd	;wreg free
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;UserInterface.c: 332: if (Tm > Max) Tm = Max;
 16295  00367E  D958               	call	PL9	;call to abstracted procedure
 16296  003680  ECB1  F037         	call	___ftge	;wreg free
 16297  003684  E2DE               	bc	l20095
 16298                           
 16299                           ; BSR set to: 0
 16300  003686  D96E               	call	PL33	;call to abstracted procedure
 16301  003688  D7DC               	goto	l20095
 16302  00368A                     l20113:
 16303                           
 16304                           ; BSR set to: 0
 16305                           ;UserInterface.c: 335: Tm -= 3600;
 16306  00368A  0E00               	movlw	high GetTime@Tm
 16307  00368C  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 16308  00368E  0EE7               	movlw	low GetTime@Tm
 16309  003690  6F9F               	movwf	?___asftsub& (0+255),b
 16310  003692  6BA1               	clrf	(?___asftsub+2)& (0+255),b
 16311  003694  0E61               	movlw	97
 16312  003696  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 16313  003698  0E45               	movlw	69
 16314  00369A  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 16315  00369C  EC17  F03A         	call	___asftsub	;wreg free
 16316                           
 16317                           ; BSR set to: 0
 16318                           ;UserInterface.c: 336: if (Tm < Min) Tm = Min;
 16319  0036A0  D954               	call	PL10	;call to abstracted procedure
 16320  0036A2  ECB1  F037         	call	___ftge	;wreg free
 16321  0036A6  E2CD               	bc	l20095
 16322                           
 16323                           ; BSR set to: 0
 16324  0036A8  C0DB  F0E7         	movff	GetTime@Min,GetTime@Tm
 16325  0036AC  C0DC  F0E8         	movff	GetTime@Min+1,GetTime@Tm+1
 16326  0036B0  C0DD  F0E9         	movff	GetTime@Min+2,GetTime@Tm+2
 16327  0036B4  D7C6               	goto	l20095
 16328  0036B6                     l20121:
 16329                           
 16330                           ; BSR set to: 0
 16331  0036B6  EC39  F03B         	call	_GetInput	;wreg free
 16332                           
 16333                           ; Switch size 1, requested type "space"
 16334                           ; Number of cases is 5, Range of values is 1 to 5
 16335                           ; switch strategies available:
 16336                           ; Name         Instructions Cycles
 16337                           ; simple_byte           16     9 (average)
 16338                           ;	Chosen strategy is simple_byte
 16339  0036BA  0A01               	xorlw	1	; case 1
 16340  0036BC  E009               	bz	l2174
 16341  0036BE  0A03               	xorlw	3	; case 2
 16342  0036C0  E0D1               	bz	l20099
 16343  0036C2  0A01               	xorlw	1	; case 3
 16344  0036C4  E0D0               	bz	l20103
 16345  0036C6  0A07               	xorlw	7	; case 4
 16346  0036C8  E0CF               	bz	l20107
 16347  0036CA  0A01               	xorlw	1	; case 5
 16348  0036CC  E0DE               	bz	l20113
 16349  0036CE  D7B9               	goto	l20095
 16350  0036D0                     l2174:
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;UserInterface.c: 341: if (!(Precision & 0b0100)) goto labelSeconds;
 16354  0036D0  A5E1               	btfss	GetTime@Precision& (0+255),2,b
 16355  0036D2  D05F               	goto	l2189
 16356                           
 16357                           ; BSR set to: 0
 16358                           ;UserInterface.c: 342: LCD_ClearDisplay();
 16359  0036D4  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 16360                           
 16361                           ; BSR set to: 0
 16362                           ;UserInterface.c: 343: LCD_PrintString(prompt);
 16363  0036D8  C0D7  F076         	movff	GetTime@prompt,?_LCD_PrintString
 16364  0036DC  C0D8  F077         	movff	GetTime@prompt+1,?_LCD_PrintString+1
 16365  0036E0  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;UserInterface.c: 344: LCD_PrintString("<M>");
 16369  0036E4  0E1D               	movlw	high STR_59
 16370  0036E6  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16371  0036E8  0EB1               	movlw	low STR_59
 16372  0036EA  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16373  0036EC  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16374                           
 16375                           ; BSR set to: 0
 16376                           ;UserInterface.c: 345: LCD_SetPosition(1, 0);
 16377  0036F0  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16378  0036F2  0E01               	movlw	1
 16379  0036F4  ECDF  F036         	call	_LCD_SetPosition
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;UserInterface.c: 346: LCD_PrintString("                   \0");
 16383  0036F8  0E19               	movlw	high STR_58
 16384  0036FA  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16385  0036FC  0EFA               	movlw	low STR_58
 16386  0036FE  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16387  003700  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16388  003704                     l20135:
 16389                           
 16390                           ; BSR set to: 0
 16391                           ;UserInterface.c: 348: LCD_SetPosition(1, 0);
 16392  003704  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16393  003706  0E01               	movlw	1
 16394  003708  ECDF  F036         	call	_LCD_SetPosition
 16395                           
 16396                           ; BSR set to: 0
 16397                           ;UserInterface.c: 349: PrintTime(Tm, Precision, 0b0100);
 16398  00370C  C0E7  F0CD         	movff	GetTime@Tm,?_PrintTime
 16399  003710  C0E8  F0CE         	movff	GetTime@Tm+1,?_PrintTime+1
 16400  003714  C0E9  F0CF         	movff	GetTime@Tm+2,?_PrintTime+2
 16401  003718  C0E1  F0D0         	movff	GetTime@Precision,?_PrintTime+3
 16402  00371C  0E04               	movlw	4
 16403  00371E  6FD1               	movwf	(?_PrintTime+4)& (0+255),b
 16404  003720  EC47  F030         	call	_PrintTime	;wreg free
 16405                           
 16406                           ;UserInterface.c: 350: switch (GetInput()) {
 16407  003724  D027               	goto	l20157
 16408  003726                     l20143:
 16409                           
 16410                           ; BSR set to: 0
 16411                           ;UserInterface.c: 358: Tm += 60;
 16412  003726  0E00               	movlw	high GetTime@Tm
 16413  003728  6F89               	movwf	(?___asftadd+1)& (0+255),b
 16414  00372A  0EE7               	movlw	low GetTime@Tm
 16415  00372C  6F88               	movwf	?___asftadd& (0+255),b
 16416  00372E  6B8A               	clrf	(?___asftadd+2)& (0+255),b
 16417  003730  0E70               	movlw	112
 16418  003732  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 16419  003734  0E42               	movlw	66
 16420  003736  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 16421  003738  EC53  F03A         	call	___asftadd	;wreg free
 16422                           
 16423                           ; BSR set to: 0
 16424                           ;UserInterface.c: 359: if (Tm > Max) Tm = Max;
 16425  00373C  D8F9               	call	PL9	;call to abstracted procedure
 16426  00373E  ECB1  F037         	call	___ftge	;wreg free
 16427  003742  E2E0               	bc	l20135
 16428                           
 16429                           ; BSR set to: 0
 16430  003744  D90F               	call	PL33	;call to abstracted procedure
 16431  003746  D7DE               	goto	l20135
 16432  003748                     l20149:
 16433                           
 16434                           ; BSR set to: 0
 16435                           ;UserInterface.c: 362: Tm -= 60;
 16436  003748  0E00               	movlw	high GetTime@Tm
 16437  00374A  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 16438  00374C  0EE7               	movlw	low GetTime@Tm
 16439  00374E  6F9F               	movwf	?___asftsub& (0+255),b
 16440  003750  6BA1               	clrf	(?___asftsub+2)& (0+255),b
 16441  003752  0E70               	movlw	112
 16442  003754  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 16443  003756  0E42               	movlw	66
 16444  003758  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 16445  00375A  EC17  F03A         	call	___asftsub	;wreg free
 16446                           
 16447                           ; BSR set to: 0
 16448                           ;UserInterface.c: 363: if (Tm < Min) Tm = Min;
 16449  00375E  D8F5               	call	PL10	;call to abstracted procedure
 16450  003760  ECB1  F037         	call	___ftge	;wreg free
 16451  003764  E2CF               	bc	l20135
 16452                           
 16453                           ; BSR set to: 0
 16454  003766  C0DB  F0E7         	movff	GetTime@Min,GetTime@Tm
 16455  00376A  C0DC  F0E8         	movff	GetTime@Min+1,GetTime@Tm+1
 16456  00376E  C0DD  F0E9         	movff	GetTime@Min+2,GetTime@Tm+2
 16457  003772  D7C8               	goto	l20135
 16458  003774                     l20157:
 16459                           
 16460                           ; BSR set to: 0
 16461  003774  EC39  F03B         	call	_GetInput	;wreg free
 16462                           
 16463                           ; Switch size 1, requested type "space"
 16464                           ; Number of cases is 5, Range of values is 1 to 5
 16465                           ; switch strategies available:
 16466                           ; Name         Instructions Cycles
 16467                           ; simple_byte           16     9 (average)
 16468                           ;	Chosen strategy is simple_byte
 16469  003778  0A01               	xorlw	1	; case 1
 16470  00377A  E00B               	bz	l2189
 16471  00377C  0A03               	xorlw	3	; case 2
 16472  00377E  E101 D746          	bz	l2172
 16473  003782  0A01               	xorlw	1	; case 3
 16474  003784  E101 D76F          	bz	l20103
 16475  003788  0A07               	xorlw	7	; case 4
 16476  00378A  E0CD               	bz	l20143
 16477  00378C  0A01               	xorlw	1	; case 5
 16478  00378E  E0DC               	bz	l20149
 16479  003790  D7B9               	goto	l20135
 16480  003792                     l2189:
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;UserInterface.c: 368: if (!(Precision & 0b0010)) goto labelMilliseconds;
 16484  003792  A3E1               	btfss	GetTime@Precision& (0+255),1,b
 16485  003794  D05F               	goto	l2203
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;UserInterface.c: 369: LCD_ClearDisplay();
 16489  003796  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;UserInterface.c: 370: LCD_PrintString(prompt);
 16493  00379A  C0D7  F076         	movff	GetTime@prompt,?_LCD_PrintString
 16494  00379E  C0D8  F077         	movff	GetTime@prompt+1,?_LCD_PrintString+1
 16495  0037A2  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16496                           
 16497                           ; BSR set to: 0
 16498                           ;UserInterface.c: 371: LCD_PrintString("<S>");
 16499  0037A6  0E1D               	movlw	high STR_61
 16500  0037A8  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16501  0037AA  0EB5               	movlw	low STR_61
 16502  0037AC  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16503  0037AE  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16504                           
 16505                           ; BSR set to: 0
 16506                           ;UserInterface.c: 372: LCD_SetPosition(1, 0);
 16507  0037B2  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16508  0037B4  0E01               	movlw	1
 16509  0037B6  ECDF  F036         	call	_LCD_SetPosition
 16510                           
 16511                           ; BSR set to: 0
 16512                           ;UserInterface.c: 373: LCD_PrintString("                   \0");
 16513  0037BA  0E19               	movlw	high STR_58
 16514  0037BC  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16515  0037BE  0EFA               	movlw	low STR_58
 16516  0037C0  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16517  0037C2  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16518  0037C6                     l20171:
 16519                           
 16520                           ; BSR set to: 0
 16521                           ;UserInterface.c: 375: LCD_SetPosition(1, 0);
 16522  0037C6  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16523  0037C8  0E01               	movlw	1
 16524  0037CA  ECDF  F036         	call	_LCD_SetPosition
 16525                           
 16526                           ; BSR set to: 0
 16527                           ;UserInterface.c: 376: PrintTime(Tm, Precision, 0b0010);
 16528  0037CE  C0E7  F0CD         	movff	GetTime@Tm,?_PrintTime
 16529  0037D2  C0E8  F0CE         	movff	GetTime@Tm+1,?_PrintTime+1
 16530  0037D6  C0E9  F0CF         	movff	GetTime@Tm+2,?_PrintTime+2
 16531  0037DA  C0E1  F0D0         	movff	GetTime@Precision,?_PrintTime+3
 16532  0037DE  0E02               	movlw	2
 16533  0037E0  6FD1               	movwf	(?_PrintTime+4)& (0+255),b
 16534  0037E2  EC47  F030         	call	_PrintTime	;wreg free
 16535                           
 16536                           ;UserInterface.c: 377: switch (GetInput()) {
 16537  0037E6  D027               	goto	l20193
 16538  0037E8                     l20179:
 16539                           
 16540                           ; BSR set to: 0
 16541                           ;UserInterface.c: 385: Tm += 1;
 16542  0037E8  0E00               	movlw	high GetTime@Tm
 16543  0037EA  6F89               	movwf	(?___asftadd+1)& (0+255),b
 16544  0037EC  0EE7               	movlw	low GetTime@Tm
 16545  0037EE  6F88               	movwf	?___asftadd& (0+255),b
 16546  0037F0  6B8A               	clrf	(?___asftadd+2)& (0+255),b
 16547  0037F2  0E80               	movlw	128
 16548  0037F4  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 16549  0037F6  0E3F               	movlw	63
 16550  0037F8  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 16551  0037FA  EC53  F03A         	call	___asftadd	;wreg free
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;UserInterface.c: 386: if (Tm > Max) Tm = Max;
 16555  0037FE  D898               	call	PL9	;call to abstracted procedure
 16556  003800  ECB1  F037         	call	___ftge	;wreg free
 16557  003804  E2E0               	bc	l20171
 16558                           
 16559                           ; BSR set to: 0
 16560  003806  D8AE               	call	PL33	;call to abstracted procedure
 16561  003808  D7DE               	goto	l20171
 16562  00380A                     l20185:
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;UserInterface.c: 389: Tm -= 1;
 16566  00380A  0E00               	movlw	high GetTime@Tm
 16567  00380C  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 16568  00380E  0EE7               	movlw	low GetTime@Tm
 16569  003810  6F9F               	movwf	?___asftsub& (0+255),b
 16570  003812  6BA1               	clrf	(?___asftsub+2)& (0+255),b
 16571  003814  0E80               	movlw	128
 16572  003816  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 16573  003818  0E3F               	movlw	63
 16574  00381A  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 16575  00381C  EC17  F03A         	call	___asftsub	;wreg free
 16576                           
 16577                           ; BSR set to: 0
 16578                           ;UserInterface.c: 390: if (Tm < Min) Tm = Min;
 16579  003820  D894               	call	PL10	;call to abstracted procedure
 16580  003822  ECB1  F037         	call	___ftge	;wreg free
 16581  003826  E2CF               	bc	l20171
 16582                           
 16583                           ; BSR set to: 0
 16584  003828  C0DB  F0E7         	movff	GetTime@Min,GetTime@Tm
 16585  00382C  C0DC  F0E8         	movff	GetTime@Min+1,GetTime@Tm+1
 16586  003830  C0DD  F0E9         	movff	GetTime@Min+2,GetTime@Tm+2
 16587  003834  D7C8               	goto	l20171
 16588  003836                     l20193:
 16589                           
 16590                           ; BSR set to: 0
 16591  003836  EC39  F03B         	call	_GetInput	;wreg free
 16592                           
 16593                           ; Switch size 1, requested type "space"
 16594                           ; Number of cases is 5, Range of values is 1 to 5
 16595                           ; switch strategies available:
 16596                           ; Name         Instructions Cycles
 16597                           ; simple_byte           16     9 (average)
 16598                           ;	Chosen strategy is simple_byte
 16599  00383A  0A01               	xorlw	1	; case 1
 16600  00383C  E00B               	bz	l2203
 16601  00383E  0A03               	xorlw	3	; case 2
 16602  003840  E101 D746          	bz	l2174
 16603  003844  0A01               	xorlw	1	; case 3
 16604  003846  E101 D70E          	bz	l20103
 16605  00384A  0A07               	xorlw	7	; case 4
 16606  00384C  E0CD               	bz	l20179
 16607  00384E  0A01               	xorlw	1	; case 5
 16608  003850  E0DC               	bz	l20185
 16609  003852  D7B9               	goto	l20171
 16610  003854                     l2203:
 16611                           
 16612                           ; BSR set to: 0
 16613                           ;UserInterface.c: 395: if (!(Precision & 0b0001)) goto labelFinished;
 16614  003854  A1E1               	btfss	GetTime@Precision& (0+255),0,b
 16615  003856  D061               	goto	l20231
 16616                           
 16617                           ; BSR set to: 0
 16618                           ;UserInterface.c: 396: LCD_ClearDisplay();
 16619  003858  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;UserInterface.c: 397: LCD_PrintString(prompt);
 16623  00385C  C0D7  F076         	movff	GetTime@prompt,?_LCD_PrintString
 16624  003860  C0D8  F077         	movff	GetTime@prompt+1,?_LCD_PrintString+1
 16625  003864  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16626                           
 16627                           ; BSR set to: 0
 16628                           ;UserInterface.c: 398: LCD_PrintString("<ms>");
 16629  003868  0E1D               	movlw	high STR_63
 16630  00386A  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16631  00386C  0EA8               	movlw	low STR_63
 16632  00386E  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16633  003870  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16634                           
 16635                           ; BSR set to: 0
 16636                           ;UserInterface.c: 399: LCD_SetPosition(1, 0);
 16637  003874  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16638  003876  0E01               	movlw	1
 16639  003878  ECDF  F036         	call	_LCD_SetPosition
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;UserInterface.c: 400: LCD_PrintString("                   \0");
 16643  00387C  0E19               	movlw	high STR_58
 16644  00387E  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 16645  003880  0EFA               	movlw	low STR_58
 16646  003882  6F76               	movwf	?_LCD_PrintString& (0+255),b
 16647  003884  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 16648  003888                     l20207:
 16649                           
 16650                           ; BSR set to: 0
 16651                           ;UserInterface.c: 402: LCD_SetPosition(1, 0);
 16652  003888  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 16653  00388A  0E01               	movlw	1
 16654  00388C  ECDF  F036         	call	_LCD_SetPosition
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;UserInterface.c: 403: PrintTime(Tm, Precision, 0b0001);
 16658  003890  C0E7  F0CD         	movff	GetTime@Tm,?_PrintTime
 16659  003894  C0E8  F0CE         	movff	GetTime@Tm+1,?_PrintTime+1
 16660  003898  C0E9  F0CF         	movff	GetTime@Tm+2,?_PrintTime+2
 16661  00389C  C0E1  F0D0         	movff	GetTime@Precision,?_PrintTime+3
 16662  0038A0  0E01               	movlw	1
 16663  0038A2  6FD1               	movwf	(?_PrintTime+4)& (0+255),b
 16664  0038A4  EC47  F030         	call	_PrintTime	;wreg free
 16665                           
 16666                           ;UserInterface.c: 404: switch (GetInput()) {
 16667  0038A8  D029               	goto	l20229
 16668  0038AA                     l20215:
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;UserInterface.c: 412: Tm += 0.1;
 16672  0038AA  0E00               	movlw	high GetTime@Tm
 16673  0038AC  6F89               	movwf	(?___asftadd+1)& (0+255),b
 16674  0038AE  0EE7               	movlw	low GetTime@Tm
 16675  0038B0  6F88               	movwf	?___asftadd& (0+255),b
 16676  0038B2  0ECD               	movlw	205
 16677  0038B4  6F8A               	movwf	(?___asftadd+2)& (0+255),b
 16678  0038B6  0ECC               	movlw	204
 16679  0038B8  6F8B               	movwf	(?___asftadd+3)& (0+255),b
 16680  0038BA  0E3D               	movlw	61
 16681  0038BC  6F8C               	movwf	(?___asftadd+4)& (0+255),b
 16682  0038BE  EC53  F03A         	call	___asftadd	;wreg free
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;UserInterface.c: 413: if (Tm > Max) Tm = Max;
 16686  0038C2  D836               	call	PL9	;call to abstracted procedure
 16687  0038C4  ECB1  F037         	call	___ftge	;wreg free
 16688  0038C8  E2DF               	bc	l20207
 16689                           
 16690                           ; BSR set to: 0
 16691  0038CA  D84C               	call	PL33	;call to abstracted procedure
 16692  0038CC  D7DD               	goto	l20207
 16693  0038CE                     l20221:
 16694                           
 16695                           ; BSR set to: 0
 16696                           ;UserInterface.c: 416: Tm -= 0.1;
 16697  0038CE  0E00               	movlw	high GetTime@Tm
 16698  0038D0  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 16699  0038D2  0EE7               	movlw	low GetTime@Tm
 16700  0038D4  6F9F               	movwf	?___asftsub& (0+255),b
 16701  0038D6  0ECD               	movlw	205
 16702  0038D8  6FA1               	movwf	(?___asftsub+2)& (0+255),b
 16703  0038DA  0ECC               	movlw	204
 16704  0038DC  6FA2               	movwf	(?___asftsub+3)& (0+255),b
 16705  0038DE  0E3D               	movlw	61
 16706  0038E0  6FA3               	movwf	(?___asftsub+4)& (0+255),b
 16707  0038E2  EC17  F03A         	call	___asftsub	;wreg free
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;UserInterface.c: 417: if (Tm < Min) Tm = Min;
 16711  0038E6  D831               	call	PL10	;call to abstracted procedure
 16712  0038E8  ECB1  F037         	call	___ftge	;wreg free
 16713  0038EC  E2CD               	bc	l20207
 16714                           
 16715                           ; BSR set to: 0
 16716  0038EE  C0DB  F0E7         	movff	GetTime@Min,GetTime@Tm
 16717  0038F2  C0DC  F0E8         	movff	GetTime@Min+1,GetTime@Tm+1
 16718  0038F6  C0DD  F0E9         	movff	GetTime@Min+2,GetTime@Tm+2
 16719  0038FA  D7C6               	goto	l20207
 16720  0038FC                     l20229:
 16721                           
 16722                           ; BSR set to: 0
 16723  0038FC  EC39  F03B         	call	_GetInput	;wreg free
 16724                           
 16725                           ; Switch size 1, requested type "space"
 16726                           ; Number of cases is 5, Range of values is 1 to 5
 16727                           ; switch strategies available:
 16728                           ; Name         Instructions Cycles
 16729                           ; simple_byte           16     9 (average)
 16730                           ;	Chosen strategy is simple_byte
 16731  003900  0A01               	xorlw	1	; case 1
 16732  003902  E00B               	bz	l20231
 16733  003904  0A03               	xorlw	3	; case 2
 16734  003906  E101 D744          	bz	l2189
 16735  00390A  0A01               	xorlw	1	; case 3
 16736  00390C  E101 D6AB          	bz	l20103
 16737  003910  0A07               	xorlw	7	; case 4
 16738  003912  E0CB               	bz	l20215
 16739  003914  0A01               	xorlw	1	; case 5
 16740  003916  E0DB               	bz	l20221
 16741  003918  D7B7               	goto	l20207
 16742  00391A                     l20231:
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;UserInterface.c: 422: *Time = Tm;
 16746  00391A  C0D9  FFD9         	movff	GetTime@Time,fsr2l
 16747  00391E  C0DA  FFDA         	movff	GetTime@Time+1,fsr2h
 16748  003922  C0E7  FFDE         	movff	GetTime@Tm,postinc2
 16749  003926  C0E8  FFDE         	movff	GetTime@Tm+1,postinc2
 16750  00392A  C0E9  FFDD         	movff	GetTime@Tm+2,postdec2
 16751                           
 16752                           ; BSR set to: 0
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;UserInterface.c: 423: return 0;
 16756  00392E  0C00               	retlw	0
 16757  003930                     __end_of_GetTime:
 16758                           	opt stack 0
 16759  003930                     PL9:
 16760  003930  C0DE  F088         	movff	GetTime@Max,?___ftge
 16761  003934  C0DF  F089         	movff	GetTime@Max+1,?___ftge+1
 16762  003938  C0E0  F08A         	movff	GetTime@Max+2,?___ftge+2
 16763  00393C  C0E7  F08B         	movff	GetTime@Tm,?___ftge+3
 16764  003940  C0E8  F08C         	movff	GetTime@Tm+1,?___ftge+4
 16765  003944  C0E9  F08D         	movff	GetTime@Tm+2,?___ftge+5
 16766  003948  0012               	return	
 16767  00394A                     PL10:
 16768  00394A  C0E7  F088         	movff	GetTime@Tm,?___ftge
 16769  00394E  C0E8  F089         	movff	GetTime@Tm+1,?___ftge+1
 16770  003952  C0E9  F08A         	movff	GetTime@Tm+2,?___ftge+2
 16771  003956  C0DB  F08B         	movff	GetTime@Min,?___ftge+3
 16772  00395A  C0DC  F08C         	movff	GetTime@Min+1,?___ftge+4
 16773  00395E  C0DD  F08D         	movff	GetTime@Min+2,?___ftge+5
 16774  003962  0012               	return	
 16775  003964                     PL33:
 16776  003964  C0DE  F0E7         	movff	GetTime@Max,GetTime@Tm
 16777  003968  C0DF  F0E8         	movff	GetTime@Max+1,GetTime@Tm+1
 16778  00396C  C0E0  F0E9         	movff	GetTime@Max+2,GetTime@Tm+2
 16779  003970  0012               	return	
 16780                           tblptru	equ	0xFF8
 16781                           tblptrh	equ	0xFF7
 16782                           tblptrl	equ	0xFF6
 16783                           tablat	equ	0xFF5
 16784                           prodh	equ	0xFF4
 16785                           prodl	equ	0xFF3
 16786                           intcon	equ	0xFF2
 16787                           intcon2	equ	0xFF1
 16788                           postinc0	equ	0xFEE
 16789                           wreg	equ	0xFE8
 16790                           postinc1	equ	0xFE6
 16791                           postdec1	equ	0xFE5
 16792                           fsr1h	equ	0xFE2
 16793                           fsr1l	equ	0xFE1
 16794                           indf2	equ	0xFDF
 16795                           postinc2	equ	0xFDE
 16796                           postdec2	equ	0xFDD
 16797                           fsr2h	equ	0xFDA
 16798                           fsr2l	equ	0xFD9
 16799                           status	equ	0xFD8
 16800                           
 16801 ;; *************** function _PrintTime *****************
 16802 ;; Defined at:
 16803 ;;		line 448 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 16804 ;; Parameters:    Size  Location     Type
 16805 ;;  dat             3  109[BANK0 ] char 
 16806 ;;  precision       1  112[BANK0 ] unsigned char 
 16807 ;;  EditChevron     1  113[BANK0 ] unsigned char 
 16808 ;; Auto vars:     Size  Location     Type
 16809 ;;  Milliseconds    2  117[BANK0 ] int 
 16810 ;;  Seconds         1  116[BANK0 ] unsigned char 
 16811 ;;  Minutes         1  115[BANK0 ] unsigned char 
 16812 ;;  Hours           1  114[BANK0 ] unsigned char 
 16813 ;; Return value:  Size  Location     Type
 16814 ;;		None               void
 16815 ;; Registers used:
 16816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16817 ;; Tracked objects:
 16818 ;;		On entry : F/0
 16819 ;;		On exit  : F/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16822 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16826 ;;Total ram usage:       10 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; Hardware stack levels required when called:    8
 16829 ;; This function calls:
 16830 ;;		_ConvertTimeToDiscrete
 16831 ;;		___awdiv
 16832 ;;		_LCD_PrintChar
 16833 ;;		_LCD_PrintLong
 16834 ;; This function is called by:
 16835 ;;		_RunOrbitProgram
 16836 ;;		_GetTime
 16837 ;; This function uses a non-reentrant model
 16838 ;;
 16839                           
 16840                           	psect	text34
 16841  00608E                     __ptext34:
 16842                           	opt stack 0
 16843  00608E                     _PrintTime:
 16844                           	opt stack 21
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;UserInterface.c: 449: char Hours, Minutes, Seconds;
 16848                           ;UserInterface.c: 450: int Milliseconds;
 16849                           ;UserInterface.c: 452: ConvertTimeToDiscrete(dat, &Hours, &Minutes, &Seconds, &Milliseco
      +                          nds);
 16850                           
 16851                           ; BSR set to: 0
 16852  00608E  C0CD  F0B9         	movff	PrintTime@dat,?_ConvertTimeToDiscrete
 16853  006092  C0CE  F0BA         	movff	PrintTime@dat+1,?_ConvertTimeToDiscrete+1
 16854  006096  C0CF  F0BB         	movff	PrintTime@dat+2,?_ConvertTimeToDiscrete+2
 16855  00609A  0E00               	movlw	high PrintTime@Hours
 16856  00609C  6FBD               	movwf	(?_ConvertTimeToDiscrete+4)& (0+255),b
 16857  00609E  0ED2               	movlw	low PrintTime@Hours
 16858  0060A0  6FBC               	movwf	(?_ConvertTimeToDiscrete+3)& (0+255),b
 16859  0060A2  0E00               	movlw	high PrintTime@Minutes
 16860  0060A4  6FBF               	movwf	(?_ConvertTimeToDiscrete+6)& (0+255),b
 16861  0060A6  0ED3               	movlw	low PrintTime@Minutes
 16862  0060A8  6FBE               	movwf	(?_ConvertTimeToDiscrete+5)& (0+255),b
 16863  0060AA  0E00               	movlw	high PrintTime@Seconds
 16864  0060AC  6FC1               	movwf	(?_ConvertTimeToDiscrete+8)& (0+255),b
 16865  0060AE  0ED4               	movlw	low PrintTime@Seconds
 16866  0060B0  6FC0               	movwf	(?_ConvertTimeToDiscrete+7)& (0+255),b
 16867  0060B2  0E00               	movlw	high PrintTime@Milliseconds
 16868  0060B4  6FC3               	movwf	(?_ConvertTimeToDiscrete+10)& (0+255),b
 16869  0060B6  0ED5               	movlw	low PrintTime@Milliseconds
 16870  0060B8  6FC2               	movwf	(?_ConvertTimeToDiscrete+9)& (0+255),b
 16871  0060BA  ECC0  F02D         	call	_ConvertTimeToDiscrete	;wreg free
 16872                           
 16873                           ; BSR set to: 0
 16874                           ;UserInterface.c: 455: Milliseconds /= 100;
 16875  0060BE  C0D5  F06B         	movff	PrintTime@Milliseconds,?___awdiv
 16876  0060C2  C0D6  F06C         	movff	PrintTime@Milliseconds+1,?___awdiv+1
 16877  0060C6  6B6E               	clrf	(?___awdiv+3)& (0+255),b
 16878  0060C8  0E64               	movlw	100
 16879  0060CA  6F6D               	movwf	(?___awdiv+2)& (0+255),b
 16880  0060CC  EC6B  F036         	call	___awdiv	;wreg free
 16881  0060D0  C06B  F0D5         	movff	?___awdiv,PrintTime@Milliseconds
 16882  0060D4  C06C  F0D6         	movff	?___awdiv+1,PrintTime@Milliseconds+1
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;UserInterface.c: 458: if (precision & 0b1000) {
 16886  0060D8  A7D0               	btfss	PrintTime@precision& (0+255),3,b
 16887  0060DA  D00E               	goto	l20251
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;UserInterface.c: 459: if (EditChevron & 0b1000) LCD_PrintChar('<');
 16891  0060DC  A7D1               	btfss	PrintTime@EditChevron& (0+255),3,b
 16892  0060DE  D003               	goto	l2236
 16893                           
 16894                           ; BSR set to: 0
 16895  0060E0  0E3C               	movlw	60
 16896  0060E2  EC6A  F035         	call	_LCD_PrintChar
 16897  0060E6                     l2236:
 16898                           
 16899                           ; BSR set to: 0
 16900                           ;UserInterface.c: 460: LCD_PrintLong((int) Hours, 2, 0);
 16901  0060E6  51D2               	movf	PrintTime@Hours& (0+255),w,b
 16902  0060E8  D851               	call	PL22	;call to abstracted procedure
 16903  0060EA  EC66  F023         	call	_LCD_PrintLong	;wreg free
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;UserInterface.c: 461: if (EditChevron & 0b1000) LCD_PrintChar('>');
 16907  0060EE  A7D1               	btfss	PrintTime@EditChevron& (0+255),3,b
 16908  0060F0  D003               	goto	l20251
 16909                           
 16910                           ; BSR set to: 0
 16911  0060F2  0E3E               	movlw	62
 16912  0060F4  EC6A  F035         	call	_LCD_PrintChar
 16913  0060F8                     l20251:
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;UserInterface.c: 462: }
 16917                           ;UserInterface.c: 464: if (precision & 0b0100) {
 16918  0060F8  A5D0               	btfss	PrintTime@precision& (0+255),2,b
 16919  0060FA  D013               	goto	l20265
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;UserInterface.c: 465: if (precision & 0b00001000) LCD_PrintChar(':');
 16923  0060FC  A7D0               	btfss	PrintTime@precision& (0+255),3,b
 16924  0060FE  D003               	goto	l20257
 16925                           
 16926                           ; BSR set to: 0
 16927  006100  0E3A               	movlw	58
 16928  006102  EC6A  F035         	call	_LCD_PrintChar
 16929  006106                     l20257:
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;UserInterface.c: 466: if (EditChevron & 0b0100) LCD_PrintChar('<');
 16933  006106  A5D1               	btfss	PrintTime@EditChevron& (0+255),2,b
 16934  006108  D003               	goto	l2240
 16935                           
 16936                           ; BSR set to: 0
 16937  00610A  0E3C               	movlw	60
 16938  00610C  EC6A  F035         	call	_LCD_PrintChar
 16939  006110                     l2240:
 16940                           
 16941                           ; BSR set to: 0
 16942                           ;UserInterface.c: 467: LCD_PrintLong((int) Minutes, 2, 0);
 16943  006110  51D3               	movf	PrintTime@Minutes& (0+255),w,b
 16944  006112  D83C               	call	PL22	;call to abstracted procedure
 16945  006114  EC66  F023         	call	_LCD_PrintLong	;wreg free
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;UserInterface.c: 468: if (EditChevron & 0b0100) LCD_PrintChar('>');
 16949  006118  A5D1               	btfss	PrintTime@EditChevron& (0+255),2,b
 16950  00611A  D003               	goto	l20265
 16951                           
 16952                           ; BSR set to: 0
 16953  00611C  0E3E               	movlw	62
 16954  00611E  EC6A  F035         	call	_LCD_PrintChar
 16955  006122                     l20265:
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;UserInterface.c: 469: }
 16959                           ;UserInterface.c: 471: if (precision & 0b0010) {
 16960  006122  A3D0               	btfss	PrintTime@precision& (0+255),1,b
 16961  006124  D013               	goto	l20279
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;UserInterface.c: 472: if (precision & 0b00000100) LCD_PrintChar(':');
 16965  006126  A5D0               	btfss	PrintTime@precision& (0+255),2,b
 16966  006128  D003               	goto	l20271
 16967                           
 16968                           ; BSR set to: 0
 16969  00612A  0E3A               	movlw	58
 16970  00612C  EC6A  F035         	call	_LCD_PrintChar
 16971  006130                     l20271:
 16972                           
 16973                           ; BSR set to: 0
 16974                           ;UserInterface.c: 473: if (EditChevron & 0b0010) LCD_PrintChar('<');
 16975  006130  A3D1               	btfss	PrintTime@EditChevron& (0+255),1,b
 16976  006132  D003               	goto	l2244
 16977                           
 16978                           ; BSR set to: 0
 16979  006134  0E3C               	movlw	60
 16980  006136  EC6A  F035         	call	_LCD_PrintChar
 16981  00613A                     l2244:
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;UserInterface.c: 474: LCD_PrintLong((int) Seconds, 2, 0);
 16985  00613A  51D4               	movf	PrintTime@Seconds& (0+255),w,b
 16986  00613C  D827               	call	PL22	;call to abstracted procedure
 16987  00613E  EC66  F023         	call	_LCD_PrintLong	;wreg free
 16988                           
 16989                           ; BSR set to: 0
 16990                           ;UserInterface.c: 475: if (EditChevron & 0b0010) LCD_PrintChar('>');
 16991  006142  A3D1               	btfss	PrintTime@EditChevron& (0+255),1,b
 16992  006144  D003               	goto	l20279
 16993                           
 16994                           ; BSR set to: 0
 16995  006146  0E3E               	movlw	62
 16996  006148  EC6A  F035         	call	_LCD_PrintChar
 16997  00614C                     l20279:
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;UserInterface.c: 476: }
 17001                           ;UserInterface.c: 478: if (precision & 0b0001) {
 17002  00614C  A1D0               	btfss	PrintTime@precision& (0+255),0,b
 17003  00614E  0012               	return	
 17004                           
 17005                           ; BSR set to: 0
 17006                           ;UserInterface.c: 479: if (precision & 0b00000010) LCD_PrintChar('.');
 17007  006150  A3D0               	btfss	PrintTime@precision& (0+255),1,b
 17008  006152  D003               	goto	l20285
 17009                           
 17010                           ; BSR set to: 0
 17011  006154  0E2E               	movlw	46
 17012  006156  EC6A  F035         	call	_LCD_PrintChar
 17013  00615A                     l20285:
 17014                           
 17015                           ; BSR set to: 0
 17016                           ;UserInterface.c: 480: if (EditChevron & 0b0001) LCD_PrintChar('<');
 17017  00615A  A1D1               	btfss	PrintTime@EditChevron& (0+255),0,b
 17018  00615C  D003               	goto	l2248
 17019                           
 17020                           ; BSR set to: 0
 17021  00615E  0E3C               	movlw	60
 17022  006160  EC6A  F035         	call	_LCD_PrintChar
 17023  006164                     l2248:
 17024                           
 17025                           ; BSR set to: 0
 17026                           ;UserInterface.c: 481: LCD_PrintLong((int) Milliseconds, 1, 0);
 17027  006164  C0D5  F079         	movff	PrintTime@Milliseconds,?_LCD_PrintLong
 17028  006168  C0D6  F07A         	movff	PrintTime@Milliseconds+1,?_LCD_PrintLong+1
 17029  00616C  0E00               	movlw	0
 17030  00616E  BF7A               	btfsc	(?_LCD_PrintLong+1)& (0+255),7,b
 17031  006170  0EFF               	movlw	-1
 17032  006172  6F7B               	movwf	(?_LCD_PrintLong+2)& (0+255),b
 17033  006174  6F7C               	movwf	(?_LCD_PrintLong+3)& (0+255),b
 17034  006176  0E01               	movlw	1
 17035  006178  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 17036  00617A  0E00               	movlw	0
 17037  00617C  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 17038  00617E  EC66  F023         	call	_LCD_PrintLong	;wreg free
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;UserInterface.c: 482: if (EditChevron & 0b0001) LCD_PrintChar('>');
 17042  006182  A1D1               	btfss	PrintTime@EditChevron& (0+255),0,b
 17043  006184  0012               	return	
 17044                           
 17045                           ; BSR set to: 0
 17046  006186  0E3E               	movlw	62
 17047  006188  EF6A  F035         	goto	_LCD_PrintChar
 17048  00618C                     __end_of_PrintTime:
 17049                           	opt stack 0
 17050  00618C                     PL22:
 17051  00618C  6F79               	movwf	?_LCD_PrintLong& (0+255),b
 17052  00618E  6B7A               	clrf	(?_LCD_PrintLong+1)& (0+255),b
 17053  006190  6B7B               	clrf	(?_LCD_PrintLong+2)& (0+255),b
 17054  006192  6B7C               	clrf	(?_LCD_PrintLong+3)& (0+255),b
 17055  006194  0E02               	movlw	2
 17056  006196  6F7D               	movwf	(?_LCD_PrintLong+4)& (0+255),b
 17057  006198  6B7E               	clrf	(?_LCD_PrintLong+5)& (0+255),b
 17058  00619A  0C00               	retlw	0
 17059                           tblptru	equ	0xFF8
 17060                           tblptrh	equ	0xFF7
 17061                           tblptrl	equ	0xFF6
 17062                           tablat	equ	0xFF5
 17063                           prodh	equ	0xFF4
 17064                           prodl	equ	0xFF3
 17065                           intcon	equ	0xFF2
 17066                           intcon2	equ	0xFF1
 17067                           postinc0	equ	0xFEE
 17068                           wreg	equ	0xFE8
 17069                           postinc1	equ	0xFE6
 17070                           postdec1	equ	0xFE5
 17071                           fsr1h	equ	0xFE2
 17072                           fsr1l	equ	0xFE1
 17073                           indf2	equ	0xFDF
 17074                           postinc2	equ	0xFDE
 17075                           postdec2	equ	0xFDD
 17076                           fsr2h	equ	0xFDA
 17077                           fsr2l	equ	0xFD9
 17078                           status	equ	0xFD8
 17079                           
 17080 ;; *************** function _LCD_PrintLong *****************
 17081 ;; Defined at:
 17082 ;;		line 44 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 17083 ;; Parameters:    Size  Location     Type
 17084 ;;  dat             4   25[BANK0 ] long 
 17085 ;;  places          1   29[BANK0 ] unsigned char 
 17086 ;;  sign            1   30[BANK0 ] unsigned char 
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;  temp            4   31[BANK0 ] long 
 17089 ;; Return value:  Size  Location     Type
 17090 ;;		None               void
 17091 ;; Registers used:
 17092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17093 ;; Tracked objects:
 17094 ;;		On entry : F/0
 17095 ;;		On exit  : F/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17098 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17099 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17101 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;Total ram usage:       10 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    6
 17105 ;; This function calls:
 17106 ;;		_LCD_PrintChar
 17107 ;;		___aldiv
 17108 ;;		___lmul
 17109 ;; This function is called by:
 17110 ;;		_LCD_PrintFloat
 17111 ;;		_PrintTime
 17112 ;;		_GetPresetNumber
 17113 ;;		_CreateWaypointProgram
 17114 ;;		_RunWaypointProgram
 17115 ;; This function uses a non-reentrant model
 17116 ;;
 17117                           
 17118                           	psect	text35
 17119  0046CC                     __ptext35:
 17120                           	opt stack 0
 17121  0046CC                     _LCD_PrintLong:
 17122                           	opt stack 22
 17123                           
 17124                           ; BSR set to: 0
 17125                           ;LCD.c: 45: long temp;
 17126                           ;LCD.c: 47: if (dat < 0) {
 17127                           
 17128                           ; BSR set to: 0
 17129  0046CC  AF7C               	btfss	(LCD_PrintLong@dat+3)& (0+255),7,b
 17130  0046CE  D00D               	goto	l17709
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;LCD.c: 48: LCD_PrintChar('-');
 17134  0046D0  0E2D               	movlw	45
 17135  0046D2  EC6A  F035         	call	_LCD_PrintChar
 17136                           
 17137                           ; BSR set to: 0
 17138                           ;LCD.c: 49: dat = 0 - dat;
 17139  0046D6  6D79               	negf	LCD_PrintLong@dat& (0+255),b
 17140  0046D8  1F7A               	comf	(LCD_PrintLong@dat+1)& (0+255),f,b
 17141  0046DA  B0D8               	btfsc	status,0,c
 17142  0046DC  2B7A               	incf	(LCD_PrintLong@dat+1)& (0+255),f,b
 17143  0046DE  1F7B               	comf	(LCD_PrintLong@dat+2)& (0+255),f,b
 17144  0046E0  B0D8               	btfsc	status,0,c
 17145  0046E2  2B7B               	incf	(LCD_PrintLong@dat+2)& (0+255),f,b
 17146  0046E4  0E00               	movlw	0
 17147  0046E6  577C               	subfwb	(LCD_PrintLong@dat+3)& (0+255),f,b
 17148                           
 17149                           ;LCD.c: 50: } else {
 17150  0046E8  D005               	goto	l17713
 17151  0046EA                     l17709:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;LCD.c: 51: if (sign) LCD_PrintChar('+');
 17155  0046EA  517E               	movf	LCD_PrintLong@sign& (0+255),w,b
 17156  0046EC  E003               	bz	l17713
 17157                           
 17158                           ; BSR set to: 0
 17159  0046EE  0E2B               	movlw	43
 17160  0046F0  EC6A  F035         	call	_LCD_PrintChar
 17161  0046F4                     l17713:
 17162                           
 17163                           ; BSR set to: 0
 17164                           ;LCD.c: 52: }
 17165                           ;LCD.c: 54: temp = dat / 1000000000;
 17166  0046F4  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17167  0046F8  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17168  0046FC  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17169  004700  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17170  004704  6B6F               	clrf	(?___aldiv+4)& (0+255),b
 17171  004706  0ECA               	movlw	202
 17172  004708  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17173  00470A  0E9A               	movlw	154
 17174  00470C  6F71               	movwf	(?___aldiv+6)& (0+255),b
 17175  00470E  0E3B               	movlw	59
 17176  004710  6F72               	movwf	(?___aldiv+7)& (0+255),b
 17177  004712  EC81  F033         	call	___aldiv	;wreg free
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;LCD.c: 55: dat -= temp * 1000000000;
 17181  004716  D933               	call	PL2	;call to abstracted procedure
 17182  004718  6B6F               	clrf	(?___lmul+4)& (0+255),b
 17183  00471A  0ECA               	movlw	202
 17184  00471C  6F70               	movwf	(?___lmul+5)& (0+255),b
 17185  00471E  0E9A               	movlw	154
 17186  004720  6F71               	movwf	(?___lmul+6)& (0+255),b
 17187  004722  0E3B               	movlw	59
 17188  004724  6F72               	movwf	(?___lmul+7)& (0+255),b
 17189  004726  EC7F  F038         	call	___lmul	;wreg free
 17190                           
 17191                           ; BSR set to: 0
 17192                           ;LCD.c: 56: temp += 48;
 17193  00472A  D93A               	call	PL3	;call to abstracted procedure
 17194                           
 17195                           ; BSR set to: 0
 17196                           ;LCD.c: 57: if (places > 9) LCD_PrintChar(temp);
 17197  00472C  0E09               	movlw	9
 17198  00472E  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17199  004730  D003               	goto	l17723
 17200                           
 17201                           ; BSR set to: 0
 17202  004732  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17203  004734  EC6A  F035         	call	_LCD_PrintChar
 17204  004738                     l17723:
 17205                           
 17206                           ; BSR set to: 0
 17207                           ;LCD.c: 59: temp = dat / 100000000;
 17208  004738  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17209  00473C  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17210  004740  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17211  004744  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17212  004748  6B6F               	clrf	(?___aldiv+4)& (0+255),b
 17213  00474A  0EE1               	movlw	225
 17214  00474C  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17215  00474E  0EF5               	movlw	245
 17216  004750  6F71               	movwf	(?___aldiv+6)& (0+255),b
 17217  004752  0E05               	movlw	5
 17218  004754  6F72               	movwf	(?___aldiv+7)& (0+255),b
 17219  004756  EC81  F033         	call	___aldiv	;wreg free
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;LCD.c: 60: dat -= temp * 100000000;
 17223  00475A  D911               	call	PL2	;call to abstracted procedure
 17224  00475C  6B6F               	clrf	(?___lmul+4)& (0+255),b
 17225  00475E  0EE1               	movlw	225
 17226  004760  6F70               	movwf	(?___lmul+5)& (0+255),b
 17227  004762  0EF5               	movlw	245
 17228  004764  6F71               	movwf	(?___lmul+6)& (0+255),b
 17229  004766  0E05               	movlw	5
 17230  004768  6F72               	movwf	(?___lmul+7)& (0+255),b
 17231  00476A  EC7F  F038         	call	___lmul	;wreg free
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;LCD.c: 61: temp += 48;
 17235  00476E  D918               	call	PL3	;call to abstracted procedure
 17236                           
 17237                           ; BSR set to: 0
 17238                           ;LCD.c: 62: if (places > 8) LCD_PrintChar(temp);
 17239  004770  0E08               	movlw	8
 17240  004772  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17241  004774  D003               	goto	l17733
 17242                           
 17243                           ; BSR set to: 0
 17244  004776  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17245  004778  EC6A  F035         	call	_LCD_PrintChar
 17246  00477C                     l17733:
 17247                           
 17248                           ; BSR set to: 0
 17249                           ;LCD.c: 64: temp = dat / 10000000;
 17250  00477C  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17251  004780  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17252  004784  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17253  004788  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17254  00478C  0E80               	movlw	128
 17255  00478E  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17256  004790  0E96               	movlw	150
 17257  004792  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17258  004794  0E98               	movlw	152
 17259  004796  6F71               	movwf	(?___aldiv+6)& (0+255),b
 17260  004798  0E00               	movlw	0
 17261  00479A  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17262  00479C  EC81  F033         	call	___aldiv	;wreg free
 17263                           
 17264                           ; BSR set to: 0
 17265                           ;LCD.c: 65: dat -= temp * 10000000;
 17266  0047A0  D8EE               	call	PL2	;call to abstracted procedure
 17267  0047A2  0E80               	movlw	128
 17268  0047A4  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17269  0047A6  0E96               	movlw	150
 17270  0047A8  6F70               	movwf	(?___lmul+5)& (0+255),b
 17271  0047AA  0E98               	movlw	152
 17272  0047AC  6F71               	movwf	(?___lmul+6)& (0+255),b
 17273  0047AE  0E00               	movlw	0
 17274  0047B0  6B72               	clrf	(?___lmul+7)& (0+255),b
 17275  0047B2  EC7F  F038         	call	___lmul	;wreg free
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;LCD.c: 66: temp += 48;
 17279  0047B6  D8F4               	call	PL3	;call to abstracted procedure
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;LCD.c: 67: if (places > 7) LCD_PrintChar(temp);
 17283  0047B8  0E07               	movlw	7
 17284  0047BA  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17285  0047BC  D003               	goto	l17743
 17286                           
 17287                           ; BSR set to: 0
 17288  0047BE  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17289  0047C0  EC6A  F035         	call	_LCD_PrintChar
 17290  0047C4                     l17743:
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;LCD.c: 69: temp = dat / 1000000;
 17294  0047C4  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17295  0047C8  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17296  0047CC  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17297  0047D0  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17298  0047D4  0E40               	movlw	64
 17299  0047D6  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17300  0047D8  0E42               	movlw	66
 17301  0047DA  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17302  0047DC  0E0F               	movlw	15
 17303  0047DE  6F71               	movwf	(?___aldiv+6)& (0+255),b
 17304  0047E0  0E00               	movlw	0
 17305  0047E2  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17306  0047E4  EC81  F033         	call	___aldiv	;wreg free
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;LCD.c: 70: dat -= temp * 1000000;
 17310  0047E8  D8CA               	call	PL2	;call to abstracted procedure
 17311  0047EA  0E40               	movlw	64
 17312  0047EC  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17313  0047EE  0E42               	movlw	66
 17314  0047F0  6F70               	movwf	(?___lmul+5)& (0+255),b
 17315  0047F2  0E0F               	movlw	15
 17316  0047F4  6F71               	movwf	(?___lmul+6)& (0+255),b
 17317  0047F6  0E00               	movlw	0
 17318  0047F8  6B72               	clrf	(?___lmul+7)& (0+255),b
 17319  0047FA  EC7F  F038         	call	___lmul	;wreg free
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;LCD.c: 71: temp += 48;
 17323  0047FE  D8D0               	call	PL3	;call to abstracted procedure
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;LCD.c: 72: if (places > 6) LCD_PrintChar(temp);
 17327  004800  0E06               	movlw	6
 17328  004802  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17329  004804  D003               	goto	l17753
 17330                           
 17331                           ; BSR set to: 0
 17332  004806  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17333  004808  EC6A  F035         	call	_LCD_PrintChar
 17334  00480C                     l17753:
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;LCD.c: 74: temp = dat / 100000;
 17338  00480C  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17339  004810  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17340  004814  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17341  004818  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17342  00481C  0EA0               	movlw	160
 17343  00481E  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17344  004820  0E86               	movlw	134
 17345  004822  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17346  004824  0E01               	movlw	1
 17347  004826  6F71               	movwf	(?___aldiv+6)& (0+255),b
 17348  004828  0E00               	movlw	0
 17349  00482A  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17350  00482C  EC81  F033         	call	___aldiv	;wreg free
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;LCD.c: 75: dat -= temp * 100000;
 17354  004830  D8A6               	call	PL2	;call to abstracted procedure
 17355  004832  0EA0               	movlw	160
 17356  004834  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17357  004836  0E86               	movlw	134
 17358  004838  6F70               	movwf	(?___lmul+5)& (0+255),b
 17359  00483A  0E01               	movlw	1
 17360  00483C  6F71               	movwf	(?___lmul+6)& (0+255),b
 17361  00483E  0E00               	movlw	0
 17362  004840  6B72               	clrf	(?___lmul+7)& (0+255),b
 17363  004842  EC7F  F038         	call	___lmul	;wreg free
 17364                           
 17365                           ; BSR set to: 0
 17366                           ;LCD.c: 76: temp += 48;
 17367  004846  D8AC               	call	PL3	;call to abstracted procedure
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;LCD.c: 77: if (places > 5) LCD_PrintChar(temp);
 17371  004848  0E05               	movlw	5
 17372  00484A  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17373  00484C  D003               	goto	l17763
 17374                           
 17375                           ; BSR set to: 0
 17376  00484E  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17377  004850  EC6A  F035         	call	_LCD_PrintChar
 17378  004854                     l17763:
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;LCD.c: 79: temp = dat / 10000;
 17382  004854  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17383  004858  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17384  00485C  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17385  004860  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17386  004864  0E10               	movlw	16
 17387  004866  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17388  004868  0E27               	movlw	39
 17389  00486A  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17390  00486C  0E00               	movlw	0
 17391  00486E  6B71               	clrf	(?___aldiv+6)& (0+255),b
 17392  004870  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17393  004872  EC81  F033         	call	___aldiv	;wreg free
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;LCD.c: 80: dat -= temp * 10000;
 17397  004876  D883               	call	PL2	;call to abstracted procedure
 17398  004878  0E10               	movlw	16
 17399  00487A  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17400  00487C  0E27               	movlw	39
 17401  00487E  6F70               	movwf	(?___lmul+5)& (0+255),b
 17402  004880  0E00               	movlw	0
 17403  004882  6B71               	clrf	(?___lmul+6)& (0+255),b
 17404  004884  6B72               	clrf	(?___lmul+7)& (0+255),b
 17405  004886  EC7F  F038         	call	___lmul	;wreg free
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;LCD.c: 81: temp += 48;
 17409  00488A  D88A               	call	PL3	;call to abstracted procedure
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;LCD.c: 82: if (places > 4) LCD_PrintChar(temp);
 17413  00488C  0E04               	movlw	4
 17414  00488E  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17415  004890  D003               	goto	l17773
 17416                           
 17417                           ; BSR set to: 0
 17418  004892  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17419  004894  EC6A  F035         	call	_LCD_PrintChar
 17420  004898                     l17773:
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;LCD.c: 84: temp = dat / 1000;
 17424  004898  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17425  00489C  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17426  0048A0  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17427  0048A4  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17428  0048A8  0EE8               	movlw	232
 17429  0048AA  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17430  0048AC  0E03               	movlw	3
 17431  0048AE  6F70               	movwf	(?___aldiv+5)& (0+255),b
 17432  0048B0  0E00               	movlw	0
 17433  0048B2  6B71               	clrf	(?___aldiv+6)& (0+255),b
 17434  0048B4  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17435  0048B6  EC81  F033         	call	___aldiv	;wreg free
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;LCD.c: 85: dat -= temp * 1000;
 17439  0048BA  D861               	call	PL2	;call to abstracted procedure
 17440  0048BC  0EE8               	movlw	232
 17441  0048BE  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17442  0048C0  0E03               	movlw	3
 17443  0048C2  6F70               	movwf	(?___lmul+5)& (0+255),b
 17444  0048C4  0E00               	movlw	0
 17445  0048C6  6B71               	clrf	(?___lmul+6)& (0+255),b
 17446  0048C8  6B72               	clrf	(?___lmul+7)& (0+255),b
 17447  0048CA  EC7F  F038         	call	___lmul	;wreg free
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;LCD.c: 86: temp += 48;
 17451  0048CE  D868               	call	PL3	;call to abstracted procedure
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;LCD.c: 87: if (places > 3) LCD_PrintChar(temp);
 17455  0048D0  0E03               	movlw	3
 17456  0048D2  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17457  0048D4  D003               	goto	l17783
 17458                           
 17459                           ; BSR set to: 0
 17460  0048D6  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17461  0048D8  EC6A  F035         	call	_LCD_PrintChar
 17462  0048DC                     l17783:
 17463                           
 17464                           ; BSR set to: 0
 17465                           ;LCD.c: 89: temp = dat / 100;
 17466  0048DC  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17467  0048E0  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17468  0048E4  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17469  0048E8  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17470  0048EC  0E64               	movlw	100
 17471  0048EE  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17472  0048F0  0E00               	movlw	0
 17473  0048F2  6B70               	clrf	(?___aldiv+5)& (0+255),b
 17474  0048F4  6B71               	clrf	(?___aldiv+6)& (0+255),b
 17475  0048F6  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17476  0048F8  EC81  F033         	call	___aldiv	;wreg free
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;LCD.c: 90: dat -= temp * 100;
 17480  0048FC  D840               	call	PL2	;call to abstracted procedure
 17481  0048FE  0E64               	movlw	100
 17482  004900  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17483  004902  0E00               	movlw	0
 17484  004904  6B70               	clrf	(?___lmul+5)& (0+255),b
 17485  004906  6B71               	clrf	(?___lmul+6)& (0+255),b
 17486  004908  6B72               	clrf	(?___lmul+7)& (0+255),b
 17487  00490A  EC7F  F038         	call	___lmul	;wreg free
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;LCD.c: 91: temp += 48;
 17491  00490E  D848               	call	PL3	;call to abstracted procedure
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;LCD.c: 92: if (places > 2) LCD_PrintChar(temp);
 17495  004910  0E02               	movlw	2
 17496  004912  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17497  004914  D003               	goto	l17793
 17498                           
 17499                           ; BSR set to: 0
 17500  004916  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17501  004918  EC6A  F035         	call	_LCD_PrintChar
 17502  00491C                     l17793:
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;LCD.c: 94: temp = dat / 10;
 17506  00491C  C079  F06B         	movff	LCD_PrintLong@dat,?___aldiv
 17507  004920  C07A  F06C         	movff	LCD_PrintLong@dat+1,?___aldiv+1
 17508  004924  C07B  F06D         	movff	LCD_PrintLong@dat+2,?___aldiv+2
 17509  004928  C07C  F06E         	movff	LCD_PrintLong@dat+3,?___aldiv+3
 17510  00492C  0E0A               	movlw	10
 17511  00492E  6F6F               	movwf	(?___aldiv+4)& (0+255),b
 17512  004930  0E00               	movlw	0
 17513  004932  6B70               	clrf	(?___aldiv+5)& (0+255),b
 17514  004934  6B71               	clrf	(?___aldiv+6)& (0+255),b
 17515  004936  6B72               	clrf	(?___aldiv+7)& (0+255),b
 17516  004938  EC81  F033         	call	___aldiv	;wreg free
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;LCD.c: 95: dat -= temp * 10;
 17520  00493C  D820               	call	PL2	;call to abstracted procedure
 17521  00493E  0E0A               	movlw	10
 17522  004940  6F6F               	movwf	(?___lmul+4)& (0+255),b
 17523  004942  0E00               	movlw	0
 17524  004944  6B70               	clrf	(?___lmul+5)& (0+255),b
 17525  004946  6B71               	clrf	(?___lmul+6)& (0+255),b
 17526  004948  6B72               	clrf	(?___lmul+7)& (0+255),b
 17527  00494A  EC7F  F038         	call	___lmul	;wreg free
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;LCD.c: 96: temp += 48;
 17531  00494E  D828               	call	PL3	;call to abstracted procedure
 17532                           
 17533                           ; BSR set to: 0
 17534                           ;LCD.c: 97: if (places > 1) LCD_PrintChar(temp);
 17535  004950  0E01               	movlw	1
 17536  004952  657D               	cpfsgt	LCD_PrintLong@places& (0+255),b
 17537  004954  D003               	goto	l17803
 17538                           
 17539                           ; BSR set to: 0
 17540  004956  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17541  004958  EC6A  F035         	call	_LCD_PrintChar
 17542  00495C                     l17803:
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;LCD.c: 99: temp = dat;
 17546  00495C  C079  F07F         	movff	LCD_PrintLong@dat,LCD_PrintLong@temp
 17547  004960  C07A  F080         	movff	LCD_PrintLong@dat+1,LCD_PrintLong@temp+1
 17548  004964  C07B  F081         	movff	LCD_PrintLong@dat+2,LCD_PrintLong@temp+2
 17549  004968  C07C  F082         	movff	LCD_PrintLong@dat+3,LCD_PrintLong@temp+3
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;LCD.c: 100: temp += 48;
 17553  00496C  0E30               	movlw	48
 17554  00496E  277F               	addwf	LCD_PrintLong@temp& (0+255),f,b
 17555  004970  0E00               	movlw	0
 17556  004972  2380               	addwfc	(LCD_PrintLong@temp+1)& (0+255),f,b
 17557  004974  2381               	addwfc	(LCD_PrintLong@temp+2)& (0+255),f,b
 17558  004976  2382               	addwfc	(LCD_PrintLong@temp+3)& (0+255),f,b
 17559                           
 17560                           ; BSR set to: 0
 17561                           ;LCD.c: 101: LCD_PrintChar(temp);
 17562  004978  517F               	movf	LCD_PrintLong@temp& (0+255),w,b
 17563  00497A  EF6A  F035         	goto	_LCD_PrintChar
 17564  00497E                     __end_of_LCD_PrintLong:
 17565                           	opt stack 0
 17566  00497E                     PL2:
 17567  00497E  C06B  F07F         	movff	?___aldiv,LCD_PrintLong@temp
 17568  004982  C06C  F080         	movff	?___aldiv+1,LCD_PrintLong@temp+1
 17569  004986  C06D  F081         	movff	?___aldiv+2,LCD_PrintLong@temp+2
 17570  00498A  C06E  F082         	movff	?___aldiv+3,LCD_PrintLong@temp+3
 17571  00498E  C07F  F06B         	movff	LCD_PrintLong@temp,?___lmul
 17572  004992  C080  F06C         	movff	LCD_PrintLong@temp+1,?___lmul+1
 17573  004996  C081  F06D         	movff	LCD_PrintLong@temp+2,?___lmul+2
 17574  00499A  C082  F06E         	movff	LCD_PrintLong@temp+3,?___lmul+3
 17575  00499E  0012               	return	
 17576  0049A0                     PL3:
 17577  0049A0  516B               	movf	?___lmul& (0+255),w,b
 17578  0049A2  5F79               	subwf	LCD_PrintLong@dat& (0+255),f,b
 17579  0049A4  516C               	movf	(?___lmul+1)& (0+255),w,b
 17580  0049A6  5B7A               	subwfb	(LCD_PrintLong@dat+1)& (0+255),f,b
 17581  0049A8  516D               	movf	(?___lmul+2)& (0+255),w,b
 17582  0049AA  5B7B               	subwfb	(LCD_PrintLong@dat+2)& (0+255),f,b
 17583  0049AC  516E               	movf	(?___lmul+3)& (0+255),w,b
 17584  0049AE  5B7C               	subwfb	(LCD_PrintLong@dat+3)& (0+255),f,b
 17585  0049B0  0E30               	movlw	48
 17586  0049B2  277F               	addwf	LCD_PrintLong@temp& (0+255),f,b
 17587  0049B4  0E00               	movlw	0
 17588  0049B6  2380               	addwfc	(LCD_PrintLong@temp+1)& (0+255),f,b
 17589  0049B8  2381               	addwfc	(LCD_PrintLong@temp+2)& (0+255),f,b
 17590  0049BA  2382               	addwfc	(LCD_PrintLong@temp+3)& (0+255),f,b
 17591  0049BC  0C00               	retlw	0
 17592                           tblptru	equ	0xFF8
 17593                           tblptrh	equ	0xFF7
 17594                           tblptrl	equ	0xFF6
 17595                           tablat	equ	0xFF5
 17596                           prodh	equ	0xFF4
 17597                           prodl	equ	0xFF3
 17598                           intcon	equ	0xFF2
 17599                           intcon2	equ	0xFF1
 17600                           postinc0	equ	0xFEE
 17601                           wreg	equ	0xFE8
 17602                           postinc1	equ	0xFE6
 17603                           postdec1	equ	0xFE5
 17604                           fsr1h	equ	0xFE2
 17605                           fsr1l	equ	0xFE1
 17606                           indf2	equ	0xFDF
 17607                           postinc2	equ	0xFDE
 17608                           postdec2	equ	0xFDD
 17609                           fsr2h	equ	0xFDA
 17610                           fsr2l	equ	0xFD9
 17611                           status	equ	0xFD8
 17612                           
 17613 ;; *************** function _GetRotaryMultiplier *****************
 17614 ;; Defined at:
 17615 ;;		line 150 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 17616 ;; Parameters:    Size  Location     Type
 17617 ;;		None
 17618 ;; Auto vars:     Size  Location     Type
 17619 ;;  uiAccum         2   11[BANK0 ] unsigned int 
 17620 ;;  idx             1   13[BANK0 ] unsigned char 
 17621 ;; Return value:  Size  Location     Type
 17622 ;;                  1    wreg      unsigned char 
 17623 ;; Registers used:
 17624 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17625 ;; Tracked objects:
 17626 ;;		On entry : F/0
 17627 ;;		On exit  : 0/0
 17628 ;;		Unchanged: FFFFFFF0/0
 17629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17631 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17633 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17634 ;;Total ram usage:        3 bytes
 17635 ;; Hardware stack levels used:    1
 17636 ;; Hardware stack levels required when called:    3
 17637 ;; This function calls:
 17638 ;;		Nothing
 17639 ;; This function is called by:
 17640 ;;		_RealtimeMode
 17641 ;;		_GetFloat
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           	psect	text36
 17646  006B58                     __ptext36:
 17647                           	opt stack 0
 17648  006B58                     _GetRotaryMultiplier:
 17649                           	opt stack 25
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;UserInterface.c: 152: unsigned int uiAccum = 0;
 17653                           
 17654                           ; BSR set to: 0
 17655  006B58  6B6B               	clrf	GetRotaryMultiplier@uiAccum& (0+255),b
 17656  006B5A  6B6C               	clrf	(GetRotaryMultiplier@uiAccum+1)& (0+255),b
 17657                           
 17658                           ;UserInterface.c: 154: if (ZeroRotaryDetentIntervals) {
 17659  006B5C  A458               	btfss	_ZeroRotaryDetentIntervals/(0+8),_ZeroRotaryDetentIntervals& (0+7),c	;volatile
 17660  006B5E  D00D               	goto	l2111
 17661                           
 17662                           ;UserInterface.c: 155: ZeroRotaryDetentIntervals = 0;
 17663  006B60  9458               	bcf	_ZeroRotaryDetentIntervals/(0+8),_ZeroRotaryDetentIntervals& (0+7),c	;volatile
 17664                           
 17665                           ;UserInterface.c: 156: bLock_RotaryDetentIntervals = 1;
 17666  006B62  8459               	bsf	_bLock_RotaryDetentIntervals/(0+8),_bLock_RotaryDetentIntervals& (0+7),c	;volatile
 17667                           
 17668                           ;UserInterface.c: 157: {
 17669                           ;UserInterface.c: 158: for (idx = 0; idx < 16; idx++) RotaryDetentIntervals[idx] = 0xFF;
 17670  006B64  0100               	movlb	0	; () banked
 17671  006B66  6B6D               	clrf	GetRotaryMultiplier@idx& (0+255),b
 17672  006B68                     l15569:
 17673                           
 17674                           ; BSR set to: 0
 17675  006B68  D831               	call	PL59	;call to abstracted procedure
 17676  006B6A  68DF               	setf	indf2,c
 17677                           
 17678                           ; BSR set to: 4
 17679  006B6C  2B6D               	incf	GetRotaryMultiplier@idx& (0+255),f,b
 17680                           
 17681                           ; BSR set to: 0
 17682  006B6E  0E0F               	movlw	15
 17683  006B70  656D               	cpfsgt	GetRotaryMultiplier@idx& (0+255),b
 17684  006B72  D7FA               	goto	l15569
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;UserInterface.c: 159: }
 17688                           ;UserInterface.c: 160: bLock_RotaryDetentIntervals = 0;
 17689  006B74  0100               	movlb	(_bLock_RotaryDetentIntervals/(0+8)) shr (0+8)
 17690  006B76  9459               	bcf	_bLock_RotaryDetentIntervals/(0+8),_bLock_RotaryDetentIntervals& (0+7),c	;volatile
 17691  006B78                     l15575:
 17692                           
 17693                           ;UserInterface.c: 161: return 1;
 17694  006B78  0C01               	retlw	1
 17695  006B7A                     l2111:
 17696                           
 17697                           ;UserInterface.c: 162: }
 17698                           ;UserInterface.c: 163: uiAccum = 0;
 17699  006B7A  0100               	movlb	0	; () banked
 17700  006B7C  6B6B               	clrf	GetRotaryMultiplier@uiAccum& (0+255),b
 17701  006B7E  6B6C               	clrf	(GetRotaryMultiplier@uiAccum+1)& (0+255),b
 17702                           
 17703                           ;UserInterface.c: 164: bLock_RotaryDetentIntervals = 1;
 17704  006B80  8459               	bsf	_bLock_RotaryDetentIntervals/(0+8),_bLock_RotaryDetentIntervals& (0+7),c	;volatile
 17705                           
 17706                           ;UserInterface.c: 165: {
 17707                           ;UserInterface.c: 166: for (idx = 0; idx < 16; idx++) uiAccum += RotaryDetentIntervals[i
      +                          dx];
 17708  006B82  6B6D               	clrf	GetRotaryMultiplier@idx& (0+255),b
 17709  006B84                     l15583:
 17710                           
 17711                           ; BSR set to: 0
 17712  006B84  D823               	call	PL59	;call to abstracted procedure
 17713  006B86  50DF               	movf	indf2,w,c
 17714  006B88  276B               	addwf	GetRotaryMultiplier@uiAccum& (0+255),f,b
 17715  006B8A  0E00               	movlw	0
 17716  006B8C  236C               	addwfc	(GetRotaryMultiplier@uiAccum+1)& (0+255),f,b
 17717                           
 17718                           ; BSR set to: 0
 17719  006B8E  2B6D               	incf	GetRotaryMultiplier@idx& (0+255),f,b
 17720                           
 17721                           ; BSR set to: 0
 17722  006B90  0E0F               	movlw	15
 17723  006B92  656D               	cpfsgt	GetRotaryMultiplier@idx& (0+255),b
 17724  006B94  D7F7               	goto	l15583
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;UserInterface.c: 167: }
 17728                           ;UserInterface.c: 168: bLock_RotaryDetentIntervals = 0;
 17729  006B96  9459               	bcf	_bLock_RotaryDetentIntervals/(0+8),_bLock_RotaryDetentIntervals& (0+7),c	;volatile
 17730                           
 17731                           ;UserInterface.c: 170: uiAccum >>= 4;
 17732  006B98  3B6B               	swapf	GetRotaryMultiplier@uiAccum& (0+255),f,b
 17733  006B9A  3B6C               	swapf	(GetRotaryMultiplier@uiAccum+1)& (0+255),f,b
 17734  006B9C  176B               	andwf	GetRotaryMultiplier@uiAccum& (0+255),f,b
 17735  006B9E  516C               	movf	(GetRotaryMultiplier@uiAccum+1)& (0+255),w,b
 17736  006BA0  0BF0               	andlw	240
 17737  006BA2  136B               	iorwf	GetRotaryMultiplier@uiAccum& (0+255),f,b
 17738  006BA4  0E0F               	movlw	15
 17739  006BA6  176C               	andwf	(GetRotaryMultiplier@uiAccum+1)& (0+255),f,b
 17740                           
 17741                           ;UserInterface.c: 172: if (uiAccum < 12) return 50;
 17742  006BA8  0E0C               	movlw	12
 17743  006BAA  5D6B               	subwf	GetRotaryMultiplier@uiAccum& (0+255),w,b
 17744  006BAC  0E00               	movlw	0
 17745  006BAE  596C               	subwfb	(GetRotaryMultiplier@uiAccum+1)& (0+255),w,b
 17746  006BB0  E201               	bc	l15595
 17747                           
 17748                           ; BSR set to: 0
 17749  006BB2  0C32               	retlw	50
 17750  006BB4                     l15595:
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;UserInterface.c: 173: if (uiAccum < 30) return 10;
 17754  006BB4  0E1E               	movlw	30
 17755  006BB6  5D6B               	subwf	GetRotaryMultiplier@uiAccum& (0+255),w,b
 17756  006BB8  0E00               	movlw	0
 17757  006BBA  596C               	subwfb	(GetRotaryMultiplier@uiAccum+1)& (0+255),w,b
 17758  006BBC  E201               	bc	l15601
 17759                           
 17760                           ; BSR set to: 0
 17761  006BBE  0C0A               	retlw	10
 17762  006BC0                     l15601:
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;UserInterface.c: 174: if (uiAccum < 50) return 5;
 17766  006BC0  0E32               	movlw	50
 17767  006BC2  5D6B               	subwf	GetRotaryMultiplier@uiAccum& (0+255),w,b
 17768  006BC4  0E00               	movlw	0
 17769  006BC6  596C               	subwfb	(GetRotaryMultiplier@uiAccum+1)& (0+255),w,b
 17770  006BC8  E2D7               	bc	l15575
 17771                           
 17772                           ; BSR set to: 0
 17773  006BCA  0C05               	retlw	5
 17774  006BCC                     __end_of_GetRotaryMultiplier:
 17775                           	opt stack 0
 17776  006BCC                     PL59:
 17777  006BCC  0E00               	movlw	low _RotaryDetentIntervals
 17778  006BCE  0100               	movlb	0	; () banked
 17779  006BD0  256D               	addwf	GetRotaryMultiplier@idx& (0+255),w,b
 17780  006BD2  6ED9               	movwf	fsr2l,c
 17781  006BD4  6ADA               	clrf	fsr2h,c
 17782  006BD6  0E04               	movlw	high _RotaryDetentIntervals
 17783  006BD8  22DA               	addwfc	fsr2h,f,c
 17784  006BDA  0012               	return	
 17785                           tblptru	equ	0xFF8
 17786                           tblptrh	equ	0xFF7
 17787                           tblptrl	equ	0xFF6
 17788                           tablat	equ	0xFF5
 17789                           prodh	equ	0xFF4
 17790                           prodl	equ	0xFF3
 17791                           intcon	equ	0xFF2
 17792                           intcon2	equ	0xFF1
 17793                           postinc0	equ	0xFEE
 17794                           wreg	equ	0xFE8
 17795                           postinc1	equ	0xFE6
 17796                           postdec1	equ	0xFE5
 17797                           fsr1h	equ	0xFE2
 17798                           fsr1l	equ	0xFE1
 17799                           indf2	equ	0xFDF
 17800                           postinc2	equ	0xFDE
 17801                           postdec2	equ	0xFDD
 17802                           fsr2h	equ	0xFDA
 17803                           fsr2l	equ	0xFD9
 17804                           status	equ	0xFD8
 17805                           
 17806 ;; *************** function _Wait_ms_nonblocking *****************
 17807 ;; Defined at:
 17808 ;;		line 15 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 17809 ;; Parameters:    Size  Location     Type
 17810 ;;  time            2   11[BANK0 ] unsigned int 
 17811 ;; Auto vars:     Size  Location     Type
 17812 ;;		None
 17813 ;; Return value:  Size  Location     Type
 17814 ;;		None               void
 17815 ;; Registers used:
 17816 ;;		wreg, status,2, status,0
 17817 ;; Tracked objects:
 17818 ;;		On entry : F/0
 17819 ;;		On exit  : 0/0
 17820 ;;		Unchanged: FFFFFFF0/0
 17821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17822 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17825 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17826 ;;Total ram usage:        2 bytes
 17827 ;; Hardware stack levels used:    1
 17828 ;; Hardware stack levels required when called:    3
 17829 ;; This function calls:
 17830 ;;		Nothing
 17831 ;; This function is called by:
 17832 ;;		_Wait_seconds_nonblocking
 17833 ;;		_Wait_ms
 17834 ;; This function uses a non-reentrant model
 17835 ;;
 17836                           
 17837                           	psect	text37
 17838  0072B0                     __ptext37:
 17839                           	opt stack 0
 17840  0072B0                     _Wait_ms_nonblocking:
 17841                           	opt stack 25
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;Timings.c: 16: time >>= 1;
 17845  0072B0  90D8               	bcf	status,0,c
 17846  0072B2  336C               	rrcf	(Wait_ms_nonblocking@time+1)& (0+255),f,b
 17847  0072B4  336B               	rrcf	Wait_ms_nonblocking@time& (0+255),f,b
 17848                           
 17849                           ; BSR set to: 0
 17850                           ;Timings.c: 17: if (time == 0) time = 1;
 17851  0072B6  516C               	movf	(Wait_ms_nonblocking@time+1)& (0+255),w,b
 17852  0072B8  116B               	iorwf	Wait_ms_nonblocking@time& (0+255),w,b
 17853  0072BA  E103               	bnz	l20333
 17854                           
 17855                           ; BSR set to: 0
 17856  0072BC  6B6C               	clrf	(Wait_ms_nonblocking@time+1)& (0+255),b
 17857  0072BE  0E01               	movlw	1
 17858  0072C0  6F6B               	movwf	Wait_ms_nonblocking@time& (0+255),b
 17859  0072C2                     l20333:
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;Timings.c: 19: time++;
 17863  0072C2  4B6B               	infsnz	Wait_ms_nonblocking@time& (0+255),f,b
 17864  0072C4  2B6C               	incf	(Wait_ms_nonblocking@time+1)& (0+255),f,b
 17865                           
 17866                           ; BSR set to: 0
 17867                           ;Timings.c: 21: bLock_Tick500Hz = 1;
 17868  0072C6  8659               	bsf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
 17869                           
 17870                           ;Timings.c: 22: WaitUntil_Tick500Hz = Tick500Hz;
 17871  0072C8  C1F8  F045         	movff	_Tick500Hz,_WaitUntil_Tick500Hz	;volatile
 17872  0072CC  C1F9  F046         	movff	_Tick500Hz+1,_WaitUntil_Tick500Hz+1	;volatile
 17873  0072D0  C1FA  F047         	movff	_Tick500Hz+2,_WaitUntil_Tick500Hz+2	;volatile
 17874  0072D4  C1FB  F048         	movff	_Tick500Hz+3,_WaitUntil_Tick500Hz+3	;volatile
 17875                           
 17876                           ;Timings.c: 23: bLock_Tick500Hz = 0;
 17877  0072D8  9659               	bcf	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
 17878                           
 17879                           ;Timings.c: 25: bWaiting = 0;
 17880  0072DA  985A               	bcf	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 17881                           
 17882                           ;Timings.c: 26: WaitUntil_Tick500Hz += time;
 17883  0072DC  0100               	movlb	0	; () banked
 17884  0072DE  516B               	movf	Wait_ms_nonblocking@time& (0+255),w,b
 17885  0072E0  2645               	addwf	_WaitUntil_Tick500Hz,f,c	;volatile
 17886  0072E2  516C               	movf	(Wait_ms_nonblocking@time+1)& (0+255),w,b
 17887  0072E4  2246               	addwfc	_WaitUntil_Tick500Hz+1,f,c	;volatile
 17888  0072E6  0E00               	movlw	0
 17889  0072E8  2247               	addwfc	_WaitUntil_Tick500Hz+2,f,c	;volatile
 17890  0072EA  2248               	addwfc	_WaitUntil_Tick500Hz+3,f,c	;volatile
 17891                           
 17892                           ; BSR set to: 0
 17893                           ;Timings.c: 27: bWaiting = 1;
 17894  0072EC  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 17895  0072EE  885A               	bsf	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 17896  0072F0  0C00               	retlw	0
 17897  0072F2                     __end_of_Wait_ms_nonblocking:
 17898                           	opt stack 0
 17899                           tblptru	equ	0xFF8
 17900                           tblptrh	equ	0xFF7
 17901                           tblptrl	equ	0xFF6
 17902                           tablat	equ	0xFF5
 17903                           prodh	equ	0xFF4
 17904                           prodl	equ	0xFF3
 17905                           intcon	equ	0xFF2
 17906                           intcon2	equ	0xFF1
 17907                           postinc0	equ	0xFEE
 17908                           wreg	equ	0xFE8
 17909                           postinc1	equ	0xFE6
 17910                           postdec1	equ	0xFE5
 17911                           fsr1h	equ	0xFE2
 17912                           fsr1l	equ	0xFE1
 17913                           indf2	equ	0xFDF
 17914                           postinc2	equ	0xFDE
 17915                           postdec2	equ	0xFDD
 17916                           fsr2h	equ	0xFDA
 17917                           fsr2l	equ	0xFD9
 17918                           status	equ	0xFD8
 17919                           
 17920 ;; *************** function _GetYesNo *****************
 17921 ;; Defined at:
 17922 ;;		line 60 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 17923 ;; Parameters:    Size  Location     Type
 17924 ;;  prompt          2   47[BANK0 ] PTR const unsigned char 
 17925 ;;		 -> STR_81(19), 
 17926 ;;  Initial         1   49[BANK0 ] char 
 17927 ;; Auto vars:     Size  Location     Type
 17928 ;;  answer          1   51[BANK0 ] char 
 17929 ;;  inp             1   50[BANK0 ] unsigned char 
 17930 ;; Return value:  Size  Location     Type
 17931 ;;                  1    wreg      char 
 17932 ;; Registers used:
 17933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 17934 ;; Tracked objects:
 17935 ;;		On entry : F/0
 17936 ;;		On exit  : F/0
 17937 ;;		Unchanged: 0/0
 17938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17939 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17942 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17943 ;;Total ram usage:        5 bytes
 17944 ;; Hardware stack levels used:    1
 17945 ;; Hardware stack levels required when called:    8
 17946 ;; This function calls:
 17947 ;;		_LCD_DisplayOnOff
 17948 ;;		_LCD_ClearDisplay
 17949 ;;		_LCD_PrintString
 17950 ;;		_LCD_SetPosition
 17951 ;;		_GetInput
 17952 ;; This function is called by:
 17953 ;;		_CreateWaypointProgram
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           	psect	text38
 17958  006928                     __ptext38:
 17959                           	opt stack 0
 17960  006928                     _GetYesNo:
 17961                           	opt stack 21
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;UserInterface.c: 61: signed char answer;
 17965                           ;UserInterface.c: 62: char inp;
 17966                           ;UserInterface.c: 63: LCD_DisplayOnOff(1, 0, 0);
 17967  006928  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 17968  00692A  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 17969  00692C  0E01               	movlw	1
 17970  00692E  EC7D  F037         	call	_LCD_DisplayOnOff
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;UserInterface.c: 64: LCD_ClearDisplay();
 17974  006932  ECEE  F035         	call	_LCD_ClearDisplay	;wreg free
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;UserInterface.c: 65: LCD_PrintString(prompt);
 17978  006936  C08F  F076         	movff	GetYesNo@prompt,?_LCD_PrintString
 17979  00693A  C090  F077         	movff	GetYesNo@prompt+1,?_LCD_PrintString+1
 17980  00693E  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;UserInterface.c: 67: answer = Initial;
 17984  006942  C091  F093         	movff	GetYesNo@Initial,GetYesNo@answer
 17985  006946                     l20379:
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;UserInterface.c: 69: LCD_SetPosition(1, 0);
 17989  006946  6B75               	clrf	?_LCD_SetPosition& (0+255),b
 17990  006948  0E01               	movlw	1
 17991  00694A  ECDF  F036         	call	_LCD_SetPosition
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;UserInterface.c: 70: if (answer) LCD_PrintString("<YES>\0");
 17995  00694E  5193               	movf	GetYesNo@answer& (0+255),w,b
 17996  006950  E007               	bz	l20385
 17997                           
 17998                           ; BSR set to: 0
 17999  006952  0E1D               	movlw	high STR_55
 18000  006954  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 18001  006956  0E94               	movlw	low STR_55
 18002  006958  6F76               	movwf	?_LCD_PrintString& (0+255),b
 18003  00695A  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 18004  00695E  D006               	goto	l2057
 18005  006960                     l20385:
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;UserInterface.c: 71: else LCD_PrintString("<NO> \0");
 18009  006960  0E1D               	movlw	high STR_56
 18010  006962  6F77               	movwf	(?_LCD_PrintString+1)& (0+255),b
 18011  006964  0E8D               	movlw	low STR_56
 18012  006966  6F76               	movwf	?_LCD_PrintString& (0+255),b
 18013  006968  ECAB  F03A         	call	_LCD_PrintString	;wreg free
 18014  00696C                     l2057:
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;UserInterface.c: 72: inp = GetInput();
 18018  00696C  EC39  F03B         	call	_GetInput	;wreg free
 18019  006970  6F92               	movwf	GetYesNo@inp& (0+255),b
 18020                           
 18021                           ;UserInterface.c: 73: switch (inp) {
 18022  006972  D019               	goto	l20409
 18023  006974                     l20387:
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;UserInterface.c: 75: LCD_DisplayOnOff(1, 0, 0);
 18027  006974  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 18028  006976  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 18029  006978  0E01               	movlw	1
 18030  00697A  EC7D  F037         	call	_LCD_DisplayOnOff
 18031                           
 18032                           ; BSR set to: 0
 18033                           ;UserInterface.c: 76: return (answer);
 18034  00697E  5193               	movf	GetYesNo@answer& (0+255),w,b
 18035  006980  0012               	return	
 18036  006982                     l20393:
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;UserInterface.c: 78: LCD_DisplayOnOff(1, 0, 0);
 18040  006982  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 18041  006984  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 18042  006986  0E01               	movlw	1
 18043  006988  EC7D  F037         	call	_LCD_DisplayOnOff
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;UserInterface.c: 79: return (-1);
 18047  00698C  0CFF               	retlw	255
 18048  00698E                     l20399:
 18049                           
 18050                           ; BSR set to: 0
 18051                           ;UserInterface.c: 81: LCD_DisplayOnOff(1, 0, 0);
 18052  00698E  6B75               	clrf	?_LCD_DisplayOnOff& (0+255),b
 18053  006990  6B76               	clrf	(?_LCD_DisplayOnOff+1)& (0+255),b
 18054  006992  0E01               	movlw	1
 18055  006994  EC7D  F037         	call	_LCD_DisplayOnOff
 18056                           
 18057                           ; BSR set to: 0
 18058                           ;UserInterface.c: 82: return (-2);
 18059  006998  0CFE               	retlw	254
 18060  00699A                     l20405:
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;UserInterface.c: 84: case 5:
 18064                           ;UserInterface.c: 85: answer = !answer;
 18065  00699A  5193               	movf	GetYesNo@answer& (0+255),w,b
 18066  00699C  0E01               	movlw	1
 18067  00699E  A4D8               	btfss	status,2,c
 18068  0069A0  0E00               	movlw	0
 18069  0069A2  6F93               	movwf	GetYesNo@answer& (0+255),b
 18070                           
 18071                           ;UserInterface.c: 86: break;
 18072  0069A4  D7D0               	goto	l20379
 18073  0069A6                     l20409:
 18074                           
 18075                           ; BSR set to: 0
 18076  0069A6  5192               	movf	GetYesNo@inp& (0+255),w,b
 18077                           
 18078                           ; Switch size 1, requested type "space"
 18079                           ; Number of cases is 5, Range of values is 1 to 5
 18080                           ; switch strategies available:
 18081                           ; Name         Instructions Cycles
 18082                           ; simple_byte           16     9 (average)
 18083                           ;	Chosen strategy is simple_byte
 18084  0069A8  0A01               	xorlw	1	; case 1
 18085  0069AA  E0E4               	bz	l20387
 18086  0069AC  0A03               	xorlw	3	; case 2
 18087  0069AE  E0E9               	bz	l20393
 18088  0069B0  0A01               	xorlw	1	; case 3
 18089  0069B2  E0ED               	bz	l20399
 18090  0069B4  0A07               	xorlw	7	; case 4
 18091  0069B6  E0F1               	bz	l20405
 18092  0069B8  0A01               	xorlw	1	; case 5
 18093  0069BA  E0EF               	bz	l20405
 18094  0069BC  D7C4               	goto	l20379
 18095  0069BE                     __end_of_GetYesNo:
 18096                           	opt stack 0
 18097                           tblptru	equ	0xFF8
 18098                           tblptrh	equ	0xFF7
 18099                           tblptrl	equ	0xFF6
 18100                           tablat	equ	0xFF5
 18101                           prodh	equ	0xFF4
 18102                           prodl	equ	0xFF3
 18103                           intcon	equ	0xFF2
 18104                           intcon2	equ	0xFF1
 18105                           postinc0	equ	0xFEE
 18106                           wreg	equ	0xFE8
 18107                           postinc1	equ	0xFE6
 18108                           postdec1	equ	0xFE5
 18109                           fsr1h	equ	0xFE2
 18110                           fsr1l	equ	0xFE1
 18111                           indf2	equ	0xFDF
 18112                           postinc2	equ	0xFDE
 18113                           postdec2	equ	0xFDD
 18114                           fsr2h	equ	0xFDA
 18115                           fsr2l	equ	0xFD9
 18116                           status	equ	0xFD8
 18117                           
 18118 ;; *************** function _LCD_ClearDisplay *****************
 18119 ;; Defined at:
 18120 ;;		line 135 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 18121 ;; Parameters:    Size  Location     Type
 18122 ;;		None
 18123 ;; Auto vars:     Size  Location     Type
 18124 ;;  idx             1   21[BANK0 ] unsigned char 
 18125 ;; Return value:  Size  Location     Type
 18126 ;;		None               void
 18127 ;; Registers used:
 18128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18129 ;; Tracked objects:
 18130 ;;		On entry : 0/0
 18131 ;;		On exit  : F/0
 18132 ;;		Unchanged: 0/0
 18133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18138 ;;Total ram usage:        1 bytes
 18139 ;; Hardware stack levels used:    1
 18140 ;; Hardware stack levels required when called:    5
 18141 ;; This function calls:
 18142 ;;		_Wait_us
 18143 ;; This function is called by:
 18144 ;;		_ExtMode
 18145 ;;		_LCD_PowerUp
 18146 ;;		_main
 18147 ;;		_GoToSleep
 18148 ;;		_CreateOrbitProgram
 18149 ;;		_RunOrbitProgram
 18150 ;;		_RealtimeMode
 18151 ;;		_ShowVoltage
 18152 ;;		_GetYesNo
 18153 ;;		_GetFloat
 18154 ;;		_DisplayMenu
 18155 ;;		_DisplayChoices
 18156 ;;		_GetTime
 18157 ;;		_GetPresetNumber
 18158 ;;		_CreateWaypointProgram
 18159 ;;		_RunWaypointProgram
 18160 ;; This function uses a non-reentrant model
 18161 ;;
 18162                           
 18163                           	psect	text39
 18164  006BDC                     __ptext39:
 18165                           	opt stack 0
 18166  006BDC                     _LCD_ClearDisplay:
 18167                           	opt stack 24
 18168                           
 18169                           ;LCD.c: 136: char idx;
 18170                           ;LCD.c: 138: LATEbits.LATE5 = 0;
 18171                           
 18172                           ; BSR set to: 0
 18173  006BDC  9A8D               	bcf	3981,5,c	;volatile
 18174                           
 18175                           ;LCD.c: 139: LATEbits.LATE6 = 0;
 18176  006BDE  9C8D               	bcf	3981,6,c	;volatile
 18177                           
 18178                           ;LCD.c: 140: LATD = 0b00000001;
 18179  006BE0  0E01               	movlw	1
 18180  006BE2  6E8C               	movwf	3980,c	;volatile
 18181                           
 18182                           ;LCD.c: 141: LATEbits.LATE7=1;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop"
      +                          );asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");LA
      +                          TEbits.LATE7=0;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");
 18183  006BE4  8E8D               	bsf	3981,7,c	;volatile
 18184  006BE6  F000               	nop		;# 
 18185  006BE8  F000               	nop		;# 
 18186  006BEA  F000               	nop		;# 
 18187  006BEC  F000               	nop		;# 
 18188  006BEE  F000               	nop		;# 
 18189  006BF0  F000               	nop		;# 
 18190  006BF2  F000               	nop		;# 
 18191  006BF4  F000               	nop		;# 
 18192  006BF6  F000               	nop		;# 
 18193  006BF8  F000               	nop		;# 
 18194  006BFA  F000               	nop		;# 
 18195  006BFC  F000               	nop		;# 
 18196  006BFE  9E8D               	bcf	3981,7,c	;volatile
 18197  006C00  F000               	nop		;# 
 18198  006C02  F000               	nop		;# 
 18199  006C04  F000               	nop		;# 
 18200  006C06  F000               	nop		;# 
 18201  006C08  F000               	nop		;# 
 18202  006C0A  F000               	nop		;# 
 18203  006C0C  F000               	nop		;# 
 18204  006C0E  F000               	nop		;# 
 18205  006C10  F000               	nop		;# 
 18206  006C12  F000               	nop		;# 
 18207  006C14  F000               	nop		;# 
 18208  006C16  F000               	nop		;# 
 18209  006C18  F000               	nop		;# 
 18210  006C1A  F000               	nop		;# 
 18211                           
 18212                           ;LCD.c: 143: Wait_us(1640);
 18213  006C1C  0E06               	movlw	6
 18214  006C1E  0100               	movlb	0	; () banked
 18215  006C20  6F73               	movwf	(?_Wait_us+1)& (0+255),b
 18216  006C22  0E68               	movlw	104
 18217  006C24  6F72               	movwf	?_Wait_us& (0+255),b
 18218  006C26  EC79  F039         	call	_Wait_us	;wreg free
 18219                           
 18220                           ; BSR set to: 0
 18221                           ;LCD.c: 145: for (idx = 0; idx < 20; idx++) {
 18222  006C2A  6B75               	clrf	LCD_ClearDisplay@idx& (0+255),b
 18223  006C2C                     l17399:
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;LCD.c: 146: LCD_Line1[idx] = 32;
 18227  006C2C  0EC8               	movlw	low _LCD_Line1
 18228  006C2E  0100               	movlb	0	; () banked
 18229  006C30  2575               	addwf	LCD_ClearDisplay@idx& (0+255),w,b
 18230  006C32  6ED9               	movwf	fsr2l,c
 18231  006C34  6ADA               	clrf	fsr2h,c
 18232  006C36  0E03               	movlw	high _LCD_Line1
 18233  006C38  22DA               	addwfc	fsr2h,f,c
 18234  006C3A  0E20               	movlw	32
 18235  006C3C  6EDF               	movwf	indf2,c
 18236                           
 18237                           ;LCD.c: 147: LCD_Line2[idx] = 32;
 18238  006C3E  0EDC               	movlw	low _LCD_Line2
 18239  006C40  2575               	addwf	LCD_ClearDisplay@idx& (0+255),w,b
 18240  006C42  6ED9               	movwf	fsr2l,c
 18241  006C44  6ADA               	clrf	fsr2h,c
 18242  006C46  0E03               	movlw	high _LCD_Line2
 18243  006C48  22DA               	addwfc	fsr2h,f,c
 18244  006C4A  0E20               	movlw	32
 18245  006C4C  6EDF               	movwf	indf2,c
 18246                           
 18247                           ; BSR set to: 3
 18248  006C4E  2B75               	incf	LCD_ClearDisplay@idx& (0+255),f,b
 18249                           
 18250                           ; BSR set to: 0
 18251  006C50  0E13               	movlw	19
 18252  006C52  6575               	cpfsgt	LCD_ClearDisplay@idx& (0+255),b
 18253  006C54  D7EB               	goto	l17399
 18254                           
 18255                           ; BSR set to: 0
 18256                           ;LCD.c: 148: }
 18257                           ;LCD.c: 149: LCD_Row = 0;
 18258  006C56  6BEE               	clrf	_LCD_Row& (0+255),b
 18259                           
 18260                           ;LCD.c: 150: LCD_Col = 0;
 18261  006C58  6BED               	clrf	_LCD_Col& (0+255),b
 18262                           
 18263                           ; BSR set to: 0
 18264  006C5A  0012               	return	
 18265  006C5C                     __end_of_LCD_ClearDisplay:
 18266                           	opt stack 0
 18267                           tblptru	equ	0xFF8
 18268                           tblptrh	equ	0xFF7
 18269                           tblptrl	equ	0xFF6
 18270                           tablat	equ	0xFF5
 18271                           prodh	equ	0xFF4
 18272                           prodl	equ	0xFF3
 18273                           intcon	equ	0xFF2
 18274                           intcon2	equ	0xFF1
 18275                           postinc0	equ	0xFEE
 18276                           wreg	equ	0xFE8
 18277                           postinc1	equ	0xFE6
 18278                           postdec1	equ	0xFE5
 18279                           fsr1h	equ	0xFE2
 18280                           fsr1l	equ	0xFE1
 18281                           indf2	equ	0xFDF
 18282                           postinc2	equ	0xFDE
 18283                           postdec2	equ	0xFDD
 18284                           fsr2h	equ	0xFDA
 18285                           fsr2l	equ	0xFD9
 18286                           status	equ	0xFD8
 18287                           
 18288 ;; *************** function _LCD_PrintString *****************
 18289 ;; Defined at:
 18290 ;;		line 260 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 18291 ;; Parameters:    Size  Location     Type
 18292 ;;  dat             2   22[BANK0 ] PTR const unsigned char 
 18293 ;;		 -> STR_114(13), STR_113(6), STR_112(8), STR_111(17), 
 18294 ;;		 -> STR_110(20), STR_109(6), STR_108(8), STR_107(17), 
 18295 ;;		 -> STR_106(18), STR_105(6), STR_104(8), STR_103(17), 
 18296 ;;		 -> STR_102(18), STR_101(6), STR_100(8), STR_99(17), 
 18297 ;;		 -> STR_98(19), STR_97(6), STR_96(8), STR_95(17), 
 18298 ;;		 -> STR_94(18), STR_93(6), STR_92(8), STR_91(17), 
 18299 ;;		 -> STR_90(19), STR_89(16), STR_88(17), STR_87(9), 
 18300 ;;		 -> STR_86(9), STR_85(20), STR_84(12), STR_83(12), 
 18301 ;;		 -> STR_82(20), STR_81(19), STR_80(13), STR_79(14), 
 18302 ;;		 -> STR_78(19), STR_77(20), STR_76(13), STR_75(13), 
 18303 ;;		 -> STR_74(18), STR_73(13), STR_72(13), STR_71(8), 
 18304 ;;		 -> STR_70(9), STR_69(12), STR_68(12), STR_67(12), 
 18305 ;;		 -> STR_66(11), STR_65(14), STR_64(21), STR_63(5), 
 18306 ;;		 -> STR_62(21), STR_61(4), STR_60(21), STR_59(4), 
 18307 ;;		 -> STR_58(21), STR_57(4), STR_56(7), STR_55(7), 
 18308 ;;		 -> STR_54(8), STR_53(18), STR_52(13), STR_51(19), 
 18309 ;;		 -> STR_50(15), STR_49(13), STR_48(13), STR_47(18), 
 18310 ;;		 -> STR_46(15), STR_45(21), STR_44(17), STR_43(9), 
 18311 ;;		 -> STR_42(17), STR_41(7), STR_40(7), STR_39(14), 
 18312 ;;		 -> STR_38(17), STR_37(7), STR_36(7), STR_35(14), 
 18313 ;;		 -> STR_34(16), STR_33(21), STR_32(16), STR_31(7), 
 18314 ;;		 -> STR_30(7), STR_29(14), STR_28(14), STR_27(1), 
 18315 ;;		 -> STR_26(14), STR_25(19), STR_24(21), STR_23(13), 
 18316 ;;		 -> STR_22(18), STR_21(13), STR_20(13), STR_19(14), 
 18317 ;;		 -> STR_18(15), STR_17(16), STR_16(16), STR_15(11), 
 18318 ;;		 -> STR_14(8), STR_13(19), STR_12(11), STR_11(7), 
 18319 ;;		 -> STR_10(15), STR_9(22), STR_8(20), STR_7(13), 
 18320 ;;		 -> STR_6(17), STR_5(15), STR_4(12), STR_3(15), 
 18321 ;;		 -> STR_2(12), STR_1(14), 
 18322 ;; Auto vars:     Size  Location     Type
 18323 ;;  a               1   24[BANK0 ] unsigned char 
 18324 ;; Return value:  Size  Location     Type
 18325 ;;		None               void
 18326 ;; Registers used:
 18327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 18328 ;; Tracked objects:
 18329 ;;		On entry : F/0
 18330 ;;		On exit  : F/0
 18331 ;;		Unchanged: 0/0
 18332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18337 ;;Total ram usage:        3 bytes
 18338 ;; Hardware stack levels used:    1
 18339 ;; Hardware stack levels required when called:    6
 18340 ;; This function calls:
 18341 ;;		_LCD_PrintChar
 18342 ;; This function is called by:
 18343 ;;		_ExtMode
 18344 ;;		_main
 18345 ;;		_GoToSleep
 18346 ;;		_CreateOrbitProgram
 18347 ;;		_RunOrbitProgram
 18348 ;;		_RealtimeMode
 18349 ;;		_ShowVoltage
 18350 ;;		_GetYesNo
 18351 ;;		_GetFloat
 18352 ;;		_DisplayMenu
 18353 ;;		_DisplayChoices
 18354 ;;		_GetTime
 18355 ;;		_GetPresetNumber
 18356 ;;		_CreateWaypointProgram
 18357 ;;		_RunWaypointProgram
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           	psect	text40
 18362  007556                     __ptext40:
 18363                           	opt stack 0
 18364  007556                     _LCD_PrintString:
 18365                           	opt stack 23
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;LCD.c: 261: unsigned char a;
 18369                           ;LCD.c: 262: while (*dat) {
 18370                           
 18371                           ; BSR set to: 0
 18372  007556  D00E               	goto	l17413
 18373  007558                     l17407:
 18374                           
 18375                           ; BSR set to: 0
 18376                           ;LCD.c: 263: a = *dat;
 18377  007558  C076  FFF6         	movff	LCD_PrintString@dat,tblptrl
 18378  00755C  C077  FFF7         	movff	LCD_PrintString@dat+1,tblptrh
 18379  007560  0E00               	movlw	low (__mediumconst shr (0+16))
 18380  007562  6EF8               	movwf	tblptru,c
 18381  007564  0008               	tblrd		*
 18382  007566  CFF5 F078          	movff	tablat,LCD_PrintString@a
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;LCD.c: 264: LCD_PrintChar(a);
 18386  00756A  5178               	movf	LCD_PrintString@a& (0+255),w,b
 18387  00756C  EC6A  F035         	call	_LCD_PrintChar
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;LCD.c: 265: dat++;
 18391  007570  4B76               	infsnz	LCD_PrintString@dat& (0+255),f,b
 18392  007572  2B77               	incf	(LCD_PrintString@dat+1)& (0+255),f,b
 18393  007574                     l17413:
 18394                           
 18395                           ; BSR set to: 0
 18396  007574  C076  FFF6         	movff	LCD_PrintString@dat,tblptrl
 18397  007578  C077  FFF7         	movff	LCD_PrintString@dat+1,tblptrh
 18398  00757C  0E00               	movlw	low (__mediumconst shr (0+16))
 18399  00757E  6EF8               	movwf	tblptru,c
 18400  007580  0008               	tblrd		*
 18401  007582  50F5               	movf	tablat,w,c
 18402  007584  B4D8               	btfsc	status,2,c
 18403  007586  0012               	return	
 18404  007588  D7E7               	goto	l17407
 18405  00758A                     __end_of_LCD_PrintString:
 18406                           	opt stack 0
 18407                           tblptru	equ	0xFF8
 18408                           tblptrh	equ	0xFF7
 18409                           tblptrl	equ	0xFF6
 18410                           tablat	equ	0xFF5
 18411                           prodh	equ	0xFF4
 18412                           prodl	equ	0xFF3
 18413                           intcon	equ	0xFF2
 18414                           intcon2	equ	0xFF1
 18415                           postinc0	equ	0xFEE
 18416                           wreg	equ	0xFE8
 18417                           postinc1	equ	0xFE6
 18418                           postdec1	equ	0xFE5
 18419                           fsr1h	equ	0xFE2
 18420                           fsr1l	equ	0xFE1
 18421                           indf2	equ	0xFDF
 18422                           postinc2	equ	0xFDE
 18423                           postdec2	equ	0xFDD
 18424                           fsr2h	equ	0xFDA
 18425                           fsr2l	equ	0xFD9
 18426                           status	equ	0xFD8
 18427                           
 18428 ;; *************** function _LCD_PrintChar *****************
 18429 ;; Defined at:
 18430 ;;		line 245 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 18431 ;; Parameters:    Size  Location     Type
 18432 ;;  dat             1    wreg     unsigned char 
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;  dat             1   21[BANK0 ] unsigned char 
 18435 ;; Return value:  Size  Location     Type
 18436 ;;		None               void
 18437 ;; Registers used:
 18438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : B/4
 18441 ;;		On exit  : F/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;Total ram usage:        1 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:    5
 18451 ;; This function calls:
 18452 ;;		_Wait_us
 18453 ;; This function is called by:
 18454 ;;		_LCD_PrintFloat
 18455 ;;		_LCD_PrintLong
 18456 ;;		_LCD_PrintString
 18457 ;;		_main
 18458 ;;		_DisplayMenu
 18459 ;;		_DisplayChoices
 18460 ;;		_PrintTime
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text41
 18465  006AD4                     __ptext41:
 18466                           	opt stack 0
 18467  006AD4                     _LCD_PrintChar:
 18468                           	opt stack 23
 18469                           
 18470                           ; BSR set to: 0
 18471                           ;LCD_PrintChar@dat stored from wreg
 18472  006AD4  CFE8 F075          	movff	wreg,LCD_PrintChar@dat
 18473                           
 18474                           ;LCD.c: 247: LATEbits.LATE7 = 0;
 18475  006AD8  9E8D               	bcf	3981,7,c	;volatile
 18476                           
 18477                           ;LCD.c: 248: LATEbits.LATE5 = 1;
 18478  006ADA  8A8D               	bsf	3981,5,c	;volatile
 18479                           
 18480                           ;LCD.c: 249: LATEbits.LATE6 = 0;
 18481  006ADC  9C8D               	bcf	3981,6,c	;volatile
 18482                           
 18483                           ;LCD.c: 250: LATD = dat;
 18484  006ADE  C075  FF8C         	movff	LCD_PrintChar@dat,3980	;volatile
 18485                           
 18486                           ;LCD.c: 251: LATEbits.LATE7=1;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop"
      +                          );asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");LA
      +                          TEbits.LATE7=0;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");
 18487  006AE2  8E8D               	bsf	3981,7,c	;volatile
 18488  006AE4  F000               	nop		;# 
 18489  006AE6  F000               	nop		;# 
 18490  006AE8  F000               	nop		;# 
 18491  006AEA  F000               	nop		;# 
 18492  006AEC  F000               	nop		;# 
 18493  006AEE  F000               	nop		;# 
 18494  006AF0  F000               	nop		;# 
 18495  006AF2  F000               	nop		;# 
 18496  006AF4  F000               	nop		;# 
 18497  006AF6  F000               	nop		;# 
 18498  006AF8  F000               	nop		;# 
 18499  006AFA  F000               	nop		;# 
 18500  006AFC  9E8D               	bcf	3981,7,c	;volatile
 18501  006AFE  F000               	nop		;# 
 18502  006B00  F000               	nop		;# 
 18503  006B02  F000               	nop		;# 
 18504  006B04  F000               	nop		;# 
 18505  006B06  F000               	nop		;# 
 18506  006B08  F000               	nop		;# 
 18507  006B0A  F000               	nop		;# 
 18508  006B0C  F000               	nop		;# 
 18509  006B0E  F000               	nop		;# 
 18510  006B10  F000               	nop		;# 
 18511  006B12  F000               	nop		;# 
 18512  006B14  F000               	nop		;# 
 18513  006B16  F000               	nop		;# 
 18514  006B18  F000               	nop		;# 
 18515                           
 18516                           ;LCD.c: 253: Wait_us(75);
 18517  006B1A  0100               	movlb	0	; () banked
 18518  006B1C  6B73               	clrf	(?_Wait_us+1)& (0+255),b
 18519  006B1E  0E4B               	movlw	75
 18520  006B20  6F72               	movwf	?_Wait_us& (0+255),b
 18521  006B22  EC79  F039         	call	_Wait_us	;wreg free
 18522                           
 18523                           ; BSR set to: 0
 18524                           ;LCD.c: 254: if (LCD_Row) LCD_Line1[LCD_Col] = dat;
 18525  006B26  51EE               	movf	_LCD_Row& (0+255),w,b
 18526  006B28  E007               	bz	l17695
 18527                           
 18528                           ; BSR set to: 0
 18529  006B2A  0EC8               	movlw	low _LCD_Line1
 18530  006B2C  0100               	movlb	0	; () banked
 18531  006B2E  25ED               	addwf	_LCD_Col& (0+255),w,b
 18532  006B30  6ED9               	movwf	fsr2l,c
 18533  006B32  6ADA               	clrf	fsr2h,c
 18534  006B34  0E03               	movlw	high _LCD_Line1
 18535  006B36  D006               	goto	L21
 18536  006B38                     l17695:
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;LCD.c: 255: else LCD_Line2[LCD_Col] = dat;
 18540  006B38  0EDC               	movlw	low _LCD_Line2
 18541  006B3A  0100               	movlb	0	; () banked
 18542  006B3C  25ED               	addwf	_LCD_Col& (0+255),w,b
 18543  006B3E  6ED9               	movwf	fsr2l,c
 18544  006B40  6ADA               	clrf	fsr2h,c
 18545  006B42  0E03               	movlw	high _LCD_Line2
 18546  006B44                     L21:
 18547  006B44  22DA               	addwfc	fsr2h,f,c
 18548  006B46  0100               	movlb	0	; () banked
 18549  006B48  C075  FFDF         	movff	LCD_PrintChar@dat,indf2
 18550                           
 18551                           ; BSR set to: 0
 18552                           ;LCD.c: 256: LCD_Col++;
 18553  006B4C  2BED               	incf	_LCD_Col& (0+255),f,b
 18554                           
 18555                           ; BSR set to: 0
 18556                           ;LCD.c: 257: if (LCD_Col > 19) LCD_Col = 19;
 18557  006B4E  0E13               	movlw	19
 18558  006B50  65ED               	cpfsgt	_LCD_Col& (0+255),b
 18559  006B52  0C13               	retlw	19
 18560                           
 18561                           ; BSR set to: 0
 18562  006B54  6FED               	movwf	_LCD_Col& (0+255),b
 18563                           
 18564                           ; BSR set to: 0
 18565  006B56  0C13               	retlw	19
 18566  006B58                     __end_of_LCD_PrintChar:
 18567                           	opt stack 0
 18568                           tblptru	equ	0xFF8
 18569                           tblptrh	equ	0xFF7
 18570                           tblptrl	equ	0xFF6
 18571                           tablat	equ	0xFF5
 18572                           prodh	equ	0xFF4
 18573                           prodl	equ	0xFF3
 18574                           intcon	equ	0xFF2
 18575                           intcon2	equ	0xFF1
 18576                           postinc0	equ	0xFEE
 18577                           wreg	equ	0xFE8
 18578                           postinc1	equ	0xFE6
 18579                           postdec1	equ	0xFE5
 18580                           fsr1h	equ	0xFE2
 18581                           fsr1l	equ	0xFE1
 18582                           indf2	equ	0xFDF
 18583                           postinc2	equ	0xFDE
 18584                           postdec2	equ	0xFDD
 18585                           fsr2h	equ	0xFDA
 18586                           fsr2l	equ	0xFD9
 18587                           status	equ	0xFD8
 18588                           
 18589 ;; *************** function _LCD_DisplayOnOff *****************
 18590 ;; Defined at:
 18591 ;;		line 181 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 18592 ;; Parameters:    Size  Location     Type
 18593 ;;  DisplayOn       1    wreg     unsigned char 
 18594 ;;  CursorOn        1   21[BANK0 ] unsigned char 
 18595 ;;  BlinkOn         1   22[BANK0 ] unsigned char 
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  DisplayOn       1   23[BANK0 ] unsigned char 
 18598 ;;  dat             1   24[BANK0 ] unsigned char 
 18599 ;; Return value:  Size  Location     Type
 18600 ;;		None               void
 18601 ;; Registers used:
 18602 ;;		wreg, status,2, status,0, cstack
 18603 ;; Tracked objects:
 18604 ;;		On entry : F/0
 18605 ;;		On exit  : F/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18608 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18611 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18612 ;;Total ram usage:        4 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; Hardware stack levels required when called:    5
 18615 ;; This function calls:
 18616 ;;		_Wait_us
 18617 ;; This function is called by:
 18618 ;;		_LCD_PowerUp
 18619 ;;		_GoToSleep
 18620 ;;		_GetYesNo
 18621 ;;		_GetFloat
 18622 ;;		_DisplayMenu
 18623 ;; This function uses a non-reentrant model
 18624 ;;
 18625                           
 18626                           	psect	text42
 18627  006EFA                     __ptext42:
 18628                           	opt stack 0
 18629  006EFA                     _LCD_DisplayOnOff:
 18630                           	opt stack 24
 18631                           
 18632                           ; BSR set to: 0
 18633                           ;LCD_DisplayOnOff@DisplayOn stored from wreg
 18634  006EFA  CFE8 F077          	movff	wreg,LCD_DisplayOnOff@DisplayOn
 18635                           
 18636                           ; BSR set to: 0
 18637                           ;LCD.c: 183: unsigned char dat = 0b00001000;
 18638  006EFE  0E08               	movlw	8
 18639  006F00  6F78               	movwf	LCD_DisplayOnOff@dat& (0+255),b
 18640                           
 18641                           ; BSR set to: 0
 18642                           ;LCD.c: 184: if (DisplayOn) dat |= 0b00000100;
 18643  006F02  5177               	movf	LCD_DisplayOnOff@DisplayOn& (0+255),w,b
 18644  006F04  A4D8               	btfss	status,2,c
 18645                           
 18646                           ; BSR set to: 0
 18647  006F06  8578               	bsf	LCD_DisplayOnOff@dat& (0+255),2,b
 18648                           
 18649                           ; BSR set to: 0
 18650                           ;LCD.c: 185: if (CursorOn) dat |= 0b00000010;
 18651  006F08  5175               	movf	LCD_DisplayOnOff@CursorOn& (0+255),w,b
 18652  006F0A  A4D8               	btfss	status,2,c
 18653                           
 18654                           ; BSR set to: 0
 18655  006F0C  8378               	bsf	LCD_DisplayOnOff@dat& (0+255),1,b
 18656                           
 18657                           ; BSR set to: 0
 18658                           ;LCD.c: 186: if (BlinkOn) dat |= 0b00000001;
 18659  006F0E  5176               	movf	LCD_DisplayOnOff@BlinkOn& (0+255),w,b
 18660  006F10  A4D8               	btfss	status,2,c
 18661                           
 18662                           ; BSR set to: 0
 18663  006F12  8178               	bsf	LCD_DisplayOnOff@dat& (0+255),0,b
 18664                           
 18665                           ; BSR set to: 0
 18666                           ;LCD.c: 188: LATEbits.LATE7 = 0;
 18667  006F14  9E8D               	bcf	3981,7,c	;volatile
 18668                           
 18669                           ; BSR set to: 0
 18670                           ;LCD.c: 189: LATEbits.LATE5 = 0;
 18671  006F16  9A8D               	bcf	3981,5,c	;volatile
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;LCD.c: 190: LATEbits.LATE6 = 0;
 18675  006F18  9C8D               	bcf	3981,6,c	;volatile
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;LCD.c: 191: LATD = dat;
 18679  006F1A  C078  FF8C         	movff	LCD_DisplayOnOff@dat,3980	;volatile
 18680                           
 18681                           ; BSR set to: 0
 18682                           ;LCD.c: 192: LATEbits.LATE7=1;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop"
      +                          );asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");LA
      +                          TEbits.LATE7=0;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");
 18683  006F1E  8E8D               	bsf	3981,7,c	;volatile
 18684                           
 18685                           ; BSR set to: 0
 18686  006F20  F000               	nop		;# 
 18687  006F22  F000               	nop		;# 
 18688  006F24  F000               	nop		;# 
 18689  006F26  F000               	nop		;# 
 18690  006F28  F000               	nop		;# 
 18691  006F2A  F000               	nop		;# 
 18692  006F2C  F000               	nop		;# 
 18693  006F2E  F000               	nop		;# 
 18694  006F30  F000               	nop		;# 
 18695  006F32  F000               	nop		;# 
 18696  006F34  F000               	nop		;# 
 18697  006F36  F000               	nop		;# 
 18698  006F38  9E8D               	bcf	3981,7,c	;volatile
 18699  006F3A  F000               	nop		;# 
 18700  006F3C  F000               	nop		;# 
 18701  006F3E  F000               	nop		;# 
 18702  006F40  F000               	nop		;# 
 18703  006F42  F000               	nop		;# 
 18704  006F44  F000               	nop		;# 
 18705  006F46  F000               	nop		;# 
 18706  006F48  F000               	nop		;# 
 18707  006F4A  F000               	nop		;# 
 18708  006F4C  F000               	nop		;# 
 18709  006F4E  F000               	nop		;# 
 18710  006F50  F000               	nop		;# 
 18711  006F52  F000               	nop		;# 
 18712  006F54  F000               	nop		;# 
 18713                           
 18714                           ;LCD.c: 194: Wait_us(75);
 18715  006F56  0100               	movlb	0	; () banked
 18716  006F58  6B73               	clrf	(?_Wait_us+1)& (0+255),b
 18717  006F5A  0E4B               	movlw	75
 18718  006F5C  6F72               	movwf	?_Wait_us& (0+255),b
 18719  006F5E  EF79  F039         	goto	_Wait_us	;wreg free
 18720  006F62                     __end_of_LCD_DisplayOnOff:
 18721                           	opt stack 0
 18722                           tblptru	equ	0xFF8
 18723                           tblptrh	equ	0xFF7
 18724                           tblptrl	equ	0xFF6
 18725                           tablat	equ	0xFF5
 18726                           prodh	equ	0xFF4
 18727                           prodl	equ	0xFF3
 18728                           intcon	equ	0xFF2
 18729                           intcon2	equ	0xFF1
 18730                           postinc0	equ	0xFEE
 18731                           wreg	equ	0xFE8
 18732                           postinc1	equ	0xFE6
 18733                           postdec1	equ	0xFE5
 18734                           fsr1h	equ	0xFE2
 18735                           fsr1l	equ	0xFE1
 18736                           indf2	equ	0xFDF
 18737                           postinc2	equ	0xFDE
 18738                           postdec2	equ	0xFDD
 18739                           fsr2h	equ	0xFDA
 18740                           fsr2l	equ	0xFD9
 18741                           status	equ	0xFD8
 18742                           
 18743 ;; *************** function _LCD_SetPosition *****************
 18744 ;; Defined at:
 18745 ;;		line 228 in file "Z:\CineFlux\Dropbox\Orbit\LCD.c"
 18746 ;; Parameters:    Size  Location     Type
 18747 ;;  Row             1    wreg     unsigned char 
 18748 ;;  Col             1   21[BANK0 ] unsigned char 
 18749 ;; Auto vars:     Size  Location     Type
 18750 ;;  Row             1   23[BANK0 ] unsigned char 
 18751 ;;  dat             1   22[BANK0 ] unsigned char 
 18752 ;; Return value:  Size  Location     Type
 18753 ;;		None               void
 18754 ;; Registers used:
 18755 ;;		wreg, status,2, status,0, cstack
 18756 ;; Tracked objects:
 18757 ;;		On entry : 0/4
 18758 ;;		On exit  : F/0
 18759 ;;		Unchanged: 0/0
 18760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18761 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18765 ;;Total ram usage:        3 bytes
 18766 ;; Hardware stack levels used:    1
 18767 ;; Hardware stack levels required when called:    5
 18768 ;; This function calls:
 18769 ;;		_Wait_us
 18770 ;; This function is called by:
 18771 ;;		_main
 18772 ;;		_CreateOrbitProgram
 18773 ;;		_RunOrbitProgram
 18774 ;;		_RealtimeMode
 18775 ;;		_ShowVoltage
 18776 ;;		_GetYesNo
 18777 ;;		_GetFloat
 18778 ;;		_DisplayMenu
 18779 ;;		_DisplayChoices
 18780 ;;		_GetTime
 18781 ;;		_GetPresetNumber
 18782 ;;		_CreateWaypointProgram
 18783 ;;		_RunWaypointProgram
 18784 ;; This function uses a non-reentrant model
 18785 ;;
 18786                           
 18787                           	psect	text43
 18788  006DBE                     __ptext43:
 18789                           	opt stack 0
 18790  006DBE                     _LCD_SetPosition:
 18791                           	opt stack 24
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;LCD_SetPosition@Row stored from wreg
 18795  006DBE  CFE8 F077          	movff	wreg,LCD_SetPosition@Row
 18796                           
 18797                           ;LCD.c: 230: unsigned char dat = Col;
 18798  006DC2  C075  F076         	movff	LCD_SetPosition@Col,LCD_SetPosition@dat
 18799                           
 18800                           ;LCD.c: 231: if (Row == 1) dat += 0x40;
 18801  006DC6  0100               	movlb	0	; () banked
 18802  006DC8  0577               	decf	LCD_SetPosition@Row& (0+255),w,b
 18803  006DCA  E102               	bnz	l18007
 18804                           
 18805                           ; BSR set to: 0
 18806  006DCC  0E40               	movlw	64
 18807  006DCE  2776               	addwf	LCD_SetPosition@dat& (0+255),f,b
 18808  006DD0                     l18007:
 18809                           
 18810                           ; BSR set to: 0
 18811                           ;LCD.c: 232: dat |= 0b10000000;
 18812  006DD0  8F76               	bsf	LCD_SetPosition@dat& (0+255),7,b
 18813                           
 18814                           ; BSR set to: 0
 18815                           ;LCD.c: 234: LATEbits.LATE7 = 0;
 18816  006DD2  9E8D               	bcf	3981,7,c	;volatile
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;LCD.c: 235: LATEbits.LATE5 = 0;
 18820  006DD4  9A8D               	bcf	3981,5,c	;volatile
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;LCD.c: 236: LATEbits.LATE6 = 0;
 18824  006DD6  9C8D               	bcf	3981,6,c	;volatile
 18825                           
 18826                           ; BSR set to: 0
 18827                           ;LCD.c: 237: LATD = dat;
 18828  006DD8  C076  FF8C         	movff	LCD_SetPosition@dat,3980	;volatile
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;LCD.c: 238: LATEbits.LATE7=1;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop"
      +                          );asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");LA
      +                          TEbits.LATE7=0;asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");asm(" nop");
 18832  006DDC  8E8D               	bsf	3981,7,c	;volatile
 18833                           
 18834                           ; BSR set to: 0
 18835  006DDE  F000               	nop		;# 
 18836  006DE0  F000               	nop		;# 
 18837  006DE2  F000               	nop		;# 
 18838  006DE4  F000               	nop		;# 
 18839  006DE6  F000               	nop		;# 
 18840  006DE8  F000               	nop		;# 
 18841  006DEA  F000               	nop		;# 
 18842  006DEC  F000               	nop		;# 
 18843  006DEE  F000               	nop		;# 
 18844  006DF0  F000               	nop		;# 
 18845  006DF2  F000               	nop		;# 
 18846  006DF4  F000               	nop		;# 
 18847  006DF6  9E8D               	bcf	3981,7,c	;volatile
 18848  006DF8  F000               	nop		;# 
 18849  006DFA  F000               	nop		;# 
 18850  006DFC  F000               	nop		;# 
 18851  006DFE  F000               	nop		;# 
 18852  006E00  F000               	nop		;# 
 18853  006E02  F000               	nop		;# 
 18854  006E04  F000               	nop		;# 
 18855  006E06  F000               	nop		;# 
 18856  006E08  F000               	nop		;# 
 18857  006E0A  F000               	nop		;# 
 18858  006E0C  F000               	nop		;# 
 18859  006E0E  F000               	nop		;# 
 18860  006E10  F000               	nop		;# 
 18861  006E12  F000               	nop		;# 
 18862                           
 18863                           ;LCD.c: 240: Wait_us(75);
 18864  006E14  0100               	movlb	0	; () banked
 18865  006E16  6B73               	clrf	(?_Wait_us+1)& (0+255),b
 18866  006E18  0E4B               	movlw	75
 18867  006E1A  6F72               	movwf	?_Wait_us& (0+255),b
 18868  006E1C  EC79  F039         	call	_Wait_us	;wreg free
 18869                           
 18870                           ; BSR set to: 0
 18871                           ;LCD.c: 241: LCD_Row = Row;
 18872  006E20  C077  F0EE         	movff	LCD_SetPosition@Row,_LCD_Row
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;LCD.c: 242: LCD_Col = Col;
 18876  006E24  C075  F0ED         	movff	LCD_SetPosition@Col,_LCD_Col
 18877                           
 18878                           ; BSR set to: 0
 18879  006E28  0012               	return	
 18880  006E2A                     __end_of_LCD_SetPosition:
 18881                           	opt stack 0
 18882                           tblptru	equ	0xFF8
 18883                           tblptrh	equ	0xFF7
 18884                           tblptrl	equ	0xFF6
 18885                           tablat	equ	0xFF5
 18886                           prodh	equ	0xFF4
 18887                           prodl	equ	0xFF3
 18888                           intcon	equ	0xFF2
 18889                           intcon2	equ	0xFF1
 18890                           postinc0	equ	0xFEE
 18891                           wreg	equ	0xFE8
 18892                           postinc1	equ	0xFE6
 18893                           postdec1	equ	0xFE5
 18894                           fsr1h	equ	0xFE2
 18895                           fsr1l	equ	0xFE1
 18896                           indf2	equ	0xFDF
 18897                           postinc2	equ	0xFDE
 18898                           postdec2	equ	0xFDD
 18899                           fsr2h	equ	0xFDA
 18900                           fsr2l	equ	0xFD9
 18901                           status	equ	0xFD8
 18902                           
 18903 ;; *************** function _Wait_us *****************
 18904 ;; Defined at:
 18905 ;;		line 35 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 18906 ;; Parameters:    Size  Location     Type
 18907 ;;  time            2   18[BANK0 ] unsigned int 
 18908 ;; Auto vars:     Size  Location     Type
 18909 ;;  tickcount       1   20[BANK0 ] unsigned char 
 18910 ;; Return value:  Size  Location     Type
 18911 ;;		None               void
 18912 ;; Registers used:
 18913 ;;		wreg, status,2, status,0, cstack
 18914 ;; Tracked objects:
 18915 ;;		On entry : F/0
 18916 ;;		On exit  : F/0
 18917 ;;		Unchanged: FFFFFFF0/0
 18918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18919 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18922 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18923 ;;Total ram usage:        3 bytes
 18924 ;; Hardware stack levels used:    1
 18925 ;; Hardware stack levels required when called:    4
 18926 ;; This function calls:
 18927 ;;		___lwdiv
 18928 ;;		_Wait_ticks
 18929 ;; This function is called by:
 18930 ;;		_LCD_ClearDisplay
 18931 ;;		_LCD_DisplayOnOff
 18932 ;;		_LCD_FunctionSet
 18933 ;;		_LCD_SetPosition
 18934 ;;		_LCD_PrintChar
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           	psect	text44
 18939  0072F2                     __ptext44:
 18940                           	opt stack 0
 18941  0072F2                     _Wait_us:
 18942                           	opt stack 23
 18943                           
 18944                           ; BSR set to: 0
 18945                           ;Timings.c: 36: unsigned char tickcount;
 18946                           ;Timings.c: 37: if (time > 3180) time = 3180;
 18947                           
 18948                           ; BSR set to: 0
 18949  0072F2  0E6D               	movlw	109
 18950  0072F4  5D72               	subwf	Wait_us@time& (0+255),w,b
 18951  0072F6  0E0C               	movlw	12
 18952  0072F8  5973               	subwfb	(Wait_us@time+1)& (0+255),w,b
 18953  0072FA  E304               	bnc	l17991
 18954                           
 18955                           ; BSR set to: 0
 18956  0072FC  0E0C               	movlw	12
 18957  0072FE  6F73               	movwf	(Wait_us@time+1)& (0+255),b
 18958  007300  0E6C               	movlw	108
 18959  007302  6F72               	movwf	Wait_us@time& (0+255),b
 18960  007304                     l17991:
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;Timings.c: 38: time /= 25;
 18964  007304  C072  F06B         	movff	Wait_us@time,?___lwdiv
 18965  007308  C073  F06C         	movff	Wait_us@time+1,?___lwdiv+1
 18966  00730C  6B6E               	clrf	(?___lwdiv+3)& (0+255),b
 18967  00730E  0E19               	movlw	25
 18968  007310  6F6D               	movwf	(?___lwdiv+2)& (0+255),b
 18969  007312  ECA5  F038         	call	___lwdiv	;wreg free
 18970  007316  C06B  F072         	movff	?___lwdiv,Wait_us@time
 18971  00731A  C06C  F073         	movff	?___lwdiv+1,Wait_us@time+1
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;Timings.c: 39: if(time==0) time=1;
 18975  00731E  5173               	movf	(Wait_us@time+1)& (0+255),w,b
 18976  007320  1172               	iorwf	Wait_us@time& (0+255),w,b
 18977  007322  E103               	bnz	l17997
 18978                           
 18979                           ; BSR set to: 0
 18980  007324  6B73               	clrf	(Wait_us@time+1)& (0+255),b
 18981  007326  0E01               	movlw	1
 18982  007328  6F72               	movwf	Wait_us@time& (0+255),b
 18983  00732A                     l17997:
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;Timings.c: 40: tickcount=(unsigned char)time;
 18987  00732A  C072  F074         	movff	Wait_us@time,Wait_us@tickcount
 18988                           
 18989                           ; BSR set to: 0
 18990                           ;Timings.c: 41: Wait_ticks(tickcount);
 18991  00732E  5174               	movf	Wait_us@tickcount& (0+255),w,b
 18992  007330  EF65  F03B         	goto	_Wait_ticks
 18993  007334                     __end_of_Wait_us:
 18994                           	opt stack 0
 18995                           tblptru	equ	0xFF8
 18996                           tblptrh	equ	0xFF7
 18997                           tblptrl	equ	0xFF6
 18998                           tablat	equ	0xFF5
 18999                           prodh	equ	0xFF4
 19000                           prodl	equ	0xFF3
 19001                           intcon	equ	0xFF2
 19002                           intcon2	equ	0xFF1
 19003                           postinc0	equ	0xFEE
 19004                           wreg	equ	0xFE8
 19005                           postinc1	equ	0xFE6
 19006                           postdec1	equ	0xFE5
 19007                           fsr1h	equ	0xFE2
 19008                           fsr1l	equ	0xFE1
 19009                           indf2	equ	0xFDF
 19010                           postinc2	equ	0xFDE
 19011                           postdec2	equ	0xFDD
 19012                           fsr2h	equ	0xFDA
 19013                           fsr2l	equ	0xFD9
 19014                           status	equ	0xFD8
 19015                           
 19016 ;; *************** function _Wait_ticks *****************
 19017 ;; Defined at:
 19018 ;;		line 46 in file "Z:\CineFlux\Dropbox\Orbit\Timings.c"
 19019 ;; Parameters:    Size  Location     Type
 19020 ;;  Ticks           1    wreg     unsigned char 
 19021 ;; Auto vars:     Size  Location     Type
 19022 ;;  Ticks           1   12[BANK0 ] unsigned char 
 19023 ;;  remaining       1   13[BANK0 ] unsigned char 
 19024 ;; Return value:  Size  Location     Type
 19025 ;;		None               void
 19026 ;; Registers used:
 19027 ;;		wreg, status,2, status,0
 19028 ;; Tracked objects:
 19029 ;;		On entry : F/0
 19030 ;;		On exit  : F/0
 19031 ;;		Unchanged: FFFFFFF0/0
 19032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19037 ;;Total ram usage:        3 bytes
 19038 ;; Hardware stack levels used:    1
 19039 ;; Hardware stack levels required when called:    3
 19040 ;; This function calls:
 19041 ;;		Nothing
 19042 ;; This function is called by:
 19043 ;;		_Wait_us
 19044 ;; This function uses a non-reentrant model
 19045 ;;
 19046                           
 19047                           	psect	text45
 19048  0076CA                     __ptext45:
 19049                           	opt stack 0
 19050  0076CA                     _Wait_ticks:
 19051                           	opt stack 23
 19052                           
 19053                           ; BSR set to: 0
 19054                           ;Wait_ticks@Ticks stored from wreg
 19055  0076CA  CFE8 F06C          	movff	wreg,Wait_ticks@Ticks
 19056                           
 19057                           ; BSR set to: 0
 19058                           ;Timings.c: 47: static bit LastFlop = 0;
 19059                           ;Timings.c: 48: unsigned char remaining=Ticks+1;
 19060  0076CE  296C               	incf	Wait_ticks@Ticks& (0+255),w,b
 19061  0076D0  6F6D               	movwf	Wait_ticks@remaining& (0+255),b
 19062                           
 19063                           ;Timings.c: 49: while (remaining) {
 19064  0076D2  D00C               	goto	l20355
 19065  0076D4                     l20349:
 19066  0076D4  0E01               	movlw	1
 19067                           
 19068                           ; BSR set to: 0
 19069  0076D6  A65A               	btfss	_bTick40Khz/(0+8),_bTick40Khz& (0+7),c	;volatile
 19070  0076D8  0E00               	movlw	0
 19071  0076DA  0100               	movlb	0	; () banked
 19072  0076DC  6F6B               	movwf	??_Wait_ticks& (0+255),b
 19073  0076DE  0E01               	movlw	1
 19074  0076E0  A457               	btfss	Wait_ticks@LastFlop/(0+8),Wait_ticks@LastFlop& (0+7),c
 19075  0076E2  0E00               	movlw	0
 19076  0076E4  1B6B               	xorwf	??_Wait_ticks& (0+255),f,b
 19077  0076E6  E0F6               	bz	l20349
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;Timings.c: 51: remaining--;
 19081  0076E8  076D               	decf	Wait_ticks@remaining& (0+255),f,b
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;Timings.c: 52: LastFlop = !LastFlop;
 19085  0076EA  7457               	btg	Wait_ticks@LastFlop/(0+8),Wait_ticks@LastFlop& (0+7),c
 19086  0076EC                     l20355:
 19087  0076EC  0100               	movlb	0	; () banked
 19088  0076EE  676D               	tstfsz	Wait_ticks@remaining& (0+255),b
 19089  0076F0  D7F1               	goto	l20349
 19090  0076F2  0012               	return	
 19091  0076F4                     __end_of_Wait_ticks:
 19092                           	opt stack 0
 19093                           tblptru	equ	0xFF8
 19094                           tblptrh	equ	0xFF7
 19095                           tblptrl	equ	0xFF6
 19096                           tablat	equ	0xFF5
 19097                           prodh	equ	0xFF4
 19098                           prodl	equ	0xFF3
 19099                           intcon	equ	0xFF2
 19100                           intcon2	equ	0xFF1
 19101                           postinc0	equ	0xFEE
 19102                           wreg	equ	0xFE8
 19103                           postinc1	equ	0xFE6
 19104                           postdec1	equ	0xFE5
 19105                           fsr1h	equ	0xFE2
 19106                           fsr1l	equ	0xFE1
 19107                           indf2	equ	0xFDF
 19108                           postinc2	equ	0xFDE
 19109                           postdec2	equ	0xFDD
 19110                           fsr2h	equ	0xFDA
 19111                           fsr2l	equ	0xFD9
 19112                           status	equ	0xFD8
 19113                           
 19114 ;; *************** function _GetInput *****************
 19115 ;; Defined at:
 19116 ;;		line 34 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 19117 ;; Parameters:    Size  Location     Type
 19118 ;;		None
 19119 ;; Auto vars:     Size  Location     Type
 19120 ;;  ret             1   46[BANK0 ] char 
 19121 ;; Return value:  Size  Location     Type
 19122 ;;                  1    wreg      char 
 19123 ;; Registers used:
 19124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 19125 ;; Tracked objects:
 19126 ;;		On entry : 0/0
 19127 ;;		On exit  : F/0
 19128 ;;		Unchanged: 0/0
 19129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19134 ;;Total ram usage:        1 bytes
 19135 ;; Hardware stack levels used:    1
 19136 ;; Hardware stack levels required when called:    7
 19137 ;; This function calls:
 19138 ;;		_Idle
 19139 ;; This function is called by:
 19140 ;;		_GetClick
 19141 ;;		_GetYesNo
 19142 ;;		_GetFloat
 19143 ;;		_DisplayMenu
 19144 ;;		_DisplayChoices
 19145 ;;		_GetTime
 19146 ;;		_GetPresetNumber
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text46
 19151  007672                     __ptext46:
 19152                           	opt stack 0
 19153  007672                     _GetInput:
 19154                           	opt stack 21
 19155                           
 19156                           ;UserInterface.c: 35: signed char ret = 0;
 19157                           
 19158                           ; BSR set to: 0
 19159  007672  0100               	movlb	0	; () banked
 19160  007674  6B8E               	clrf	GetInput@ret& (0+255),b
 19161                           
 19162                           ;UserInterface.c: 36: ClearUI_Event = 1;
 19163  007676  8657               	bsf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 19164                           
 19165                           ;UserInterface.c: 37: while (ClearUI_Event) Idle();
 19166  007678  D002               	goto	l20361
 19167  00767A                     l20359:
 19168  00767A  ECDF  F024         	call	_Idle	;wreg free
 19169  00767E                     l20361:
 19170  00767E  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
 19171  007680  A657               	btfss	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 19172  007682  D008               	goto	l20365
 19173  007684  D7FA               	goto	l20359
 19174  007686                     l2043:
 19175                           
 19176                           ; BSR set to: 0
 19177                           ;UserInterface.c: 40: bLock_UI_Event = 1;
 19178  007686  8859               	bsf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 19179                           
 19180                           ;UserInterface.c: 41: ret = UI_Event;
 19181  007688  C0F2  F08E         	movff	_UI_Event,GetInput@ret	;volatile
 19182                           
 19183                           ;UserInterface.c: 42: bLock_UI_Event = 0;
 19184  00768C  0100               	movlb	(_bLock_UI_Event/(0+8)) shr (0+8)
 19185  00768E  9859               	bcf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 19186                           
 19187                           ;UserInterface.c: 43: Idle();
 19188  007690  ECDF  F024         	call	_Idle	;wreg free
 19189  007694                     l20365:
 19190  007694  0100               	movlb	0	; () banked
 19191  007696  518E               	movf	GetInput@ret& (0+255),w,b
 19192  007698  E0F6               	bz	l2043
 19193                           
 19194                           ; BSR set to: 0
 19195                           ;UserInterface.c: 44: }
 19196                           ;UserInterface.c: 45: return ret;
 19197  00769A  518E               	movf	GetInput@ret& (0+255),w,b
 19198                           
 19199                           ; BSR set to: 0
 19200  00769C  0012               	return	
 19201  00769E                     __end_of_GetInput:
 19202                           	opt stack 0
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           intcon2	equ	0xFF1
 19211                           postinc0	equ	0xFEE
 19212                           wreg	equ	0xFE8
 19213                           postinc1	equ	0xFE6
 19214                           postdec1	equ	0xFE5
 19215                           fsr1h	equ	0xFE2
 19216                           fsr1l	equ	0xFE1
 19217                           indf2	equ	0xFDF
 19218                           postinc2	equ	0xFDE
 19219                           postdec2	equ	0xFDD
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _Idle *****************
 19225 ;; Defined at:
 19226 ;;		line 754 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;		None
 19229 ;; Auto vars:     Size  Location     Type
 19230 ;;  CmdID           1  125[BANK1 ] unsigned char 
 19231 ;;  tempPset      120    1[BANK1 ] struct .
 19232 ;;  temp            4  121[BANK1 ] struct .
 19233 ;;  idx             1  126[BANK1 ] unsigned char 
 19234 ;;  PresetNumber    1    0[BANK1 ] unsigned char 
 19235 ;; Return value:  Size  Location     Type
 19236 ;;		None               void
 19237 ;; Registers used:
 19238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 19239 ;; Tracked objects:
 19240 ;;		On entry : 0/0
 19241 ;;		On exit  : E/0
 19242 ;;		Unchanged: 0/0
 19243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Locals:         0       0     127       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19247 ;;      Totals:         0       1     127       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19248 ;;Total ram usage:      128 bytes
 19249 ;; Hardware stack levels used:    1
 19250 ;; Hardware stack levels required when called:    6
 19251 ;; This function calls:
 19252 ;;		_MessageStream_ReadByte
 19253 ;;		_MessageStream_WriteByte
 19254 ;;		_AckCmd
 19255 ;;		___altoft
 19256 ;;		___asftmul
 19257 ;;		_MessageStream_WriteMULTI
 19258 ;;		___lltoft
 19259 ;;		___lwtoft
 19260 ;;		_NackCmd
 19261 ;;		_LoadPreset
 19262 ;;		_SavePreset
 19263 ;; This function is called by:
 19264 ;;		_main
 19265 ;;		_RunOrbitProgram
 19266 ;;		_RealtimeMode
 19267 ;;		_Wait_ms
 19268 ;;		_GetInput
 19269 ;;		_CreateWaypointProgram
 19270 ;;		_RunWaypointProgram
 19271 ;; This function uses a non-reentrant model
 19272 ;;
 19273                           
 19274                           	psect	text47
 19275  0049BE                     __ptext47:
 19276                           	opt stack 0
 19277  0049BE                     _Idle:
 19278                           	opt stack 21
 19279                           
 19280                           ;Main.c: 756: char idx;
 19281                           ;Main.c: 757: MULTI temp;
 19282                           ;Main.c: 758: PRESET tempPset;
 19283                           ;Main.c: 760: if (ExtModeActive) {
 19284                           
 19285                           ; BSR set to: 0
 19286  0049BE  A857               	btfss	_ExtModeActive/(0+8),_ExtModeActive& (0+7),c	;volatile
 19287  0049C0  D008               	goto	l913
 19288                           
 19289                           ;Main.c: 761: idx = 255;
 19290  0049C2  0101               	movlb	1	; () banked
 19291  0049C4  697E               	setf	Idle@idx& (0+255),b
 19292  0049C6                     l18307:
 19293                           
 19294                           ; BSR set to: 1
 19295  0049C6  077E               	decf	Idle@idx& (0+255),f,b
 19296  0049C8  0101               	movlb	1	; () banked
 19297  0049CA  297E               	incf	Idle@idx& (0+255),w,b
 19298  0049CC  B4D8               	btfsc	status,2,c
 19299  0049CE  0012               	return	
 19300  0049D0  D7FA               	goto	l18307
 19301  0049D2                     l913:
 19302                           
 19303                           ;Main.c: 764: }
 19304                           ;Main.c: 766: if (!RX_MsgComplete) {
 19305  0049D2  BE57               	btfsc	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
 19306  0049D4  D008               	goto	l18313
 19307                           
 19308                           ;Main.c: 767: idx = 255;
 19309  0049D6  0101               	movlb	1	; () banked
 19310  0049D8  697E               	setf	Idle@idx& (0+255),b
 19311  0049DA                     l18311:
 19312                           
 19313                           ; BSR set to: 1
 19314  0049DA  077E               	decf	Idle@idx& (0+255),f,b
 19315  0049DC  0101               	movlb	1	; () banked
 19316  0049DE  297E               	incf	Idle@idx& (0+255),w,b
 19317  0049E0  B4D8               	btfsc	status,2,c
 19318  0049E2  0012               	return	
 19319  0049E4  D7FA               	goto	l18311
 19320  0049E6                     l18313:
 19321                           
 19322                           ;Main.c: 770: }
 19323                           ;Main.c: 772: ReadIdx = 1;
 19324  0049E6  0E01               	movlw	1
 19325  0049E8  0100               	movlb	0	; () banked
 19326  0049EA  6FF0               	movwf	_ReadIdx& (0+255),b
 19327                           
 19328                           ; BSR set to: 0
 19329                           ;Main.c: 773: RX_MsgComplete = 0;
 19330  0049EC  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
 19331  0049EE  9E57               	bcf	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
 19332                           
 19333                           ;Main.c: 774: if (MessageStream_ReadByte() == MyID) {
 19334  0049F0  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
 19335  0049F4  0101               	movlb	1	; () banked
 19336  0049F6  19FF               	xorwf	_MyID& (0+255),w,b	;volatile
 19337  0049F8  A4D8               	btfss	status,2,c
 19338  0049FA  0012               	return	
 19339                           
 19340                           ; BSR set to: 1
 19341                           ;Main.c: 775: unsigned char CmdID = MessageStream_ReadByte();
 19342  0049FC  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
 19343  004A00  0101               	movlb	1	; () banked
 19344  004A02  6F7D               	movwf	Idle@CmdID& (0+255),b
 19345                           
 19346                           ;Main.c: 776: switch (CmdID) {
 19347  004A04  D111               	goto	l18471
 19348  004A06                     l924:
 19349                           
 19350                           ; BSR set to: 1
 19351                           ;Main.c: 778: TX_Idx = 0;
 19352  004A06  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 19353                           
 19354                           ; BSR set to: 1
 19355                           ;Main.c: 779: TXBuffer[TX_Idx++] = '$';
 19356  004A08  0E00               	movlw	low _TXBuffer	;volatile
 19357  004A0A  EC51  F039         	call	PL50	;call to abstracted procedure
 19358  004A0E  0E24               	movlw	36
 19359  004A10  6EDF               	movwf	indf2,c
 19360                           
 19361                           ; BSR set to: 6
 19362  004A12  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 19363                           
 19364                           ; BSR set to: 1
 19365                           ;Main.c: 780: MessageStream_WriteByte(CmdID);
 19366  004A14  517D               	movf	Idle@CmdID& (0+255),w,b
 19367  004A16  ECDA  F039         	call	_MessageStream_WriteByte
 19368                           
 19369                           ; BSR set to: 1
 19370                           ;Main.c: 781: for (idx = 0; idx < 20; idx++) {
 19371  004A1A  6B7E               	clrf	Idle@idx& (0+255),b
 19372  004A1C                     l18333:
 19373                           
 19374                           ; BSR set to: 1
 19375                           ;Main.c: 782: MessageStream_WriteByte(LCD_Line2[idx]);
 19376  004A1C  0EDC               	movlw	low _LCD_Line2
 19377  004A1E  0101               	movlb	1	; () banked
 19378  004A20  257E               	addwf	Idle@idx& (0+255),w,b
 19379  004A22  6ED9               	movwf	fsr2l,c
 19380  004A24  6ADA               	clrf	fsr2h,c
 19381  004A26  0103               	movlb	3	; () banked
 19382  004A28  0E03               	movlw	high _LCD_Line2
 19383  004A2A  22DA               	addwfc	fsr2h,f,c
 19384  004A2C  50DF               	movf	indf2,w,c
 19385  004A2E  ECDA  F039         	call	_MessageStream_WriteByte
 19386                           
 19387                           ; BSR set to: 1
 19388  004A32  2B7E               	incf	Idle@idx& (0+255),f,b
 19389                           
 19390                           ; BSR set to: 1
 19391  004A34  0E13               	movlw	19
 19392  004A36  657E               	cpfsgt	Idle@idx& (0+255),b
 19393  004A38  D7F1               	goto	l18333
 19394                           
 19395                           ; BSR set to: 1
 19396                           ;Main.c: 783: }
 19397                           ;Main.c: 784: for (idx = 0; idx < 20; idx++) {
 19398  004A3A  6B7E               	clrf	Idle@idx& (0+255),b
 19399  004A3C                     l18343:
 19400                           
 19401                           ; BSR set to: 1
 19402                           ;Main.c: 785: MessageStream_WriteByte(LCD_Line1[idx]);
 19403  004A3C  0EC8               	movlw	low _LCD_Line1
 19404  004A3E  0101               	movlb	1	; () banked
 19405  004A40  257E               	addwf	Idle@idx& (0+255),w,b
 19406  004A42  6ED9               	movwf	fsr2l,c
 19407  004A44  6ADA               	clrf	fsr2h,c
 19408  004A46  0103               	movlb	3	; () banked
 19409  004A48  0E03               	movlw	high _LCD_Line1
 19410  004A4A  22DA               	addwfc	fsr2h,f,c
 19411  004A4C  50DF               	movf	indf2,w,c
 19412  004A4E  ECDA  F039         	call	_MessageStream_WriteByte
 19413                           
 19414                           ; BSR set to: 1
 19415  004A52  2B7E               	incf	Idle@idx& (0+255),f,b
 19416                           
 19417                           ; BSR set to: 1
 19418  004A54  0E13               	movlw	19
 19419  004A56  657E               	cpfsgt	Idle@idx& (0+255),b
 19420  004A58  D7F1               	goto	l18343
 19421  004A5A                     l18349:
 19422                           
 19423                           ; BSR set to: 1
 19424                           ;Main.c: 786: }
 19425                           ;Main.c: 787: TXBuffer[TX_Idx++] = '#';
 19426  004A5A  0E00               	movlw	low _TXBuffer	;volatile
 19427  004A5C  EC51  F039         	call	PL50	;call to abstracted procedure
 19428  004A60  0E23               	movlw	35
 19429  004A62  6EDF               	movwf	indf2,c
 19430                           
 19431                           ; BSR set to: 6
 19432  004A64  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 19433                           
 19434                           ; BSR set to: 1
 19435                           ;Main.c: 788: idx = TX_Idx;
 19436  004A66  C1FE  F17E         	movff	_TX_Idx,Idle@idx	;volatile
 19437                           
 19438                           ; BSR set to: 1
 19439                           ;Main.c: 789: TX_Idx = 0;
 19440  004A6A  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 19441                           
 19442                           ; BSR set to: 1
 19443                           ;Main.c: 790: TX_bCount = idx;
 19444  004A6C  C17E  F0F1         	movff	Idle@idx,_TX_bCount	;volatile
 19445                           
 19446                           ;Main.c: 791: break;
 19447  004A70  0012               	return	
 19448  004A72                     l930:
 19449                           
 19450                           ; BSR set to: 1
 19451                           ;Main.c: 793: isPendingExternalUIEvent = 0;
 19452  004A72  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19453                           
 19454                           ;Main.c: 794: PendingExternalUIEvent = 1;
 19455  004A74  0E01               	movlw	1
 19456  004A76  D00B               	goto	L25
 19457  004A78                     l931:
 19458                           
 19459                           ; BSR set to: 1
 19460                           ;Main.c: 799: isPendingExternalUIEvent = 0;
 19461  004A78  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19462                           
 19463                           ;Main.c: 800: PendingExternalUIEvent = 3;
 19464  004A7A  0E03               	movlw	3
 19465  004A7C  D008               	goto	L25
 19466  004A7E                     l932:
 19467                           
 19468                           ; BSR set to: 1
 19469                           ;Main.c: 805: isPendingExternalUIEvent = 0;
 19470  004A7E  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19471                           
 19472                           ;Main.c: 806: PendingExternalUIEvent = 2;
 19473  004A80  0E02               	movlw	2
 19474  004A82  D005               	goto	L25
 19475  004A84                     l933:
 19476                           
 19477                           ; BSR set to: 1
 19478                           ;Main.c: 811: isPendingExternalUIEvent = 0;
 19479  004A84  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19480                           
 19481                           ;Main.c: 812: PendingExternalUIEvent = 4;
 19482  004A86  0E04               	movlw	4
 19483  004A88  D002               	goto	L25
 19484  004A8A                     l934:
 19485                           
 19486                           ; BSR set to: 1
 19487                           ;Main.c: 817: isPendingExternalUIEvent = 0;
 19488  004A8A  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19489                           
 19490                           ;Main.c: 818: PendingExternalUIEvent = 5;
 19491  004A8C  0E05               	movlw	5
 19492  004A8E                     L25:
 19493  004A8E  6E56               	movwf	_PendingExternalUIEvent,c	;volatile
 19494                           
 19495                           ;Main.c: 819: isPendingExternalUIEvent = 1;
 19496  004A90  8A5A               	bsf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 19497  004A92  D0C0               	goto	L26
 19498  004A94                     l935:
 19499                           
 19500                           ; BSR set to: 1
 19501                           ;Main.c: 823: bLock_Motor_Position = 1;
 19502                           
 19503                           ;Main.c: 824: temp.dbl = Motor_Position;
 19504  004A94  EC26  F038         	call	PL11	;call to abstracted procedure
 19505  004A98  EC49  F037         	call	___altoft	;wreg free
 19506  004A9C  C073  F179         	movff	?___altoft,Idle@temp
 19507  004AA0  C074  F17A         	movff	?___altoft+1,Idle@temp+1
 19508  004AA4  C075  F17B         	movff	?___altoft+2,Idle@temp+2
 19509                           
 19510                           ; BSR set to: 0
 19511                           ;Main.c: 825: bLock_Motor_Position = 0;
 19512  004AA8  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 19513                           
 19514                           ;Main.c: 826: temp.dbl *= Config.Degrees_Per_Count;
 19515  004AAA  D8DF               	call	PL48	;call to abstracted procedure
 19516  004AAC  ECF9  F039         	call	___asftmul	;wreg free
 19517  004AB0                     l18395:
 19518                           
 19519                           ; BSR set to: 0
 19520                           ;Main.c: 827: MessageStream_WriteMULTI(temp, CmdID);
 19521  004AB0  C179  F06D         	movff	Idle@temp,?_MessageStream_WriteMULTI
 19522  004AB4  C17A  F06E         	movff	Idle@temp+1,?_MessageStream_WriteMULTI+1
 19523  004AB8  C17B  F06F         	movff	Idle@temp+2,?_MessageStream_WriteMULTI+2
 19524  004ABC  C17C  F070         	movff	Idle@temp+3,?_MessageStream_WriteMULTI+3
 19525  004AC0  C17D  F071         	movff	Idle@CmdID,?_MessageStream_WriteMULTI+4
 19526  004AC4  EFDD  F037         	goto	_MessageStream_WriteMULTI	;wreg free
 19527  004AC8                     l936:
 19528                           
 19529                           ; BSR set to: 1
 19530                           ;Main.c: 830: temp.dbl = 0;
 19531  004AC8  6B79               	clrf	Idle@temp& (0+255),b
 19532  004ACA  6B7A               	clrf	(Idle@temp+1)& (0+255),b
 19533  004ACC  6B7B               	clrf	(Idle@temp+2)& (0+255),b
 19534                           
 19535                           ;Main.c: 831: while (!(temp.dbl == Move_speedQ24)) temp.dbl = Move_speedQ24;
 19536  004ACE  D010               	goto	l937
 19537  004AD0                     l18397:
 19538                           
 19539                           ; BSR set to: 0
 19540  004AD0  C1F0  F073         	movff	_Move_speedQ24,?___lltoft
 19541  004AD4  C1F1  F074         	movff	_Move_speedQ24+1,?___lltoft+1
 19542  004AD8  C1F2  F075         	movff	_Move_speedQ24+2,?___lltoft+2
 19543  004ADC  C1F3  F076         	movff	_Move_speedQ24+3,?___lltoft+3
 19544  004AE0  EC31  F038         	call	___lltoft	;wreg free
 19545  004AE4  C073  F179         	movff	?___lltoft,Idle@temp
 19546  004AE8  C074  F17A         	movff	?___lltoft+1,Idle@temp+1
 19547  004AEC  C075  F17B         	movff	?___lltoft+2,Idle@temp+2
 19548  004AF0                     l937:
 19549  004AF0  C1F0  F073         	movff	_Move_speedQ24,?___lltoft
 19550  004AF4  C1F1  F074         	movff	_Move_speedQ24+1,?___lltoft+1
 19551  004AF8  C1F2  F075         	movff	_Move_speedQ24+2,?___lltoft+2
 19552  004AFC  C1F3  F076         	movff	_Move_speedQ24+3,?___lltoft+3
 19553  004B00  EC31  F038         	call	___lltoft	;wreg free
 19554  004B04  0101               	movlb	1	; () banked
 19555  004B06  517B               	movf	(Idle@temp+2)& (0+255),w,b
 19556  004B08  0100               	movlb	0	; () banked
 19557  004B0A  1975               	xorwf	(?___lltoft+2)& (0+255),w,b
 19558  004B0C  E109               	bnz	u10505
 19559  004B0E  0101               	movlb	1	; () banked
 19560  004B10  517A               	movf	(Idle@temp+1)& (0+255),w,b
 19561  004B12  0100               	movlb	0	; () banked
 19562  004B14  1974               	xorwf	(?___lltoft+1)& (0+255),w,b
 19563  004B16  E104               	bnz	u10505
 19564  004B18  0101               	movlb	1	; () banked
 19565  004B1A  5179               	movf	Idle@temp& (0+255),w,b
 19566  004B1C  0100               	movlb	0	; () banked
 19567  004B1E  1973               	xorwf	?___lltoft& (0+255),w,b
 19568  004B20                     u10505:
 19569  004B20  E1D7               	bnz	l18397
 19570                           
 19571                           ; BSR set to: 0
 19572                           ;Main.c: 832: temp.dbl *= 0.0000298023224;
 19573  004B22  0E01               	movlw	high Idle@temp
 19574  004B24  0100               	movlb	0	; () banked
 19575  004B26  6F89               	movwf	(?___asftmul+1)& (0+255),b
 19576  004B28  0E79               	movlw	low Idle@temp
 19577  004B2A  6F88               	movwf	?___asftmul& (0+255),b
 19578  004B2C  6B8A               	clrf	(?___asftmul+2)& (0+255),b
 19579  004B2E  0EFA               	movlw	250
 19580  004B30  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 19581  004B32  0E37               	movlw	55
 19582  004B34  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 19583  004B36  ECF9  F039         	call	___asftmul	;wreg free
 19584                           
 19585                           ;Main.c: 833: temp.dbl *= Config.Degrees_Per_Count;
 19586  004B3A  D897               	call	PL48	;call to abstracted procedure
 19587  004B3C  ECF9  F039         	call	___asftmul	;wreg free
 19588  004B40  D7B7               	goto	l18395
 19589  004B42                     l940:
 19590                           
 19591                           ; BSR set to: 1
 19592                           ;Main.c: 837: temp.dbl = 0;
 19593  004B42  6B79               	clrf	Idle@temp& (0+255),b
 19594  004B44  6B7A               	clrf	(Idle@temp+1)& (0+255),b
 19595  004B46  6B7B               	clrf	(Idle@temp+2)& (0+255),b
 19596                           
 19597                           ;Main.c: 838: bLock_BatteryVoltage = 1;
 19598  004B48  0100               	movlb	(_bLock_BatteryVoltage/(0+8)) shr (0+8)
 19599  004B4A  8E58               	bsf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
 19600                           
 19601                           ;Main.c: 839: temp.dbl = BatteryVoltage;
 19602  004B4C  C1FC  F073         	movff	_BatteryVoltage,?___lwtoft
 19603  004B50  C1FD  F074         	movff	_BatteryVoltage+1,?___lwtoft+1
 19604  004B54  ECCB  F03B         	call	___lwtoft	;wreg free
 19605  004B58  C073  F179         	movff	?___lwtoft,Idle@temp
 19606  004B5C  C074  F17A         	movff	?___lwtoft+1,Idle@temp+1
 19607  004B60  C075  F17B         	movff	?___lwtoft+2,Idle@temp+2
 19608                           
 19609                           ; BSR set to: 0
 19610                           ;Main.c: 840: bLock_BatteryVoltage = 0;
 19611  004B64  9E58               	bcf	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
 19612                           
 19613                           ;Main.c: 841: temp.dbl *= Config.Volts_per_Count;
 19614  004B66  0E01               	movlw	high Idle@temp
 19615  004B68  0100               	movlb	0	; () banked
 19616  004B6A  6F89               	movwf	(?___asftmul+1)& (0+255),b
 19617  004B6C  0E79               	movlw	low Idle@temp
 19618  004B6E  6F88               	movwf	?___asftmul& (0+255),b
 19619  004B70  C2E0  F08A         	movff	_Config+10,?___asftmul+2
 19620  004B74  C2E1  F08B         	movff	_Config+11,?___asftmul+3
 19621  004B78  C2E2  F08C         	movff	_Config+12,?___asftmul+4
 19622  004B7C  ECF9  F039         	call	___asftmul	;wreg free
 19623  004B80  D797               	goto	l18395
 19624  004B82                     l18411:
 19625                           
 19626                           ; BSR set to: 1
 19627                           ;Main.c: 845: PresetNumber = MessageStream_ReadByte();
 19628  004B82  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
 19629  004B86  0101               	movlb	1	; () banked
 19630  004B88  6F00               	movwf	Idle@PresetNumber& (0+255),b
 19631                           
 19632                           ; BSR set to: 1
 19633                           ;Main.c: 846: if (PresetNumber>4){
 19634  004B8A  0E04               	movlw	4
 19635  004B8C  6500               	cpfsgt	Idle@PresetNumber& (0+255),b
 19636  004B8E  D001               	goto	l18417
 19637  004B90  D028               	goto	L27
 19638  004B92                     l18417:
 19639                           
 19640                           ; BSR set to: 1
 19641                           ;Main.c: 849: }
 19642                           ;Main.c: 851: LoadPreset(PresetNumber, (unsigned char *) &tempPset);
 19643  004B92  0E01               	movlw	high Idle@tempPset
 19644  004B94  0100               	movlb	0	; () banked
 19645  004B96  6F73               	movwf	(?_LoadPreset+1)& (0+255),b
 19646  004B98  0E01               	movlw	low Idle@tempPset
 19647  004B9A  6F72               	movwf	?_LoadPreset& (0+255),b
 19648  004B9C  0101               	movlb	1	; () banked
 19649  004B9E  5100               	movf	Idle@PresetNumber& (0+255),w,b
 19650  004BA0  EC0C  F03B         	call	_LoadPreset
 19651                           
 19652                           ; BSR set to: 0
 19653                           ;Main.c: 852: TX_Idx = 0;
 19654  004BA4  0101               	movlb	1	; () banked
 19655  004BA6  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 19656                           
 19657                           ; BSR set to: 1
 19658                           ;Main.c: 853: TXBuffer[TX_Idx++] = '$';
 19659  004BA8  0E00               	movlw	low _TXBuffer	;volatile
 19660  004BAA  25FE               	addwf	_TX_Idx& (0+255),w,b
 19661  004BAC  6ED9               	movwf	fsr2l,c
 19662  004BAE  6ADA               	clrf	fsr2h,c
 19663  004BB0  0E06               	movlw	high _TXBuffer	;volatile
 19664  004BB2  22DA               	addwfc	fsr2h,f,c
 19665  004BB4  0E24               	movlw	36
 19666  004BB6  6EDF               	movwf	indf2,c
 19667                           
 19668                           ; BSR set to: 6
 19669  004BB8  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 19670                           
 19671                           ; BSR set to: 1
 19672                           ;Main.c: 854: MessageStream_WriteByte(CmdID);
 19673  004BBA  517D               	movf	Idle@CmdID& (0+255),w,b
 19674  004BBC  ECDA  F039         	call	_MessageStream_WriteByte
 19675                           
 19676                           ; BSR set to: 1
 19677                           ;Main.c: 855: for (idx = 0; idx<sizeof (tempPset); idx++) {
 19678  004BC0  6B7E               	clrf	Idle@idx& (0+255),b
 19679  004BC2                     l18433:
 19680                           
 19681                           ; BSR set to: 1
 19682                           ;Main.c: 856: MessageStream_WriteByte(tempPset.ub[idx]);
 19683  004BC2  D85F               	call	PL65	;call to abstracted procedure
 19684  004BC4  50DF               	movf	indf2,w,c
 19685  004BC6  ECDA  F039         	call	_MessageStream_WriteByte
 19686                           
 19687                           ; BSR set to: 1
 19688  004BCA  2B7E               	incf	Idle@idx& (0+255),f,b
 19689                           
 19690                           ; BSR set to: 1
 19691  004BCC  0E77               	movlw	119
 19692  004BCE  657E               	cpfsgt	Idle@idx& (0+255),b
 19693  004BD0  D7F8               	goto	l18433
 19694  004BD2  D743               	goto	l18349
 19695  004BD4                     l18449:
 19696                           
 19697                           ; BSR set to: 1
 19698                           ;Main.c: 864: PresetNumber = MessageStream_ReadByte();
 19699  004BD4  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
 19700  004BD8  0101               	movlb	1	; () banked
 19701  004BDA  6F00               	movwf	Idle@PresetNumber& (0+255),b
 19702                           
 19703                           ; BSR set to: 1
 19704                           ;Main.c: 865: if (PresetNumber>4){
 19705  004BDC  0E04               	movlw	4
 19706  004BDE  6500               	cpfsgt	Idle@PresetNumber& (0+255),b
 19707  004BE0  D004               	goto	l946
 19708  004BE2                     L27:
 19709                           
 19710                           ; BSR set to: 1
 19711                           ;Main.c: 866: NackCmd(CmdID,1);
 19712  004BE2  0E01               	movlw	1
 19713  004BE4  0100               	movlb	0	; () banked
 19714  004BE6  6F6D               	movwf	?_NackCmd& (0+255),b
 19715  004BE8  D01B               	goto	L28
 19716  004BEA                     l946:
 19717                           
 19718                           ; BSR set to: 1
 19719                           ;Main.c: 868: }
 19720                           ;Main.c: 870: for (idx = 0; idx<sizeof (tempPset); idx++) {
 19721  004BEA  6B7E               	clrf	Idle@idx& (0+255),b
 19722  004BEC                     l18459:
 19723                           
 19724                           ; BSR set to: 1
 19725                           ;Main.c: 871: tempPset.ub[idx] = MessageStream_ReadByte();
 19726  004BEC  EC14  F039         	call	_MessageStream_ReadByte	;wreg free
 19727  004BF0  6F8D               	movwf	??_Idle& (0+255),b
 19728  004BF2  0101               	movlb	1	; () banked
 19729  004BF4  D846               	call	PL65	;call to abstracted procedure
 19730  004BF6  C08D  FFDF         	movff	??_Idle,indf2
 19731                           
 19732                           ; BSR set to: 1
 19733  004BFA  2B7E               	incf	Idle@idx& (0+255),f,b
 19734                           
 19735                           ; BSR set to: 1
 19736  004BFC  0E77               	movlw	119
 19737  004BFE  657E               	cpfsgt	Idle@idx& (0+255),b
 19738  004C00  D7F5               	goto	l18459
 19739                           
 19740                           ; BSR set to: 1
 19741                           ;Main.c: 872: }
 19742                           ;Main.c: 873: SavePreset(PresetNumber, (unsigned char *) &tempPset);
 19743  004C02  0E01               	movlw	high Idle@tempPset
 19744  004C04  0100               	movlb	0	; () banked
 19745  004C06  6F74               	movwf	(?_SavePreset+1)& (0+255),b
 19746  004C08  0E01               	movlw	low Idle@tempPset
 19747  004C0A  6F73               	movwf	?_SavePreset& (0+255),b
 19748  004C0C  0101               	movlb	1	; () banked
 19749  004C0E  5100               	movf	Idle@PresetNumber& (0+255),w,b
 19750  004C10  ECF5  F03A         	call	_SavePreset
 19751  004C14                     L26:
 19752                           
 19753                           ; BSR set to: 0
 19754                           ;Main.c: 874: AckCmd(CmdID);
 19755  004C14  0101               	movlb	1	; () banked
 19756  004C16  517D               	movf	Idle@CmdID& (0+255),w,b
 19757  004C18  EF36  F039         	goto	_AckCmd
 19758  004C1C                     l18469:
 19759                           
 19760                           ; BSR set to: 1
 19761                           ;Main.c: 877: NackCmd(CmdID,0xFF);
 19762  004C1C  0100               	movlb	0	; () banked
 19763  004C1E  696D               	setf	?_NackCmd& (0+255),b
 19764  004C20                     L28:
 19765  004C20  0101               	movlb	1	; () banked
 19766  004C22  517D               	movf	Idle@CmdID& (0+255),w,b
 19767  004C24  EFBA  F039         	goto	_NackCmd
 19768  004C28                     l18471:
 19769                           
 19770                           ; BSR set to: 1
 19771  004C28  517D               	movf	Idle@CmdID& (0+255),w,b
 19772                           
 19773                           ; Switch size 1, requested type "space"
 19774                           ; Number of cases is 11, Range of values is 1 to 24
 19775                           ; switch strategies available:
 19776                           ; Name         Instructions Cycles
 19777                           ; simple_byte           34    18 (average)
 19778                           ;	Chosen strategy is simple_byte
 19779  004C2A  0A01               	xorlw	1	; case 1
 19780  004C2C  E0D3               	bz	l18449
 19781  004C2E  0A03               	xorlw	3	; case 2
 19782  004C30  E0A8               	bz	l18411
 19783  004C32  0A12               	xorlw	18	; case 16
 19784  004C34  E101 D6E7          	bz	l924
 19785  004C38  0A01               	xorlw	1	; case 17
 19786  004C3A  E101 D71A          	bz	l930
 19787  004C3E  0A03               	xorlw	3	; case 18
 19788  004C40  E101 D71D          	bz	l932
 19789  004C44  0A01               	xorlw	1	; case 19
 19790  004C46  E101 D717          	bz	l931
 19791  004C4A  0A07               	xorlw	7	; case 20
 19792  004C4C  E101 D71A          	bz	l933
 19793  004C50  0A01               	xorlw	1	; case 21
 19794  004C52  E101 D71A          	bz	l934
 19795  004C56  0A03               	xorlw	3	; case 22
 19796  004C58  E101 D71C          	bz	l935
 19797  004C5C  0A01               	xorlw	1	; case 23
 19798  004C5E  E101 D733          	bz	l936
 19799  004C62  0A0F               	xorlw	15	; case 24
 19800  004C64  E101 D76D          	bz	l940
 19801  004C68  D7D9               	goto	l18469
 19802  004C6A                     __end_of_Idle:
 19803                           	opt stack 0
 19804  004C6A                     PL48:
 19805  004C6A  0E01               	movlw	high Idle@temp
 19806  004C6C  0100               	movlb	0	; () banked
 19807  004C6E  6F89               	movwf	(?___asftmul+1)& (0+255),b
 19808  004C70  0E79               	movlw	low Idle@temp
 19809  004C72  6F88               	movwf	?___asftmul& (0+255),b
 19810  004C74  C2F5  F08A         	movff	_Config+31,?___asftmul+2
 19811  004C78  C2F6  F08B         	movff	_Config+32,?___asftmul+3
 19812  004C7C  C2F7  F08C         	movff	_Config+33,?___asftmul+4
 19813  004C80  0012               	return	
 19814  004C82                     PL65:
 19815  004C82  0E01               	movlw	low Idle@tempPset
 19816  004C84  257E               	addwf	Idle@idx& (0+255),w,b
 19817  004C86  6ED9               	movwf	fsr2l,c
 19818  004C88  6ADA               	clrf	fsr2h,c
 19819  004C8A  0E01               	movlw	high Idle@tempPset
 19820  004C8C  22DA               	addwfc	fsr2h,f,c
 19821  004C8E  0012               	return	
 19822                           tblptru	equ	0xFF8
 19823                           tblptrh	equ	0xFF7
 19824                           tblptrl	equ	0xFF6
 19825                           tablat	equ	0xFF5
 19826                           prodh	equ	0xFF4
 19827                           prodl	equ	0xFF3
 19828                           intcon	equ	0xFF2
 19829                           intcon2	equ	0xFF1
 19830                           postinc0	equ	0xFEE
 19831                           wreg	equ	0xFE8
 19832                           postinc1	equ	0xFE6
 19833                           postdec1	equ	0xFE5
 19834                           fsr1h	equ	0xFE2
 19835                           fsr1l	equ	0xFE1
 19836                           indf2	equ	0xFDF
 19837                           postinc2	equ	0xFDE
 19838                           postdec2	equ	0xFDD
 19839                           fsr2h	equ	0xFDA
 19840                           fsr2l	equ	0xFD9
 19841                           status	equ	0xFD8
 19842                           
 19843 ;; *************** function _MessageStream_ReadByte *****************
 19844 ;; Defined at:
 19845 ;;		line 906 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 19846 ;; Parameters:    Size  Location     Type
 19847 ;;		None
 19848 ;; Auto vars:     Size  Location     Type
 19849 ;;  temp            1   12[BANK0 ] unsigned char 
 19850 ;; Return value:  Size  Location     Type
 19851 ;;                  1    wreg      unsigned char 
 19852 ;; Registers used:
 19853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 19854 ;; Tracked objects:
 19855 ;;		On entry : 0/0
 19856 ;;		On exit  : F/0
 19857 ;;		Unchanged: FFFFFFF0/0
 19858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19863 ;;Total ram usage:        2 bytes
 19864 ;; Hardware stack levels used:    1
 19865 ;; Hardware stack levels required when called:    3
 19866 ;; This function calls:
 19867 ;;		Nothing
 19868 ;; This function is called by:
 19869 ;;		_ExtMode
 19870 ;;		_Idle
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           	psect	text48
 19875  007228                     __ptext48:
 19876                           	opt stack 0
 19877  007228                     _MessageStream_ReadByte:
 19878                           	opt stack 26
 19879                           
 19880                           ;Main.c: 907: unsigned char temp = ASCII_HEX_TO_BINARY[RXBuffer[ReadIdx++]];
 19881  007228  0E00               	movlw	low _RXBuffer	;volatile
 19882  00722A  0100               	movlb	0	; () banked
 19883  00722C  D80D               	call	PL31	;call to abstracted procedure
 19884  00722E  CFF5 F06C          	movff	tablat,MessageStream_ReadByte@temp
 19885                           
 19886                           ; BSR set to: 0
 19887  007232  2BF0               	incf	_ReadIdx& (0+255),f,b
 19888                           
 19889                           ; BSR set to: 0
 19890                           ;Main.c: 908: temp <<= 4;
 19891  007234  3B6C               	swapf	MessageStream_ReadByte@temp& (0+255),f,b
 19892  007236  0EF0               	movlw	240
 19893  007238  176C               	andwf	MessageStream_ReadByte@temp& (0+255),f,b
 19894                           
 19895                           ; BSR set to: 0
 19896                           ;Main.c: 909: temp += ASCII_HEX_TO_BINARY[RXBuffer[ReadIdx++]];
 19897  00723A  0E00               	movlw	low _RXBuffer	;volatile
 19898  00723C  D805               	call	PL31	;call to abstracted procedure
 19899  00723E  50F5               	movf	tablat,w,c
 19900  007240  276C               	addwf	MessageStream_ReadByte@temp& (0+255),f,b
 19901                           
 19902                           ; BSR set to: 0
 19903  007242  2BF0               	incf	_ReadIdx& (0+255),f,b
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;Main.c: 910: return temp;
 19907  007244  516C               	movf	MessageStream_ReadByte@temp& (0+255),w,b
 19908                           
 19909                           ; BSR set to: 0
 19910  007246  0012               	return	
 19911  007248                     __end_of_MessageStream_ReadByte:
 19912                           	opt stack 0
 19913  007248                     PL31:
 19914  007248  25F0               	addwf	_ReadIdx& (0+255),w,b
 19915  00724A  6ED9               	movwf	fsr2l,c
 19916  00724C  6ADA               	clrf	fsr2h,c
 19917  00724E  0E07               	movlw	high _RXBuffer	;volatile
 19918  007250  22DA               	addwfc	fsr2h,f,c
 19919  007252  50DF               	movf	indf2,w,c
 19920  007254  6F6B               	movwf	??_MessageStream_ReadByte& (0+255),b
 19921  007256  0E44               	movlw	low _ASCII_HEX_TO_BINARY
 19922  007258  256B               	addwf	??_MessageStream_ReadByte& (0+255),w,b
 19923  00725A  6EF6               	movwf	tblptrl,c
 19924  00725C  6AF7               	clrf	tblptrh,c
 19925  00725E  0E19               	movlw	high _ASCII_HEX_TO_BINARY
 19926  007260  22F7               	addwfc	tblptrh,f,c
 19927  007262  6AF8               	clrf	tblptru,c
 19928  007264  0E00               	movlw	low (__mediumconst shr (0+16))
 19929  007266  22F8               	addwfc	tblptru,f,c
 19930  007268  0008               	tblrd		*
 19931  00726A  0012               	return	
 19932                           tblptru	equ	0xFF8
 19933                           tblptrh	equ	0xFF7
 19934                           tblptrl	equ	0xFF6
 19935                           tablat	equ	0xFF5
 19936                           prodh	equ	0xFF4
 19937                           prodl	equ	0xFF3
 19938                           intcon	equ	0xFF2
 19939                           intcon2	equ	0xFF1
 19940                           postinc0	equ	0xFEE
 19941                           wreg	equ	0xFE8
 19942                           postinc1	equ	0xFE6
 19943                           postdec1	equ	0xFE5
 19944                           fsr1h	equ	0xFE2
 19945                           fsr1l	equ	0xFE1
 19946                           indf2	equ	0xFDF
 19947                           postinc2	equ	0xFDE
 19948                           postdec2	equ	0xFDD
 19949                           fsr2h	equ	0xFDA
 19950                           fsr2l	equ	0xFD9
 19951                           status	equ	0xFD8
 19952                           
 19953 ;; *************** function _AckCmd *****************
 19954 ;; Defined at:
 19955 ;;		line 735 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 19956 ;; Parameters:    Size  Location     Type
 19957 ;;  CmdID           1    wreg     unsigned char 
 19958 ;; Auto vars:     Size  Location     Type
 19959 ;;  CmdID           1   13[BANK0 ] unsigned char 
 19960 ;; Return value:  Size  Location     Type
 19961 ;;		None               void
 19962 ;; Registers used:
 19963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19964 ;; Tracked objects:
 19965 ;;		On entry : C/2
 19966 ;;		On exit  : F/0
 19967 ;;		Unchanged: FFFFFFF0/0
 19968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19973 ;;Total ram usage:        1 bytes
 19974 ;; Hardware stack levels used:    1
 19975 ;; Hardware stack levels required when called:    4
 19976 ;; This function calls:
 19977 ;;		_MessageStream_WriteByte
 19978 ;; This function is called by:
 19979 ;;		_ExtMode
 19980 ;;		_Idle
 19981 ;; This function uses a non-reentrant model
 19982 ;;
 19983                           
 19984                           	psect	text49
 19985  00726C                     __ptext49:
 19986                           	opt stack 0
 19987  00726C                     _AckCmd:
 19988                           	opt stack 25
 19989                           
 19990                           ; BSR set to: 0
 19991                           ;AckCmd@CmdID stored from wreg
 19992  00726C  CFE8 F06D          	movff	wreg,AckCmd@CmdID
 19993                           
 19994                           ;Main.c: 736: TX_Idx = 0;
 19995  007270  0101               	movlb	1	; () banked
 19996  007272  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 19997                           
 19998                           ; BSR set to: 1
 19999                           ;Main.c: 737: TXBuffer[TX_Idx++] = '$';
 20000  007274  0E00               	movlw	low _TXBuffer	;volatile
 20001  007276  25FE               	addwf	_TX_Idx& (0+255),w,b
 20002  007278  6ED9               	movwf	fsr2l,c
 20003  00727A  6ADA               	clrf	fsr2h,c
 20004  00727C  0E06               	movlw	high _TXBuffer	;volatile
 20005  00727E  22DA               	addwfc	fsr2h,f,c
 20006  007280  0E24               	movlw	36
 20007  007282  6EDF               	movwf	indf2,c
 20008                           
 20009                           ; BSR set to: 6
 20010  007284  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20011                           
 20012                           ; BSR set to: 1
 20013                           ;Main.c: 738: MessageStream_WriteByte(CmdID);
 20014  007286  0100               	movlb	0	; () banked
 20015  007288  516D               	movf	AckCmd@CmdID& (0+255),w,b
 20016  00728A  ECDA  F039         	call	_MessageStream_WriteByte
 20017                           
 20018                           ; BSR set to: 1
 20019                           ;Main.c: 739: TXBuffer[TX_Idx++] = '#';
 20020  00728E  0E00               	movlw	low _TXBuffer	;volatile
 20021  007290  D808               	call	PL50	;call to abstracted procedure
 20022  007292  0E23               	movlw	35
 20023  007294  6EDF               	movwf	indf2,c
 20024                           
 20025                           ; BSR set to: 6
 20026  007296  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20027                           
 20028                           ; BSR set to: 1
 20029                           ;Main.c: 740: TX_Idx = 0;
 20030  007298  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 20031                           
 20032                           ; BSR set to: 1
 20033                           ;Main.c: 741: TX_bCount = 4;
 20034  00729A  0E04               	movlw	4
 20035  00729C  0100               	movlb	0	; () banked
 20036  00729E  6FF1               	movwf	_TX_bCount& (0+255),b	;volatile
 20037                           
 20038                           ; BSR set to: 0
 20039  0072A0  0C04               	retlw	4
 20040  0072A2                     __end_of_AckCmd:
 20041                           	opt stack 0
 20042  0072A2                     PL50:
 20043  0072A2  0101               	movlb	1	; () banked
 20044  0072A4  25FE               	addwf	_TX_Idx& (0+255),w,b
 20045  0072A6  6ED9               	movwf	fsr2l,c
 20046  0072A8  6ADA               	clrf	fsr2h,c
 20047  0072AA  0E06               	movlw	high _TXBuffer	;volatile
 20048  0072AC  22DA               	addwfc	fsr2h,f,c
 20049  0072AE  0012               	return	
 20050                           tblptru	equ	0xFF8
 20051                           tblptrh	equ	0xFF7
 20052                           tblptrl	equ	0xFF6
 20053                           tablat	equ	0xFF5
 20054                           prodh	equ	0xFF4
 20055                           prodl	equ	0xFF3
 20056                           intcon	equ	0xFF2
 20057                           intcon2	equ	0xFF1
 20058                           postinc0	equ	0xFEE
 20059                           wreg	equ	0xFE8
 20060                           postinc1	equ	0xFE6
 20061                           postdec1	equ	0xFE5
 20062                           fsr1h	equ	0xFE2
 20063                           fsr1l	equ	0xFE1
 20064                           indf2	equ	0xFDF
 20065                           postinc2	equ	0xFDE
 20066                           postdec2	equ	0xFDD
 20067                           fsr2h	equ	0xFDA
 20068                           fsr2l	equ	0xFD9
 20069                           status	equ	0xFD8
 20070                           
 20071 ;; *************** function _NackCmd *****************
 20072 ;; Defined at:
 20073 ;;		line 744 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 20074 ;; Parameters:    Size  Location     Type
 20075 ;;  CmdID           1    wreg     unsigned char 
 20076 ;;  Reason          1   13[BANK0 ] unsigned char 
 20077 ;; Auto vars:     Size  Location     Type
 20078 ;;  CmdID           1   14[BANK0 ] unsigned char 
 20079 ;; Return value:  Size  Location     Type
 20080 ;;		None               void
 20081 ;; Registers used:
 20082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20083 ;; Tracked objects:
 20084 ;;		On entry : C/2
 20085 ;;		On exit  : F/0
 20086 ;;		Unchanged: FFFFFFF0/0
 20087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20092 ;;Total ram usage:        2 bytes
 20093 ;; Hardware stack levels used:    1
 20094 ;; Hardware stack levels required when called:    4
 20095 ;; This function calls:
 20096 ;;		_MessageStream_WriteByte
 20097 ;; This function is called by:
 20098 ;;		_ExtMode
 20099 ;;		_Idle
 20100 ;; This function uses a non-reentrant model
 20101 ;;
 20102                           
 20103                           	psect	text50
 20104  007374                     __ptext50:
 20105                           	opt stack 0
 20106  007374                     _NackCmd:
 20107                           	opt stack 25
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;NackCmd@CmdID stored from wreg
 20111  007374  CFE8 F06E          	movff	wreg,NackCmd@CmdID
 20112                           
 20113                           ;Main.c: 745: TX_Idx = 0;
 20114  007378  0101               	movlb	1	; () banked
 20115  00737A  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 20116                           
 20117                           ; BSR set to: 1
 20118                           ;Main.c: 746: TXBuffer[TX_Idx++] = '!';
 20119  00737C  0E00               	movlw	low _TXBuffer	;volatile
 20120  00737E  25FE               	addwf	_TX_Idx& (0+255),w,b
 20121  007380  6ED9               	movwf	fsr2l,c
 20122  007382  6ADA               	clrf	fsr2h,c
 20123  007384  0E06               	movlw	high _TXBuffer	;volatile
 20124  007386  22DA               	addwfc	fsr2h,f,c
 20125  007388  0E21               	movlw	33
 20126  00738A  6EDF               	movwf	indf2,c
 20127                           
 20128                           ; BSR set to: 6
 20129  00738C  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20130                           
 20131                           ; BSR set to: 1
 20132                           ;Main.c: 747: MessageStream_WriteByte(CmdID);
 20133  00738E  0100               	movlb	0	; () banked
 20134  007390  516E               	movf	NackCmd@CmdID& (0+255),w,b
 20135  007392  ECDA  F039         	call	_MessageStream_WriteByte
 20136                           
 20137                           ; BSR set to: 1
 20138                           ;Main.c: 748: MessageStream_WriteByte(Reason);
 20139  007396  0100               	movlb	0	; () banked
 20140  007398  516D               	movf	NackCmd@Reason& (0+255),w,b
 20141  00739A  ECDA  F039         	call	_MessageStream_WriteByte
 20142                           
 20143                           ; BSR set to: 1
 20144                           ;Main.c: 749: TXBuffer[TX_Idx++] = '#';
 20145  00739E  0E00               	movlw	low _TXBuffer	;volatile
 20146  0073A0  EC51  F039         	call	PL50	;call to abstracted procedure
 20147  0073A4  0E23               	movlw	35
 20148  0073A6  6EDF               	movwf	indf2,c
 20149  0073A8  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20150                           
 20151                           ; BSR set to: 1
 20152                           ;Main.c: 750: TX_Idx = 0;
 20153  0073AA  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 20154                           
 20155                           ; BSR set to: 1
 20156                           ;Main.c: 751: TX_bCount = 6;
 20157  0073AC  0E06               	movlw	6
 20158  0073AE  0100               	movlb	0	; () banked
 20159  0073B0  6FF1               	movwf	_TX_bCount& (0+255),b	;volatile
 20160                           
 20161                           ; BSR set to: 0
 20162  0073B2  0C06               	retlw	6
 20163  0073B4                     __end_of_NackCmd:
 20164                           	opt stack 0
 20165                           tblptru	equ	0xFF8
 20166                           tblptrh	equ	0xFF7
 20167                           tblptrl	equ	0xFF6
 20168                           tablat	equ	0xFF5
 20169                           prodh	equ	0xFF4
 20170                           prodl	equ	0xFF3
 20171                           intcon	equ	0xFF2
 20172                           intcon2	equ	0xFF1
 20173                           postinc0	equ	0xFEE
 20174                           wreg	equ	0xFE8
 20175                           postinc1	equ	0xFE6
 20176                           postdec1	equ	0xFE5
 20177                           fsr1h	equ	0xFE2
 20178                           fsr1l	equ	0xFE1
 20179                           indf2	equ	0xFDF
 20180                           postinc2	equ	0xFDE
 20181                           postdec2	equ	0xFDD
 20182                           fsr2h	equ	0xFDA
 20183                           fsr2l	equ	0xFD9
 20184                           status	equ	0xFD8
 20185                           
 20186 ;; *************** function _LoadPreset *****************
 20187 ;; Defined at:
 20188 ;;		line 92 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
 20189 ;; Parameters:    Size  Location     Type
 20190 ;;  pnum            1    wreg     unsigned char 
 20191 ;;  dat             2   18[BANK0 ] PTR unsigned char 
 20192 ;;		 -> Idle@tempPset(120), CurrentOrbitProgram(18), CurrentPath(117), 
 20193 ;; Auto vars:     Size  Location     Type
 20194 ;;  pnum            1   20[BANK0 ] unsigned char 
 20195 ;;  addr            2   21[BANK0 ] unsigned int 
 20196 ;; Return value:  Size  Location     Type
 20197 ;;		None               void
 20198 ;; Registers used:
 20199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
 20200 ;; Tracked objects:
 20201 ;;		On entry : A/4
 20202 ;;		On exit  : F/0
 20203 ;;		Unchanged: 0/0
 20204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20206 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20208 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20209 ;;Total ram usage:        5 bytes
 20210 ;; Hardware stack levels used:    1
 20211 ;; Hardware stack levels required when called:    5
 20212 ;; This function calls:
 20213 ;;		_EEprom_read
 20214 ;; This function is called by:
 20215 ;;		_main
 20216 ;;		_Idle
 20217 ;; This function uses a non-reentrant model
 20218 ;;
 20219                           
 20220                           	psect	text51
 20221  007618                     __ptext51:
 20222                           	opt stack 0
 20223  007618                     _LoadPreset:
 20224                           	opt stack 21
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;LoadPreset@pnum stored from wreg
 20228  007618  CFE8 F074          	movff	wreg,LoadPreset@pnum
 20229                           
 20230                           ;Settings.c: 93: unsigned int addr;
 20231                           ;Settings.c: 94: addr = sizeof (ConfigStruct)+(pnum * sizeof (PRESET));
 20232  00761C  0100               	movlb	0	; () banked
 20233  00761E  5174               	movf	LoadPreset@pnum& (0+255),w,b
 20234  007620  0D78               	mullw	120
 20235  007622  0E22               	movlw	34
 20236  007624  24F3               	addwf	prodl,w,c
 20237  007626  6F75               	movwf	LoadPreset@addr& (0+255),b
 20238  007628  0E00               	movlw	0
 20239  00762A  20F4               	addwfc	prodh,w,c
 20240  00762C  6F76               	movwf	(LoadPreset@addr+1)& (0+255),b
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;Settings.c: 95: EEprom_read(&addr, dat, sizeof (PRESET));
 20244  00762E  0E00               	movlw	high LoadPreset@addr
 20245  007630  6F6E               	movwf	(?_EEprom_read+1)& (0+255),b
 20246  007632  0E75               	movlw	low LoadPreset@addr
 20247  007634  6F6D               	movwf	?_EEprom_read& (0+255),b
 20248  007636  C072  F06F         	movff	LoadPreset@dat,?_EEprom_read+2
 20249  00763A  C073  F070         	movff	LoadPreset@dat+1,?_EEprom_read+3
 20250  00763E  0E78               	movlw	120
 20251  007640  6F71               	movwf	(?_EEprom_read+4)& (0+255),b
 20252  007642  EF8C  F03A         	goto	l15633	;wreg free
 20253  007646                     __end_of_LoadPreset:
 20254                           	opt stack 0
 20255                           tblptru	equ	0xFF8
 20256                           tblptrh	equ	0xFF7
 20257                           tblptrl	equ	0xFF6
 20258                           tablat	equ	0xFF5
 20259                           prodh	equ	0xFF4
 20260                           prodl	equ	0xFF3
 20261                           intcon	equ	0xFF2
 20262                           intcon2	equ	0xFF1
 20263                           postinc0	equ	0xFEE
 20264                           wreg	equ	0xFE8
 20265                           postinc1	equ	0xFE6
 20266                           postdec1	equ	0xFE5
 20267                           fsr1h	equ	0xFE2
 20268                           fsr1l	equ	0xFE1
 20269                           indf2	equ	0xFDF
 20270                           postinc2	equ	0xFDE
 20271                           postdec2	equ	0xFDD
 20272                           fsr2h	equ	0xFDA
 20273                           fsr2l	equ	0xFD9
 20274                           status	equ	0xFD8
 20275                           
 20276 ;; *************** function _MessageStream_WriteMULTI *****************
 20277 ;; Defined at:
 20278 ;;		line 883 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 20279 ;; Parameters:    Size  Location     Type
 20280 ;;  dat             4   13[BANK0 ] struct .
 20281 ;;  CmdID           1   17[BANK0 ] unsigned char 
 20282 ;; Auto vars:     Size  Location     Type
 20283 ;;  bCount          1   18[BANK0 ] unsigned char 
 20284 ;; Return value:  Size  Location     Type
 20285 ;;		None               void
 20286 ;; Registers used:
 20287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20288 ;; Tracked objects:
 20289 ;;		On entry : 0/0
 20290 ;;		On exit  : F/1
 20291 ;;		Unchanged: FFFFFFF0/0
 20292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20293 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20297 ;;Total ram usage:        6 bytes
 20298 ;; Hardware stack levels used:    1
 20299 ;; Hardware stack levels required when called:    4
 20300 ;; This function calls:
 20301 ;;		_MessageStream_WriteByte
 20302 ;; This function is called by:
 20303 ;;		_Idle
 20304 ;; This function uses a non-reentrant model
 20305 ;;
 20306                           
 20307                           	psect	text52
 20308  006FBA                     __ptext52:
 20309                           	opt stack 0
 20310  006FBA                     _MessageStream_WriteMULTI:
 20311                           	opt stack 22
 20312                           
 20313                           ;Main.c: 885: TX_Idx = 0;
 20314                           
 20315                           ; BSR set to: 0
 20316  006FBA  0101               	movlb	1	; () banked
 20317  006FBC  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 20318                           
 20319                           ; BSR set to: 1
 20320                           ;Main.c: 886: TXBuffer[TX_Idx++] = '$';
 20321  006FBE  0E00               	movlw	low _TXBuffer	;volatile
 20322  006FC0  25FE               	addwf	_TX_Idx& (0+255),w,b
 20323  006FC2  6ED9               	movwf	fsr2l,c
 20324  006FC4  6ADA               	clrf	fsr2h,c
 20325  006FC6  0E06               	movlw	high _TXBuffer	;volatile
 20326  006FC8  22DA               	addwfc	fsr2h,f,c
 20327  006FCA  0E24               	movlw	36
 20328  006FCC  6EDF               	movwf	indf2,c
 20329                           
 20330                           ; BSR set to: 6
 20331  006FCE  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20332                           
 20333                           ; BSR set to: 1
 20334                           ;Main.c: 887: MessageStream_WriteByte(CmdID);
 20335  006FD0  0100               	movlb	0	; () banked
 20336  006FD2  5171               	movf	MessageStream_WriteMULTI@CmdID& (0+255),w,b
 20337  006FD4  ECDA  F039         	call	_MessageStream_WriteByte
 20338                           
 20339                           ; BSR set to: 1
 20340                           ;Main.c: 888: MessageStream_WriteByte(dat.ub[3]);
 20341  006FD8  0100               	movlb	0	; () banked
 20342  006FDA  5170               	movf	(MessageStream_WriteMULTI@dat+3)& (0+255),w,b
 20343  006FDC  ECDA  F039         	call	_MessageStream_WriteByte
 20344                           
 20345                           ; BSR set to: 1
 20346                           ;Main.c: 889: MessageStream_WriteByte(dat.ub[2]);
 20347  006FE0  0100               	movlb	0	; () banked
 20348  006FE2  516F               	movf	(MessageStream_WriteMULTI@dat+2)& (0+255),w,b
 20349  006FE4  ECDA  F039         	call	_MessageStream_WriteByte
 20350                           
 20351                           ; BSR set to: 1
 20352                           ;Main.c: 890: MessageStream_WriteByte(dat.ub[1]);
 20353  006FE8  0100               	movlb	0	; () banked
 20354  006FEA  516E               	movf	(MessageStream_WriteMULTI@dat+1)& (0+255),w,b
 20355  006FEC  ECDA  F039         	call	_MessageStream_WriteByte
 20356                           
 20357                           ; BSR set to: 1
 20358                           ;Main.c: 891: MessageStream_WriteByte(dat.ub[0]);
 20359  006FF0  0100               	movlb	0	; () banked
 20360  006FF2  516D               	movf	MessageStream_WriteMULTI@dat& (0+255),w,b
 20361  006FF4  ECDA  F039         	call	_MessageStream_WriteByte
 20362                           
 20363                           ; BSR set to: 1
 20364                           ;Main.c: 892: TXBuffer[TX_Idx++] = '#';
 20365  006FF8  0E00               	movlw	low _TXBuffer	;volatile
 20366  006FFA  EC51  F039         	call	PL50	;call to abstracted procedure
 20367  006FFE  0E23               	movlw	35
 20368  007000  6EDF               	movwf	indf2,c
 20369                           
 20370                           ; BSR set to: 6
 20371  007002  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20372                           
 20373                           ; BSR set to: 1
 20374                           ;Main.c: 893: bCount = TX_Idx;
 20375  007004  C1FE  F072         	movff	_TX_Idx,MessageStream_WriteMULTI@bCount	;volatile
 20376                           
 20377                           ; BSR set to: 1
 20378                           ;Main.c: 894: TX_Idx = 0;
 20379  007008  6BFE               	clrf	_TX_Idx& (0+255),b	;volatile
 20380                           
 20381                           ; BSR set to: 1
 20382                           ;Main.c: 895: TX_bCount = bCount;
 20383  00700A  C072  F0F1         	movff	MessageStream_WriteMULTI@bCount,_TX_bCount	;volatile
 20384                           
 20385                           ; BSR set to: 1
 20386  00700E  0012               	return	
 20387  007010                     __end_of_MessageStream_WriteMULTI:
 20388                           	opt stack 0
 20389                           tblptru	equ	0xFF8
 20390                           tblptrh	equ	0xFF7
 20391                           tblptrl	equ	0xFF6
 20392                           tablat	equ	0xFF5
 20393                           prodh	equ	0xFF4
 20394                           prodl	equ	0xFF3
 20395                           intcon	equ	0xFF2
 20396                           intcon2	equ	0xFF1
 20397                           postinc0	equ	0xFEE
 20398                           wreg	equ	0xFE8
 20399                           postinc1	equ	0xFE6
 20400                           postdec1	equ	0xFE5
 20401                           fsr1h	equ	0xFE2
 20402                           fsr1l	equ	0xFE1
 20403                           indf2	equ	0xFDF
 20404                           postinc2	equ	0xFDE
 20405                           postdec2	equ	0xFDD
 20406                           fsr2h	equ	0xFDA
 20407                           fsr2l	equ	0xFD9
 20408                           status	equ	0xFD8
 20409                           
 20410 ;; *************** function _MessageStream_WriteByte *****************
 20411 ;; Defined at:
 20412 ;;		line 898 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 20413 ;; Parameters:    Size  Location     Type
 20414 ;;  dat             1    wreg     unsigned char 
 20415 ;; Auto vars:     Size  Location     Type
 20416 ;;  dat             1   11[BANK0 ] unsigned char 
 20417 ;;  temp            1   12[BANK0 ] unsigned char 
 20418 ;; Return value:  Size  Location     Type
 20419 ;;		None               void
 20420 ;; Registers used:
 20421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20422 ;; Tracked objects:
 20423 ;;		On entry : C/2
 20424 ;;		On exit  : F/1
 20425 ;;		Unchanged: FFFFFFF0/0
 20426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20430 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20431 ;;Total ram usage:        2 bytes
 20432 ;; Hardware stack levels used:    1
 20433 ;; Hardware stack levels required when called:    3
 20434 ;; This function calls:
 20435 ;;		Nothing
 20436 ;; This function is called by:
 20437 ;;		_ExtMode
 20438 ;;		_AckCmd
 20439 ;;		_NackCmd
 20440 ;;		_Idle
 20441 ;;		_MessageStream_WriteMULTI
 20442 ;; This function uses a non-reentrant model
 20443 ;;
 20444                           
 20445                           	psect	text53
 20446  0073B4                     __ptext53:
 20447                           	opt stack 0
 20448  0073B4                     _MessageStream_WriteByte:
 20449                           	opt stack 26
 20450                           
 20451                           ; BSR set to: 1
 20452                           ;MessageStream_WriteByte@dat stored from wreg
 20453  0073B4  CFE8 F06B          	movff	wreg,MessageStream_WriteByte@dat
 20454                           
 20455                           ;Main.c: 899: unsigned char temp;
 20456                           ;Main.c: 900: temp = dat >> 4;
 20457  0073B8  0100               	movlb	0	; () banked
 20458  0073BA  396B               	swapf	MessageStream_WriteByte@dat& (0+255),w,b
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;Main.c: 901: TXBuffer[TX_Idx++] = BINARY_TO_ASCII_HEX[temp];
 20462                           
 20463                           ; BSR set to: 6
 20464  0073BC  D803               	call	PL16	;call to abstracted procedure
 20465                           
 20466                           ; BSR set to: 1
 20467                           ;Main.c: 902: temp = dat & 0x0F;
 20468  0073BE  0100               	movlb	0	; () banked
 20469  0073C0  516B               	movf	MessageStream_WriteByte@dat& (0+255),w,b
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;Main.c: 903: TXBuffer[TX_Idx++] = BINARY_TO_ASCII_HEX[temp];
 20473  0073C2  D000               	goto	PL16	;call to abstracted procedure
 20474  0073C4                     __end_of_MessageStream_WriteByte:
 20475                           	opt stack 0
 20476  0073C4                     PL16:
 20477  0073C4  0B0F               	andlw	15
 20478  0073C6  6F6C               	movwf	MessageStream_WriteByte@temp& (0+255),b
 20479  0073C8  0EC4               	movlw	low _BINARY_TO_ASCII_HEX
 20480  0073CA  256C               	addwf	MessageStream_WriteByte@temp& (0+255),w,b
 20481  0073CC  6EF6               	movwf	tblptrl,c
 20482  0073CE  6AF7               	clrf	tblptrh,c
 20483  0073D0  0E19               	movlw	high _BINARY_TO_ASCII_HEX
 20484  0073D2  22F7               	addwfc	tblptrh,f,c
 20485  0073D4  6AF8               	clrf	tblptru,c
 20486  0073D6  0E00               	movlw	low (__mediumconst shr (0+16))
 20487  0073D8  22F8               	addwfc	tblptru,f,c
 20488  0073DA  0E00               	movlw	low _TXBuffer	;volatile
 20489  0073DC  0101               	movlb	1	; () banked
 20490  0073DE  25FE               	addwf	_TX_Idx& (0+255),w,b
 20491  0073E0  6ED9               	movwf	fsr2l,c
 20492  0073E2  6ADA               	clrf	fsr2h,c
 20493  0073E4  0E06               	movlw	high _TXBuffer	;volatile
 20494  0073E6  22DA               	addwfc	fsr2h,f,c
 20495  0073E8  0008               	tblrd		*
 20496  0073EA  CFF5 FFDF          	movff	tablat,indf2
 20497  0073EE  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 20498  0073F0  0012               	return	
 20499                           tblptru	equ	0xFF8
 20500                           tblptrh	equ	0xFF7
 20501                           tblptrl	equ	0xFF6
 20502                           tablat	equ	0xFF5
 20503                           prodh	equ	0xFF4
 20504                           prodl	equ	0xFF3
 20505                           intcon	equ	0xFF2
 20506                           intcon2	equ	0xFF1
 20507                           postinc0	equ	0xFEE
 20508                           wreg	equ	0xFE8
 20509                           postinc1	equ	0xFE6
 20510                           postdec1	equ	0xFE5
 20511                           fsr1h	equ	0xFE2
 20512                           fsr1l	equ	0xFE1
 20513                           indf2	equ	0xFDF
 20514                           postinc2	equ	0xFDE
 20515                           postdec2	equ	0xFDD
 20516                           fsr2h	equ	0xFDA
 20517                           fsr2l	equ	0xFD9
 20518                           status	equ	0xFD8
 20519                           
 20520 ;; *************** function _SavePreset *****************
 20521 ;; Defined at:
 20522 ;;		line 86 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
 20523 ;; Parameters:    Size  Location     Type
 20524 ;;  pnum            1    wreg     unsigned char 
 20525 ;;  dat             2   19[BANK0 ] PTR unsigned char 
 20526 ;;		 -> FactoryDefault@Empty(120), Idle@tempPset(120), CurrentOrbitProgram(18), CurrentPath(117), 
 20527 ;; Auto vars:     Size  Location     Type
 20528 ;;  pnum            1   21[BANK0 ] unsigned char 
 20529 ;;  addr            2   22[BANK0 ] unsigned int 
 20530 ;; Return value:  Size  Location     Type
 20531 ;;		None               void
 20532 ;; Registers used:
 20533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20534 ;; Tracked objects:
 20535 ;;		On entry : E/0
 20536 ;;		On exit  : F/0
 20537 ;;		Unchanged: FFFFFFF0/0
 20538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20540 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20542 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20543 ;;Total ram usage:        5 bytes
 20544 ;; Hardware stack levels used:    1
 20545 ;; Hardware stack levels required when called:    5
 20546 ;; This function calls:
 20547 ;;		_EEprom_write
 20548 ;; This function is called by:
 20549 ;;		_Idle
 20550 ;;		_CreateOrbitProgram
 20551 ;;		_FactoryDefault
 20552 ;;		_CreateWaypointProgram
 20553 ;; This function uses a non-reentrant model
 20554 ;;
 20555                           
 20556                           	psect	text54
 20557  0075EA                     __ptext54:
 20558                           	opt stack 0
 20559  0075EA                     _SavePreset:
 20560                           	opt stack 21
 20561                           
 20562                           ; BSR set to: 1
 20563                           ;SavePreset@pnum stored from wreg
 20564  0075EA  CFE8 F075          	movff	wreg,SavePreset@pnum
 20565                           
 20566                           ;Settings.c: 87: unsigned int addr;
 20567                           ;Settings.c: 88: addr = sizeof (ConfigStruct)+(pnum * sizeof (PRESET));
 20568  0075EE  0100               	movlb	0	; () banked
 20569  0075F0  5175               	movf	SavePreset@pnum& (0+255),w,b
 20570  0075F2  0D78               	mullw	120
 20571  0075F4  0E22               	movlw	34
 20572  0075F6  24F3               	addwf	prodl,w,c
 20573  0075F8  6F76               	movwf	SavePreset@addr& (0+255),b
 20574  0075FA  0E00               	movlw	0
 20575  0075FC  20F4               	addwfc	prodh,w,c
 20576  0075FE  6F77               	movwf	(SavePreset@addr+1)& (0+255),b
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;Settings.c: 89: EEprom_write(&addr, dat, sizeof (PRESET));
 20580  007600  0E00               	movlw	high SavePreset@addr
 20581  007602  6F6F               	movwf	(?_EEprom_write+1)& (0+255),b
 20582  007604  0E76               	movlw	low SavePreset@addr
 20583  007606  6F6E               	movwf	?_EEprom_write& (0+255),b
 20584  007608  C073  F070         	movff	SavePreset@dat,?_EEprom_write+2
 20585  00760C  C074  F071         	movff	SavePreset@dat+1,?_EEprom_write+3
 20586  007610  0E78               	movlw	120
 20587  007612  6F72               	movwf	(?_EEprom_write+4)& (0+255),b
 20588  007614  EFB7  F039         	goto	l20303	;wreg free
 20589  007618                     __end_of_SavePreset:
 20590                           	opt stack 0
 20591                           tblptru	equ	0xFF8
 20592                           tblptrh	equ	0xFF7
 20593                           tblptrl	equ	0xFF6
 20594                           tablat	equ	0xFF5
 20595                           prodh	equ	0xFF4
 20596                           prodl	equ	0xFF3
 20597                           intcon	equ	0xFF2
 20598                           intcon2	equ	0xFF1
 20599                           postinc0	equ	0xFEE
 20600                           wreg	equ	0xFE8
 20601                           postinc1	equ	0xFE6
 20602                           postdec1	equ	0xFE5
 20603                           fsr1h	equ	0xFE2
 20604                           fsr1l	equ	0xFE1
 20605                           indf2	equ	0xFDF
 20606                           postinc2	equ	0xFDE
 20607                           postdec2	equ	0xFDD
 20608                           fsr2h	equ	0xFDA
 20609                           fsr2l	equ	0xFD9
 20610                           status	equ	0xFD8
 20611                           
 20612 ;; *************** function _EEprom_write *****************
 20613 ;; Defined at:
 20614 ;;		line 60 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
 20615 ;; Parameters:    Size  Location     Type
 20616 ;;  addr            2   14[BANK0 ] PTR unsigned int 
 20617 ;;		 -> SavePreset@addr(2), SaveSettings@addr(2), 
 20618 ;;  dat             2   16[BANK0 ] PTR unsigned char 
 20619 ;;		 -> FactoryDefault@Empty(120), Idle@tempPset(120), CurrentOrbitProgram(18), CurrentPath(117), 
 20620 ;;		 -> Config(34), 
 20621 ;;  bCount          1   18[BANK0 ] unsigned char 
 20622 ;; Auto vars:     Size  Location     Type
 20623 ;;		None
 20624 ;; Return value:  Size  Location     Type
 20625 ;;		None               void
 20626 ;; Registers used:
 20627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20628 ;; Tracked objects:
 20629 ;;		On entry : F/0
 20630 ;;		On exit  : F/0
 20631 ;;		Unchanged: FFFFFFF0/0
 20632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20633 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20636 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20637 ;;Total ram usage:        5 bytes
 20638 ;; Hardware stack levels used:    1
 20639 ;; Hardware stack levels required when called:    4
 20640 ;; This function calls:
 20641 ;;		_Busy_eep
 20642 ;;		_Write_b_eep
 20643 ;; This function is called by:
 20644 ;;		_SavePreset
 20645 ;; This function uses a non-reentrant model
 20646 ;;
 20647                           
 20648                           	psect	text55
 20649  007334                     __ptext55:
 20650                           	opt stack 0
 20651  007334                     _EEprom_write:
 20652                           	opt stack 21
 20653                           
 20654                           ; BSR set to: 0
 20655                           ;Settings.c: 61: while (bCount) {
 20656                           
 20657                           ; BSR set to: 0
 20658  007334  D01C               	goto	l20303
 20659  007336                     l20295:
 20660                           
 20661                           ; BSR set to: 0
 20662                           ;Settings.c: 62: (Busy_eep(), Write_b_eep(*addr,*dat));
 20663  007336  EC37  F03C         	call	_Busy_eep	;wreg free
 20664                           
 20665                           ; BSR set to: 0
 20666  00733A  C06E  FFD9         	movff	EEprom_write@addr,fsr2l
 20667  00733E  C06F  FFDA         	movff	EEprom_write@addr+1,fsr2h
 20668  007342  CFDE F06B          	movff	postinc2,?_Write_b_eep
 20669  007346  CFDD F06C          	movff	postdec2,?_Write_b_eep+1
 20670  00734A  C070  FFD9         	movff	EEprom_write@dat,fsr2l
 20671  00734E  C071  FFDA         	movff	EEprom_write@dat+1,fsr2h
 20672  007352  50DF               	movf	indf2,w,c
 20673  007354  6F6D               	movwf	(?_Write_b_eep+2)& (0+255),b
 20674  007356  EC7A  F03B         	call	_Write_b_eep	;wreg free
 20675                           
 20676                           ;Settings.c: 63: (*addr)++;
 20677  00735A  C06E  FFD9         	movff	EEprom_write@addr,fsr2l
 20678  00735E  C06F  FFDA         	movff	EEprom_write@addr+1,fsr2h
 20679  007362  2ADE               	incf	postinc2,f,c
 20680  007364  0E00               	movlw	0
 20681  007366  22DD               	addwfc	postdec2,f,c
 20682                           
 20683                           ; BSR set to: 0
 20684                           ;Settings.c: 64: dat++;
 20685  007368  4B70               	infsnz	EEprom_write@dat& (0+255),f,b
 20686  00736A  2B71               	incf	(EEprom_write@dat+1)& (0+255),f,b
 20687                           
 20688                           ; BSR set to: 0
 20689                           ;Settings.c: 65: bCount--;
 20690  00736C  0772               	decf	EEprom_write@bCount& (0+255),f,b
 20691  00736E                     l20303:
 20692                           
 20693                           ; BSR set to: 0
 20694  00736E  6772               	tstfsz	EEprom_write@bCount& (0+255),b
 20695  007370  D7E2               	goto	l20295
 20696  007372  0012               	return	
 20697  007374                     __end_of_EEprom_write:
 20698                           	opt stack 0
 20699                           tblptru	equ	0xFF8
 20700                           tblptrh	equ	0xFF7
 20701                           tblptrl	equ	0xFF6
 20702                           tablat	equ	0xFF5
 20703                           prodh	equ	0xFF4
 20704                           prodl	equ	0xFF3
 20705                           intcon	equ	0xFF2
 20706                           intcon2	equ	0xFF1
 20707                           postinc0	equ	0xFEE
 20708                           wreg	equ	0xFE8
 20709                           postinc1	equ	0xFE6
 20710                           postdec1	equ	0xFE5
 20711                           fsr1h	equ	0xFE2
 20712                           fsr1l	equ	0xFE1
 20713                           indf2	equ	0xFDF
 20714                           postinc2	equ	0xFDE
 20715                           postdec2	equ	0xFDD
 20716                           fsr2h	equ	0xFDA
 20717                           fsr2l	equ	0xFD9
 20718                           status	equ	0xFD8
 20719                           
 20720 ;; *************** function _EEprom_read *****************
 20721 ;; Defined at:
 20722 ;;		line 69 in file "Z:\CineFlux\Dropbox\Orbit\Settings.c"
 20723 ;; Parameters:    Size  Location     Type
 20724 ;;  addr            2   13[BANK0 ] PTR unsigned int 
 20725 ;;		 -> LoadPreset@addr(2), GetPresetType@addr(2), LoadSettings@addr(2), 
 20726 ;;  dat             2   15[BANK0 ] PTR unsigned char 
 20727 ;;		 -> GetPresetType@ret(1), Idle@tempPset(120), CurrentOrbitProgram(18), CurrentPath(117), 
 20728 ;;		 -> Config(34), 
 20729 ;;  bCount          1   17[BANK0 ] unsigned char 
 20730 ;; Auto vars:     Size  Location     Type
 20731 ;;		None
 20732 ;; Return value:  Size  Location     Type
 20733 ;;		None               void
 20734 ;; Registers used:
 20735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20736 ;; Tracked objects:
 20737 ;;		On entry : F/0
 20738 ;;		On exit  : F/0
 20739 ;;		Unchanged: 0/0
 20740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20741 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20744 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20745 ;;Total ram usage:        5 bytes
 20746 ;; Hardware stack levels used:    1
 20747 ;; Hardware stack levels required when called:    4
 20748 ;; This function calls:
 20749 ;;		_Read_b_eep
 20750 ;; This function is called by:
 20751 ;;		_GetPresetType
 20752 ;;		_LoadPreset
 20753 ;; This function uses a non-reentrant model
 20754 ;;
 20755                           
 20756                           	psect	text56
 20757  0074E2                     __ptext56:
 20758                           	opt stack 0
 20759  0074E2                     _EEprom_read:
 20760                           	opt stack 21
 20761                           
 20762                           ; BSR set to: 0
 20763                           ;Settings.c: 70: while (bCount) {
 20764                           
 20765                           ; BSR set to: 0
 20766  0074E2  D01A               	goto	l15633
 20767  0074E4                     l15625:
 20768                           
 20769                           ; BSR set to: 0
 20770                           ;Settings.c: 71: (*dat) = Read_b_eep(*addr);
 20771  0074E4  C06D  FFD9         	movff	EEprom_read@addr,fsr2l
 20772  0074E8  C06E  FFDA         	movff	EEprom_read@addr+1,fsr2h
 20773  0074EC  CFDE F06B          	movff	postinc2,?_Read_b_eep
 20774  0074F0  CFDD F06C          	movff	postdec2,?_Read_b_eep+1
 20775  0074F4  EC17  F03C         	call	_Read_b_eep	;wreg free
 20776  0074F8  C06F  FFD9         	movff	EEprom_read@dat,fsr2l
 20777  0074FC  C070  FFDA         	movff	EEprom_read@dat+1,fsr2h
 20778  007500  6EDF               	movwf	indf2,c
 20779                           
 20780                           ;Settings.c: 72: (*addr)++;
 20781  007502  C06D  FFD9         	movff	EEprom_read@addr,fsr2l
 20782  007506  C06E  FFDA         	movff	EEprom_read@addr+1,fsr2h
 20783  00750A  2ADE               	incf	postinc2,f,c
 20784  00750C  0E00               	movlw	0
 20785  00750E  22DD               	addwfc	postdec2,f,c
 20786                           
 20787                           ;Settings.c: 73: dat++;
 20788  007510  0100               	movlb	0	; () banked
 20789  007512  4B6F               	infsnz	EEprom_read@dat& (0+255),f,b
 20790  007514  2B70               	incf	(EEprom_read@dat+1)& (0+255),f,b
 20791                           
 20792                           ; BSR set to: 0
 20793                           ;Settings.c: 74: bCount--;
 20794  007516  0771               	decf	EEprom_read@bCount& (0+255),f,b
 20795  007518                     l15633:
 20796                           
 20797                           ; BSR set to: 0
 20798  007518  6771               	tstfsz	EEprom_read@bCount& (0+255),b
 20799  00751A  D7E4               	goto	l15625
 20800  00751C  0012               	return	
 20801  00751E                     __end_of_EEprom_read:
 20802                           	opt stack 0
 20803                           tblptru	equ	0xFF8
 20804                           tblptrh	equ	0xFF7
 20805                           tblptrl	equ	0xFF6
 20806                           tablat	equ	0xFF5
 20807                           prodh	equ	0xFF4
 20808                           prodl	equ	0xFF3
 20809                           intcon	equ	0xFF2
 20810                           intcon2	equ	0xFF1
 20811                           postinc0	equ	0xFEE
 20812                           wreg	equ	0xFE8
 20813                           postinc1	equ	0xFE6
 20814                           postdec1	equ	0xFE5
 20815                           fsr1h	equ	0xFE2
 20816                           fsr1l	equ	0xFE1
 20817                           indf2	equ	0xFDF
 20818                           postinc2	equ	0xFDE
 20819                           postdec2	equ	0xFDD
 20820                           fsr2h	equ	0xFDA
 20821                           fsr2l	equ	0xFD9
 20822                           status	equ	0xFD8
 20823                           
 20824 ;; *************** function _Busy_eep *****************
 20825 ;; Defined at:
 20826 ;;		line 13 in file "plib/EEP/busy_eep.c"
 20827 ;; Parameters:    Size  Location     Type
 20828 ;;		None
 20829 ;; Auto vars:     Size  Location     Type
 20830 ;;		None
 20831 ;; Return value:  Size  Location     Type
 20832 ;;		None               void
 20833 ;; Registers used:
 20834 ;;		None
 20835 ;; Tracked objects:
 20836 ;;		On entry : F/0
 20837 ;;		On exit  : F/0
 20838 ;;		Unchanged: FFFFFFF0/0
 20839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20844 ;;Total ram usage:        0 bytes
 20845 ;; Hardware stack levels used:    1
 20846 ;; Hardware stack levels required when called:    3
 20847 ;; This function calls:
 20848 ;;		Nothing
 20849 ;; This function is called by:
 20850 ;;		_EEprom_write
 20851 ;; This function uses a non-reentrant model
 20852 ;;
 20853                           
 20854                           	psect	text57
 20855  00786E                     __ptext57:
 20856                           	opt stack 0
 20857  00786E                     _Busy_eep:
 20858                           	opt stack 21
 20859  00786E                     l2581:
 20860                           
 20861                           ; BSR set to: 0
 20862  00786E  A27F               	btfss	3967,1,c	;volatile
 20863  007870  0012               	return	
 20864  007872  D7FD               	goto	l2581
 20865  007874                     __end_of_Busy_eep:
 20866                           	opt stack 0
 20867                           tblptru	equ	0xFF8
 20868                           tblptrh	equ	0xFF7
 20869                           tblptrl	equ	0xFF6
 20870                           tablat	equ	0xFF5
 20871                           prodh	equ	0xFF4
 20872                           prodl	equ	0xFF3
 20873                           intcon	equ	0xFF2
 20874                           intcon2	equ	0xFF1
 20875                           postinc0	equ	0xFEE
 20876                           wreg	equ	0xFE8
 20877                           postinc1	equ	0xFE6
 20878                           postdec1	equ	0xFE5
 20879                           fsr1h	equ	0xFE2
 20880                           fsr1l	equ	0xFE1
 20881                           indf2	equ	0xFDF
 20882                           postinc2	equ	0xFDE
 20883                           postdec2	equ	0xFDD
 20884                           fsr2h	equ	0xFDA
 20885                           fsr2l	equ	0xFD9
 20886                           status	equ	0xFD8
 20887                           
 20888 ;; *************** function _Write_b_eep *****************
 20889 ;; Defined at:
 20890 ;;		line 46 in file "plib/EEP/write_B.c"
 20891 ;; Parameters:    Size  Location     Type
 20892 ;;  badd            2   11[BANK0 ] unsigned int 
 20893 ;;  bdat            1   13[BANK0 ] unsigned char 
 20894 ;; Auto vars:     Size  Location     Type
 20895 ;;		None
 20896 ;; Return value:  Size  Location     Type
 20897 ;;		None               void
 20898 ;; Registers used:
 20899 ;;		wreg, status,2, status,0
 20900 ;; Tracked objects:
 20901 ;;		On entry : F/0
 20902 ;;		On exit  : F/0
 20903 ;;		Unchanged: FFFFFFF0/0
 20904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;Total ram usage:        3 bytes
 20910 ;; Hardware stack levels used:    1
 20911 ;; Hardware stack levels required when called:    3
 20912 ;; This function calls:
 20913 ;;		Nothing
 20914 ;; This function is called by:
 20915 ;;		_EEprom_write
 20916 ;; This function uses a non-reentrant model
 20917 ;;
 20918                           
 20919                           	psect	text58
 20920  0076F4                     __ptext58:
 20921                           	opt stack 0
 20922  0076F4                     _Write_b_eep:
 20923                           	opt stack 21
 20924                           
 20925                           ; BSR set to: 0
 20926                           
 20927                           ; BSR set to: 0
 20928  0076F4  516C               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 20929  0076F6  0B03               	andlw	3
 20930  0076F8  6E63               	movwf	3939,c	;volatile
 20931                           
 20932                           ; BSR set to: 0
 20933  0076FA  C06B  FF62         	movff	Write_b_eep@badd,3938	;volatile
 20934                           
 20935                           ; BSR set to: 0
 20936  0076FE  C06D  FF61         	movff	Write_b_eep@bdat,3937	;volatile
 20937                           
 20938                           ; BSR set to: 0
 20939  007702  9E7F               	bcf	3967,7,c	;volatile
 20940                           
 20941                           ; BSR set to: 0
 20942  007704  9C7F               	bcf	3967,6,c	;volatile
 20943                           
 20944                           ; BSR set to: 0
 20945  007706  847F               	bsf	3967,2,c	;volatile
 20946                           
 20947                           ; BSR set to: 0
 20948  007708  9EF2               	bcf	intcon,7,c	;volatile
 20949                           
 20950                           ; BSR set to: 0
 20951  00770A  0E55               	movlw	85
 20952  00770C  6E7E               	movwf	3966,c	;volatile
 20953                           
 20954                           ; BSR set to: 0
 20955  00770E  0EAA               	movlw	170
 20956  007710  6E7E               	movwf	3966,c	;volatile
 20957                           
 20958                           ; BSR set to: 0
 20959  007712  827F               	bsf	3967,1,c	;volatile
 20960  007714                     l2610:
 20961                           
 20962                           ; BSR set to: 0
 20963  007714  B27F               	btfsc	3967,1,c	;volatile
 20964  007716  D7FE               	goto	l2610
 20965                           
 20966                           ; BSR set to: 0
 20967  007718  8EF2               	bsf	intcon,7,c	;volatile
 20968  00771A  947F               	bcf	3967,2,c	;volatile
 20969                           
 20970                           ; BSR set to: 0
 20971  00771C  0012               	return	
 20972  00771E                     __end_of_Write_b_eep:
 20973                           	opt stack 0
 20974                           tblptru	equ	0xFF8
 20975                           tblptrh	equ	0xFF7
 20976                           tblptrl	equ	0xFF6
 20977                           tablat	equ	0xFF5
 20978                           prodh	equ	0xFF4
 20979                           prodl	equ	0xFF3
 20980                           intcon	equ	0xFF2
 20981                           intcon2	equ	0xFF1
 20982                           postinc0	equ	0xFEE
 20983                           wreg	equ	0xFE8
 20984                           postinc1	equ	0xFE6
 20985                           postdec1	equ	0xFE5
 20986                           fsr1h	equ	0xFE2
 20987                           fsr1l	equ	0xFE1
 20988                           indf2	equ	0xFDF
 20989                           postinc2	equ	0xFDE
 20990                           postdec2	equ	0xFDD
 20991                           fsr2h	equ	0xFDA
 20992                           fsr2l	equ	0xFD9
 20993                           status	equ	0xFD8
 20994                           
 20995 ;; *************** function _Read_b_eep *****************
 20996 ;; Defined at:
 20997 ;;		line 36 in file "plib/EEP/read_B.c"
 20998 ;; Parameters:    Size  Location     Type
 20999 ;;  badd            2   11[BANK0 ] unsigned int 
 21000 ;; Auto vars:     Size  Location     Type
 21001 ;;		None
 21002 ;; Return value:  Size  Location     Type
 21003 ;;                  1    wreg      unsigned char 
 21004 ;; Registers used:
 21005 ;;		wreg, status,2, status,0
 21006 ;; Tracked objects:
 21007 ;;		On entry : F/0
 21008 ;;		On exit  : 0/0
 21009 ;;		Unchanged: 0/0
 21010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21011 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21015 ;;Total ram usage:        2 bytes
 21016 ;; Hardware stack levels used:    1
 21017 ;; Hardware stack levels required when called:    3
 21018 ;; This function calls:
 21019 ;;		Nothing
 21020 ;; This function is called by:
 21021 ;;		_EEprom_read
 21022 ;; This function uses a non-reentrant model
 21023 ;;
 21024                           
 21025                           	psect	text59
 21026  00782E                     __ptext59:
 21027                           	opt stack 0
 21028  00782E                     _Read_b_eep:
 21029                           	opt stack 21
 21030                           
 21031                           ; BSR set to: 0
 21032                           
 21033                           ; BSR set to: 0
 21034  00782E  516C               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 21035  007830  0B03               	andlw	3
 21036  007832  6E63               	movwf	3939,c	;volatile
 21037                           
 21038                           ; BSR set to: 0
 21039  007834  C06B  FF62         	movff	Read_b_eep@badd,3938	;volatile
 21040                           
 21041                           ; BSR set to: 0
 21042  007838  9C7F               	bcf	3967,6,c	;volatile
 21043                           
 21044                           ; BSR set to: 0
 21045  00783A  9E7F               	bcf	3967,7,c	;volatile
 21046                           
 21047                           ; BSR set to: 0
 21048  00783C  807F               	bsf	3967,0,c	;volatile
 21049                           
 21050                           ; BSR set to: 0
 21051  00783E  F000               	nop		;# 
 21052  007840  F000               	nop		;# 
 21053  007842  5061               	movf	3937,w,c	;volatile
 21054  007844  0012               	return	
 21055  007846                     __end_of_Read_b_eep:
 21056                           	opt stack 0
 21057                           tblptru	equ	0xFF8
 21058                           tblptrh	equ	0xFF7
 21059                           tblptrl	equ	0xFF6
 21060                           tablat	equ	0xFF5
 21061                           prodh	equ	0xFF4
 21062                           prodl	equ	0xFF3
 21063                           intcon	equ	0xFF2
 21064                           intcon2	equ	0xFF1
 21065                           postinc0	equ	0xFEE
 21066                           wreg	equ	0xFE8
 21067                           postinc1	equ	0xFE6
 21068                           postdec1	equ	0xFE5
 21069                           fsr1h	equ	0xFE2
 21070                           fsr1l	equ	0xFE1
 21071                           indf2	equ	0xFDF
 21072                           postinc2	equ	0xFDE
 21073                           postdec2	equ	0xFDD
 21074                           fsr2h	equ	0xFDA
 21075                           fsr2l	equ	0xFD9
 21076                           status	equ	0xFD8
 21077                           
 21078 ;; *************** function _ConvertTimeToDiscrete *****************
 21079 ;; Defined at:
 21080 ;;		line 266 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 21081 ;; Parameters:    Size  Location     Type
 21082 ;;  Time            3   89[BANK0 ] unsigned char 
 21083 ;;  Hours           2   92[BANK0 ] PTR unsigned char 
 21084 ;;		 -> RoundTimeDown@Hours(1), RoundTimeUp@Hours(1), PrintTime@Hours(1), GetTime@Hours(1), 
 21085 ;;  Minutes         2   94[BANK0 ] PTR unsigned char 
 21086 ;;		 -> RoundTimeDown@Minutes(1), RoundTimeUp@Minutes(1), PrintTime@Minutes(1), GetTime@Minutes(1), 
 21087 ;;  Seconds         2   96[BANK0 ] PTR unsigned char 
 21088 ;;		 -> RoundTimeDown@Seconds(1), RoundTimeUp@Seconds(1), PrintTime@Seconds(1), GetTime@Seconds(1), 
 21089 ;;  Milliseconds    2   98[BANK0 ] PTR int 
 21090 ;;		 -> RoundTimeDown@Milliseconds(2), RoundTimeUp@Milliseconds(2), PrintTime@Milliseconds(2), GetTime@Milliseconds(2), 
 21091 ;; Auto vars:     Size  Location     Type
 21092 ;;  dat             3  106[BANK0 ] PTR int 
 21093 ;;  holder          3  103[BANK0 ] PTR int 
 21094 ;;  temp            3  100[BANK0 ] PTR int 
 21095 ;; Return value:  Size  Location     Type
 21096 ;;		None               void
 21097 ;; Registers used:
 21098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21099 ;; Tracked objects:
 21100 ;;		On entry : F/0
 21101 ;;		On exit  : F/0
 21102 ;;		Unchanged: FFFFFFF0/0
 21103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21104 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21105 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21107 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;Total ram usage:       20 bytes
 21109 ;; Hardware stack levels used:    1
 21110 ;; Hardware stack levels required when called:    7
 21111 ;; This function calls:
 21112 ;;		___ftmul
 21113 ;;		___fttol
 21114 ;;		___lbtoft
 21115 ;;		___asftmul
 21116 ;;		___asftsub
 21117 ;; This function is called by:
 21118 ;;		_GetTime
 21119 ;;		_PrintTime
 21120 ;; This function uses a non-reentrant model
 21121 ;;
 21122                           
 21123                           	psect	text60
 21124  005B80                     __ptext60:
 21125                           	opt stack 0
 21126  005B80                     _ConvertTimeToDiscrete:
 21127                           	opt stack 21
 21128                           
 21129                           ; BSR set to: 0
 21130                           ;UserInterface.c: 267: double dat = Time;
 21131  005B80  C0B9  F0CA         	movff	ConvertTimeToDiscrete@Time,ConvertTimeToDiscrete@dat
 21132  005B84  C0BA  F0CB         	movff	ConvertTimeToDiscrete@Time+1,ConvertTimeToDiscrete@dat+1
 21133  005B88  C0BB  F0CC         	movff	ConvertTimeToDiscrete@Time+2,ConvertTimeToDiscrete@dat+2
 21134                           
 21135                           ; BSR set to: 0
 21136                           ;UserInterface.c: 268: double temp;
 21137                           ;UserInterface.c: 269: double holder;
 21138                           ;UserInterface.c: 272: temp = dat * 0.000277778;
 21139  005B8C  C0CA  F077         	movff	ConvertTimeToDiscrete@dat,?___ftmul
 21140  005B90  C0CB  F078         	movff	ConvertTimeToDiscrete@dat+1,?___ftmul+1
 21141  005B94  C0CC  F079         	movff	ConvertTimeToDiscrete@dat+2,?___ftmul+2
 21142  005B98  0EA3               	movlw	163
 21143  005B9A  6F7A               	movwf	(?___ftmul+3)& (0+255),b
 21144  005B9C  0E91               	movlw	145
 21145  005B9E  6F7B               	movwf	(?___ftmul+4)& (0+255),b
 21146  005BA0  0E39               	movlw	57
 21147  005BA2  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 21148  005BA4  EC52  F031         	call	___ftmul	;wreg free
 21149                           
 21150                           ; BSR set to: 0
 21151                           ;UserInterface.c: 273: *Hours = (char) temp;
 21152  005BA8  D87E               	call	PL42	;call to abstracted procedure
 21153  005BAA  EC3B  F034         	call	___fttol	;wreg free
 21154  005BAE  51AA               	movf	?___fttol& (0+255),w,b
 21155  005BB0  C0BC  FFD9         	movff	ConvertTimeToDiscrete@Hours,fsr2l
 21156  005BB4  C0BD  FFDA         	movff	ConvertTimeToDiscrete@Hours+1,fsr2h
 21157  005BB8  6EDF               	movwf	indf2,c
 21158                           
 21159                           ; BSR set to: 0
 21160                           ;UserInterface.c: 276: holder=*Hours;
 21161  005BBA  C0BC  FFD9         	movff	ConvertTimeToDiscrete@Hours,fsr2l
 21162  005BBE  C0BD  FFDA         	movff	ConvertTimeToDiscrete@Hours+1,fsr2h
 21163  005BC2  50DF               	movf	indf2,w,c
 21164  005BC4  EC8F  F03B         	call	___lbtoft
 21165                           
 21166                           ; BSR set to: 0
 21167                           ;UserInterface.c: 277: holder*=3600;
 21168  005BC8  D87B               	call	PL45	;call to abstracted procedure
 21169  005BCA  0E61               	movlw	97
 21170  005BCC  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 21171  005BCE  0E45               	movlw	69
 21172  005BD0  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 21173  005BD2  ECF9  F039         	call	___asftmul	;wreg free
 21174                           
 21175                           ; BSR set to: 0
 21176                           ;UserInterface.c: 278: dat -= holder;
 21177  005BD6  D880               	call	PL51	;call to abstracted procedure
 21178  005BD8  EC17  F03A         	call	___asftsub	;wreg free
 21179                           
 21180                           ;UserInterface.c: 281: temp = dat * 0.016666667;
 21181  005BDC  C0CA  F077         	movff	ConvertTimeToDiscrete@dat,?___ftmul
 21182  005BE0  C0CB  F078         	movff	ConvertTimeToDiscrete@dat+1,?___ftmul+1
 21183  005BE4  C0CC  F079         	movff	ConvertTimeToDiscrete@dat+2,?___ftmul+2
 21184  005BE8  0E89               	movlw	137
 21185  005BEA  6F7A               	movwf	(?___ftmul+3)& (0+255),b
 21186  005BEC  0E88               	movlw	136
 21187  005BEE  6F7B               	movwf	(?___ftmul+4)& (0+255),b
 21188  005BF0  0E3C               	movlw	60
 21189  005BF2  6F7C               	movwf	(?___ftmul+5)& (0+255),b
 21190  005BF4  EC52  F031         	call	___ftmul	;wreg free
 21191                           
 21192                           ; BSR set to: 0
 21193                           ;UserInterface.c: 282: *Minutes = (char) temp;
 21194  005BF8  D856               	call	PL42	;call to abstracted procedure
 21195  005BFA  EC3B  F034         	call	___fttol	;wreg free
 21196  005BFE  51AA               	movf	?___fttol& (0+255),w,b
 21197  005C00  C0BE  FFD9         	movff	ConvertTimeToDiscrete@Minutes,fsr2l
 21198  005C04  C0BF  FFDA         	movff	ConvertTimeToDiscrete@Minutes+1,fsr2h
 21199  005C08  6EDF               	movwf	indf2,c
 21200                           
 21201                           ; BSR set to: 0
 21202                           ;UserInterface.c: 283: holder=*Minutes;
 21203  005C0A  C0BE  FFD9         	movff	ConvertTimeToDiscrete@Minutes,fsr2l
 21204  005C0E  C0BF  FFDA         	movff	ConvertTimeToDiscrete@Minutes+1,fsr2h
 21205  005C12  50DF               	movf	indf2,w,c
 21206  005C14  EC8F  F03B         	call	___lbtoft
 21207                           
 21208                           ; BSR set to: 0
 21209                           ;UserInterface.c: 284: holder*=60;
 21210  005C18  D853               	call	PL45	;call to abstracted procedure
 21211  005C1A  0E70               	movlw	112
 21212  005C1C  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 21213  005C1E  0E42               	movlw	66
 21214  005C20  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 21215  005C22  ECF9  F039         	call	___asftmul	;wreg free
 21216                           
 21217                           ; BSR set to: 0
 21218                           ;UserInterface.c: 287: dat -= holder;
 21219  005C26  D858               	call	PL51	;call to abstracted procedure
 21220  005C28  EC17  F03A         	call	___asftsub	;wreg free
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;UserInterface.c: 290: *Seconds = (char) dat;
 21224  005C2C  C0CA  F0AA         	movff	ConvertTimeToDiscrete@dat,?___fttol
 21225  005C30  C0CB  F0AB         	movff	ConvertTimeToDiscrete@dat+1,?___fttol+1
 21226  005C34  C0CC  F0AC         	movff	ConvertTimeToDiscrete@dat+2,?___fttol+2
 21227  005C38  EC3B  F034         	call	___fttol	;wreg free
 21228  005C3C  51AA               	movf	?___fttol& (0+255),w,b
 21229  005C3E  C0C0  FFD9         	movff	ConvertTimeToDiscrete@Seconds,fsr2l
 21230  005C42  C0C1  FFDA         	movff	ConvertTimeToDiscrete@Seconds+1,fsr2h
 21231  005C46  6EDF               	movwf	indf2,c
 21232                           
 21233                           ; BSR set to: 0
 21234                           ;UserInterface.c: 293: dat -= *Seconds;
 21235  005C48  0E00               	movlw	high ConvertTimeToDiscrete@dat
 21236  005C4A  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 21237  005C4C  0ECA               	movlw	low ConvertTimeToDiscrete@dat
 21238  005C4E  6F9F               	movwf	?___asftsub& (0+255),b
 21239  005C50  C0C0  FFD9         	movff	ConvertTimeToDiscrete@Seconds,fsr2l
 21240  005C54  C0C1  FFDA         	movff	ConvertTimeToDiscrete@Seconds+1,fsr2h
 21241  005C58  50DF               	movf	indf2,w,c
 21242  005C5A  EC8F  F03B         	call	___lbtoft
 21243  005C5E  C073  F0A1         	movff	?___lbtoft,?___asftsub+2
 21244  005C62  C074  F0A2         	movff	?___lbtoft+1,?___asftsub+3
 21245  005C66  C075  F0A3         	movff	?___lbtoft+2,?___asftsub+4
 21246  005C6A  EC17  F03A         	call	___asftsub	;wreg free
 21247                           
 21248                           ; BSR set to: 0
 21249                           ;UserInterface.c: 296: dat *= 1000;
 21250  005C6E  0E00               	movlw	high ConvertTimeToDiscrete@dat
 21251  005C70  6F89               	movwf	(?___asftmul+1)& (0+255),b
 21252  005C72  0ECA               	movlw	low ConvertTimeToDiscrete@dat
 21253  005C74  6F88               	movwf	?___asftmul& (0+255),b
 21254  005C76  6B8A               	clrf	(?___asftmul+2)& (0+255),b
 21255  005C78  0E7A               	movlw	122
 21256  005C7A  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 21257  005C7C  0E44               	movlw	68
 21258  005C7E  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 21259  005C80  ECF9  F039         	call	___asftmul	;wreg free
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;UserInterface.c: 297: *Milliseconds = (int) dat;
 21263  005C84  C0CA  F0AA         	movff	ConvertTimeToDiscrete@dat,?___fttol
 21264  005C88  C0CB  F0AB         	movff	ConvertTimeToDiscrete@dat+1,?___fttol+1
 21265  005C8C  C0CC  F0AC         	movff	ConvertTimeToDiscrete@dat+2,?___fttol+2
 21266  005C90  EC3B  F034         	call	___fttol	;wreg free
 21267  005C94  C0C2  FFD9         	movff	ConvertTimeToDiscrete@Milliseconds,fsr2l
 21268  005C98  C0C3  FFDA         	movff	ConvertTimeToDiscrete@Milliseconds+1,fsr2h
 21269  005C9C  C0AA  FFDE         	movff	?___fttol,postinc2
 21270  005CA0  C0AB  FFDD         	movff	?___fttol+1,postdec2
 21271                           
 21272                           ; BSR set to: 0
 21273  005CA4  0012               	return	
 21274  005CA6                     __end_of_ConvertTimeToDiscrete:
 21275                           	opt stack 0
 21276  005CA6                     PL42:
 21277  005CA6  C077  F0C4         	movff	?___ftmul,ConvertTimeToDiscrete@temp
 21278  005CAA  C078  F0C5         	movff	?___ftmul+1,ConvertTimeToDiscrete@temp+1
 21279  005CAE  C079  F0C6         	movff	?___ftmul+2,ConvertTimeToDiscrete@temp+2
 21280  005CB2  C0C4  F0AA         	movff	ConvertTimeToDiscrete@temp,?___fttol
 21281  005CB6  C0C5  F0AB         	movff	ConvertTimeToDiscrete@temp+1,?___fttol+1
 21282  005CBA  C0C6  F0AC         	movff	ConvertTimeToDiscrete@temp+2,?___fttol+2
 21283  005CBE  0012               	return	
 21284  005CC0                     PL45:
 21285  005CC0  C073  F0C7         	movff	?___lbtoft,ConvertTimeToDiscrete@holder
 21286  005CC4  C074  F0C8         	movff	?___lbtoft+1,ConvertTimeToDiscrete@holder+1
 21287  005CC8  C075  F0C9         	movff	?___lbtoft+2,ConvertTimeToDiscrete@holder+2
 21288  005CCC  0E00               	movlw	high ConvertTimeToDiscrete@holder
 21289  005CCE  6F89               	movwf	(?___asftmul+1)& (0+255),b
 21290  005CD0  0EC7               	movlw	low ConvertTimeToDiscrete@holder
 21291  005CD2  6F88               	movwf	?___asftmul& (0+255),b
 21292  005CD4  6B8A               	clrf	(?___asftmul+2)& (0+255),b
 21293  005CD6  0012               	return	
 21294  005CD8                     PL51:
 21295  005CD8  0E00               	movlw	high ConvertTimeToDiscrete@dat
 21296  005CDA  6FA0               	movwf	(?___asftsub+1)& (0+255),b
 21297  005CDC  0ECA               	movlw	low ConvertTimeToDiscrete@dat
 21298  005CDE  6F9F               	movwf	?___asftsub& (0+255),b
 21299  005CE0  C0C7  F0A1         	movff	ConvertTimeToDiscrete@holder,?___asftsub+2
 21300  005CE4  C0C8  F0A2         	movff	ConvertTimeToDiscrete@holder+1,?___asftsub+3
 21301  005CE8  C0C9  F0A3         	movff	ConvertTimeToDiscrete@holder+2,?___asftsub+4
 21302  005CEC  0012               	return	
 21303                           tblptru	equ	0xFF8
 21304                           tblptrh	equ	0xFF7
 21305                           tblptrl	equ	0xFF6
 21306                           tablat	equ	0xFF5
 21307                           prodh	equ	0xFF4
 21308                           prodl	equ	0xFF3
 21309                           intcon	equ	0xFF2
 21310                           intcon2	equ	0xFF1
 21311                           postinc0	equ	0xFEE
 21312                           wreg	equ	0xFE8
 21313                           postinc1	equ	0xFE6
 21314                           postdec1	equ	0xFE5
 21315                           fsr1h	equ	0xFE2
 21316                           fsr1l	equ	0xFE1
 21317                           indf2	equ	0xFDF
 21318                           postinc2	equ	0xFDE
 21319                           postdec2	equ	0xFDD
 21320                           fsr2h	equ	0xFDA
 21321                           fsr2l	equ	0xFD9
 21322                           status	equ	0xFD8
 21323                           
 21324 ;; *************** function _ConvertTimeFromDiscrete *****************
 21325 ;; Defined at:
 21326 ;;		line 426 in file "Z:\CineFlux\Dropbox\Orbit\UserInterface.c"
 21327 ;; Parameters:    Size  Location     Type
 21328 ;;  Hours           1    wreg     unsigned char 
 21329 ;;  Minutes         1   45[BANK0 ] unsigned char 
 21330 ;;  Seconds         1   46[BANK0 ] unsigned char 
 21331 ;;  Milliseconds    2   47[BANK0 ] int 
 21332 ;; Auto vars:     Size  Location     Type
 21333 ;;  Hours           1   49[BANK0 ] unsigned char 
 21334 ;;  temp            4   53[BANK0 ] long 
 21335 ;;  ret             3   57[BANK0 ] long 
 21336 ;;  dTemp           3   50[BANK0 ] long 
 21337 ;; Return value:  Size  Location     Type
 21338 ;;                  3   45[BANK0 ] long 
 21339 ;; Registers used:
 21340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21341 ;; Tracked objects:
 21342 ;;		On entry : F/0
 21343 ;;		On exit  : F/0
 21344 ;;		Unchanged: FFFFFFF0/0
 21345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21346 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21347 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21349 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21350 ;;Total ram usage:       15 bytes
 21351 ;; Hardware stack levels used:    1
 21352 ;; Hardware stack levels required when called:    6
 21353 ;; This function calls:
 21354 ;;		___lmul
 21355 ;;		___altoft
 21356 ;;		___asftadd
 21357 ;;		___lbtoft
 21358 ;;		___awtoft
 21359 ;;		___asftmul
 21360 ;; This function is called by:
 21361 ;;		_GetTime
 21362 ;; This function uses a non-reentrant model
 21363 ;;
 21364                           
 21365                           	psect	text61
 21366  005F7C                     __ptext61:
 21367                           	opt stack 0
 21368  005F7C                     _ConvertTimeFromDiscrete:
 21369                           	opt stack 22
 21370                           
 21371                           ; BSR set to: 0
 21372                           ;ConvertTimeFromDiscrete@Hours stored from wreg
 21373  005F7C  CFE8 F091          	movff	wreg,ConvertTimeFromDiscrete@Hours
 21374                           
 21375                           ; BSR set to: 0
 21376                           ;UserInterface.c: 427: double ret;
 21377                           ;UserInterface.c: 428: double dTemp;
 21378                           ;UserInterface.c: 429: long temp;
 21379                           ;UserInterface.c: 431: temp = Hours;
 21380  005F80  5191               	movf	ConvertTimeFromDiscrete@Hours& (0+255),w,b
 21381                           
 21382                           ; BSR set to: 0
 21383                           ;UserInterface.c: 432: temp *= 3600;
 21384  005F82  D878               	call	PL38	;call to abstracted procedure
 21385  005F84  0E10               	movlw	16
 21386  005F86  6F6F               	movwf	(?___lmul+4)& (0+255),b
 21387  005F88  0E0E               	movlw	14
 21388  005F8A  6F70               	movwf	(?___lmul+5)& (0+255),b
 21389  005F8C  0E00               	movlw	0
 21390  005F8E  6B71               	clrf	(?___lmul+6)& (0+255),b
 21391  005F90  6B72               	clrf	(?___lmul+7)& (0+255),b
 21392  005F92  EC7F  F038         	call	___lmul	;wreg free
 21393                           
 21394                           ; BSR set to: 0
 21395                           ;UserInterface.c: 433: ret += temp;
 21396  005F96  D859               	call	PL21	;call to abstracted procedure
 21397  005F98  EC49  F037         	call	___altoft	;wreg free
 21398  005F9C  C073  F08A         	movff	?___altoft,?___asftadd+2
 21399  005FA0  C074  F08B         	movff	?___altoft+1,?___asftadd+3
 21400  005FA4  C075  F08C         	movff	?___altoft+2,?___asftadd+4
 21401  005FA8  EC53  F03A         	call	___asftadd	;wreg free
 21402                           
 21403                           ; BSR set to: 0
 21404                           ;UserInterface.c: 435: temp = Minutes;
 21405  005FAC  518D               	movf	ConvertTimeFromDiscrete@Minutes& (0+255),w,b
 21406                           
 21407                           ; BSR set to: 0
 21408                           ;UserInterface.c: 436: temp *= 60;
 21409  005FAE  D862               	call	PL38	;call to abstracted procedure
 21410  005FB0  0E3C               	movlw	60
 21411  005FB2  6F6F               	movwf	(?___lmul+4)& (0+255),b
 21412  005FB4  0E00               	movlw	0
 21413  005FB6  6B70               	clrf	(?___lmul+5)& (0+255),b
 21414  005FB8  6B71               	clrf	(?___lmul+6)& (0+255),b
 21415  005FBA  6B72               	clrf	(?___lmul+7)& (0+255),b
 21416  005FBC  EC7F  F038         	call	___lmul	;wreg free
 21417                           
 21418                           ;UserInterface.c: 437: ret += temp;
 21419  005FC0  D844               	call	PL21	;call to abstracted procedure
 21420  005FC2  EC49  F037         	call	___altoft	;wreg free
 21421  005FC6  C073  F08A         	movff	?___altoft,?___asftadd+2
 21422  005FCA  C074  F08B         	movff	?___altoft+1,?___asftadd+3
 21423  005FCE  C075  F08C         	movff	?___altoft+2,?___asftadd+4
 21424  005FD2  EC53  F03A         	call	___asftadd	;wreg free
 21425                           
 21426                           ;UserInterface.c: 439: ret += Seconds;
 21427  005FD6  0E00               	movlw	high ConvertTimeFromDiscrete@ret
 21428  005FD8  6F89               	movwf	(?___asftadd+1)& (0+255),b
 21429  005FDA  0E99               	movlw	low ConvertTimeFromDiscrete@ret
 21430  005FDC  6F88               	movwf	?___asftadd& (0+255),b
 21431  005FDE  518E               	movf	ConvertTimeFromDiscrete@Seconds& (0+255),w,b
 21432  005FE0  EC8F  F03B         	call	___lbtoft
 21433  005FE4  C073  F08A         	movff	?___lbtoft,?___asftadd+2
 21434  005FE8  C074  F08B         	movff	?___lbtoft+1,?___asftadd+3
 21435  005FEC  C075  F08C         	movff	?___lbtoft+2,?___asftadd+4
 21436  005FF0  EC53  F03A         	call	___asftadd	;wreg free
 21437                           
 21438                           ; BSR set to: 0
 21439                           ;UserInterface.c: 441: dTemp = Milliseconds;
 21440  005FF4  C08F  F073         	movff	ConvertTimeFromDiscrete@Milliseconds,?___awtoft
 21441  005FF8  C090  F074         	movff	ConvertTimeFromDiscrete@Milliseconds+1,?___awtoft+1
 21442  005FFC  EC8F  F03A         	call	___awtoft	;wreg free
 21443  006000  C073  F092         	movff	?___awtoft,ConvertTimeFromDiscrete@dTemp
 21444  006004  C074  F093         	movff	?___awtoft+1,ConvertTimeFromDiscrete@dTemp+1
 21445  006008  C075  F094         	movff	?___awtoft+2,ConvertTimeFromDiscrete@dTemp+2
 21446                           
 21447                           ; BSR set to: 0
 21448                           ;UserInterface.c: 442: dTemp *= 0.001;
 21449  00600C  0E00               	movlw	high ConvertTimeFromDiscrete@dTemp
 21450  00600E  6F89               	movwf	(?___asftmul+1)& (0+255),b
 21451  006010  0E92               	movlw	low ConvertTimeFromDiscrete@dTemp
 21452  006012  6F88               	movwf	?___asftmul& (0+255),b
 21453  006014  0E12               	movlw	18
 21454  006016  6F8A               	movwf	(?___asftmul+2)& (0+255),b
 21455  006018  0E83               	movlw	131
 21456  00601A  6F8B               	movwf	(?___asftmul+3)& (0+255),b
 21457  00601C  0E3A               	movlw	58
 21458  00601E  6F8C               	movwf	(?___asftmul+4)& (0+255),b
 21459  006020  ECF9  F039         	call	___asftmul	;wreg free
 21460                           
 21461                           ; BSR set to: 0
 21462                           ;UserInterface.c: 443: ret += dTemp;
 21463  006024  0E00               	movlw	high ConvertTimeFromDiscrete@ret
 21464  006026  6F89               	movwf	(?___asftadd+1)& (0+255),b
 21465  006028  0E99               	movlw	low ConvertTimeFromDiscrete@ret
 21466  00602A  6F88               	movwf	?___asftadd& (0+255),b
 21467  00602C  C092  F08A         	movff	ConvertTimeFromDiscrete@dTemp,?___asftadd+2
 21468  006030  C093  F08B         	movff	ConvertTimeFromDiscrete@dTemp+1,?___asftadd+3
 21469  006034  C094  F08C         	movff	ConvertTimeFromDiscrete@dTemp+2,?___asftadd+4
 21470  006038  EC53  F03A         	call	___asftadd	;wreg free
 21471                           
 21472                           ; BSR set to: 0
 21473                           ;UserInterface.c: 445: return (ret);
 21474  00603C  C099  F08D         	movff	ConvertTimeFromDiscrete@ret,?_ConvertTimeFromDiscrete
 21475  006040  C09A  F08E         	movff	ConvertTimeFromDiscrete@ret+1,?_ConvertTimeFromDiscrete+1
 21476  006044  C09B  F08F         	movff	ConvertTimeFromDiscrete@ret+2,?_ConvertTimeFromDiscrete+2
 21477                           
 21478                           ; BSR set to: 0
 21479  006048  0012               	return	
 21480  00604A                     __end_of_ConvertTimeFromDiscrete:
 21481                           	opt stack 0
 21482  00604A                     PL21:
 21483  00604A  C06B  F095         	movff	?___lmul,ConvertTimeFromDiscrete@temp
 21484  00604E  C06C  F096         	movff	?___lmul+1,ConvertTimeFromDiscrete@temp+1
 21485  006052  C06D  F097         	movff	?___lmul+2,ConvertTimeFromDiscrete@temp+2
 21486  006056  C06E  F098         	movff	?___lmul+3,ConvertTimeFromDiscrete@temp+3
 21487  00605A  0E00               	movlw	high ConvertTimeFromDiscrete@ret
 21488  00605C  6F89               	movwf	(?___asftadd+1)& (0+255),b
 21489  00605E  0E99               	movlw	low ConvertTimeFromDiscrete@ret
 21490  006060  6F88               	movwf	?___asftadd& (0+255),b
 21491  006062  C095  F073         	movff	ConvertTimeFromDiscrete@temp,?___altoft
 21492  006066  C096  F074         	movff	ConvertTimeFromDiscrete@temp+1,?___altoft+1
 21493  00606A  C097  F075         	movff	ConvertTimeFromDiscrete@temp+2,?___altoft+2
 21494  00606E  C098  F076         	movff	ConvertTimeFromDiscrete@temp+3,?___altoft+3
 21495  006072  0012               	return	
 21496  006074                     PL38:
 21497  006074  6F95               	movwf	ConvertTimeFromDiscrete@temp& (0+255),b
 21498  006076  6B96               	clrf	(ConvertTimeFromDiscrete@temp+1)& (0+255),b
 21499  006078  6B97               	clrf	(ConvertTimeFromDiscrete@temp+2)& (0+255),b
 21500  00607A  6B98               	clrf	(ConvertTimeFromDiscrete@temp+3)& (0+255),b
 21501  00607C  C095  F06B         	movff	ConvertTimeFromDiscrete@temp,?___lmul
 21502  006080  C096  F06C         	movff	ConvertTimeFromDiscrete@temp+1,?___lmul+1
 21503  006084  C097  F06D         	movff	ConvertTimeFromDiscrete@temp+2,?___lmul+2
 21504  006088  C098  F06E         	movff	ConvertTimeFromDiscrete@temp+3,?___lmul+3
 21505  00608C  0012               	return	
 21506                           tblptru	equ	0xFF8
 21507                           tblptrh	equ	0xFF7
 21508                           tblptrl	equ	0xFF6
 21509                           tablat	equ	0xFF5
 21510                           prodh	equ	0xFF4
 21511                           prodl	equ	0xFF3
 21512                           intcon	equ	0xFF2
 21513                           intcon2	equ	0xFF1
 21514                           postinc0	equ	0xFEE
 21515                           wreg	equ	0xFE8
 21516                           postinc1	equ	0xFE6
 21517                           postdec1	equ	0xFE5
 21518                           fsr1h	equ	0xFE2
 21519                           fsr1l	equ	0xFE1
 21520                           indf2	equ	0xFDF
 21521                           postinc2	equ	0xFDE
 21522                           postdec2	equ	0xFDD
 21523                           fsr2h	equ	0xFDA
 21524                           fsr2l	equ	0xFD9
 21525                           status	equ	0xFD8
 21526                           
 21527 ;; *************** function ___aldiv *****************
 21528 ;; Defined at:
 21529 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\aldiv.c"
 21530 ;; Parameters:    Size  Location     Type
 21531 ;;  dividend        4   11[BANK0 ] long 
 21532 ;;  divisor         4   15[BANK0 ] long 
 21533 ;; Auto vars:     Size  Location     Type
 21534 ;;  quotient        4   21[BANK0 ] long 
 21535 ;;  sign            1   20[BANK0 ] unsigned char 
 21536 ;;  counter         1   19[BANK0 ] unsigned char 
 21537 ;; Return value:  Size  Location     Type
 21538 ;;                  4   11[BANK0 ] long 
 21539 ;; Registers used:
 21540 ;;		wreg, status,2, status,0
 21541 ;; Tracked objects:
 21542 ;;		On entry : F/0
 21543 ;;		On exit  : F/0
 21544 ;;		Unchanged: FFFFFFF0/0
 21545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21546 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21550 ;;Total ram usage:       14 bytes
 21551 ;; Hardware stack levels used:    1
 21552 ;; Hardware stack levels required when called:    3
 21553 ;; This function calls:
 21554 ;;		Nothing
 21555 ;; This function is called by:
 21556 ;;		_LCD_PrintFloat
 21557 ;;		_LCD_PrintLong
 21558 ;; This function uses a non-reentrant model
 21559 ;;
 21560                           
 21561                           	psect	text62
 21562  006702                     __ptext62:
 21563                           	opt stack 0
 21564  006702                     ___aldiv:
 21565                           	opt stack 25
 21566                           
 21567                           ; BSR set to: 0
 21568                           
 21569                           ; BSR set to: 0
 21570  006702  6B74               	clrf	___aldiv@sign& (0+255),b
 21571  006704  AF72               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 21572  006706  D00A               	goto	l15845
 21573                           
 21574                           ; BSR set to: 0
 21575  006708  1F72               	comf	(___aldiv@divisor+3)& (0+255),f,b
 21576  00670A  1F71               	comf	(___aldiv@divisor+2)& (0+255),f,b
 21577  00670C  1F70               	comf	(___aldiv@divisor+1)& (0+255),f,b
 21578  00670E  6D6F               	negf	___aldiv@divisor& (0+255),b
 21579  006710  0E00               	movlw	0
 21580  006712  2370               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 21581  006714  2371               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 21582  006716  2372               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 21583                           
 21584                           ; BSR set to: 0
 21585  006718  0E01               	movlw	1
 21586  00671A  6F74               	movwf	___aldiv@sign& (0+255),b
 21587  00671C                     l15845:
 21588                           
 21589                           ; BSR set to: 0
 21590  00671C  AF6E               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 21591  00671E  D00A               	goto	l15851
 21592                           
 21593                           ; BSR set to: 0
 21594  006720  1F6E               	comf	(___aldiv@dividend+3)& (0+255),f,b
 21595  006722  1F6D               	comf	(___aldiv@dividend+2)& (0+255),f,b
 21596  006724  1F6C               	comf	(___aldiv@dividend+1)& (0+255),f,b
 21597  006726  6D6B               	negf	___aldiv@dividend& (0+255),b
 21598  006728  0E00               	movlw	0
 21599  00672A  236C               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 21600  00672C  236D               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 21601  00672E  236E               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 21602                           
 21603                           ; BSR set to: 0
 21604  006730  0E01               	movlw	1
 21605  006732  1B74               	xorwf	___aldiv@sign& (0+255),f,b
 21606  006734                     l15851:
 21607                           
 21608                           ; BSR set to: 0
 21609  006734  6B75               	clrf	___aldiv@quotient& (0+255),b
 21610  006736  6B76               	clrf	(___aldiv@quotient+1)& (0+255),b
 21611  006738  6B77               	clrf	(___aldiv@quotient+2)& (0+255),b
 21612  00673A  6B78               	clrf	(___aldiv@quotient+3)& (0+255),b
 21613                           
 21614                           ; BSR set to: 0
 21615  00673C  5172               	movf	(___aldiv@divisor+3)& (0+255),w,b
 21616  00673E  116F               	iorwf	___aldiv@divisor& (0+255),w,b
 21617  006740  1170               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 21618  006742  1171               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 21619  006744  E029               	bz	l15873
 21620                           
 21621                           ; BSR set to: 0
 21622  006746  0E01               	movlw	1
 21623  006748  6F73               	movwf	___aldiv@counter& (0+255),b
 21624  00674A  D006               	goto	l15859
 21625  00674C                     l15857:
 21626                           
 21627                           ; BSR set to: 0
 21628  00674C  90D8               	bcf	status,0,c
 21629  00674E  376F               	rlcf	___aldiv@divisor& (0+255),f,b
 21630  006750  3770               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 21631  006752  3771               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 21632  006754  3772               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 21633  006756  2B73               	incf	___aldiv@counter& (0+255),f,b
 21634  006758                     l15859:
 21635                           
 21636                           ; BSR set to: 0
 21637  006758  AF72               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 21638  00675A  D7F8               	goto	l15857
 21639  00675C                     l15861:
 21640                           
 21641                           ; BSR set to: 0
 21642  00675C  90D8               	bcf	status,0,c
 21643  00675E  3775               	rlcf	___aldiv@quotient& (0+255),f,b
 21644  006760  3776               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 21645  006762  3777               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 21646  006764  3778               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 21647                           
 21648                           ; BSR set to: 0
 21649  006766  516F               	movf	___aldiv@divisor& (0+255),w,b
 21650  006768  5D6B               	subwf	___aldiv@dividend& (0+255),w,b
 21651  00676A  5170               	movf	(___aldiv@divisor+1)& (0+255),w,b
 21652  00676C  596C               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 21653  00676E  5171               	movf	(___aldiv@divisor+2)& (0+255),w,b
 21654  006770  596D               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 21655  006772  5172               	movf	(___aldiv@divisor+3)& (0+255),w,b
 21656  006774  596E               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 21657  006776  E309               	bnc	l15869
 21658                           
 21659                           ; BSR set to: 0
 21660  006778  516F               	movf	___aldiv@divisor& (0+255),w,b
 21661  00677A  5F6B               	subwf	___aldiv@dividend& (0+255),f,b
 21662  00677C  5170               	movf	(___aldiv@divisor+1)& (0+255),w,b
 21663  00677E  5B6C               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 21664  006780  5171               	movf	(___aldiv@divisor+2)& (0+255),w,b
 21665  006782  5B6D               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 21666  006784  5172               	movf	(___aldiv@divisor+3)& (0+255),w,b
 21667  006786  5B6E               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 21668                           
 21669                           ; BSR set to: 0
 21670  006788  8175               	bsf	___aldiv@quotient& (0+255),0,b
 21671  00678A                     l15869:
 21672                           
 21673                           ; BSR set to: 0
 21674  00678A  90D8               	bcf	status,0,c
 21675  00678C  3372               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 21676  00678E  3371               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 21677  006790  3370               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 21678  006792  336F               	rrcf	___aldiv@divisor& (0+255),f,b
 21679                           
 21680                           ; BSR set to: 0
 21681  006794  2F73               	decfsz	___aldiv@counter& (0+255),f,b
 21682  006796  D7E2               	goto	l15861
 21683  006798                     l15873:
 21684                           
 21685                           ; BSR set to: 0
 21686  006798  5174               	movf	___aldiv@sign& (0+255),w,b
 21687  00679A  E008               	bz	l15877
 21688                           
 21689                           ; BSR set to: 0
 21690  00679C  1F78               	comf	(___aldiv@quotient+3)& (0+255),f,b
 21691  00679E  1F77               	comf	(___aldiv@quotient+2)& (0+255),f,b
 21692  0067A0  1F76               	comf	(___aldiv@quotient+1)& (0+255),f,b
 21693  0067A2  6D75               	negf	___aldiv@quotient& (0+255),b
 21694  0067A4  0E00               	movlw	0
 21695  0067A6  2376               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 21696  0067A8  2377               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 21697  0067AA  2378               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 21698  0067AC                     l15877:
 21699                           
 21700                           ; BSR set to: 0
 21701  0067AC  C075  F06B         	movff	___aldiv@quotient,?___aldiv
 21702  0067B0  C076  F06C         	movff	___aldiv@quotient+1,?___aldiv+1
 21703  0067B4  C077  F06D         	movff	___aldiv@quotient+2,?___aldiv+2
 21704  0067B8  C078  F06E         	movff	___aldiv@quotient+3,?___aldiv+3
 21705                           
 21706                           ; BSR set to: 0
 21707  0067BC  0012               	return	
 21708  0067BE                     __end_of___aldiv:
 21709                           	opt stack 0
 21710                           tblptru	equ	0xFF8
 21711                           tblptrh	equ	0xFF7
 21712                           tblptrl	equ	0xFF6
 21713                           tablat	equ	0xFF5
 21714                           prodh	equ	0xFF4
 21715                           prodl	equ	0xFF3
 21716                           intcon	equ	0xFF2
 21717                           intcon2	equ	0xFF1
 21718                           postinc0	equ	0xFEE
 21719                           wreg	equ	0xFE8
 21720                           postinc1	equ	0xFE6
 21721                           postdec1	equ	0xFE5
 21722                           fsr1h	equ	0xFE2
 21723                           fsr1l	equ	0xFE1
 21724                           indf2	equ	0xFDF
 21725                           postinc2	equ	0xFDE
 21726                           postdec2	equ	0xFDD
 21727                           fsr2h	equ	0xFDA
 21728                           fsr2l	equ	0xFD9
 21729                           status	equ	0xFD8
 21730                           
 21731 ;; *************** function ___altoft *****************
 21732 ;; Defined at:
 21733 ;;		line 43 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\altoft.c"
 21734 ;; Parameters:    Size  Location     Type
 21735 ;;  c               4   19[BANK0 ] long 
 21736 ;; Auto vars:     Size  Location     Type
 21737 ;;  sign            1   28[BANK0 ] unsigned char 
 21738 ;;  exp             1   27[BANK0 ] unsigned char 
 21739 ;; Return value:  Size  Location     Type
 21740 ;;                  3   19[BANK0 ] float 
 21741 ;; Registers used:
 21742 ;;		wreg, status,2, status,0, cstack
 21743 ;; Tracked objects:
 21744 ;;		On entry : 0/1
 21745 ;;		On exit  : F/0
 21746 ;;		Unchanged: FFFFFFF0/0
 21747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21750 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21751 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21752 ;;Total ram usage:       10 bytes
 21753 ;; Hardware stack levels used:    1
 21754 ;; Hardware stack levels required when called:    4
 21755 ;; This function calls:
 21756 ;;		___ftpack
 21757 ;; This function is called by:
 21758 ;;		_ExtMode
 21759 ;;		_LCD_PrintFloat
 21760 ;;		_Idle
 21761 ;;		_GetCurrentLinearPosition
 21762 ;;		_GetCurrentAngle
 21763 ;;		_RunOrbitProgram
 21764 ;;		_ConvertTimeFromDiscrete
 21765 ;; This function uses a non-reentrant model
 21766 ;;
 21767                           
 21768                           	psect	text63
 21769  006E92                     __ptext63:
 21770                           	opt stack 0
 21771  006E92                     ___altoft:
 21772                           	opt stack 25
 21773                           
 21774                           ; BSR set to: 0
 21775  006E92  0100               	movlb	0	; () banked
 21776  006E94  6B7C               	clrf	___altoft@sign& (0+255),b
 21777                           
 21778                           ; BSR set to: 0
 21779  006E96  0E8E               	movlw	142
 21780  006E98  6F7B               	movwf	___altoft@exp& (0+255),b
 21781                           
 21782                           ; BSR set to: 0
 21783  006E9A  AF76               	btfss	(___altoft@c+3)& (0+255),7,b
 21784  006E9C  D011               	goto	l20507
 21785                           
 21786                           ; BSR set to: 0
 21787  006E9E  1F76               	comf	(___altoft@c+3)& (0+255),f,b
 21788  006EA0  1F75               	comf	(___altoft@c+2)& (0+255),f,b
 21789  006EA2  1F74               	comf	(___altoft@c+1)& (0+255),f,b
 21790  006EA4  6D73               	negf	___altoft@c& (0+255),b
 21791  006EA6  0E00               	movlw	0
 21792  006EA8  2374               	addwfc	(___altoft@c+1)& (0+255),f,b
 21793  006EAA  2375               	addwfc	(___altoft@c+2)& (0+255),f,b
 21794  006EAC  2376               	addwfc	(___altoft@c+3)& (0+255),f,b
 21795                           
 21796                           ; BSR set to: 0
 21797  006EAE  0E01               	movlw	1
 21798  006EB0  6F7C               	movwf	___altoft@sign& (0+255),b
 21799  006EB2  D006               	goto	l20507
 21800  006EB4                     l20505:
 21801                           
 21802                           ; BSR set to: 0
 21803  006EB4  90D8               	bcf	status,0,c
 21804  006EB6  3376               	rrcf	(___altoft@c+3)& (0+255),f,b
 21805  006EB8  3375               	rrcf	(___altoft@c+2)& (0+255),f,b
 21806  006EBA  3374               	rrcf	(___altoft@c+1)& (0+255),f,b
 21807  006EBC  3373               	rrcf	___altoft@c& (0+255),f,b
 21808  006EBE  2B7B               	incf	___altoft@exp& (0+255),f,b
 21809  006EC0                     l20507:
 21810                           
 21811                           ; BSR set to: 0
 21812  006EC0  6B77               	clrf	??___altoft& (0+255),b
 21813  006EC2  6B78               	clrf	(??___altoft+1)& (0+255),b
 21814  006EC4  6B79               	clrf	(??___altoft+2)& (0+255),b
 21815  006EC6  5176               	movf	(___altoft@c+3)& (0+255),w,b
 21816  006EC8  6F7A               	movwf	(??___altoft+3)& (0+255),b
 21817  006ECA  517A               	movf	(??___altoft+3)& (0+255),w,b
 21818  006ECC  1177               	iorwf	??___altoft& (0+255),w,b
 21819  006ECE  1178               	iorwf	(??___altoft+1)& (0+255),w,b
 21820  006ED0  1179               	iorwf	(??___altoft+2)& (0+255),w,b
 21821  006ED2  E1F0               	bnz	l20505
 21822                           
 21823                           ; BSR set to: 0
 21824  006ED4  C073  F06B         	movff	___altoft@c,?___ftpack
 21825  006ED8  C074  F06C         	movff	___altoft@c+1,?___ftpack+1
 21826  006EDC  C075  F06D         	movff	___altoft@c+2,?___ftpack+2
 21827  006EE0  C07B  F06E         	movff	___altoft@exp,?___ftpack+3
 21828  006EE4  C07C  F06F         	movff	___altoft@sign,?___ftpack+4
 21829  006EE8  ECDF  F034         	call	___ftpack	;wreg free
 21830  006EEC  C06B  F073         	movff	?___ftpack,?___altoft
 21831  006EF0  C06C  F074         	movff	?___ftpack+1,?___altoft+1
 21832  006EF4  C06D  F075         	movff	?___ftpack+2,?___altoft+2
 21833                           
 21834                           ; BSR set to: 0
 21835  006EF8  0012               	return	
 21836  006EFA                     __end_of___altoft:
 21837                           	opt stack 0
 21838                           tblptru	equ	0xFF8
 21839                           tblptrh	equ	0xFF7
 21840                           tblptrl	equ	0xFF6
 21841                           tablat	equ	0xFF5
 21842                           prodh	equ	0xFF4
 21843                           prodl	equ	0xFF3
 21844                           intcon	equ	0xFF2
 21845                           intcon2	equ	0xFF1
 21846                           postinc0	equ	0xFEE
 21847                           wreg	equ	0xFE8
 21848                           postinc1	equ	0xFE6
 21849                           postdec1	equ	0xFE5
 21850                           fsr1h	equ	0xFE2
 21851                           fsr1l	equ	0xFE1
 21852                           indf2	equ	0xFDF
 21853                           postinc2	equ	0xFDE
 21854                           postdec2	equ	0xFDD
 21855                           fsr2h	equ	0xFDA
 21856                           fsr2l	equ	0xFD9
 21857                           status	equ	0xFD8
 21858                           
 21859 ;; *************** function ___awdiv *****************
 21860 ;; Defined at:
 21861 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\awdiv.c"
 21862 ;; Parameters:    Size  Location     Type
 21863 ;;  dividend        2   11[BANK0 ] int 
 21864 ;;  divisor         2   13[BANK0 ] int 
 21865 ;; Auto vars:     Size  Location     Type
 21866 ;;  quotient        2   17[BANK0 ] int 
 21867 ;;  sign            1   16[BANK0 ] unsigned char 
 21868 ;;  counter         1   15[BANK0 ] unsigned char 
 21869 ;; Return value:  Size  Location     Type
 21870 ;;                  2   11[BANK0 ] int 
 21871 ;; Registers used:
 21872 ;;		wreg, status,2, status,0
 21873 ;; Tracked objects:
 21874 ;;		On entry : F/0
 21875 ;;		On exit  : F/0
 21876 ;;		Unchanged: FFFFFFF0/0
 21877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21878 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21879 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21881 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21882 ;;Total ram usage:        8 bytes
 21883 ;; Hardware stack levels used:    1
 21884 ;; Hardware stack levels required when called:    3
 21885 ;; This function calls:
 21886 ;;		Nothing
 21887 ;; This function is called by:
 21888 ;;		_PrintTime
 21889 ;; This function uses a non-reentrant model
 21890 ;;
 21891                           
 21892                           	psect	text64
 21893  006CD6                     __ptext64:
 21894                           	opt stack 0
 21895  006CD6                     ___awdiv:
 21896                           	opt stack 25
 21897                           
 21898                           ; BSR set to: 0
 21899                           
 21900                           ; BSR set to: 0
 21901  006CD6  6B70               	clrf	___awdiv@sign& (0+255),b
 21902  006CD8  AF6E               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 21903  006CDA  D006               	goto	l15905
 21904                           
 21905                           ; BSR set to: 0
 21906  006CDC  6D6D               	negf	___awdiv@divisor& (0+255),b
 21907  006CDE  1F6E               	comf	(___awdiv@divisor+1)& (0+255),f,b
 21908  006CE0  B0D8               	btfsc	status,0,c
 21909  006CE2  2B6E               	incf	(___awdiv@divisor+1)& (0+255),f,b
 21910                           
 21911                           ; BSR set to: 0
 21912  006CE4  0E01               	movlw	1
 21913  006CE6  6F70               	movwf	___awdiv@sign& (0+255),b
 21914  006CE8                     l15905:
 21915                           
 21916                           ; BSR set to: 0
 21917  006CE8  AF6C               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 21918  006CEA  D006               	goto	l15911
 21919                           
 21920                           ; BSR set to: 0
 21921  006CEC  6D6B               	negf	___awdiv@dividend& (0+255),b
 21922  006CEE  1F6C               	comf	(___awdiv@dividend+1)& (0+255),f,b
 21923  006CF0  B0D8               	btfsc	status,0,c
 21924  006CF2  2B6C               	incf	(___awdiv@dividend+1)& (0+255),f,b
 21925                           
 21926                           ; BSR set to: 0
 21927  006CF4  0E01               	movlw	1
 21928  006CF6  1B70               	xorwf	___awdiv@sign& (0+255),f,b
 21929  006CF8                     l15911:
 21930                           
 21931                           ; BSR set to: 0
 21932  006CF8  6B71               	clrf	___awdiv@quotient& (0+255),b
 21933  006CFA  6B72               	clrf	(___awdiv@quotient+1)& (0+255),b
 21934                           
 21935                           ; BSR set to: 0
 21936  006CFC  516E               	movf	(___awdiv@divisor+1)& (0+255),w,b
 21937  006CFE  116D               	iorwf	___awdiv@divisor& (0+255),w,b
 21938  006D00  E01B               	bz	l15933
 21939                           
 21940                           ; BSR set to: 0
 21941  006D02  0E01               	movlw	1
 21942  006D04  6F6F               	movwf	___awdiv@counter& (0+255),b
 21943  006D06  D004               	goto	l15919
 21944  006D08                     l15917:
 21945                           
 21946                           ; BSR set to: 0
 21947  006D08  90D8               	bcf	status,0,c
 21948  006D0A  376D               	rlcf	___awdiv@divisor& (0+255),f,b
 21949  006D0C  376E               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 21950  006D0E  2B6F               	incf	___awdiv@counter& (0+255),f,b
 21951  006D10                     l15919:
 21952                           
 21953                           ; BSR set to: 0
 21954  006D10  AF6E               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 21955  006D12  D7FA               	goto	l15917
 21956  006D14                     l15921:
 21957                           
 21958                           ; BSR set to: 0
 21959  006D14  90D8               	bcf	status,0,c
 21960  006D16  3771               	rlcf	___awdiv@quotient& (0+255),f,b
 21961  006D18  3772               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 21962                           
 21963                           ; BSR set to: 0
 21964  006D1A  516D               	movf	___awdiv@divisor& (0+255),w,b
 21965  006D1C  5D6B               	subwf	___awdiv@dividend& (0+255),w,b
 21966  006D1E  516E               	movf	(___awdiv@divisor+1)& (0+255),w,b
 21967  006D20  596C               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 21968  006D22  E305               	bnc	l15929
 21969                           
 21970                           ; BSR set to: 0
 21971  006D24  516D               	movf	___awdiv@divisor& (0+255),w,b
 21972  006D26  5F6B               	subwf	___awdiv@dividend& (0+255),f,b
 21973  006D28  516E               	movf	(___awdiv@divisor+1)& (0+255),w,b
 21974  006D2A  5B6C               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 21975                           
 21976                           ; BSR set to: 0
 21977  006D2C  8171               	bsf	___awdiv@quotient& (0+255),0,b
 21978  006D2E                     l15929:
 21979                           
 21980                           ; BSR set to: 0
 21981  006D2E  90D8               	bcf	status,0,c
 21982  006D30  336E               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 21983  006D32  336D               	rrcf	___awdiv@divisor& (0+255),f,b
 21984                           
 21985                           ; BSR set to: 0
 21986  006D34  2F6F               	decfsz	___awdiv@counter& (0+255),f,b
 21987  006D36  D7EE               	goto	l15921
 21988  006D38                     l15933:
 21989                           
 21990                           ; BSR set to: 0
 21991  006D38  5170               	movf	___awdiv@sign& (0+255),w,b
 21992  006D3A  E004               	bz	l15937
 21993                           
 21994                           ; BSR set to: 0
 21995  006D3C  6D71               	negf	___awdiv@quotient& (0+255),b
 21996  006D3E  1F72               	comf	(___awdiv@quotient+1)& (0+255),f,b
 21997  006D40  B0D8               	btfsc	status,0,c
 21998  006D42  2B72               	incf	(___awdiv@quotient+1)& (0+255),f,b
 21999  006D44                     l15937:
 22000                           
 22001                           ; BSR set to: 0
 22002  006D44  C071  F06B         	movff	___awdiv@quotient,?___awdiv
 22003  006D48  C072  F06C         	movff	___awdiv@quotient+1,?___awdiv+1
 22004                           
 22005                           ; BSR set to: 0
 22006  006D4C  0012               	return	
 22007  006D4E                     __end_of___awdiv:
 22008                           	opt stack 0
 22009                           tblptru	equ	0xFF8
 22010                           tblptrh	equ	0xFF7
 22011                           tblptrl	equ	0xFF6
 22012                           tablat	equ	0xFF5
 22013                           prodh	equ	0xFF4
 22014                           prodl	equ	0xFF3
 22015                           intcon	equ	0xFF2
 22016                           intcon2	equ	0xFF1
 22017                           postinc0	equ	0xFEE
 22018                           wreg	equ	0xFE8
 22019                           postinc1	equ	0xFE6
 22020                           postdec1	equ	0xFE5
 22021                           fsr1h	equ	0xFE2
 22022                           fsr1l	equ	0xFE1
 22023                           indf2	equ	0xFDF
 22024                           postinc2	equ	0xFDE
 22025                           postdec2	equ	0xFDD
 22026                           fsr2h	equ	0xFDA
 22027                           fsr2l	equ	0xFD9
 22028                           status	equ	0xFD8
 22029                           
 22030 ;; *************** function ___awtoft *****************
 22031 ;; Defined at:
 22032 ;;		line 33 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\awtoft.c"
 22033 ;; Parameters:    Size  Location     Type
 22034 ;;  c               2   19[BANK0 ] int 
 22035 ;; Auto vars:     Size  Location     Type
 22036 ;;  sign            1   22[BANK0 ] unsigned char 
 22037 ;; Return value:  Size  Location     Type
 22038 ;;                  3   19[BANK0 ] float 
 22039 ;; Registers used:
 22040 ;;		wreg, status,2, status,0, cstack
 22041 ;; Tracked objects:
 22042 ;;		On entry : D/0
 22043 ;;		On exit  : F/0
 22044 ;;		Unchanged: FFFFFFF0/0
 22045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22046 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22050 ;;Total ram usage:        4 bytes
 22051 ;; Hardware stack levels used:    1
 22052 ;; Hardware stack levels required when called:    4
 22053 ;; This function calls:
 22054 ;;		___ftpack
 22055 ;; This function is called by:
 22056 ;;		_ExtMode
 22057 ;;		_ConvertTimeFromDiscrete
 22058 ;;		_RunWaypointProgram
 22059 ;; This function uses a non-reentrant model
 22060 ;;
 22061                           
 22062                           	psect	text65
 22063  00751E                     __ptext65:
 22064                           	opt stack 0
 22065  00751E                     ___awtoft:
 22066                           	opt stack 25
 22067                           
 22068                           ; BSR set to: 0
 22069  00751E  0100               	movlb	0	; () banked
 22070  007520  6B76               	clrf	___awtoft@sign& (0+255),b
 22071  007522  AF74               	btfss	(___awtoft@c+1)& (0+255),7,b
 22072  007524  D006               	goto	l20519
 22073                           
 22074                           ; BSR set to: 0
 22075  007526  6D73               	negf	___awtoft@c& (0+255),b
 22076  007528  1F74               	comf	(___awtoft@c+1)& (0+255),f,b
 22077  00752A  B0D8               	btfsc	status,0,c
 22078  00752C  2B74               	incf	(___awtoft@c+1)& (0+255),f,b
 22079                           
 22080                           ; BSR set to: 0
 22081  00752E  0E01               	movlw	1
 22082  007530  6F76               	movwf	___awtoft@sign& (0+255),b
 22083  007532                     l20519:
 22084                           
 22085                           ; BSR set to: 0
 22086  007532  C073  F06B         	movff	___awtoft@c,?___ftpack
 22087  007536  C074  F06C         	movff	___awtoft@c+1,?___ftpack+1
 22088  00753A  6B6D               	clrf	(?___ftpack+2)& (0+255),b
 22089  00753C  0E8E               	movlw	142
 22090  00753E  6F6E               	movwf	(?___ftpack+3)& (0+255),b
 22091  007540  C076  F06F         	movff	___awtoft@sign,?___ftpack+4
 22092  007544  ECDF  F034         	call	___ftpack	;wreg free
 22093  007548  C06B  F073         	movff	?___ftpack,?___awtoft
 22094  00754C  C06C  F074         	movff	?___ftpack+1,?___awtoft+1
 22095  007550  C06D  F075         	movff	?___ftpack+2,?___awtoft+2
 22096                           
 22097                           ; BSR set to: 0
 22098  007554  0012               	return	
 22099  007556                     __end_of___awtoft:
 22100                           	opt stack 0
 22101                           tblptru	equ	0xFF8
 22102                           tblptrh	equ	0xFF7
 22103                           tblptrl	equ	0xFF6
 22104                           tablat	equ	0xFF5
 22105                           prodh	equ	0xFF4
 22106                           prodl	equ	0xFF3
 22107                           intcon	equ	0xFF2
 22108                           intcon2	equ	0xFF1
 22109                           postinc0	equ	0xFEE
 22110                           wreg	equ	0xFE8
 22111                           postinc1	equ	0xFE6
 22112                           postdec1	equ	0xFE5
 22113                           fsr1h	equ	0xFE2
 22114                           fsr1l	equ	0xFE1
 22115                           indf2	equ	0xFDF
 22116                           postinc2	equ	0xFDE
 22117                           postdec2	equ	0xFDD
 22118                           fsr2h	equ	0xFDA
 22119                           fsr2l	equ	0xFD9
 22120                           status	equ	0xFD8
 22121                           
 22122 ;; *************** function ___ftge *****************
 22123 ;; Defined at:
 22124 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftge.c"
 22125 ;; Parameters:    Size  Location     Type
 22126 ;;  ff1             3   40[BANK0 ] float 
 22127 ;;  ff2             3   43[BANK0 ] float 
 22128 ;; Auto vars:     Size  Location     Type
 22129 ;;		None
 22130 ;; Return value:  Size  Location     Type
 22131 ;;		None               void
 22132 ;; Registers used:
 22133 ;;		wreg, status,2, status,0
 22134 ;; Tracked objects:
 22135 ;;		On entry : F/0
 22136 ;;		On exit  : F/0
 22137 ;;		Unchanged: FFFFFFF0/0
 22138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22139 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22141 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;Total ram usage:        9 bytes
 22144 ;; Hardware stack levels used:    1
 22145 ;; Hardware stack levels required when called:    3
 22146 ;; This function calls:
 22147 ;;		Nothing
 22148 ;; This function is called by:
 22149 ;;		_GoToSleep
 22150 ;;		_MinTimeToMove
 22151 ;;		_SpeedRequiredToMoveInTime
 22152 ;;		_GetCurrentAngle
 22153 ;;		_MoveToAngle
 22154 ;;		_MoveAdvanced
 22155 ;;		_CreateOrbitProgram
 22156 ;;		_RealtimeMode
 22157 ;;		_GetFloat
 22158 ;;		_GetTime
 22159 ;;		_CreateWaypointProgram
 22160 ;;		_sqrt
 22161 ;; This function uses a non-reentrant model
 22162 ;;
 22163                           
 22164                           	psect	text66
 22165  006F62                     __ptext66:
 22166                           	opt stack 0
 22167  006F62                     ___ftge:
 22168                           	opt stack 25
 22169                           
 22170                           ; BSR set to: 0
 22171                           
 22172                           ; BSR set to: 0
 22173  006F62  AF8A               	btfss	(___ftge@ff1+2)& (0+255),7,b
 22174  006F64  D00D               	goto	l20627
 22175                           
 22176                           ; BSR set to: 0
 22177  006F66  6B8E               	clrf	??___ftge& (0+255),b
 22178  006F68  6B8F               	clrf	(??___ftge+1)& (0+255),b
 22179  006F6A  0E80               	movlw	128
 22180  006F6C  6F90               	movwf	(??___ftge+2)& (0+255),b
 22181  006F6E  5188               	movf	___ftge@ff1& (0+255),w,b
 22182  006F70  5D8E               	subwf	??___ftge& (0+255),w,b
 22183  006F72  6F88               	movwf	___ftge@ff1& (0+255),b
 22184  006F74  5189               	movf	(___ftge@ff1+1)& (0+255),w,b
 22185  006F76  598F               	subwfb	(??___ftge+1)& (0+255),w,b
 22186  006F78  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
 22187  006F7A  518A               	movf	(___ftge@ff1+2)& (0+255),w,b
 22188  006F7C  5990               	subwfb	(??___ftge+2)& (0+255),w,b
 22189  006F7E  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
 22190  006F80                     l20627:
 22191                           
 22192                           ; BSR set to: 0
 22193  006F80  AF8D               	btfss	(___ftge@ff2+2)& (0+255),7,b
 22194  006F82  D00D               	goto	l20631
 22195                           
 22196                           ; BSR set to: 0
 22197  006F84  6B8E               	clrf	??___ftge& (0+255),b
 22198  006F86  6B8F               	clrf	(??___ftge+1)& (0+255),b
 22199  006F88  0E80               	movlw	128
 22200  006F8A  6F90               	movwf	(??___ftge+2)& (0+255),b
 22201  006F8C  518B               	movf	___ftge@ff2& (0+255),w,b
 22202  006F8E  5D8E               	subwf	??___ftge& (0+255),w,b
 22203  006F90  6F8B               	movwf	___ftge@ff2& (0+255),b
 22204  006F92  518C               	movf	(___ftge@ff2+1)& (0+255),w,b
 22205  006F94  598F               	subwfb	(??___ftge+1)& (0+255),w,b
 22206  006F96  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 22207  006F98  518D               	movf	(___ftge@ff2+2)& (0+255),w,b
 22208  006F9A  5990               	subwfb	(??___ftge+2)& (0+255),w,b
 22209  006F9C  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 22210  006F9E                     l20631:
 22211                           
 22212                           ; BSR set to: 0
 22213  006F9E  0E80               	movlw	128
 22214  006FA0  1B8A               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 22215                           
 22216                           ; BSR set to: 0
 22217  006FA2  1B8D               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 22218  006FA4  518B               	movf	___ftge@ff2& (0+255),w,b
 22219  006FA6  5D88               	subwf	___ftge@ff1& (0+255),w,b
 22220  006FA8  518C               	movf	(___ftge@ff2+1)& (0+255),w,b
 22221  006FAA  5989               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 22222  006FAC  518D               	movf	(___ftge@ff2+2)& (0+255),w,b
 22223  006FAE  598A               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 22224  006FB0  E202               	bc	l20637
 22225                           
 22226                           ; BSR set to: 0
 22227  006FB2  90D8               	bcf	status,0,c
 22228  006FB4  0012               	return	
 22229  006FB6                     l20637:
 22230                           
 22231                           ; BSR set to: 0
 22232  006FB6  80D8               	bsf	status,0,c
 22233                           
 22234                           ; BSR set to: 0
 22235  006FB8  0012               	return	
 22236  006FBA                     __end_of___ftge:
 22237                           	opt stack 0
 22238                           tblptru	equ	0xFF8
 22239                           tblptrh	equ	0xFF7
 22240                           tblptrl	equ	0xFF6
 22241                           tablat	equ	0xFF5
 22242                           prodh	equ	0xFF4
 22243                           prodl	equ	0xFF3
 22244                           intcon	equ	0xFF2
 22245                           intcon2	equ	0xFF1
 22246                           postinc0	equ	0xFEE
 22247                           wreg	equ	0xFE8
 22248                           postinc1	equ	0xFE6
 22249                           postdec1	equ	0xFE5
 22250                           fsr1h	equ	0xFE2
 22251                           fsr1l	equ	0xFE1
 22252                           indf2	equ	0xFDF
 22253                           postinc2	equ	0xFDE
 22254                           postdec2	equ	0xFDD
 22255                           fsr2h	equ	0xFDA
 22256                           fsr2l	equ	0xFD9
 22257                           status	equ	0xFD8
 22258                           
 22259 ;; *************** function ___ftneg *****************
 22260 ;; Defined at:
 22261 ;;		line 16 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftneg.c"
 22262 ;; Parameters:    Size  Location     Type
 22263 ;;  f1              3   11[BANK0 ] float 
 22264 ;; Auto vars:     Size  Location     Type
 22265 ;;		None
 22266 ;; Return value:  Size  Location     Type
 22267 ;;                  3   11[BANK0 ] float 
 22268 ;; Registers used:
 22269 ;;		wreg, status,2, status,0
 22270 ;; Tracked objects:
 22271 ;;		On entry : A/0
 22272 ;;		On exit  : F/0
 22273 ;;		Unchanged: FFFFFFF0/0
 22274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22275 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22278 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22279 ;;Total ram usage:        3 bytes
 22280 ;; Hardware stack levels used:    1
 22281 ;; Hardware stack levels required when called:    3
 22282 ;; This function calls:
 22283 ;;		Nothing
 22284 ;; This function is called by:
 22285 ;;		_MinTimeToMove
 22286 ;;		_MoveToAngle
 22287 ;;		_MoveAdvanced
 22288 ;;		_RunOrbitProgram
 22289 ;;		_RealtimeMode
 22290 ;;		_RunWaypointProgram
 22291 ;; This function uses a non-reentrant model
 22292 ;;
 22293                           
 22294                           	psect	text67
 22295  0077DA                     __ptext67:
 22296                           	opt stack 0
 22297  0077DA                     ___ftneg:
 22298                           	opt stack 25
 22299                           
 22300                           ; BSR set to: 0
 22301  0077DA  0E7F               	movlw	127
 22302  0077DC  0100               	movlb	0	; () banked
 22303  0077DE  156D               	andwf	(___ftneg@f1+2)& (0+255),w,b
 22304  0077E0  116C               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 22305  0077E2  116B               	iorwf	___ftneg@f1& (0+255),w,b
 22306  0077E4  E002               	bz	l2956
 22307                           
 22308                           ; BSR set to: 0
 22309  0077E6  0E80               	movlw	128
 22310  0077E8  1B6D               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 22311  0077EA                     l2956:
 22312                           
 22313                           ; BSR set to: 0
 22314  0077EA  C06B  F06B         	movff	___ftneg@f1,?___ftneg
 22315  0077EE  C06C  F06C         	movff	___ftneg@f1+1,?___ftneg+1
 22316  0077F2  C06D  F06D         	movff	___ftneg@f1+2,?___ftneg+2
 22317                           
 22318                           ; BSR set to: 0
 22319  0077F6  0012               	return	
 22320  0077F8                     __end_of___ftneg:
 22321                           	opt stack 0
 22322                           tblptru	equ	0xFF8
 22323                           tblptrh	equ	0xFF7
 22324                           tblptrl	equ	0xFF6
 22325                           tablat	equ	0xFF5
 22326                           prodh	equ	0xFF4
 22327                           prodl	equ	0xFF3
 22328                           intcon	equ	0xFF2
 22329                           intcon2	equ	0xFF1
 22330                           postinc0	equ	0xFEE
 22331                           wreg	equ	0xFE8
 22332                           postinc1	equ	0xFE6
 22333                           postdec1	equ	0xFE5
 22334                           fsr1h	equ	0xFE2
 22335                           fsr1l	equ	0xFE1
 22336                           indf2	equ	0xFDF
 22337                           postinc2	equ	0xFDE
 22338                           postdec2	equ	0xFDD
 22339                           fsr2h	equ	0xFDA
 22340                           fsr2l	equ	0xFD9
 22341                           status	equ	0xFD8
 22342                           
 22343 ;; *************** function ___fttol *****************
 22344 ;; Defined at:
 22345 ;;		line 45 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\fttol.c"
 22346 ;; Parameters:    Size  Location     Type
 22347 ;;  f1              3   74[BANK0 ] float 
 22348 ;; Auto vars:     Size  Location     Type
 22349 ;;  lval            4   84[BANK0 ] unsigned long 
 22350 ;;  exp1            1   88[BANK0 ] unsigned char 
 22351 ;;  sign1           1   83[BANK0 ] unsigned char 
 22352 ;; Return value:  Size  Location     Type
 22353 ;;                  4   74[BANK0 ] long 
 22354 ;; Registers used:
 22355 ;;		wreg, status,2, status,0
 22356 ;; Tracked objects:
 22357 ;;		On entry : E/0
 22358 ;;		On exit  : F/0
 22359 ;;		Unchanged: FFFFFFF0/0
 22360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22361 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22362 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22363 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22365 ;;Total ram usage:       15 bytes
 22366 ;; Hardware stack levels used:    1
 22367 ;; Hardware stack levels required when called:    3
 22368 ;; This function calls:
 22369 ;;		Nothing
 22370 ;; This function is called by:
 22371 ;;		_LCD_PrintFloat
 22372 ;;		_MoveAdvanced
 22373 ;;		_CreateOrbitProgram
 22374 ;;		_RealtimeMode
 22375 ;;		_ConvertTimeToDiscrete
 22376 ;;		_CreateWaypointProgram
 22377 ;; This function uses a non-reentrant model
 22378 ;;
 22379                           
 22380                           	psect	text68
 22381  006876                     __ptext68:
 22382                           	opt stack 0
 22383  006876                     ___fttol:
 22384                           	opt stack 25
 22385                           
 22386                           ; BSR set to: 0
 22387  006876  0E0F               	movlw	15
 22388  006878  0100               	movlb	0	; () banked
 22389  00687A  D844               	call	PL32	;call to abstracted procedure
 22390  00687C  6FB8               	movwf	___fttol@exp1& (0+255),b
 22391  00687E  0100               	movlb	0	; () banked
 22392  006880  67B8               	tstfsz	___fttol@exp1& (0+255),b
 22393  006882  D005               	goto	l20699
 22394  006884                     l20697:
 22395                           
 22396                           ; BSR set to: 0
 22397  006884  6BAA               	clrf	?___fttol& (0+255),b
 22398  006886  6BAB               	clrf	(?___fttol+1)& (0+255),b
 22399  006888  6BAC               	clrf	(?___fttol+2)& (0+255),b
 22400  00688A  6BAD               	clrf	(?___fttol+3)& (0+255),b
 22401  00688C  0012               	return	
 22402  00688E                     l20699:
 22403                           
 22404                           ; BSR set to: 0
 22405  00688E  0E17               	movlw	23
 22406  006890  D839               	call	PL32	;call to abstracted procedure
 22407  006892  6FB3               	movwf	___fttol@sign1& (0+255),b
 22408                           
 22409                           ; BSR set to: 0
 22410  006894  8FAB               	bsf	(___fttol@f1+1)& (0+255),7,b
 22411                           
 22412                           ; BSR set to: 0
 22413  006896  6BAC               	clrf	(___fttol@f1+2)& (0+255),b
 22414                           
 22415                           ; BSR set to: 0
 22416  006898  51AA               	movf	___fttol@f1& (0+255),w,b
 22417  00689A  6FB4               	movwf	___fttol@lval& (0+255),b
 22418  00689C  51AB               	movf	(___fttol@f1+1)& (0+255),w,b
 22419  00689E  6FB5               	movwf	(___fttol@lval+1)& (0+255),b
 22420  0068A0  51AC               	movf	(___fttol@f1+2)& (0+255),w,b
 22421  0068A2  6FB6               	movwf	(___fttol@lval+2)& (0+255),b
 22422  0068A4  6BB7               	clrf	(___fttol@lval+3)& (0+255),b
 22423                           
 22424                           ; BSR set to: 0
 22425  0068A6  0E8E               	movlw	142
 22426  0068A8  5FB8               	subwf	___fttol@exp1& (0+255),f,b
 22427                           
 22428                           ; BSR set to: 0
 22429  0068AA  AFB8               	btfss	___fttol@exp1& (0+255),7,b
 22430  0068AC  D00C               	goto	l20719
 22431                           
 22432                           ; BSR set to: 0
 22433  0068AE  51B8               	movf	___fttol@exp1& (0+255),w,b
 22434  0068B0  0A80               	xorlw	128
 22435  0068B2  0F8F               	addlw	143
 22436  0068B4  E3E7               	bnc	l20697
 22437  0068B6                     l20715:
 22438                           
 22439                           ; BSR set to: 0
 22440  0068B6  90D8               	bcf	status,0,c
 22441  0068B8  33B7               	rrcf	(___fttol@lval+3)& (0+255),f,b
 22442  0068BA  33B6               	rrcf	(___fttol@lval+2)& (0+255),f,b
 22443  0068BC  33B5               	rrcf	(___fttol@lval+1)& (0+255),f,b
 22444  0068BE  33B4               	rrcf	___fttol@lval& (0+255),f,b
 22445                           
 22446                           ; BSR set to: 0
 22447  0068C0  3FB8               	incfsz	___fttol@exp1& (0+255),f,b
 22448  0068C2  D7F9               	goto	l20715
 22449  0068C4  D00C               	goto	l20727
 22450  0068C6                     l20719:
 22451                           
 22452                           ; BSR set to: 0
 22453  0068C6  0E17               	movlw	23
 22454  0068C8  65B8               	cpfsgt	___fttol@exp1& (0+255),b
 22455  0068CA  D007               	goto	l20725
 22456  0068CC  D7DB               	goto	l20697
 22457  0068CE                     l20723:
 22458                           
 22459                           ; BSR set to: 0
 22460  0068CE  90D8               	bcf	status,0,c
 22461  0068D0  37B4               	rlcf	___fttol@lval& (0+255),f,b
 22462  0068D2  37B5               	rlcf	(___fttol@lval+1)& (0+255),f,b
 22463  0068D4  37B6               	rlcf	(___fttol@lval+2)& (0+255),f,b
 22464  0068D6  37B7               	rlcf	(___fttol@lval+3)& (0+255),f,b
 22465  0068D8  07B8               	decf	___fttol@exp1& (0+255),f,b
 22466  0068DA                     l20725:
 22467                           
 22468                           ; BSR set to: 0
 22469  0068DA  67B8               	tstfsz	___fttol@exp1& (0+255),b
 22470  0068DC  D7F8               	goto	l20723
 22471  0068DE                     l20727:
 22472                           
 22473                           ; BSR set to: 0
 22474  0068DE  51B3               	movf	___fttol@sign1& (0+255),w,b
 22475  0068E0  E008               	bz	l20731
 22476                           
 22477                           ; BSR set to: 0
 22478  0068E2  1FB7               	comf	(___fttol@lval+3)& (0+255),f,b
 22479  0068E4  1FB6               	comf	(___fttol@lval+2)& (0+255),f,b
 22480  0068E6  1FB5               	comf	(___fttol@lval+1)& (0+255),f,b
 22481  0068E8  6DB4               	negf	___fttol@lval& (0+255),b
 22482  0068EA  0E00               	movlw	0
 22483  0068EC  23B5               	addwfc	(___fttol@lval+1)& (0+255),f,b
 22484  0068EE  23B6               	addwfc	(___fttol@lval+2)& (0+255),f,b
 22485  0068F0  23B7               	addwfc	(___fttol@lval+3)& (0+255),f,b
 22486  0068F2                     l20731:
 22487                           
 22488                           ; BSR set to: 0
 22489  0068F2  C0B4  F0AA         	movff	___fttol@lval,?___fttol
 22490  0068F6  C0B5  F0AB         	movff	___fttol@lval+1,?___fttol+1
 22491  0068FA  C0B6  F0AC         	movff	___fttol@lval+2,?___fttol+2
 22492  0068FE  C0B7  F0AD         	movff	___fttol@lval+3,?___fttol+3
 22493                           
 22494                           ; BSR set to: 0
 22495  006902  0012               	return	
 22496  006904                     __end_of___fttol:
 22497                           	opt stack 0
 22498  006904                     PL32:
 22499  006904  6FAE               	movwf	??___fttol& (0+255),b
 22500  006906  C0AA  F0AF         	movff	___fttol@f1,??___fttol+1
 22501  00690A  C0AB  F0B0         	movff	___fttol@f1+1,??___fttol+2
 22502  00690E  C0AC  F0B1         	movff	___fttol@f1+2,??___fttol+3
 22503  006912  29AE               	incf	??___fttol& (0+255),w,b
 22504  006914  6FB2               	movwf	(??___fttol+4)& (0+255),b
 22505  006916  D004               	goto	u13260
 22506  006918                     u13265:
 22507  006918  90D8               	bcf	status,0,c
 22508  00691A  33B1               	rrcf	(??___fttol+3)& (0+255),f,b
 22509  00691C  33B0               	rrcf	(??___fttol+2)& (0+255),f,b
 22510  00691E  33AF               	rrcf	(??___fttol+1)& (0+255),f,b
 22511  006920                     u13260:
 22512  006920  2FB2               	decfsz	(??___fttol+4)& (0+255),f,b
 22513  006922  D7FA               	goto	u13265
 22514  006924  51AF               	movf	(??___fttol+1)& (0+255),w,b
 22515  006926  0012               	return	
 22516                           tblptru	equ	0xFF8
 22517                           tblptrh	equ	0xFF7
 22518                           tblptrl	equ	0xFF6
 22519                           tablat	equ	0xFF5
 22520                           prodh	equ	0xFF4
 22521                           prodl	equ	0xFF3
 22522                           intcon	equ	0xFF2
 22523                           intcon2	equ	0xFF1
 22524                           postinc0	equ	0xFEE
 22525                           wreg	equ	0xFE8
 22526                           postinc1	equ	0xFE6
 22527                           postdec1	equ	0xFE5
 22528                           fsr1h	equ	0xFE2
 22529                           fsr1l	equ	0xFE1
 22530                           indf2	equ	0xFDF
 22531                           postinc2	equ	0xFDE
 22532                           postdec2	equ	0xFDD
 22533                           fsr2h	equ	0xFDA
 22534                           fsr2l	equ	0xFD9
 22535                           status	equ	0xFD8
 22536                           
 22537 ;; *************** function ___lbtoft *****************
 22538 ;; Defined at:
 22539 ;;		line 28 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lbtoft.c"
 22540 ;; Parameters:    Size  Location     Type
 22541 ;;  c               1    wreg     unsigned char 
 22542 ;; Auto vars:     Size  Location     Type
 22543 ;;  c               1   22[BANK0 ] unsigned char 
 22544 ;; Return value:  Size  Location     Type
 22545 ;;                  3   19[BANK0 ] float 
 22546 ;; Registers used:
 22547 ;;		wreg, status,2, status,0, cstack
 22548 ;; Tracked objects:
 22549 ;;		On entry : 0/0
 22550 ;;		On exit  : F/0
 22551 ;;		Unchanged: FFFFFFF0/0
 22552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22556 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22557 ;;Total ram usage:        4 bytes
 22558 ;; Hardware stack levels used:    1
 22559 ;; Hardware stack levels required when called:    4
 22560 ;; This function calls:
 22561 ;;		___ftpack
 22562 ;; This function is called by:
 22563 ;;		_RealtimeMode
 22564 ;;		_GetFloat
 22565 ;;		_ConvertTimeToDiscrete
 22566 ;;		_ConvertTimeFromDiscrete
 22567 ;; This function uses a non-reentrant model
 22568 ;;
 22569                           
 22570                           	psect	text69
 22571  00771E                     __ptext69:
 22572                           	opt stack 0
 22573  00771E                     ___lbtoft:
 22574                           	opt stack 23
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;___lbtoft@c stored from wreg
 22578  00771E  CFE8 F076          	movff	wreg,___lbtoft@c
 22579  007722  0100               	movlb	0	; () banked
 22580  007724  5176               	movf	___lbtoft@c& (0+255),w,b
 22581  007726  6F6B               	movwf	?___ftpack& (0+255),b
 22582  007728  6B6C               	clrf	(?___ftpack+1)& (0+255),b
 22583  00772A  6B6D               	clrf	(?___ftpack+2)& (0+255),b
 22584  00772C  0E8E               	movlw	142
 22585  00772E  6F6E               	movwf	(?___ftpack+3)& (0+255),b
 22586  007730  0E00               	movlw	0
 22587  007732  6B6F               	clrf	(?___ftpack+4)& (0+255),b
 22588  007734  ECDF  F034         	call	___ftpack	;wreg free
 22589  007738  C06B  F073         	movff	?___ftpack,?___lbtoft
 22590  00773C  C06C  F074         	movff	?___ftpack+1,?___lbtoft+1
 22591  007740  C06D  F075         	movff	?___ftpack+2,?___lbtoft+2
 22592                           
 22593                           ; BSR set to: 0
 22594  007744  0012               	return	
 22595  007746                     __end_of___lbtoft:
 22596                           	opt stack 0
 22597                           tblptru	equ	0xFF8
 22598                           tblptrh	equ	0xFF7
 22599                           tblptrl	equ	0xFF6
 22600                           tablat	equ	0xFF5
 22601                           prodh	equ	0xFF4
 22602                           prodl	equ	0xFF3
 22603                           intcon	equ	0xFF2
 22604                           intcon2	equ	0xFF1
 22605                           postinc0	equ	0xFEE
 22606                           wreg	equ	0xFE8
 22607                           postinc1	equ	0xFE6
 22608                           postdec1	equ	0xFE5
 22609                           fsr1h	equ	0xFE2
 22610                           fsr1l	equ	0xFE1
 22611                           indf2	equ	0xFDF
 22612                           postinc2	equ	0xFDE
 22613                           postdec2	equ	0xFDD
 22614                           fsr2h	equ	0xFDA
 22615                           fsr2l	equ	0xFD9
 22616                           status	equ	0xFD8
 22617                           
 22618 ;; *************** function ___lltoft *****************
 22619 ;; Defined at:
 22620 ;;		line 36 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lltoft.c"
 22621 ;; Parameters:    Size  Location     Type
 22622 ;;  c               4   19[BANK0 ] unsigned long 
 22623 ;; Auto vars:     Size  Location     Type
 22624 ;;  exp             1   27[BANK0 ] unsigned char 
 22625 ;; Return value:  Size  Location     Type
 22626 ;;                  3   19[BANK0 ] float 
 22627 ;; Registers used:
 22628 ;;		wreg, status,2, status,0, cstack
 22629 ;; Tracked objects:
 22630 ;;		On entry : 0/0
 22631 ;;		On exit  : F/0
 22632 ;;		Unchanged: FFFFFFF0/0
 22633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22634 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22636 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22637 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;Total ram usage:        9 bytes
 22639 ;; Hardware stack levels used:    1
 22640 ;; Hardware stack levels required when called:    4
 22641 ;; This function calls:
 22642 ;;		___ftpack
 22643 ;; This function is called by:
 22644 ;;		_ExtMode
 22645 ;;		_Idle
 22646 ;;		_Now
 22647 ;; This function uses a non-reentrant model
 22648 ;;
 22649                           
 22650                           	psect	text70
 22651  007062                     __ptext70:
 22652                           	opt stack 0
 22653  007062                     ___lltoft:
 22654                           	opt stack 25
 22655                           
 22656                           ; BSR set to: 0
 22657  007062  0E8E               	movlw	142
 22658  007064  0100               	movlb	0	; () banked
 22659  007066  6F7B               	movwf	___lltoft@exp& (0+255),b
 22660  007068  D006               	goto	l20743
 22661  00706A                     l20741:
 22662                           
 22663                           ; BSR set to: 0
 22664  00706A  90D8               	bcf	status,0,c
 22665  00706C  3376               	rrcf	(___lltoft@c+3)& (0+255),f,b
 22666  00706E  3375               	rrcf	(___lltoft@c+2)& (0+255),f,b
 22667  007070  3374               	rrcf	(___lltoft@c+1)& (0+255),f,b
 22668  007072  3373               	rrcf	___lltoft@c& (0+255),f,b
 22669  007074  2B7B               	incf	___lltoft@exp& (0+255),f,b
 22670  007076                     l20743:
 22671                           
 22672                           ; BSR set to: 0
 22673  007076  6B77               	clrf	??___lltoft& (0+255),b
 22674  007078  6B78               	clrf	(??___lltoft+1)& (0+255),b
 22675  00707A  6B79               	clrf	(??___lltoft+2)& (0+255),b
 22676  00707C  5176               	movf	(___lltoft@c+3)& (0+255),w,b
 22677  00707E  6F7A               	movwf	(??___lltoft+3)& (0+255),b
 22678  007080  517A               	movf	(??___lltoft+3)& (0+255),w,b
 22679  007082  1177               	iorwf	??___lltoft& (0+255),w,b
 22680  007084  1178               	iorwf	(??___lltoft+1)& (0+255),w,b
 22681  007086  1179               	iorwf	(??___lltoft+2)& (0+255),w,b
 22682  007088  E1F0               	bnz	l20741
 22683                           
 22684                           ; BSR set to: 0
 22685  00708A  C073  F06B         	movff	___lltoft@c,?___ftpack
 22686  00708E  C074  F06C         	movff	___lltoft@c+1,?___ftpack+1
 22687  007092  C075  F06D         	movff	___lltoft@c+2,?___ftpack+2
 22688  007096  C07B  F06E         	movff	___lltoft@exp,?___ftpack+3
 22689  00709A  0E00               	movlw	0
 22690  00709C  6B6F               	clrf	(?___ftpack+4)& (0+255),b
 22691  00709E  ECDF  F034         	call	___ftpack	;wreg free
 22692  0070A2  C06B  F073         	movff	?___ftpack,?___lltoft
 22693  0070A6  C06C  F074         	movff	?___ftpack+1,?___lltoft+1
 22694  0070AA  C06D  F075         	movff	?___ftpack+2,?___lltoft+2
 22695                           
 22696                           ; BSR set to: 0
 22697  0070AE  0012               	return	
 22698  0070B0                     __end_of___lltoft:
 22699                           	opt stack 0
 22700                           tblptru	equ	0xFF8
 22701                           tblptrh	equ	0xFF7
 22702                           tblptrl	equ	0xFF6
 22703                           tablat	equ	0xFF5
 22704                           prodh	equ	0xFF4
 22705                           prodl	equ	0xFF3
 22706                           intcon	equ	0xFF2
 22707                           intcon2	equ	0xFF1
 22708                           postinc0	equ	0xFEE
 22709                           wreg	equ	0xFE8
 22710                           postinc1	equ	0xFE6
 22711                           postdec1	equ	0xFE5
 22712                           fsr1h	equ	0xFE2
 22713                           fsr1l	equ	0xFE1
 22714                           indf2	equ	0xFDF
 22715                           postinc2	equ	0xFDE
 22716                           postdec2	equ	0xFDD
 22717                           fsr2h	equ	0xFDA
 22718                           fsr2l	equ	0xFD9
 22719                           status	equ	0xFD8
 22720                           
 22721 ;; *************** function ___lmul *****************
 22722 ;; Defined at:
 22723 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lmul.c"
 22724 ;; Parameters:    Size  Location     Type
 22725 ;;  multiplier      4   11[BANK0 ] unsigned long 
 22726 ;;  multiplicand    4   15[BANK0 ] unsigned long 
 22727 ;; Auto vars:     Size  Location     Type
 22728 ;;  product         4   19[BANK0 ] unsigned long 
 22729 ;; Return value:  Size  Location     Type
 22730 ;;                  4   11[BANK0 ] unsigned long 
 22731 ;; Registers used:
 22732 ;;		wreg, status,2, status,0
 22733 ;; Tracked objects:
 22734 ;;		On entry : F/0
 22735 ;;		On exit  : F/0
 22736 ;;		Unchanged: FFFFFFF0/0
 22737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22738 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22739 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22741 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22742 ;;Total ram usage:       12 bytes
 22743 ;; Hardware stack levels used:    1
 22744 ;; Hardware stack levels required when called:    3
 22745 ;; This function calls:
 22746 ;;		Nothing
 22747 ;; This function is called by:
 22748 ;;		_LCD_PrintLong
 22749 ;;		_ConvertTimeFromDiscrete
 22750 ;; This function uses a non-reentrant model
 22751 ;;
 22752                           
 22753                           	psect	text71
 22754  0070FE                     __ptext71:
 22755                           	opt stack 0
 22756  0070FE                     ___lmul:
 22757                           	opt stack 24
 22758                           
 22759                           ; BSR set to: 0
 22760                           
 22761                           ; BSR set to: 0
 22762  0070FE  6B73               	clrf	___lmul@product& (0+255),b
 22763  007100  6B74               	clrf	(___lmul@product+1)& (0+255),b
 22764  007102  6B75               	clrf	(___lmul@product+2)& (0+255),b
 22765  007104  6B76               	clrf	(___lmul@product+3)& (0+255),b
 22766  007106                     l3038:
 22767                           
 22768                           ; BSR set to: 0
 22769  007106  A16B               	btfss	___lmul@multiplier& (0+255),0,b
 22770  007108  D008               	goto	l16181
 22771                           
 22772                           ; BSR set to: 0
 22773  00710A  516F               	movf	___lmul@multiplicand& (0+255),w,b
 22774  00710C  2773               	addwf	___lmul@product& (0+255),f,b
 22775  00710E  5170               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 22776  007110  2374               	addwfc	(___lmul@product+1)& (0+255),f,b
 22777  007112  5171               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 22778  007114  2375               	addwfc	(___lmul@product+2)& (0+255),f,b
 22779  007116  5172               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 22780  007118  2376               	addwfc	(___lmul@product+3)& (0+255),f,b
 22781  00711A                     l16181:
 22782                           
 22783                           ; BSR set to: 0
 22784  00711A  90D8               	bcf	status,0,c
 22785  00711C  376F               	rlcf	___lmul@multiplicand& (0+255),f,b
 22786  00711E  3770               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 22787  007120  3771               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 22788  007122  3772               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 22789                           
 22790                           ; BSR set to: 0
 22791  007124  90D8               	bcf	status,0,c
 22792  007126  336E               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 22793  007128  336D               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 22794  00712A  336C               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 22795  00712C  336B               	rrcf	___lmul@multiplier& (0+255),f,b
 22796  00712E  516E               	movf	(___lmul@multiplier+3)& (0+255),w,b
 22797  007130  116B               	iorwf	___lmul@multiplier& (0+255),w,b
 22798  007132  116C               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 22799  007134  116D               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 22800  007136  E1E7               	bnz	l3038
 22801                           
 22802                           ; BSR set to: 0
 22803  007138  C073  F06B         	movff	___lmul@product,?___lmul
 22804  00713C  C074  F06C         	movff	___lmul@product+1,?___lmul+1
 22805  007140  C075  F06D         	movff	___lmul@product+2,?___lmul+2
 22806  007144  C076  F06E         	movff	___lmul@product+3,?___lmul+3
 22807                           
 22808                           ; BSR set to: 0
 22809  007148  0012               	return	
 22810  00714A                     __end_of___lmul:
 22811                           	opt stack 0
 22812                           tblptru	equ	0xFF8
 22813                           tblptrh	equ	0xFF7
 22814                           tblptrl	equ	0xFF6
 22815                           tablat	equ	0xFF5
 22816                           prodh	equ	0xFF4
 22817                           prodl	equ	0xFF3
 22818                           intcon	equ	0xFF2
 22819                           intcon2	equ	0xFF1
 22820                           postinc0	equ	0xFEE
 22821                           wreg	equ	0xFE8
 22822                           postinc1	equ	0xFE6
 22823                           postdec1	equ	0xFE5
 22824                           fsr1h	equ	0xFE2
 22825                           fsr1l	equ	0xFE1
 22826                           indf2	equ	0xFDF
 22827                           postinc2	equ	0xFDE
 22828                           postdec2	equ	0xFDD
 22829                           fsr2h	equ	0xFDA
 22830                           fsr2l	equ	0xFD9
 22831                           status	equ	0xFD8
 22832                           
 22833 ;; *************** function ___lwdiv *****************
 22834 ;; Defined at:
 22835 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwdiv.c"
 22836 ;; Parameters:    Size  Location     Type
 22837 ;;  dividend        2   11[BANK0 ] unsigned int 
 22838 ;;  divisor         2   13[BANK0 ] unsigned int 
 22839 ;; Auto vars:     Size  Location     Type
 22840 ;;  quotient        2   16[BANK0 ] unsigned int 
 22841 ;;  counter         1   15[BANK0 ] unsigned char 
 22842 ;; Return value:  Size  Location     Type
 22843 ;;                  2   11[BANK0 ] unsigned int 
 22844 ;; Registers used:
 22845 ;;		wreg, status,2, status,0
 22846 ;; Tracked objects:
 22847 ;;		On entry : F/0
 22848 ;;		On exit  : F/0
 22849 ;;		Unchanged: FFFFFFF0/0
 22850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22851 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22852 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22854 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22855 ;;Total ram usage:        7 bytes
 22856 ;; Hardware stack levels used:    1
 22857 ;; Hardware stack levels required when called:    3
 22858 ;; This function calls:
 22859 ;;		Nothing
 22860 ;; This function is called by:
 22861 ;;		_Wait_us
 22862 ;; This function uses a non-reentrant model
 22863 ;;
 22864                           
 22865                           	psect	text72
 22866  00714A                     __ptext72:
 22867                           	opt stack 0
 22868  00714A                     ___lwdiv:
 22869                           	opt stack 23
 22870                           
 22871                           ; BSR set to: 0
 22872                           
 22873                           ; BSR set to: 0
 22874  00714A  6B70               	clrf	___lwdiv@quotient& (0+255),b
 22875  00714C  6B71               	clrf	(___lwdiv@quotient+1)& (0+255),b
 22876                           
 22877                           ; BSR set to: 0
 22878  00714E  516E               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 22879  007150  116D               	iorwf	___lwdiv@divisor& (0+255),w,b
 22880  007152  E01B               	bz	l3074
 22881                           
 22882                           ; BSR set to: 0
 22883  007154  0E01               	movlw	1
 22884  007156  6F6F               	movwf	___lwdiv@counter& (0+255),b
 22885  007158  D004               	goto	l20757
 22886  00715A                     l20755:
 22887                           
 22888                           ; BSR set to: 0
 22889  00715A  90D8               	bcf	status,0,c
 22890  00715C  376D               	rlcf	___lwdiv@divisor& (0+255),f,b
 22891  00715E  376E               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 22892  007160  2B6F               	incf	___lwdiv@counter& (0+255),f,b
 22893  007162                     l20757:
 22894                           
 22895                           ; BSR set to: 0
 22896  007162  AF6E               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 22897  007164  D7FA               	goto	l20755
 22898  007166                     l20759:
 22899                           
 22900                           ; BSR set to: 0
 22901  007166  90D8               	bcf	status,0,c
 22902  007168  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
 22903  00716A  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 22904                           
 22905                           ; BSR set to: 0
 22906  00716C  516D               	movf	___lwdiv@divisor& (0+255),w,b
 22907  00716E  5D6B               	subwf	___lwdiv@dividend& (0+255),w,b
 22908  007170  516E               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 22909  007172  596C               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 22910  007174  E305               	bnc	l20767
 22911                           
 22912                           ; BSR set to: 0
 22913  007176  516D               	movf	___lwdiv@divisor& (0+255),w,b
 22914  007178  5F6B               	subwf	___lwdiv@dividend& (0+255),f,b
 22915  00717A  516E               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 22916  00717C  5B6C               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 22917                           
 22918                           ; BSR set to: 0
 22919  00717E  8170               	bsf	___lwdiv@quotient& (0+255),0,b
 22920  007180                     l20767:
 22921                           
 22922                           ; BSR set to: 0
 22923  007180  90D8               	bcf	status,0,c
 22924  007182  336E               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 22925  007184  336D               	rrcf	___lwdiv@divisor& (0+255),f,b
 22926                           
 22927                           ; BSR set to: 0
 22928  007186  2F6F               	decfsz	___lwdiv@counter& (0+255),f,b
 22929  007188  D7EE               	goto	l20759
 22930  00718A                     l3074:
 22931                           
 22932                           ; BSR set to: 0
 22933  00718A  C070  F06B         	movff	___lwdiv@quotient,?___lwdiv
 22934  00718E  C071  F06C         	movff	___lwdiv@quotient+1,?___lwdiv+1
 22935                           
 22936                           ; BSR set to: 0
 22937  007192  0012               	return	
 22938  007194                     __end_of___lwdiv:
 22939                           	opt stack 0
 22940                           tblptru	equ	0xFF8
 22941                           tblptrh	equ	0xFF7
 22942                           tblptrl	equ	0xFF6
 22943                           tablat	equ	0xFF5
 22944                           prodh	equ	0xFF4
 22945                           prodl	equ	0xFF3
 22946                           intcon	equ	0xFF2
 22947                           intcon2	equ	0xFF1
 22948                           postinc0	equ	0xFEE
 22949                           wreg	equ	0xFE8
 22950                           postinc1	equ	0xFE6
 22951                           postdec1	equ	0xFE5
 22952                           fsr1h	equ	0xFE2
 22953                           fsr1l	equ	0xFE1
 22954                           indf2	equ	0xFDF
 22955                           postinc2	equ	0xFDE
 22956                           postdec2	equ	0xFDD
 22957                           fsr2h	equ	0xFDA
 22958                           fsr2l	equ	0xFD9
 22959                           status	equ	0xFD8
 22960                           
 22961 ;; *************** function ___wmul *****************
 22962 ;; Defined at:
 22963 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\wmul.c"
 22964 ;; Parameters:    Size  Location     Type
 22965 ;;  multiplier      2   11[BANK0 ] unsigned int 
 22966 ;;  multiplicand    2   13[BANK0 ] unsigned int 
 22967 ;; Auto vars:     Size  Location     Type
 22968 ;;  product         2   15[BANK0 ] unsigned int 
 22969 ;; Return value:  Size  Location     Type
 22970 ;;                  2   11[BANK0 ] unsigned int 
 22971 ;; Registers used:
 22972 ;;		wreg, status,2, status,0
 22973 ;; Tracked objects:
 22974 ;;		On entry : F/0
 22975 ;;		On exit  : F/0
 22976 ;;		Unchanged: FFFFFFF0/0
 22977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22978 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22979 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22982 ;;Total ram usage:        6 bytes
 22983 ;; Hardware stack levels used:    1
 22984 ;; Hardware stack levels required when called:    3
 22985 ;; This function calls:
 22986 ;;		Nothing
 22987 ;; This function is called by:
 22988 ;;		_Wait_seconds_nonblocking
 22989 ;; This function uses a non-reentrant model
 22990 ;;
 22991                           
 22992                           	psect	text73
 22993  007646                     __ptext73:
 22994                           	opt stack 0
 22995  007646                     ___wmul:
 22996                           	opt stack 25
 22997                           
 22998                           ; BSR set to: 0
 22999                           
 23000                           ; BSR set to: 0
 23001  007646  6B6F               	clrf	___wmul@product& (0+255),b
 23002  007648  6B70               	clrf	(___wmul@product+1)& (0+255),b
 23003  00764A                     l3119:
 23004                           
 23005                           ; BSR set to: 0
 23006  00764A  A16B               	btfss	___wmul@multiplier& (0+255),0,b
 23007  00764C  D004               	goto	l20779
 23008                           
 23009                           ; BSR set to: 0
 23010  00764E  516D               	movf	___wmul@multiplicand& (0+255),w,b
 23011  007650  276F               	addwf	___wmul@product& (0+255),f,b
 23012  007652  516E               	movf	(___wmul@multiplicand+1)& (0+255),w,b
 23013  007654  2370               	addwfc	(___wmul@product+1)& (0+255),f,b
 23014  007656                     l20779:
 23015                           
 23016                           ; BSR set to: 0
 23017  007656  90D8               	bcf	status,0,c
 23018  007658  376D               	rlcf	___wmul@multiplicand& (0+255),f,b
 23019  00765A  376E               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
 23020                           
 23021                           ; BSR set to: 0
 23022  00765C  90D8               	bcf	status,0,c
 23023  00765E  336C               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
 23024  007660  336B               	rrcf	___wmul@multiplier& (0+255),f,b
 23025  007662  516C               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23026  007664  116B               	iorwf	___wmul@multiplier& (0+255),w,b
 23027  007666  E1F1               	bnz	l3119
 23028                           
 23029                           ; BSR set to: 0
 23030  007668  C06F  F06B         	movff	___wmul@product,?___wmul
 23031  00766C  C070  F06C         	movff	___wmul@product+1,?___wmul+1
 23032                           
 23033                           ; BSR set to: 0
 23034  007670  0012               	return	
 23035  007672                     __end_of___wmul:
 23036                           	opt stack 0
 23037                           tblptru	equ	0xFF8
 23038                           tblptrh	equ	0xFF7
 23039                           tblptrl	equ	0xFF6
 23040                           tablat	equ	0xFF5
 23041                           prodh	equ	0xFF4
 23042                           prodl	equ	0xFF3
 23043                           intcon	equ	0xFF2
 23044                           intcon2	equ	0xFF1
 23045                           postinc0	equ	0xFEE
 23046                           wreg	equ	0xFE8
 23047                           postinc1	equ	0xFE6
 23048                           postdec1	equ	0xFE5
 23049                           fsr1h	equ	0xFE2
 23050                           fsr1l	equ	0xFE1
 23051                           indf2	equ	0xFDF
 23052                           postinc2	equ	0xFDE
 23053                           postdec2	equ	0xFDD
 23054                           fsr2h	equ	0xFDA
 23055                           fsr2l	equ	0xFD9
 23056                           status	equ	0xFD8
 23057                           
 23058 ;; *************** function ___asftadd *****************
 23059 ;; Defined at:
 23060 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftadd.c"
 23061 ;; Parameters:    Size  Location     Type
 23062 ;;  f1p             2   40[BANK0 ] PTR float 
 23063 ;;		 -> ConvertTimeFromDiscrete@ret(3), GetTime@Tm(3), GetFloat@Output(3), RealtimeMode@SetSpeed(3), 
 23064 ;;		 -> MoveToAngle@DestinationAngle(3), GetCurrentAngle@MotorPos(3), MinTimeToMove@TotalTime(3), GoToSleep@Expires(3), 
 23065 ;;  f2              3   42[BANK0 ] float 
 23066 ;; Auto vars:     Size  Location     Type
 23067 ;;		None
 23068 ;; Return value:  Size  Location     Type
 23069 ;;                  3   40[BANK0 ] float 
 23070 ;; Registers used:
 23071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23072 ;; Tracked objects:
 23073 ;;		On entry : F/0
 23074 ;;		On exit  : F/0
 23075 ;;		Unchanged: FFFFFFF0/0
 23076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23077 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23080 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23081 ;;Total ram usage:        5 bytes
 23082 ;; Hardware stack levels used:    1
 23083 ;; Hardware stack levels required when called:    5
 23084 ;; This function calls:
 23085 ;;		___ftadd
 23086 ;; This function is called by:
 23087 ;;		_GoToSleep
 23088 ;;		_MinTimeToMove
 23089 ;;		_GetCurrentAngle
 23090 ;;		_MoveToAngle
 23091 ;;		_RealtimeMode
 23092 ;;		_GetFloat
 23093 ;;		_GetTime
 23094 ;;		_ConvertTimeFromDiscrete
 23095 ;; This function uses a non-reentrant model
 23096 ;;
 23097                           
 23098                           	psect	text74
 23099  0074A6                     __ptext74:
 23100                           	opt stack 0
 23101  0074A6                     ___asftadd:
 23102                           	opt stack 24
 23103                           
 23104                           ; BSR set to: 0
 23105                           ;	Return value of ___asftadd is never used
 23106                           
 23107                           ; BSR set to: 0
 23108  0074A6  C088  FFD9         	movff	___asftadd@f1p,fsr2l
 23109  0074AA  C089  FFDA         	movff	___asftadd@f1p+1,fsr2h
 23110  0074AE  CFDE F073          	movff	postinc2,?___ftadd
 23111  0074B2  CFDE F074          	movff	postinc2,?___ftadd+1
 23112  0074B6  CFDD F075          	movff	postdec2,?___ftadd+2
 23113  0074BA  C08A  F076         	movff	___asftadd@f2,?___ftadd+3
 23114  0074BE  C08B  F077         	movff	___asftadd@f2+1,?___ftadd+4
 23115  0074C2  C08C  F078         	movff	___asftadd@f2+2,?___ftadd+5
 23116  0074C6  EC06  F02D         	call	___ftadd	;wreg free
 23117  0074CA  C088  FFD9         	movff	___asftadd@f1p,fsr2l
 23118  0074CE  C089  FFDA         	movff	___asftadd@f1p+1,fsr2h
 23119  0074D2  C073  FFDE         	movff	?___ftadd,postinc2
 23120  0074D6  C074  FFDE         	movff	?___ftadd+1,postinc2
 23121  0074DA  C075  FFDD         	movff	?___ftadd+2,postdec2
 23122  0074DE  52DD               	movf	postdec2,f,c
 23123                           
 23124                           ; BSR set to: 0
 23125  0074E0  0012               	return	
 23126  0074E2                     __end_of___asftadd:
 23127                           	opt stack 0
 23128                           tblptru	equ	0xFF8
 23129                           tblptrh	equ	0xFF7
 23130                           tblptrl	equ	0xFF6
 23131                           tablat	equ	0xFF5
 23132                           prodh	equ	0xFF4
 23133                           prodl	equ	0xFF3
 23134                           intcon	equ	0xFF2
 23135                           intcon2	equ	0xFF1
 23136                           postinc0	equ	0xFEE
 23137                           wreg	equ	0xFE8
 23138                           postinc1	equ	0xFE6
 23139                           postdec1	equ	0xFE5
 23140                           fsr1h	equ	0xFE2
 23141                           fsr1l	equ	0xFE1
 23142                           indf2	equ	0xFDF
 23143                           postinc2	equ	0xFDE
 23144                           postdec2	equ	0xFDD
 23145                           fsr2h	equ	0xFDA
 23146                           fsr2l	equ	0xFD9
 23147                           status	equ	0xFD8
 23148                           
 23149 ;; *************** function ___asftmul *****************
 23150 ;; Defined at:
 23151 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftmul.c"
 23152 ;; Parameters:    Size  Location     Type
 23153 ;;  f1p             2   40[BANK0 ] PTR float 
 23154 ;;		 -> sqrt@q(3), sqrt@x(3), ConvertTimeFromDiscrete@dTemp(3), ConvertTimeToDiscrete@holder(3), 
 23155 ;;		 -> ConvertTimeToDiscrete@dat(3), ShowVoltage@Batt(3), RunOrbitProgram@DistanceRemaining(3), RunOrbitProgram@Current
      +Pos(3), 
 23156 ;;		 -> GetCurrentAngle@MotorPos(3), GetCurrentLinearPosition@MotorPos(3), Idle@temp(4), LCD_PrintFloat@dat(3), 
 23157 ;;		 -> ExtMode@mTemp(4), 
 23158 ;;  f2              3   42[BANK0 ] float 
 23159 ;; Auto vars:     Size  Location     Type
 23160 ;;		None
 23161 ;; Return value:  Size  Location     Type
 23162 ;;                  3   40[BANK0 ] float 
 23163 ;; Registers used:
 23164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23165 ;; Tracked objects:
 23166 ;;		On entry : F/0
 23167 ;;		On exit  : F/0
 23168 ;;		Unchanged: FFFFFFF0/0
 23169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23170 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23173 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23174 ;;Total ram usage:        5 bytes
 23175 ;; Hardware stack levels used:    1
 23176 ;; Hardware stack levels required when called:    5
 23177 ;; This function calls:
 23178 ;;		___ftmul
 23179 ;; This function is called by:
 23180 ;;		_ExtMode
 23181 ;;		_LCD_PrintFloat
 23182 ;;		_Idle
 23183 ;;		_GetCurrentLinearPosition
 23184 ;;		_GetCurrentAngle
 23185 ;;		_RunOrbitProgram
 23186 ;;		_ShowVoltage
 23187 ;;		_ConvertTimeToDiscrete
 23188 ;;		_ConvertTimeFromDiscrete
 23189 ;;		_sqrt
 23190 ;; This function uses a non-reentrant model
 23191 ;;
 23192                           
 23193                           	psect	text75
 23194  0073F2                     __ptext75:
 23195                           	opt stack 0
 23196  0073F2                     ___asftmul:
 23197                           	opt stack 24
 23198                           
 23199                           ; BSR set to: 0
 23200                           ;	Return value of ___asftmul is never used
 23201                           
 23202                           ; BSR set to: 0
 23203  0073F2  C088  FFD9         	movff	___asftmul@f1p,fsr2l
 23204  0073F6  C089  FFDA         	movff	___asftmul@f1p+1,fsr2h
 23205  0073FA  CFDE F077          	movff	postinc2,?___ftmul
 23206  0073FE  CFDE F078          	movff	postinc2,?___ftmul+1
 23207  007402  CFDD F079          	movff	postdec2,?___ftmul+2
 23208  007406  C08A  F07A         	movff	___asftmul@f2,?___ftmul+3
 23209  00740A  C08B  F07B         	movff	___asftmul@f2+1,?___ftmul+4
 23210  00740E  C08C  F07C         	movff	___asftmul@f2+2,?___ftmul+5
 23211  007412  EC52  F031         	call	___ftmul	;wreg free
 23212  007416  C088  FFD9         	movff	___asftmul@f1p,fsr2l
 23213  00741A  C089  FFDA         	movff	___asftmul@f1p+1,fsr2h
 23214  00741E  C077  FFDE         	movff	?___ftmul,postinc2
 23215  007422  C078  FFDE         	movff	?___ftmul+1,postinc2
 23216  007426  C079  FFDD         	movff	?___ftmul+2,postdec2
 23217  00742A  52DD               	movf	postdec2,f,c
 23218                           
 23219                           ; BSR set to: 0
 23220  00742C  0012               	return	
 23221  00742E                     __end_of___asftmul:
 23222                           	opt stack 0
 23223                           tblptru	equ	0xFF8
 23224                           tblptrh	equ	0xFF7
 23225                           tblptrl	equ	0xFF6
 23226                           tablat	equ	0xFF5
 23227                           prodh	equ	0xFF4
 23228                           prodl	equ	0xFF3
 23229                           intcon	equ	0xFF2
 23230                           intcon2	equ	0xFF1
 23231                           postinc0	equ	0xFEE
 23232                           wreg	equ	0xFE8
 23233                           postinc1	equ	0xFE6
 23234                           postdec1	equ	0xFE5
 23235                           fsr1h	equ	0xFE2
 23236                           fsr1l	equ	0xFE1
 23237                           indf2	equ	0xFDF
 23238                           postinc2	equ	0xFDE
 23239                           postdec2	equ	0xFDD
 23240                           fsr2h	equ	0xFDA
 23241                           fsr2l	equ	0xFD9
 23242                           status	equ	0xFD8
 23243                           
 23244 ;; *************** function ___asftsub *****************
 23245 ;; Defined at:
 23246 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftsub.c"
 23247 ;; Parameters:    Size  Location     Type
 23248 ;;  f1p             2   63[BANK0 ] PTR float 
 23249 ;;		 -> sqrt@x(3), CreateWaypointProgram@MinTravelTime(3), GetTime@Tm(3), ConvertTimeToDiscrete@dat(3), 
 23250 ;;		 -> GetFloat@Output(3), RealtimeMode@SetSpeed(3), MoveToAngle@DestinationAngle(3), GetCurrentAngle@MotorPos(3), 
 23251 ;;		 -> LCD_PrintFloat@dat(3), 
 23252 ;;  f2              3   65[BANK0 ] float 
 23253 ;; Auto vars:     Size  Location     Type
 23254 ;;		None
 23255 ;; Return value:  Size  Location     Type
 23256 ;;                  3   63[BANK0 ] float 
 23257 ;; Registers used:
 23258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23259 ;; Tracked objects:
 23260 ;;		On entry : F/0
 23261 ;;		On exit  : F/0
 23262 ;;		Unchanged: FFFFFFF0/0
 23263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23264 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23267 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23268 ;;Total ram usage:        5 bytes
 23269 ;; Hardware stack levels used:    1
 23270 ;; Hardware stack levels required when called:    6
 23271 ;; This function calls:
 23272 ;;		___ftsub
 23273 ;; This function is called by:
 23274 ;;		_LCD_PrintFloat
 23275 ;;		_GetCurrentAngle
 23276 ;;		_MoveToAngle
 23277 ;;		_RealtimeMode
 23278 ;;		_GetFloat
 23279 ;;		_ConvertTimeToDiscrete
 23280 ;;		_GetTime
 23281 ;;		_CreateWaypointProgram
 23282 ;;		_sqrt
 23283 ;; This function uses a non-reentrant model
 23284 ;;
 23285                           
 23286                           	psect	text76
 23287  00742E                     __ptext76:
 23288                           	opt stack 0
 23289  00742E                     ___asftsub:
 23290                           	opt stack 21
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;	Return value of ___asftsub is never used
 23294                           
 23295                           ; BSR set to: 0
 23296  00742E  C09F  FFD9         	movff	___asftsub@f1p,fsr2l
 23297  007432  C0A0  FFDA         	movff	___asftsub@f1p+1,fsr2h
 23298  007436  CFDE F099          	movff	postinc2,?___ftsub
 23299  00743A  CFDE F09A          	movff	postinc2,?___ftsub+1
 23300  00743E  CFDD F09B          	movff	postdec2,?___ftsub+2
 23301  007442  C0A1  F09C         	movff	___asftsub@f2,?___ftsub+3
 23302  007446  C0A2  F09D         	movff	___asftsub@f2+1,?___ftsub+4
 23303  00744A  C0A3  F09E         	movff	___asftsub@f2+2,?___ftsub+5
 23304  00744E  ECDE  F03A         	call	___ftsub	;wreg free
 23305  007452  C09F  FFD9         	movff	___asftsub@f1p,fsr2l
 23306  007456  C0A0  FFDA         	movff	___asftsub@f1p+1,fsr2h
 23307  00745A  C099  FFDE         	movff	?___ftsub,postinc2
 23308  00745E  C09A  FFDE         	movff	?___ftsub+1,postinc2
 23309  007462  C09B  FFDD         	movff	?___ftsub+2,postdec2
 23310  007466  52DD               	movf	postdec2,f,c
 23311                           
 23312                           ; BSR set to: 0
 23313  007468  0012               	return	
 23314  00746A                     __end_of___asftsub:
 23315                           	opt stack 0
 23316                           tblptru	equ	0xFF8
 23317                           tblptrh	equ	0xFF7
 23318                           tblptrl	equ	0xFF6
 23319                           tablat	equ	0xFF5
 23320                           prodh	equ	0xFF4
 23321                           prodl	equ	0xFF3
 23322                           intcon	equ	0xFF2
 23323                           intcon2	equ	0xFF1
 23324                           postinc0	equ	0xFEE
 23325                           wreg	equ	0xFE8
 23326                           postinc1	equ	0xFE6
 23327                           postdec1	equ	0xFE5
 23328                           fsr1h	equ	0xFE2
 23329                           fsr1l	equ	0xFE1
 23330                           indf2	equ	0xFDF
 23331                           postinc2	equ	0xFDE
 23332                           postdec2	equ	0xFDD
 23333                           fsr2h	equ	0xFDA
 23334                           fsr2l	equ	0xFD9
 23335                           status	equ	0xFD8
 23336                           
 23337 ;; *************** function ___ftsub *****************
 23338 ;; Defined at:
 23339 ;;		line 22 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftsub.c"
 23340 ;; Parameters:    Size  Location     Type
 23341 ;;  f1              3   57[BANK0 ] float 
 23342 ;;  f2              3   60[BANK0 ] float 
 23343 ;; Auto vars:     Size  Location     Type
 23344 ;;		None
 23345 ;; Return value:  Size  Location     Type
 23346 ;;                  3   57[BANK0 ] float 
 23347 ;; Registers used:
 23348 ;;		wreg, status,2, status,0, cstack
 23349 ;; Tracked objects:
 23350 ;;		On entry : F/0
 23351 ;;		On exit  : F/0
 23352 ;;		Unchanged: FFFFFFF0/0
 23353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23358 ;;Total ram usage:        6 bytes
 23359 ;; Hardware stack levels used:    1
 23360 ;; Hardware stack levels required when called:    5
 23361 ;; This function calls:
 23362 ;;		___ftadd
 23363 ;; This function is called by:
 23364 ;;		_LCD_PrintFloat
 23365 ;;		_MinTimeToMove
 23366 ;;		_SpeedRequiredToMoveInTime
 23367 ;;		_MoveToAngle
 23368 ;;		_MoveAdvanced
 23369 ;;		_RunOrbitProgram
 23370 ;;		_CreateWaypointProgram
 23371 ;;		___asftsub
 23372 ;; This function uses a non-reentrant model
 23373 ;;
 23374                           
 23375                           	psect	text77
 23376  0075BC                     __ptext77:
 23377                           	opt stack 0
 23378  0075BC                     ___ftsub:
 23379                           	opt stack 23
 23380                           
 23381                           ; BSR set to: 0
 23382                           
 23383                           ; BSR set to: 0
 23384  0075BC  0E80               	movlw	128
 23385  0075BE  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 23386                           
 23387                           ; BSR set to: 0
 23388  0075C0  C099  F073         	movff	___ftsub@f1,?___ftadd
 23389  0075C4  C09A  F074         	movff	___ftsub@f1+1,?___ftadd+1
 23390  0075C8  C09B  F075         	movff	___ftsub@f1+2,?___ftadd+2
 23391  0075CC  C09C  F076         	movff	___ftsub@f2,?___ftadd+3
 23392  0075D0  C09D  F077         	movff	___ftsub@f2+1,?___ftadd+4
 23393  0075D4  C09E  F078         	movff	___ftsub@f2+2,?___ftadd+5
 23394  0075D8  EC06  F02D         	call	___ftadd	;wreg free
 23395  0075DC  C073  F099         	movff	?___ftadd,?___ftsub
 23396  0075E0  C074  F09A         	movff	?___ftadd+1,?___ftsub+1
 23397  0075E4  C075  F09B         	movff	?___ftadd+2,?___ftsub+2
 23398                           
 23399                           ; BSR set to: 0
 23400  0075E8  0012               	return	
 23401  0075EA                     __end_of___ftsub:
 23402                           	opt stack 0
 23403                           tblptru	equ	0xFF8
 23404                           tblptrh	equ	0xFF7
 23405                           tblptrl	equ	0xFF6
 23406                           tablat	equ	0xFF5
 23407                           prodh	equ	0xFF4
 23408                           prodl	equ	0xFF3
 23409                           intcon	equ	0xFF2
 23410                           intcon2	equ	0xFF1
 23411                           postinc0	equ	0xFEE
 23412                           wreg	equ	0xFE8
 23413                           postinc1	equ	0xFE6
 23414                           postdec1	equ	0xFE5
 23415                           fsr1h	equ	0xFE2
 23416                           fsr1l	equ	0xFE1
 23417                           indf2	equ	0xFDF
 23418                           postinc2	equ	0xFDE
 23419                           postdec2	equ	0xFDD
 23420                           fsr2h	equ	0xFDA
 23421                           fsr2l	equ	0xFD9
 23422                           status	equ	0xFD8
 23423                           
 23424 ;; *************** function ___ftadd *****************
 23425 ;; Defined at:
 23426 ;;		line 87 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftadd.c"
 23427 ;; Parameters:    Size  Location     Type
 23428 ;;  f1              3   19[BANK0 ] float 
 23429 ;;  f2              3   22[BANK0 ] float 
 23430 ;; Auto vars:     Size  Location     Type
 23431 ;;  exp1            1   32[BANK0 ] unsigned char 
 23432 ;;  exp2            1   31[BANK0 ] unsigned char 
 23433 ;;  sign            1   30[BANK0 ] unsigned char 
 23434 ;; Return value:  Size  Location     Type
 23435 ;;                  3   19[BANK0 ] float 
 23436 ;; Registers used:
 23437 ;;		wreg, status,2, status,0, cstack
 23438 ;; Tracked objects:
 23439 ;;		On entry : F/0
 23440 ;;		On exit  : F/0
 23441 ;;		Unchanged: FFFFFFF0/0
 23442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23443 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23444 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23445 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23446 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23447 ;;Total ram usage:       14 bytes
 23448 ;; Hardware stack levels used:    1
 23449 ;; Hardware stack levels required when called:    4
 23450 ;; This function calls:
 23451 ;;		___ftpack
 23452 ;; This function is called by:
 23453 ;;		_MoveToAngle
 23454 ;;		_RunOrbitProgram
 23455 ;;		___ftsub
 23456 ;;		___asftadd
 23457 ;; This function uses a non-reentrant model
 23458 ;;
 23459                           
 23460                           	psect	text78
 23461  005A0C                     __ptext78:
 23462                           	opt stack 0
 23463  005A0C                     ___ftadd:
 23464                           	opt stack 23
 23465                           
 23466                           ; BSR set to: 0
 23467                           
 23468                           ; BSR set to: 0
 23469  005A0C  0E0F               	movlw	15
 23470  005A0E  6F79               	movwf	??___ftadd& (0+255),b
 23471  005A10  C073  F07A         	movff	___ftadd@f1,??___ftadd+1
 23472  005A14  C074  F07B         	movff	___ftadd@f1+1,??___ftadd+2
 23473  005A18  C075  F07C         	movff	___ftadd@f1+2,??___ftadd+3
 23474  005A1C  2979               	incf	??___ftadd& (0+255),w,b
 23475  005A1E  6F7D               	movwf	(??___ftadd+4)& (0+255),b
 23476  005A20  D001               	goto	u12900
 23477  005A22                     u12905:
 23478  005A22  D8A9               	call	PL70	;call to abstracted procedure
 23479  005A24                     u12900:
 23480  005A24  2F7D               	decfsz	(??___ftadd+4)& (0+255),f,b
 23481  005A26  D7FD               	goto	u12905
 23482  005A28  517A               	movf	(??___ftadd+1)& (0+255),w,b
 23483  005A2A  6F80               	movwf	___ftadd@exp1& (0+255),b
 23484  005A2C  0E0F               	movlw	15
 23485  005A2E  6F79               	movwf	??___ftadd& (0+255),b
 23486  005A30  C076  F07A         	movff	___ftadd@f2,??___ftadd+1
 23487  005A34  C077  F07B         	movff	___ftadd@f2+1,??___ftadd+2
 23488  005A38  C078  F07C         	movff	___ftadd@f2+2,??___ftadd+3
 23489  005A3C  2979               	incf	??___ftadd& (0+255),w,b
 23490  005A3E  6F7D               	movwf	(??___ftadd+4)& (0+255),b
 23491  005A40  D001               	goto	u12910
 23492  005A42                     u12915:
 23493  005A42  D899               	call	PL70	;call to abstracted procedure
 23494  005A44                     u12910:
 23495  005A44  2F7D               	decfsz	(??___ftadd+4)& (0+255),f,b
 23496  005A46  D7FD               	goto	u12915
 23497  005A48  517A               	movf	(??___ftadd+1)& (0+255),w,b
 23498  005A4A  6F7F               	movwf	___ftadd@exp2& (0+255),b
 23499                           
 23500                           ; BSR set to: 0
 23501  005A4C  5180               	movf	___ftadd@exp1& (0+255),w,b
 23502  005A4E  E009               	bz	l2899
 23503                           
 23504                           ; BSR set to: 0
 23505  005A50  517F               	movf	___ftadd@exp2& (0+255),w,b
 23506  005A52  6180               	cpfslt	___ftadd@exp1& (0+255),b
 23507  005A54  D00D               	goto	l20531
 23508                           
 23509                           ; BSR set to: 0
 23510  005A56  5180               	movf	___ftadd@exp1& (0+255),w,b
 23511  005A58  5D7F               	subwf	___ftadd@exp2& (0+255),w,b
 23512  005A5A  6F79               	movwf	??___ftadd& (0+255),b
 23513  005A5C  0E19               	movlw	25
 23514  005A5E  5D79               	subwf	??___ftadd& (0+255),w,b
 23515  005A60  E307               	bnc	l20531
 23516  005A62                     l2899:
 23517                           
 23518                           ; BSR set to: 0
 23519  005A62  C076  F073         	movff	___ftadd@f2,?___ftadd
 23520  005A66  C077  F074         	movff	___ftadd@f2+1,?___ftadd+1
 23521  005A6A  C078  F075         	movff	___ftadd@f2+2,?___ftadd+2
 23522  005A6E  0012               	return	
 23523  005A70                     l20531:
 23524                           
 23525                           ; BSR set to: 0
 23526  005A70  517F               	movf	___ftadd@exp2& (0+255),w,b
 23527  005A72  E009               	bz	l2903
 23528                           
 23529                           ; BSR set to: 0
 23530  005A74  5180               	movf	___ftadd@exp1& (0+255),w,b
 23531  005A76  617F               	cpfslt	___ftadd@exp2& (0+255),b
 23532  005A78  D00D               	goto	l20537
 23533                           
 23534                           ; BSR set to: 0
 23535  005A7A  517F               	movf	___ftadd@exp2& (0+255),w,b
 23536  005A7C  5D80               	subwf	___ftadd@exp1& (0+255),w,b
 23537  005A7E  6F79               	movwf	??___ftadd& (0+255),b
 23538  005A80  0E19               	movlw	25
 23539  005A82  5D79               	subwf	??___ftadd& (0+255),w,b
 23540  005A84  E307               	bnc	l20537
 23541  005A86                     l2903:
 23542                           
 23543                           ; BSR set to: 0
 23544  005A86  C073  F073         	movff	___ftadd@f1,?___ftadd
 23545  005A8A  C074  F074         	movff	___ftadd@f1+1,?___ftadd+1
 23546  005A8E  C075  F075         	movff	___ftadd@f1+2,?___ftadd+2
 23547  005A92  0012               	return	
 23548  005A94                     l20537:
 23549                           
 23550                           ; BSR set to: 0
 23551  005A94  0E06               	movlw	6
 23552  005A96  6F7E               	movwf	___ftadd@sign& (0+255),b
 23553                           
 23554                           ; BSR set to: 0
 23555  005A98  BF75               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 23556                           
 23557                           ; BSR set to: 0
 23558  005A9A  8F7E               	bsf	___ftadd@sign& (0+255),7,b
 23559                           
 23560                           ; BSR set to: 0
 23561  005A9C  BF78               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 23562                           
 23563                           ; BSR set to: 0
 23564  005A9E  8D7E               	bsf	___ftadd@sign& (0+255),6,b
 23565                           
 23566                           ; BSR set to: 0
 23567  005AA0  8F74               	bsf	(___ftadd@f1+1)& (0+255),7,b
 23568                           
 23569                           ; BSR set to: 0
 23570  005AA2  6B75               	clrf	(___ftadd@f1+2)& (0+255),b
 23571  005AA4  8F77               	bsf	(___ftadd@f2+1)& (0+255),7,b
 23572                           
 23573                           ; BSR set to: 0
 23574  005AA6  6B78               	clrf	(___ftadd@f2+2)& (0+255),b
 23575                           
 23576                           ; BSR set to: 0
 23577  005AA8  517F               	movf	___ftadd@exp2& (0+255),w,b
 23578  005AAA  6180               	cpfslt	___ftadd@exp1& (0+255),b
 23579  005AAC  D017               	goto	l20563
 23580  005AAE                     l20553:
 23581                           
 23582                           ; BSR set to: 0
 23583  005AAE  90D8               	bcf	status,0,c
 23584  005AB0  3776               	rlcf	___ftadd@f2& (0+255),f,b
 23585  005AB2  3777               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 23586  005AB4  3778               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 23587  005AB6  077F               	decf	___ftadd@exp2& (0+255),f,b
 23588                           
 23589                           ; BSR set to: 0
 23590  005AB8  517F               	movf	___ftadd@exp2& (0+255),w,b
 23591  005ABA  1980               	xorwf	___ftadd@exp1& (0+255),w,b
 23592  005ABC  E00B               	bz	l20561
 23593                           
 23594                           ; BSR set to: 0
 23595  005ABE  077E               	decf	___ftadd@sign& (0+255),f,b
 23596  005AC0  0100               	movlb	0	; () banked
 23597  005AC2  517E               	movf	___ftadd@sign& (0+255),w,b
 23598  005AC4  0B07               	andlw	7
 23599  005AC6  E006               	bz	l20561
 23600  005AC8  D7F2               	goto	l20553
 23601  005ACA                     l20559:
 23602                           
 23603                           ; BSR set to: 0
 23604  005ACA  90D8               	bcf	status,0,c
 23605  005ACC  3375               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 23606  005ACE  3374               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 23607  005AD0  3373               	rrcf	___ftadd@f1& (0+255),f,b
 23608  005AD2  2B80               	incf	___ftadd@exp1& (0+255),f,b
 23609  005AD4                     l20561:
 23610                           
 23611                           ; BSR set to: 0
 23612  005AD4  517F               	movf	___ftadd@exp2& (0+255),w,b
 23613  005AD6  6380               	cpfseq	___ftadd@exp1& (0+255),b
 23614  005AD8  D7F8               	goto	l20559
 23615  005ADA  D019               	goto	l2914
 23616  005ADC                     l20563:
 23617                           
 23618                           ; BSR set to: 0
 23619  005ADC  5180               	movf	___ftadd@exp1& (0+255),w,b
 23620  005ADE  617F               	cpfslt	___ftadd@exp2& (0+255),b
 23621  005AE0  D016               	goto	l2914
 23622  005AE2                     l20565:
 23623                           
 23624                           ; BSR set to: 0
 23625  005AE2  90D8               	bcf	status,0,c
 23626  005AE4  3773               	rlcf	___ftadd@f1& (0+255),f,b
 23627  005AE6  3774               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 23628  005AE8  3775               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 23629  005AEA  0780               	decf	___ftadd@exp1& (0+255),f,b
 23630                           
 23631                           ; BSR set to: 0
 23632  005AEC  517F               	movf	___ftadd@exp2& (0+255),w,b
 23633  005AEE  1980               	xorwf	___ftadd@exp1& (0+255),w,b
 23634  005AF0  E00B               	bz	l20573
 23635                           
 23636                           ; BSR set to: 0
 23637  005AF2  077E               	decf	___ftadd@sign& (0+255),f,b
 23638  005AF4  0100               	movlb	0	; () banked
 23639  005AF6  517E               	movf	___ftadd@sign& (0+255),w,b
 23640  005AF8  0B07               	andlw	7
 23641  005AFA  E006               	bz	l20573
 23642  005AFC  D7F2               	goto	l20565
 23643  005AFE                     l20571:
 23644                           
 23645                           ; BSR set to: 0
 23646  005AFE  90D8               	bcf	status,0,c
 23647  005B00  3378               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 23648  005B02  3377               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 23649  005B04  3376               	rrcf	___ftadd@f2& (0+255),f,b
 23650  005B06  2B7F               	incf	___ftadd@exp2& (0+255),f,b
 23651  005B08                     l20573:
 23652                           
 23653                           ; BSR set to: 0
 23654  005B08  517F               	movf	___ftadd@exp2& (0+255),w,b
 23655  005B0A  6380               	cpfseq	___ftadd@exp1& (0+255),b
 23656  005B0C  D7F8               	goto	l20571
 23657  005B0E                     l2914:
 23658                           
 23659                           ; BSR set to: 0
 23660  005B0E  AF7E               	btfss	___ftadd@sign& (0+255),7,b
 23661  005B10  D007               	goto	l2923
 23662                           
 23663                           ; BSR set to: 0
 23664  005B12  1F73               	comf	___ftadd@f1& (0+255),f,b
 23665  005B14  1F74               	comf	(___ftadd@f1+1)& (0+255),f,b
 23666  005B16  1F75               	comf	(___ftadd@f1+2)& (0+255),f,b
 23667  005B18  2B73               	incf	___ftadd@f1& (0+255),f,b
 23668  005B1A  0E00               	movlw	0
 23669  005B1C  2374               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 23670  005B1E  2375               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 23671  005B20                     l2923:
 23672                           
 23673                           ; BSR set to: 0
 23674  005B20  AD7E               	btfss	___ftadd@sign& (0+255),6,b
 23675  005B22  D002               	goto	l2924
 23676                           
 23677                           ; BSR set to: 0
 23678  005B24  1F76               	comf	___ftadd@f2& (0+255),f,b
 23679  005B26  D820               	call	PL63	;call to abstracted procedure
 23680  005B28                     l2924:
 23681                           
 23682                           ; BSR set to: 0
 23683  005B28  6B7E               	clrf	___ftadd@sign& (0+255),b
 23684  005B2A  5173               	movf	___ftadd@f1& (0+255),w,b
 23685  005B2C  2776               	addwf	___ftadd@f2& (0+255),f,b
 23686  005B2E  5174               	movf	(___ftadd@f1+1)& (0+255),w,b
 23687  005B30  2377               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 23688  005B32  5175               	movf	(___ftadd@f1+2)& (0+255),w,b
 23689  005B34  2378               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 23690  005B36  AF78               	btfss	(___ftadd@f2+2)& (0+255),7,b
 23691  005B38  D004               	goto	l20583
 23692                           
 23693                           ; BSR set to: 0
 23694  005B3A  1F76               	comf	___ftadd@f2& (0+255),f,b
 23695  005B3C  D815               	call	PL63	;call to abstracted procedure
 23696                           
 23697                           ; BSR set to: 0
 23698  005B3E  0E01               	movlw	1
 23699  005B40  6F7E               	movwf	___ftadd@sign& (0+255),b
 23700  005B42                     l20583:
 23701                           
 23702                           ; BSR set to: 0
 23703  005B42  C076  F06B         	movff	___ftadd@f2,?___ftpack
 23704  005B46  C077  F06C         	movff	___ftadd@f2+1,?___ftpack+1
 23705  005B4A  C078  F06D         	movff	___ftadd@f2+2,?___ftpack+2
 23706  005B4E  C080  F06E         	movff	___ftadd@exp1,?___ftpack+3
 23707  005B52  C07E  F06F         	movff	___ftadd@sign,?___ftpack+4
 23708  005B56  ECDF  F034         	call	___ftpack	;wreg free
 23709  005B5A  C06B  F073         	movff	?___ftpack,?___ftadd
 23710  005B5E  C06C  F074         	movff	?___ftpack+1,?___ftadd+1
 23711  005B62  C06D  F075         	movff	?___ftpack+2,?___ftadd+2
 23712                           
 23713                           ; BSR set to: 0
 23714  005B66  0012               	return	
 23715  005B68                     __end_of___ftadd:
 23716                           	opt stack 0
 23717  005B68                     PL63:
 23718  005B68  1F77               	comf	(___ftadd@f2+1)& (0+255),f,b
 23719  005B6A  1F78               	comf	(___ftadd@f2+2)& (0+255),f,b
 23720  005B6C  2B76               	incf	___ftadd@f2& (0+255),f,b
 23721  005B6E  0E00               	movlw	0
 23722  005B70  2377               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 23723  005B72  2378               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 23724  005B74  0C00               	retlw	0
 23725  005B76                     PL70:
 23726  005B76  90D8               	bcf	status,0,c
 23727  005B78  337C               	rrcf	(??___ftadd+3)& (0+255),f,b
 23728  005B7A  337B               	rrcf	(??___ftadd+2)& (0+255),f,b
 23729  005B7C  337A               	rrcf	(??___ftadd+1)& (0+255),f,b
 23730  005B7E  0012               	return	
 23731                           tblptru	equ	0xFF8
 23732                           tblptrh	equ	0xFF7
 23733                           tblptrl	equ	0xFF6
 23734                           tablat	equ	0xFF5
 23735                           prodh	equ	0xFF4
 23736                           prodl	equ	0xFF3
 23737                           intcon	equ	0xFF2
 23738                           intcon2	equ	0xFF1
 23739                           postinc0	equ	0xFEE
 23740                           wreg	equ	0xFE8
 23741                           postinc1	equ	0xFE6
 23742                           postdec1	equ	0xFE5
 23743                           fsr1h	equ	0xFE2
 23744                           fsr1l	equ	0xFE1
 23745                           indf2	equ	0xFDF
 23746                           postinc2	equ	0xFDE
 23747                           postdec2	equ	0xFDD
 23748                           fsr2h	equ	0xFDA
 23749                           fsr2l	equ	0xFD9
 23750                           status	equ	0xFD8
 23751                           
 23752 ;; *************** function ___ftpack *****************
 23753 ;; Defined at:
 23754 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\float.c"
 23755 ;; Parameters:    Size  Location     Type
 23756 ;;  arg             3   11[BANK0 ] unsigned um
 23757 ;;  exp             1   14[BANK0 ] unsigned char 
 23758 ;;  sign            1   15[BANK0 ] unsigned char 
 23759 ;; Auto vars:     Size  Location     Type
 23760 ;;		None
 23761 ;; Return value:  Size  Location     Type
 23762 ;;                  3   11[BANK0 ] float 
 23763 ;; Registers used:
 23764 ;;		wreg, status,2, status,0
 23765 ;; Tracked objects:
 23766 ;;		On entry : F/0
 23767 ;;		On exit  : F/0
 23768 ;;		Unchanged: FFFFFFF0/0
 23769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23770 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23772 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23773 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23774 ;;Total ram usage:        8 bytes
 23775 ;; Hardware stack levels used:    1
 23776 ;; Hardware stack levels required when called:    3
 23777 ;; This function calls:
 23778 ;;		Nothing
 23779 ;; This function is called by:
 23780 ;;		___altoft
 23781 ;;		___awtoft
 23782 ;;		___ftadd
 23783 ;;		___ftdiv
 23784 ;;		___ftmul
 23785 ;;		___lbtoft
 23786 ;;		___lltoft
 23787 ;;		___lwtoft
 23788 ;; This function uses a non-reentrant model
 23789 ;;
 23790                           
 23791                           	psect	text79
 23792  0069BE                     __ptext79:
 23793                           	opt stack 0
 23794  0069BE                     ___ftpack:
 23795                           	opt stack 25
 23796                           
 23797                           ; BSR set to: 0
 23798                           
 23799                           ; BSR set to: 0
 23800  0069BE  516E               	movf	___ftpack@exp& (0+255),w,b
 23801  0069C0  E004               	bz	l2861
 23802                           
 23803                           ; BSR set to: 0
 23804  0069C2  516B               	movf	___ftpack@arg& (0+255),w,b
 23805  0069C4  116C               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 23806  0069C6  116D               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 23807  0069C8  E106               	bnz	l20469
 23808  0069CA                     l2861:
 23809                           
 23810                           ; BSR set to: 0
 23811  0069CA  6B6B               	clrf	?___ftpack& (0+255),b
 23812  0069CC  6B6C               	clrf	(?___ftpack+1)& (0+255),b
 23813  0069CE  6B6D               	clrf	(?___ftpack+2)& (0+255),b
 23814  0069D0  0012               	return	
 23815  0069D2                     l20467:
 23816                           
 23817                           ; BSR set to: 0
 23818  0069D2  2B6E               	incf	___ftpack@exp& (0+255),f,b
 23819  0069D4  D838               	call	PL68	;call to abstracted procedure
 23820  0069D6                     l20469:
 23821                           
 23822                           ; BSR set to: 0
 23823  0069D6  6B70               	clrf	??___ftpack& (0+255),b
 23824  0069D8  6B71               	clrf	(??___ftpack+1)& (0+255),b
 23825  0069DA  0EFE               	movlw	254
 23826  0069DC  156D               	andwf	(___ftpack@arg+2)& (0+255),w,b
 23827  0069DE  6F72               	movwf	(??___ftpack+2)& (0+255),b
 23828  0069E0  5170               	movf	??___ftpack& (0+255),w,b
 23829  0069E2  1171               	iorwf	(??___ftpack+1)& (0+255),w,b
 23830  0069E4  1172               	iorwf	(??___ftpack+2)& (0+255),w,b
 23831  0069E6  E007               	bz	l20475
 23832  0069E8  D7F4               	goto	l20467
 23833  0069EA                     l20471:
 23834                           
 23835                           ; BSR set to: 0
 23836  0069EA  2B6E               	incf	___ftpack@exp& (0+255),f,b
 23837                           
 23838                           ; BSR set to: 0
 23839  0069EC  2B6B               	incf	___ftpack@arg& (0+255),f,b
 23840  0069EE  0E00               	movlw	0
 23841  0069F0  236C               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 23842  0069F2  236D               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 23843  0069F4  D828               	call	PL68	;call to abstracted procedure
 23844  0069F6                     l20475:
 23845                           
 23846                           ; BSR set to: 0
 23847  0069F6  6B70               	clrf	??___ftpack& (0+255),b
 23848  0069F8  6B71               	clrf	(??___ftpack+1)& (0+255),b
 23849  0069FA  516D               	movf	(___ftpack@arg+2)& (0+255),w,b
 23850  0069FC  6F72               	movwf	(??___ftpack+2)& (0+255),b
 23851  0069FE  5170               	movf	??___ftpack& (0+255),w,b
 23852  006A00  1171               	iorwf	(??___ftpack+1)& (0+255),w,b
 23853  006A02  1172               	iorwf	(??___ftpack+2)& (0+255),w,b
 23854  006A04  E006               	bz	l20479
 23855  006A06  D7F1               	goto	l20471
 23856  006A08                     l20477:
 23857                           
 23858                           ; BSR set to: 0
 23859  006A08  076E               	decf	___ftpack@exp& (0+255),f,b
 23860  006A0A  90D8               	bcf	status,0,c
 23861  006A0C  376B               	rlcf	___ftpack@arg& (0+255),f,b
 23862  006A0E  376C               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 23863  006A10  376D               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 23864  006A12                     l20479:
 23865                           
 23866                           ; BSR set to: 0
 23867  006A12  AF6C               	btfss	(___ftpack@arg+1)& (0+255),7,b
 23868  006A14  D7F9               	goto	l20477
 23869                           
 23870                           ; BSR set to: 0
 23871  006A16  A16E               	btfss	___ftpack@exp& (0+255),0,b
 23872                           
 23873                           ; BSR set to: 0
 23874  006A18  9F6C               	bcf	(___ftpack@arg+1)& (0+255),7,b
 23875                           
 23876                           ; BSR set to: 0
 23877  006A1A  90D8               	bcf	status,0,c
 23878  006A1C  336E               	rrcf	___ftpack@exp& (0+255),f,b
 23879                           
 23880                           ; BSR set to: 0
 23881  006A1E  516E               	movf	___ftpack@exp& (0+255),w,b
 23882  006A20  6F72               	movwf	(??___ftpack+2)& (0+255),b
 23883  006A22  6B71               	clrf	(??___ftpack+1)& (0+255),b
 23884  006A24  6B70               	clrf	??___ftpack& (0+255),b
 23885  006A26  5170               	movf	??___ftpack& (0+255),w,b
 23886  006A28  136B               	iorwf	___ftpack@arg& (0+255),f,b
 23887  006A2A  5171               	movf	(??___ftpack+1)& (0+255),w,b
 23888  006A2C  136C               	iorwf	(___ftpack@arg+1)& (0+255),f,b
 23889  006A2E  5172               	movf	(??___ftpack+2)& (0+255),w,b
 23890  006A30  136D               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 23891                           
 23892                           ; BSR set to: 0
 23893  006A32  516F               	movf	___ftpack@sign& (0+255),w,b
 23894  006A34  A4D8               	btfss	status,2,c
 23895                           
 23896                           ; BSR set to: 0
 23897  006A36  8F6D               	bsf	(___ftpack@arg+2)& (0+255),7,b
 23898                           
 23899                           ; BSR set to: 0
 23900  006A38  C06B  F06B         	movff	___ftpack@arg,?___ftpack
 23901  006A3C  C06C  F06C         	movff	___ftpack@arg+1,?___ftpack+1
 23902  006A40  C06D  F06D         	movff	___ftpack@arg+2,?___ftpack+2
 23903                           
 23904                           ; BSR set to: 0
 23905  006A44  0012               	return	
 23906  006A46                     __end_of___ftpack:
 23907                           	opt stack 0
 23908  006A46                     PL68:
 23909  006A46  90D8               	bcf	status,0,c
 23910  006A48  336D               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 23911  006A4A  336C               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 23912  006A4C  336B               	rrcf	___ftpack@arg& (0+255),f,b
 23913  006A4E  0012               	return	
 23914                           tblptru	equ	0xFF8
 23915                           tblptrh	equ	0xFF7
 23916                           tblptrl	equ	0xFF6
 23917                           tablat	equ	0xFF5
 23918                           prodh	equ	0xFF4
 23919                           prodl	equ	0xFF3
 23920                           intcon	equ	0xFF2
 23921                           intcon2	equ	0xFF1
 23922                           postinc0	equ	0xFEE
 23923                           wreg	equ	0xFE8
 23924                           postinc1	equ	0xFE6
 23925                           postdec1	equ	0xFE5
 23926                           fsr1h	equ	0xFE2
 23927                           fsr1l	equ	0xFE1
 23928                           indf2	equ	0xFDF
 23929                           postinc2	equ	0xFDE
 23930                           postdec2	equ	0xFDD
 23931                           fsr2h	equ	0xFDA
 23932                           fsr2l	equ	0xFD9
 23933                           status	equ	0xFD8
 23934                           
 23935 ;; *************** function ___ftdiv *****************
 23936 ;; Defined at:
 23937 ;;		line 50 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftdiv.c"
 23938 ;; Parameters:    Size  Location     Type
 23939 ;;  f1              3   40[BANK0 ] float 
 23940 ;;  f2              3   43[BANK0 ] float 
 23941 ;; Auto vars:     Size  Location     Type
 23942 ;;  f3              3   52[BANK0 ] float 
 23943 ;;  sign            1   56[BANK0 ] unsigned char 
 23944 ;;  exp             1   55[BANK0 ] unsigned char 
 23945 ;;  cntr            1   51[BANK0 ] unsigned char 
 23946 ;; Return value:  Size  Location     Type
 23947 ;;                  3   40[BANK0 ] float 
 23948 ;; Registers used:
 23949 ;;		wreg, status,2, status,0, cstack
 23950 ;; Tracked objects:
 23951 ;;		On entry : 0/0
 23952 ;;		On exit  : F/0
 23953 ;;		Unchanged: FFFFFFF0/0
 23954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23955 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23956 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23957 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23958 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23959 ;;Total ram usage:       17 bytes
 23960 ;; Hardware stack levels used:    1
 23961 ;; Hardware stack levels required when called:    4
 23962 ;; This function calls:
 23963 ;;		___ftpack
 23964 ;; This function is called by:
 23965 ;;		_MinTimeToMove
 23966 ;;		_SpeedRequiredToMoveInTime
 23967 ;;		_MoveAdvanced
 23968 ;;		_CreateOrbitProgram
 23969 ;;		_RunOrbitProgram
 23970 ;; This function uses a non-reentrant model
 23971 ;;
 23972                           
 23973                           	psect	text80
 23974  0063A0                     __ptext80:
 23975                           	opt stack 0
 23976  0063A0                     ___ftdiv:
 23977                           	opt stack 24
 23978                           
 23979                           ; BSR set to: 0
 23980  0063A0  0E0F               	movlw	15
 23981  0063A2  0100               	movlb	0	; () banked
 23982  0063A4  6F8E               	movwf	??___ftdiv& (0+255),b
 23983  0063A6  C088  F08F         	movff	___ftdiv@f1,??___ftdiv+1
 23984  0063AA  C089  F090         	movff	___ftdiv@f1+1,??___ftdiv+2
 23985  0063AE  C08A  F091         	movff	___ftdiv@f1+2,??___ftdiv+3
 23986  0063B2  298E               	incf	??___ftdiv& (0+255),w,b
 23987  0063B4  6F92               	movwf	(??___ftdiv+4)& (0+255),b
 23988  0063B6  D001               	goto	u13110
 23989  0063B8                     u13115:
 23990  0063B8  D860               	call	PL71	;call to abstracted procedure
 23991  0063BA                     u13110:
 23992  0063BA  2F92               	decfsz	(??___ftdiv+4)& (0+255),f,b
 23993  0063BC  D7FD               	goto	u13115
 23994  0063BE  518F               	movf	(??___ftdiv+1)& (0+255),w,b
 23995  0063C0  6F97               	movwf	___ftdiv@exp& (0+255),b
 23996  0063C2  0100               	movlb	0	; () banked
 23997  0063C4  6797               	tstfsz	___ftdiv@exp& (0+255),b
 23998  0063C6  D004               	goto	l20591
 23999                           
 24000                           ; BSR set to: 0
 24001  0063C8  6B88               	clrf	?___ftdiv& (0+255),b
 24002  0063CA  6B89               	clrf	(?___ftdiv+1)& (0+255),b
 24003  0063CC  6B8A               	clrf	(?___ftdiv+2)& (0+255),b
 24004  0063CE  0012               	return	
 24005  0063D0                     l20591:
 24006                           
 24007                           ; BSR set to: 0
 24008  0063D0  0E0F               	movlw	15
 24009  0063D2  6F8E               	movwf	??___ftdiv& (0+255),b
 24010  0063D4  C08B  F08F         	movff	___ftdiv@f2,??___ftdiv+1
 24011  0063D8  C08C  F090         	movff	___ftdiv@f2+1,??___ftdiv+2
 24012  0063DC  C08D  F091         	movff	___ftdiv@f2+2,??___ftdiv+3
 24013  0063E0  298E               	incf	??___ftdiv& (0+255),w,b
 24014  0063E2  6F92               	movwf	(??___ftdiv+4)& (0+255),b
 24015  0063E4  D001               	goto	u13130
 24016  0063E6                     u13135:
 24017  0063E6  D849               	call	PL71	;call to abstracted procedure
 24018  0063E8                     u13130:
 24019  0063E8  2F92               	decfsz	(??___ftdiv+4)& (0+255),f,b
 24020  0063EA  D7FD               	goto	u13135
 24021  0063EC  518F               	movf	(??___ftdiv+1)& (0+255),w,b
 24022  0063EE  6F98               	movwf	___ftdiv@sign& (0+255),b
 24023  0063F0  0100               	movlb	0	; () banked
 24024  0063F2  6798               	tstfsz	___ftdiv@sign& (0+255),b
 24025  0063F4  D004               	goto	l2932
 24026                           
 24027                           ; BSR set to: 0
 24028  0063F6  6B88               	clrf	?___ftdiv& (0+255),b
 24029  0063F8  6B89               	clrf	(?___ftdiv+1)& (0+255),b
 24030  0063FA  6B8A               	clrf	(?___ftdiv+2)& (0+255),b
 24031  0063FC  0012               	return	
 24032  0063FE                     l2932:
 24033                           
 24034                           ; BSR set to: 0
 24035  0063FE  6B94               	clrf	___ftdiv@f3& (0+255),b
 24036  006400  6B95               	clrf	(___ftdiv@f3+1)& (0+255),b
 24037  006402  6B96               	clrf	(___ftdiv@f3+2)& (0+255),b
 24038                           
 24039                           ; BSR set to: 0
 24040  006404  5198               	movf	___ftdiv@sign& (0+255),w,b
 24041  006406  0F89               	addlw	137
 24042  006408  5F97               	subwf	___ftdiv@exp& (0+255),f,b
 24043                           
 24044                           ; BSR set to: 0
 24045  00640A  C08A  F098         	movff	___ftdiv@f1+2,___ftdiv@sign
 24046  00640E  0100               	movlb	0	; () banked
 24047  006410  518D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 24048  006412  1B98               	xorwf	___ftdiv@sign& (0+255),f,b
 24049  006414  0E80               	movlw	128
 24050  006416  1798               	andwf	___ftdiv@sign& (0+255),f,b
 24051                           
 24052                           ; BSR set to: 0
 24053  006418  8F89               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 24054                           
 24055                           ; BSR set to: 0
 24056  00641A  6B8A               	clrf	(___ftdiv@f1+2)& (0+255),b
 24057                           
 24058                           ; BSR set to: 0
 24059  00641C  8F8C               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 24060                           
 24061                           ; BSR set to: 0
 24062  00641E  6B8D               	clrf	(___ftdiv@f2+2)& (0+255),b
 24063                           
 24064                           ; BSR set to: 0
 24065  006420  0E18               	movlw	24
 24066  006422  6F93               	movwf	___ftdiv@cntr& (0+255),b
 24067  006424                     l20609:
 24068                           
 24069                           ; BSR set to: 0
 24070  006424  90D8               	bcf	status,0,c
 24071  006426  3794               	rlcf	___ftdiv@f3& (0+255),f,b
 24072  006428  3795               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 24073  00642A  3796               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 24074                           
 24075                           ; BSR set to: 0
 24076  00642C  518B               	movf	___ftdiv@f2& (0+255),w,b
 24077  00642E  5D88               	subwf	___ftdiv@f1& (0+255),w,b
 24078  006430  518C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 24079  006432  5989               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 24080  006434  518D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 24081  006436  598A               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 24082  006438  E307               	bnc	l2934
 24083                           
 24084                           ; BSR set to: 0
 24085  00643A  518B               	movf	___ftdiv@f2& (0+255),w,b
 24086  00643C  5F88               	subwf	___ftdiv@f1& (0+255),f,b
 24087  00643E  518C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 24088  006440  5B89               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 24089  006442  518D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 24090  006444  5B8A               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 24091                           
 24092                           ; BSR set to: 0
 24093  006446  8194               	bsf	___ftdiv@f3& (0+255),0,b
 24094  006448                     l2934:
 24095                           
 24096                           ; BSR set to: 0
 24097  006448  90D8               	bcf	status,0,c
 24098  00644A  3788               	rlcf	___ftdiv@f1& (0+255),f,b
 24099  00644C  3789               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 24100  00644E  378A               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 24101                           
 24102                           ; BSR set to: 0
 24103  006450  2F93               	decfsz	___ftdiv@cntr& (0+255),f,b
 24104  006452  D7E8               	goto	l20609
 24105                           
 24106                           ; BSR set to: 0
 24107  006454  C094  F06B         	movff	___ftdiv@f3,?___ftpack
 24108  006458  C095  F06C         	movff	___ftdiv@f3+1,?___ftpack+1
 24109  00645C  C096  F06D         	movff	___ftdiv@f3+2,?___ftpack+2
 24110  006460  C097  F06E         	movff	___ftdiv@exp,?___ftpack+3
 24111  006464  C098  F06F         	movff	___ftdiv@sign,?___ftpack+4
 24112  006468  ECDF  F034         	call	___ftpack	;wreg free
 24113  00646C  C06B  F088         	movff	?___ftpack,?___ftdiv
 24114  006470  C06C  F089         	movff	?___ftpack+1,?___ftdiv+1
 24115  006474  C06D  F08A         	movff	?___ftpack+2,?___ftdiv+2
 24116                           
 24117                           ; BSR set to: 0
 24118  006478  0012               	return	
 24119  00647A                     __end_of___ftdiv:
 24120                           	opt stack 0
 24121  00647A                     PL71:
 24122  00647A  90D8               	bcf	status,0,c
 24123  00647C  3391               	rrcf	(??___ftdiv+3)& (0+255),f,b
 24124  00647E  3390               	rrcf	(??___ftdiv+2)& (0+255),f,b
 24125  006480  338F               	rrcf	(??___ftdiv+1)& (0+255),f,b
 24126  006482  0012               	return	
 24127                           tblptru	equ	0xFF8
 24128                           tblptrh	equ	0xFF7
 24129                           tblptrl	equ	0xFF6
 24130                           tablat	equ	0xFF5
 24131                           prodh	equ	0xFF4
 24132                           prodl	equ	0xFF3
 24133                           intcon	equ	0xFF2
 24134                           intcon2	equ	0xFF1
 24135                           postinc0	equ	0xFEE
 24136                           wreg	equ	0xFE8
 24137                           postinc1	equ	0xFE6
 24138                           postdec1	equ	0xFE5
 24139                           fsr1h	equ	0xFE2
 24140                           fsr1l	equ	0xFE1
 24141                           indf2	equ	0xFDF
 24142                           postinc2	equ	0xFDE
 24143                           postdec2	equ	0xFDD
 24144                           fsr2h	equ	0xFDA
 24145                           fsr2l	equ	0xFD9
 24146                           status	equ	0xFD8
 24147                           
 24148 ;; *************** function ___ftmul *****************
 24149 ;; Defined at:
 24150 ;;		line 52 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftmul.c"
 24151 ;; Parameters:    Size  Location     Type
 24152 ;;  f1              3   23[BANK0 ] float 
 24153 ;;  f2              3   26[BANK0 ] float 
 24154 ;; Auto vars:     Size  Location     Type
 24155 ;;  f3_as_produc    3   35[BANK0 ] unsigned um
 24156 ;;  sign            1   39[BANK0 ] unsigned char 
 24157 ;;  cntr            1   38[BANK0 ] unsigned char 
 24158 ;;  exp             1   34[BANK0 ] unsigned char 
 24159 ;; Return value:  Size  Location     Type
 24160 ;;                  3   23[BANK0 ] float 
 24161 ;; Registers used:
 24162 ;;		wreg, status,2, status,0, cstack
 24163 ;; Tracked objects:
 24164 ;;		On entry : E/0
 24165 ;;		On exit  : F/0
 24166 ;;		Unchanged: FFFFFFF0/0
 24167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24168 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24169 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24170 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24171 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24172 ;;Total ram usage:       17 bytes
 24173 ;; Hardware stack levels used:    1
 24174 ;; Hardware stack levels required when called:    4
 24175 ;; This function calls:
 24176 ;;		___ftpack
 24177 ;; This function is called by:
 24178 ;;		_MinTimeToMove
 24179 ;;		_SpeedRequiredToMoveInTime
 24180 ;;		_MoveAdvanced
 24181 ;;		_CreateOrbitProgram
 24182 ;;		_RunOrbitProgram
 24183 ;;		_RealtimeMode
 24184 ;;		_Now
 24185 ;;		_GetFloat
 24186 ;;		_ConvertTimeToDiscrete
 24187 ;;		_sqrt
 24188 ;;		___asftmul
 24189 ;; This function uses a non-reentrant model
 24190 ;;
 24191                           
 24192                           	psect	text81
 24193  0062A4                     __ptext81:
 24194                           	opt stack 0
 24195  0062A4                     ___ftmul:
 24196                           	opt stack 24
 24197                           
 24198                           ; BSR set to: 0
 24199  0062A4  0E0F               	movlw	15
 24200  0062A6  0100               	movlb	0	; () banked
 24201  0062A8  6F7D               	movwf	??___ftmul& (0+255),b
 24202  0062AA  C077  F07E         	movff	___ftmul@f1,??___ftmul+1
 24203  0062AE  C078  F07F         	movff	___ftmul@f1+1,??___ftmul+2
 24204  0062B2  C079  F080         	movff	___ftmul@f1+2,??___ftmul+3
 24205  0062B6  297D               	incf	??___ftmul& (0+255),w,b
 24206  0062B8  6F81               	movwf	(??___ftmul+4)& (0+255),b
 24207  0062BA  D001               	goto	u13190
 24208  0062BC                     u13195:
 24209  0062BC  D86C               	call	PL69	;call to abstracted procedure
 24210  0062BE                     u13190:
 24211  0062BE  2F81               	decfsz	(??___ftmul+4)& (0+255),f,b
 24212  0062C0  D7FD               	goto	u13195
 24213  0062C2  517E               	movf	(??___ftmul+1)& (0+255),w,b
 24214  0062C4  6F82               	movwf	___ftmul@exp& (0+255),b
 24215  0062C6  0100               	movlb	0	; () banked
 24216  0062C8  6782               	tstfsz	___ftmul@exp& (0+255),b
 24217  0062CA  D004               	goto	l20645
 24218                           
 24219                           ; BSR set to: 0
 24220  0062CC  6B77               	clrf	?___ftmul& (0+255),b
 24221  0062CE  6B78               	clrf	(?___ftmul+1)& (0+255),b
 24222  0062D0  6B79               	clrf	(?___ftmul+2)& (0+255),b
 24223  0062D2  0012               	return	
 24224  0062D4                     l20645:
 24225                           
 24226                           ; BSR set to: 0
 24227  0062D4  0E0F               	movlw	15
 24228  0062D6  6F7D               	movwf	??___ftmul& (0+255),b
 24229  0062D8  C07A  F07E         	movff	___ftmul@f2,??___ftmul+1
 24230  0062DC  C07B  F07F         	movff	___ftmul@f2+1,??___ftmul+2
 24231  0062E0  C07C  F080         	movff	___ftmul@f2+2,??___ftmul+3
 24232  0062E4  297D               	incf	??___ftmul& (0+255),w,b
 24233  0062E6  6F81               	movwf	(??___ftmul+4)& (0+255),b
 24234  0062E8  D001               	goto	u13210
 24235  0062EA                     u13215:
 24236  0062EA  D855               	call	PL69	;call to abstracted procedure
 24237  0062EC                     u13210:
 24238  0062EC  2F81               	decfsz	(??___ftmul+4)& (0+255),f,b
 24239  0062EE  D7FD               	goto	u13215
 24240  0062F0  517E               	movf	(??___ftmul+1)& (0+255),w,b
 24241  0062F2  6F87               	movwf	___ftmul@sign& (0+255),b
 24242  0062F4  0100               	movlb	0	; () banked
 24243  0062F6  6787               	tstfsz	___ftmul@sign& (0+255),b
 24244  0062F8  D004               	goto	l20649
 24245                           
 24246                           ; BSR set to: 0
 24247  0062FA  6B77               	clrf	?___ftmul& (0+255),b
 24248  0062FC  6B78               	clrf	(?___ftmul+1)& (0+255),b
 24249  0062FE  6B79               	clrf	(?___ftmul+2)& (0+255),b
 24250  006300  0012               	return	
 24251  006302                     l20649:
 24252                           
 24253                           ; BSR set to: 0
 24254  006302  5187               	movf	___ftmul@sign& (0+255),w,b
 24255  006304  0F7B               	addlw	123
 24256  006306  2782               	addwf	___ftmul@exp& (0+255),f,b
 24257                           
 24258                           ; BSR set to: 0
 24259  006308  C079  F087         	movff	___ftmul@f1+2,___ftmul@sign
 24260  00630C  0100               	movlb	0	; () banked
 24261  00630E  517C               	movf	(___ftmul@f2+2)& (0+255),w,b
 24262  006310  1B87               	xorwf	___ftmul@sign& (0+255),f,b
 24263  006312  0E80               	movlw	128
 24264  006314  1787               	andwf	___ftmul@sign& (0+255),f,b
 24265                           
 24266                           ; BSR set to: 0
 24267  006316  8F78               	bsf	(___ftmul@f1+1)& (0+255),7,b
 24268                           
 24269                           ; BSR set to: 0
 24270  006318  8F7B               	bsf	(___ftmul@f2+1)& (0+255),7,b
 24271                           
 24272                           ; BSR set to: 0
 24273  00631A  0E00               	movlw	0
 24274  00631C  177C               	andwf	(___ftmul@f2+2)& (0+255),f,b
 24275                           
 24276                           ; BSR set to: 0
 24277  00631E  6B83               	clrf	___ftmul@f3_as_product& (0+255),b
 24278  006320  6B84               	clrf	(___ftmul@f3_as_product+1)& (0+255),b
 24279  006322  6B85               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 24280                           
 24281                           ; BSR set to: 0
 24282  006324  0E07               	movlw	7
 24283  006326  6F86               	movwf	___ftmul@cntr& (0+255),b
 24284  006328                     l20663:
 24285                           
 24286                           ; BSR set to: 0
 24287  006328  A177               	btfss	___ftmul@f1& (0+255),0,b
 24288  00632A  D002               	goto	l20667
 24289                           
 24290                           ; BSR set to: 0
 24291  00632C  517A               	movf	___ftmul@f2& (0+255),w,b
 24292  00632E  D82D               	call	PL67	;call to abstracted procedure
 24293  006330                     l20667:
 24294                           
 24295                           ; BSR set to: 0
 24296  006330  90D8               	bcf	status,0,c
 24297  006332  3379               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 24298  006334  3378               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 24299  006336  3377               	rrcf	___ftmul@f1& (0+255),f,b
 24300  006338  90D8               	bcf	status,0,c
 24301  00633A  377A               	rlcf	___ftmul@f2& (0+255),f,b
 24302  00633C  377B               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 24303  00633E  377C               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 24304                           
 24305                           ; BSR set to: 0
 24306  006340  2F86               	decfsz	___ftmul@cntr& (0+255),f,b
 24307  006342  D7F2               	goto	l20663
 24308                           
 24309                           ; BSR set to: 0
 24310  006344  0E09               	movlw	9
 24311  006346  6F86               	movwf	___ftmul@cntr& (0+255),b
 24312  006348                     l20673:
 24313                           
 24314                           ; BSR set to: 0
 24315  006348  A177               	btfss	___ftmul@f1& (0+255),0,b
 24316  00634A  D002               	goto	l20677
 24317                           
 24318                           ; BSR set to: 0
 24319  00634C  517A               	movf	___ftmul@f2& (0+255),w,b
 24320  00634E  D81D               	call	PL67	;call to abstracted procedure
 24321  006350                     l20677:
 24322                           
 24323                           ; BSR set to: 0
 24324  006350  90D8               	bcf	status,0,c
 24325  006352  3379               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 24326  006354  3378               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 24327  006356  3377               	rrcf	___ftmul@f1& (0+255),f,b
 24328  006358  90D8               	bcf	status,0,c
 24329  00635A  3385               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 24330  00635C  3384               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 24331  00635E  3383               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 24332                           
 24333                           ; BSR set to: 0
 24334  006360  2F86               	decfsz	___ftmul@cntr& (0+255),f,b
 24335  006362  D7F2               	goto	l20673
 24336                           
 24337                           ; BSR set to: 0
 24338  006364  C083  F06B         	movff	___ftmul@f3_as_product,?___ftpack
 24339  006368  C084  F06C         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 24340  00636C  C085  F06D         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 24341  006370  C082  F06E         	movff	___ftmul@exp,?___ftpack+3
 24342  006374  C087  F06F         	movff	___ftmul@sign,?___ftpack+4
 24343  006378  ECDF  F034         	call	___ftpack	;wreg free
 24344  00637C  C06B  F077         	movff	?___ftpack,?___ftmul
 24345  006380  C06C  F078         	movff	?___ftpack+1,?___ftmul+1
 24346  006384  C06D  F079         	movff	?___ftpack+2,?___ftmul+2
 24347                           
 24348                           ; BSR set to: 0
 24349  006388  0012               	return	
 24350  00638A                     __end_of___ftmul:
 24351                           	opt stack 0
 24352  00638A                     PL67:
 24353  00638A  2783               	addwf	___ftmul@f3_as_product& (0+255),f,b
 24354  00638C  517B               	movf	(___ftmul@f2+1)& (0+255),w,b
 24355  00638E  2384               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 24356  006390  517C               	movf	(___ftmul@f2+2)& (0+255),w,b
 24357  006392  2385               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 24358  006394  0012               	return	
 24359  006396                     PL69:
 24360  006396  90D8               	bcf	status,0,c
 24361  006398  3380               	rrcf	(??___ftmul+3)& (0+255),f,b
 24362  00639A  337F               	rrcf	(??___ftmul+2)& (0+255),f,b
 24363  00639C  337E               	rrcf	(??___ftmul+1)& (0+255),f,b
 24364  00639E  0012               	return	
 24365                           tblptru	equ	0xFF8
 24366                           tblptrh	equ	0xFF7
 24367                           tblptrl	equ	0xFF6
 24368                           tablat	equ	0xFF5
 24369                           prodh	equ	0xFF4
 24370                           prodl	equ	0xFF3
 24371                           intcon	equ	0xFF2
 24372                           intcon2	equ	0xFF1
 24373                           postinc0	equ	0xFEE
 24374                           wreg	equ	0xFE8
 24375                           postinc1	equ	0xFE6
 24376                           postdec1	equ	0xFE5
 24377                           fsr1h	equ	0xFE2
 24378                           fsr1l	equ	0xFE1
 24379                           indf2	equ	0xFDF
 24380                           postinc2	equ	0xFDE
 24381                           postdec2	equ	0xFDD
 24382                           fsr2h	equ	0xFDA
 24383                           fsr2l	equ	0xFD9
 24384                           status	equ	0xFD8
 24385                           
 24386 ;; *************** function ___lwtoft *****************
 24387 ;; Defined at:
 24388 ;;		line 29 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwtoft.c"
 24389 ;; Parameters:    Size  Location     Type
 24390 ;;  c               2   19[BANK0 ] unsigned int 
 24391 ;; Auto vars:     Size  Location     Type
 24392 ;;		None
 24393 ;; Return value:  Size  Location     Type
 24394 ;;                  3   19[BANK0 ] float 
 24395 ;; Registers used:
 24396 ;;		wreg, status,2, status,0, cstack
 24397 ;; Tracked objects:
 24398 ;;		On entry : 0/0
 24399 ;;		On exit  : F/0
 24400 ;;		Unchanged: FFFFFFF0/0
 24401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24402 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24405 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24406 ;;Total ram usage:        3 bytes
 24407 ;; Hardware stack levels used:    1
 24408 ;; Hardware stack levels required when called:    4
 24409 ;; This function calls:
 24410 ;;		___ftpack
 24411 ;; This function is called by:
 24412 ;;		_ExtMode
 24413 ;;		_Idle
 24414 ;;		_RunOrbitProgram
 24415 ;;		_ShowVoltage
 24416 ;;		_CreateWaypointProgram
 24417 ;;		_RunWaypointProgram
 24418 ;; This function uses a non-reentrant model
 24419 ;;
 24420                           
 24421                           	psect	text82
 24422  007796                     __ptext82:
 24423                           	opt stack 0
 24424  007796                     ___lwtoft:
 24425                           	opt stack 25
 24426                           
 24427                           ; BSR set to: 0
 24428  007796  0100               	movlb	0	; () banked
 24429  007798  C073  F06B         	movff	___lwtoft@c,?___ftpack
 24430  00779C  C074  F06C         	movff	___lwtoft@c+1,?___ftpack+1
 24431  0077A0  6B6D               	clrf	(?___ftpack+2)& (0+255),b
 24432  0077A2  0E8E               	movlw	142
 24433  0077A4  6F6E               	movwf	(?___ftpack+3)& (0+255),b
 24434  0077A6  0E00               	movlw	0
 24435  0077A8  6B6F               	clrf	(?___ftpack+4)& (0+255),b
 24436  0077AA  ECDF  F034         	call	___ftpack	;wreg free
 24437  0077AE  C06B  F073         	movff	?___ftpack,?___lwtoft
 24438  0077B2  C06C  F074         	movff	?___ftpack+1,?___lwtoft+1
 24439  0077B6  C06D  F075         	movff	?___ftpack+2,?___lwtoft+2
 24440                           
 24441                           ; BSR set to: 0
 24442  0077BA  0012               	return	
 24443  0077BC                     __end_of___lwtoft:
 24444                           	opt stack 0
 24445                           tblptru	equ	0xFF8
 24446                           tblptrh	equ	0xFF7
 24447                           tblptrl	equ	0xFF6
 24448                           tablat	equ	0xFF5
 24449                           prodh	equ	0xFF4
 24450                           prodl	equ	0xFF3
 24451                           intcon	equ	0xFF2
 24452                           intcon2	equ	0xFF1
 24453                           postinc0	equ	0xFEE
 24454                           wreg	equ	0xFE8
 24455                           postinc1	equ	0xFE6
 24456                           postdec1	equ	0xFE5
 24457                           fsr1h	equ	0xFE2
 24458                           fsr1l	equ	0xFE1
 24459                           indf2	equ	0xFDF
 24460                           postinc2	equ	0xFDE
 24461                           postdec2	equ	0xFDD
 24462                           fsr2h	equ	0xFDA
 24463                           fsr2l	equ	0xFD9
 24464                           status	equ	0xFD8
 24465                           
 24466 ;; *************** function _SlowTick *****************
 24467 ;; Defined at:
 24468 ;;		line 217 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 24469 ;; Parameters:    Size  Location     Type
 24470 ;;		None
 24471 ;; Auto vars:     Size  Location     Type
 24472 ;;  PID_Error       4   42[COMRAM] long 
 24473 ;;  CurrentMotor    4   36[COMRAM] long 
 24474 ;;  PID_Response    4   30[COMRAM] unsigned long 
 24475 ;;  ResponseOutp    2   46[COMRAM] int 
 24476 ;;  uiTemp          2   40[COMRAM] unsigned int 
 24477 ;;  MotorSpeed      2   34[COMRAM] int 
 24478 ;;  diff            2   27[COMRAM] int 
 24479 ;;  BatteryScale    2   25[COMRAM] unsigned int 
 24480 ;;  PID_Error_de    2   23[COMRAM] int 
 24481 ;;  ucBatt          1   29[COMRAM] unsigned char 
 24482 ;; Return value:  Size  Location     Type
 24483 ;;		None               void
 24484 ;; Registers used:
 24485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24486 ;; Tracked objects:
 24487 ;;		On entry : 0/0
 24488 ;;		On exit  : 0/0
 24489 ;;		Unchanged: 0/0
 24490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24492 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24493 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24494 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24495 ;;Total ram usage:       41 bytes
 24496 ;; Hardware stack levels used:    1
 24497 ;; Hardware stack levels required when called:    2
 24498 ;; This function calls:
 24499 ;;		i1___wmul
 24500 ;;		i1___lwdiv
 24501 ;; This function is called by:
 24502 ;;		Interrupt level 1
 24503 ;; This function uses a non-reentrant model
 24504 ;;
 24505                           
 24506                           	psect	intcodelo
 24507  001018                     __pintcodelo:
 24508                           	opt stack 0
 24509  001018                     _SlowTick:
 24510                           	opt stack 20
 24511                           
 24512                           ; BSR set to: 0
 24513  001018  CFD8 F00F          	movff	status,??_SlowTick+7
 24514  00101C  CFE8 F010          	movff	wreg,??_SlowTick+8
 24515  001020  CFE0 F011          	movff	bsr,??_SlowTick+9
 24516  001024  CFD9 F012          	movff	fsr2l,??_SlowTick+10
 24517  001028  CFDA F013          	movff	fsr2h,??_SlowTick+11
 24518  00102C  CFF6 F014          	movff	tblptrl,??_SlowTick+12
 24519  001030  CFF7 F015          	movff	tblptrh,??_SlowTick+13
 24520  001034  CFF8 F016          	movff	tblptru,??_SlowTick+14
 24521  001038  CFF5 F017          	movff	tablat,??_SlowTick+15
 24522  00103C                     
 24523                           ;Main.c: 244: TMR1IF = 0;
 24524  00103C  909E               	bcf	3998,0,c	;volatile
 24525  00103E                     
 24526                           ;Main.c: 249: internal_Tick500Hz++;
 24527  00103E  0E01               	movlw	1
 24528  001040  2631               	addwf	SlowTick@internal_Tick500Hz,f,c
 24529  001042  0E00               	movlw	0
 24530  001044  2232               	addwfc	SlowTick@internal_Tick500Hz+1,f,c
 24531  001046  0E00               	movlw	0
 24532  001048  2233               	addwfc	SlowTick@internal_Tick500Hz+2,f,c
 24533  00104A  0E00               	movlw	0
 24534  00104C  2234               	addwfc	SlowTick@internal_Tick500Hz+3,f,c
 24535  00104E                     
 24536                           ;Main.c: 250: if (!bLock_Tick500Hz) Tick500Hz = internal_Tick500Hz;
 24537  00104E  0100               	movlb	(_bLock_Tick500Hz/(0+8)) shr (0+8)
 24538  001050  B659               	btfsc	_bLock_Tick500Hz/(0+8),_bLock_Tick500Hz& (0+7),c	;volatile
 24539  001052  D001               	goto	i1u904_21
 24540  001054  D001               	goto	i1u904_20
 24541  001056                     i1u904_21:
 24542  001056  D008               	goto	i1l834
 24543  001058                     i1u904_20:
 24544  001058  C031  F1F8         	movff	SlowTick@internal_Tick500Hz,_Tick500Hz	;volatile
 24545  00105C  C032  F1F9         	movff	SlowTick@internal_Tick500Hz+1,_Tick500Hz+1	;volatile
 24546  001060  C033  F1FA         	movff	SlowTick@internal_Tick500Hz+2,_Tick500Hz+2	;volatile
 24547  001064  C034  F1FB         	movff	SlowTick@internal_Tick500Hz+3,_Tick500Hz+3	;volatile
 24548  001068                     i1l834:
 24549                           
 24550                           ;Main.c: 251: if (bWaiting) {
 24551  001068  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 24552  00106A  A85A               	btfss	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 24553  00106C  D001               	goto	i1u905_21
 24554  00106E  D001               	goto	i1u905_20
 24555  001070                     i1u905_21:
 24556  001070  D00E               	goto	i1l16273
 24557  001072                     i1u905_20:
 24558  001072                     
 24559                           ;Main.c: 252: if (internal_Tick500Hz > WaitUntil_Tick500Hz) {
 24560  001072  5031               	movf	SlowTick@internal_Tick500Hz,w,c
 24561  001074  5C45               	subwf	_WaitUntil_Tick500Hz,w,c	;volatile
 24562  001076  5032               	movf	SlowTick@internal_Tick500Hz+1,w,c
 24563  001078  5846               	subwfb	_WaitUntil_Tick500Hz+1,w,c	;volatile
 24564  00107A  5033               	movf	SlowTick@internal_Tick500Hz+2,w,c
 24565  00107C  5847               	subwfb	_WaitUntil_Tick500Hz+2,w,c	;volatile
 24566  00107E  5034               	movf	SlowTick@internal_Tick500Hz+3,w,c
 24567  001080  5848               	subwfb	_WaitUntil_Tick500Hz+3,w,c	;volatile
 24568  001082  B0D8               	btfsc	status,0,c
 24569  001084  D001               	goto	i1u906_21
 24570  001086  D001               	goto	i1u906_20
 24571  001088                     i1u906_21:
 24572  001088  D002               	goto	i1l16273
 24573  00108A                     i1u906_20:
 24574  00108A                     
 24575                           ;Main.c: 253: bWaiting = 0;
 24576  00108A  0100               	movlb	(_bWaiting/(0+8)) shr (0+8)
 24577  00108C  985A               	bcf	_bWaiting/(0+8),_bWaiting& (0+7),c	;volatile
 24578  00108E                     i1l16273:
 24579                           
 24580                           ;Main.c: 254: }
 24581                           ;Main.c: 255: }
 24582                           ;Main.c: 260: if (LCD_IdleTimer) {
 24583  00108E  504A               	movf	SlowTick@LCD_IdleTimer+1,w,c
 24584  001090  1049               	iorwf	SlowTick@LCD_IdleTimer,w,c
 24585  001092  B4D8               	btfsc	status,2,c
 24586  001094  D001               	goto	i1u907_21
 24587  001096  D001               	goto	i1u907_20
 24588  001098                     i1u907_21:
 24589  001098  D006               	goto	i1l837
 24590  00109A                     i1u907_20:
 24591  00109A                     
 24592                           ;Main.c: 261: LCD_IdleTimer--;
 24593  00109A  0649               	decf	SlowTick@LCD_IdleTimer,f,c
 24594  00109C  A0D8               	btfss	status,0,c
 24595  00109E  064A               	decf	SlowTick@LCD_IdleTimer+1,f,c
 24596  0010A0                     
 24597                           ;Main.c: 262: LCD_BacklightEnabled = 1;
 24598  0010A0  0100               	movlb	(_LCD_BacklightEnabled/(0+8)) shr (0+8)
 24599  0010A2  8A57               	bsf	_LCD_BacklightEnabled/(0+8),_LCD_BacklightEnabled& (0+7),c	;volatile
 24600                           
 24601                           ;Main.c: 263: } else {
 24602  0010A4  D002               	goto	i1l838
 24603  0010A6                     i1l837:
 24604                           
 24605                           ;Main.c: 264: LCD_BacklightEnabled = 0;
 24606  0010A6  0100               	movlb	(_LCD_BacklightEnabled/(0+8)) shr (0+8)
 24607  0010A8  9A57               	bcf	_LCD_BacklightEnabled/(0+8),_LCD_BacklightEnabled& (0+7),c	;volatile
 24608  0010AA                     i1l838:
 24609                           
 24610                           ;Main.c: 265: }
 24611                           ;Main.c: 267: if (bPowerOff) LCD_BacklightEnabled = 0;
 24612  0010AA  0100               	movlb	(_bPowerOff/(0+8)) shr (0+8)
 24613  0010AC  A25A               	btfss	_bPowerOff/(0+8),_bPowerOff& (0+7),c	;volatile
 24614  0010AE  D001               	goto	i1u908_21
 24615  0010B0  D001               	goto	i1u908_20
 24616  0010B2                     i1u908_21:
 24617  0010B2  D002               	goto	i1l16281
 24618  0010B4                     i1u908_20:
 24619  0010B4  0100               	movlb	(_LCD_BacklightEnabled/(0+8)) shr (0+8)
 24620  0010B6  9A57               	bcf	_LCD_BacklightEnabled/(0+8),_LCD_BacklightEnabled& (0+7),c	;volatile
 24621  0010B8                     i1l16281:
 24622                           
 24623                           ;Main.c: 274: RotaryEncoder <<= 2;
 24624  0010B8  90D8               	bcf	status,0,c
 24625  0010BA  3654               	rlcf	SlowTick@RotaryEncoder,f,c
 24626  0010BC  90D8               	bcf	status,0,c
 24627  0010BE  3654               	rlcf	SlowTick@RotaryEncoder,f,c
 24628                           
 24629                           ;Main.c: 275: RotaryEncoder |= ((PORTB & 0b00011000)>>3);
 24630  0010C0  3881               	swapf	3969,w,c	;volatile
 24631  0010C2  46E8               	rlncf	wreg,f,c
 24632  0010C4  0B1F               	andlw	31
 24633  0010C6  0B03               	andlw	3
 24634  0010C8  1254               	iorwf	SlowTick@RotaryEncoder,f,c
 24635                           
 24636                           ;Main.c: 276: RotaryEncoder & = 0x0F;
 24637  0010CA  0E0F               	movlw	15
 24638  0010CC  1654               	andwf	SlowTick@RotaryEncoder,f,c
 24639  0010CE                     
 24640                           ;Main.c: 277: RawRotaryEncoder -= enc_states[RotaryEncoder];
 24641  0010CE  0ED4               	movlw	low _enc_states
 24642  0010D0  2454               	addwf	SlowTick@RotaryEncoder,w,c
 24643  0010D2  6EF6               	movwf	tblptrl,c
 24644  0010D4  6AF7               	clrf	tblptrh,c
 24645  0010D6  0E19               	movlw	high _enc_states
 24646  0010D8  22F7               	addwfc	tblptrh,f,c
 24647  0010DA  6AF8               	clrf	tblptru,c
 24648  0010DC  0E00               	movlw	low (__mediumconst shr (0+16))
 24649  0010DE  22F8               	addwfc	tblptru,f,c
 24650  0010E0  0008               	tblrd		*
 24651  0010E2  50F5               	movf	tablat,w,c
 24652  0010E4  5E52               	subwf	SlowTick@RawRotaryEncoder,f,c
 24653  0010E6                     
 24654                           ;Main.c: 279: RotaryTickInterval++;
 24655  0010E6  2A55               	incf	SlowTick@RotaryTickInterval,f,c
 24656  0010E8                     
 24657                           ;Main.c: 280: if (RotaryTickInterval == 0xFF) {
 24658  0010E8  2855               	incf	SlowTick@RotaryTickInterval,w,c
 24659  0010EA  A4D8               	btfss	status,2,c
 24660  0010EC  D001               	goto	i1u909_21
 24661  0010EE  D001               	goto	i1u909_20
 24662  0010F0                     i1u909_21:
 24663  0010F0  D004               	goto	i1l16291
 24664  0010F2                     i1u909_20:
 24665  0010F2                     
 24666                           ;Main.c: 281: RotaryTickInterval = 0;
 24667  0010F2  6A55               	clrf	SlowTick@RotaryTickInterval,c
 24668                           
 24669                           ;Main.c: 282: RawRotaryEncoder = 0;
 24670  0010F4  6A52               	clrf	SlowTick@RawRotaryEncoder,c
 24671                           
 24672                           ;Main.c: 283: ZeroRotaryDetentIntervals = 1;
 24673  0010F6  0100               	movlb	(_ZeroRotaryDetentIntervals/(0+8)) shr (0+8)
 24674  0010F8  8458               	bsf	_ZeroRotaryDetentIntervals/(0+8),_ZeroRotaryDetentIntervals& (0+7),c	;volatile
 24675  0010FA                     i1l16291:
 24676                           
 24677                           ;Main.c: 284: }
 24678                           ;Main.c: 285: if (RawRotaryEncoder > 2) {
 24679  0010FA  5052               	movf	SlowTick@RawRotaryEncoder,w,c
 24680  0010FC  0A80               	xorlw	128
 24681  0010FE  0F7D               	addlw	-131
 24682  001100  A0D8               	btfss	status,0,c
 24683  001102  D001               	goto	i1u910_21
 24684  001104  D001               	goto	i1u910_20
 24685  001106                     i1u910_21:
 24686  001106  D00F               	goto	i1l16307
 24687  001108                     i1u910_20:
 24688  001108                     
 24689                           ;Main.c: 286: PendingUIEvent = 4;
 24690  001108  0E04               	movlw	4
 24691  00110A  6E51               	movwf	SlowTick@PendingUIEvent,c
 24692  00110C                     
 24693                           ;Main.c: 287: isPendingUIEvent = 1;
 24694  00110C  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24695  00110E  8257               	bsf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24696  001110                     
 24697                           ;Main.c: 289: LCD_IdleTimer = Config.BacklightIdleTimeout;
 24698  001110  C2E4  F049         	movff	_Config+14,SlowTick@LCD_IdleTimer
 24699  001114  C2E5  F04A         	movff	_Config+15,SlowTick@LCD_IdleTimer+1
 24700  001118                     
 24701                           ;Main.c: 291: isPendingRotaryTick = 1;
 24702  001118  0100               	movlb	(SlowTick@isPendingRotaryTick/(0+8)) shr (0+8)
 24703  00111A  8057               	bsf	SlowTick@isPendingRotaryTick/(0+8),SlowTick@isPendingRotaryTick& (0+7),c
 24704  00111C                     
 24705                           ;Main.c: 292: PendingRotaryTick = RotaryTickInterval;
 24706  00111C  C055  F04D         	movff	SlowTick@RotaryTickInterval,SlowTick@PendingRotaryTick
 24707  001120  6A4E               	clrf	SlowTick@PendingRotaryTick+1,c
 24708  001122                     
 24709                           ;Main.c: 293: RotaryTickInterval = 0;
 24710  001122  6A55               	clrf	SlowTick@RotaryTickInterval,c
 24711  001124                     
 24712                           ;Main.c: 295: RawRotaryEncoder = 0;
 24713  001124  6A52               	clrf	SlowTick@RawRotaryEncoder,c
 24714  001126                     i1l16307:
 24715                           
 24716                           ;Main.c: 296: }
 24717                           ;Main.c: 297: if (RawRotaryEncoder<-2) {
 24718  001126  5052               	movf	SlowTick@RawRotaryEncoder,w,c
 24719  001128  0A80               	xorlw	128
 24720  00112A  0F82               	addlw	130
 24721  00112C  B0D8               	btfsc	status,0,c
 24722  00112E  D001               	goto	i1u911_21
 24723  001130  D001               	goto	i1u911_20
 24724  001132                     i1u911_21:
 24725  001132  D00F               	goto	i1l16323
 24726  001134                     i1u911_20:
 24727  001134                     
 24728                           ;Main.c: 298: PendingUIEvent = 5;
 24729  001134  0E05               	movlw	5
 24730  001136  6E51               	movwf	SlowTick@PendingUIEvent,c
 24731  001138                     
 24732                           ;Main.c: 299: isPendingUIEvent = 1;
 24733  001138  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24734  00113A  8257               	bsf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24735  00113C                     
 24736                           ;Main.c: 301: LCD_IdleTimer = Config.BacklightIdleTimeout;
 24737  00113C  C2E4  F049         	movff	_Config+14,SlowTick@LCD_IdleTimer
 24738  001140  C2E5  F04A         	movff	_Config+15,SlowTick@LCD_IdleTimer+1
 24739  001144                     
 24740                           ;Main.c: 303: isPendingRotaryTick = 1;
 24741  001144  0100               	movlb	(SlowTick@isPendingRotaryTick/(0+8)) shr (0+8)
 24742  001146  8057               	bsf	SlowTick@isPendingRotaryTick/(0+8),SlowTick@isPendingRotaryTick& (0+7),c
 24743  001148                     
 24744                           ;Main.c: 304: PendingRotaryTick = RotaryTickInterval;
 24745  001148  C055  F04D         	movff	SlowTick@RotaryTickInterval,SlowTick@PendingRotaryTick
 24746  00114C  6A4E               	clrf	SlowTick@PendingRotaryTick+1,c
 24747  00114E                     
 24748                           ;Main.c: 305: RotaryTickInterval = 0;
 24749  00114E  6A55               	clrf	SlowTick@RotaryTickInterval,c
 24750  001150                     
 24751                           ;Main.c: 307: RawRotaryEncoder = 0;
 24752  001150  6A52               	clrf	SlowTick@RawRotaryEncoder,c
 24753  001152                     i1l16323:
 24754                           
 24755                           ;Main.c: 308: }
 24756                           ;Main.c: 313: if ((!PORTBbits.RB2)) {
 24757  001152  B481               	btfsc	3969,2,c	;volatile
 24758  001154  D001               	goto	i1u912_21
 24759  001156  D001               	goto	i1u912_20
 24760  001158                     i1u912_21:
 24761  001158  D007               	goto	i1l16329
 24762  00115A                     i1u912_20:
 24763  00115A                     
 24764                           ;Main.c: 314: SwitchPressDuration++;
 24765  00115A  4A4F               	infsnz	SlowTick@SwitchPressDuration,f,c
 24766  00115C  2A50               	incf	SlowTick@SwitchPressDuration+1,f,c
 24767  00115E                     
 24768                           ;Main.c: 315: LCD_IdleTimer = Config.BacklightIdleTimeout;
 24769  00115E  C2E4  F049         	movff	_Config+14,SlowTick@LCD_IdleTimer
 24770  001162  C2E5  F04A         	movff	_Config+15,SlowTick@LCD_IdleTimer+1
 24771                           
 24772                           ;Main.c: 316: } else {
 24773  001166  D016               	goto	i1l16339
 24774  001168                     i1l16329:
 24775                           
 24776                           ;Main.c: 317: if ((SwitchPressDuration > 1) & (SwitchPressDuration < 200)) {
 24777  001168  0E02               	movlw	2
 24778  00116A  5C4F               	subwf	SlowTick@SwitchPressDuration,w,c
 24779  00116C  0E00               	movlw	0
 24780  00116E  5850               	subwfb	SlowTick@SwitchPressDuration+1,w,c
 24781  001170  A0D8               	btfss	status,0,c
 24782  001172  D001               	goto	i1u913_21
 24783  001174  D001               	goto	i1u913_20
 24784  001176                     i1u913_21:
 24785  001176  D00C               	goto	i1l16337
 24786  001178                     i1u913_20:
 24787  001178  0EC8               	movlw	200
 24788  00117A  5C4F               	subwf	SlowTick@SwitchPressDuration,w,c
 24789  00117C  0E00               	movlw	0
 24790  00117E  5850               	subwfb	SlowTick@SwitchPressDuration+1,w,c
 24791  001180  B0D8               	btfsc	status,0,c
 24792  001182  D001               	goto	i1u914_21
 24793  001184  D001               	goto	i1u914_20
 24794  001186                     i1u914_21:
 24795  001186  D004               	goto	i1l16337
 24796  001188                     i1u914_20:
 24797  001188                     
 24798                           ;Main.c: 318: PendingUIEvent = 1;
 24799  001188  0E01               	movlw	1
 24800  00118A  6E51               	movwf	SlowTick@PendingUIEvent,c
 24801  00118C                     
 24802                           ;Main.c: 319: isPendingUIEvent = 1;
 24803  00118C  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24804  00118E  8257               	bsf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24805  001190                     i1l16337:
 24806                           
 24807                           ;Main.c: 320: }
 24808                           ;Main.c: 321: SwitchPressDuration = 0;
 24809  001190  6A4F               	clrf	SlowTick@SwitchPressDuration,c
 24810  001192  6A50               	clrf	SlowTick@SwitchPressDuration+1,c
 24811  001194                     i1l16339:
 24812                           
 24813                           ;Main.c: 322: }
 24814                           ;Main.c: 324: if (SwitchPressDuration > 1200) asm(" reset");
 24815  001194  0EB1               	movlw	177
 24816  001196  5C4F               	subwf	SlowTick@SwitchPressDuration,w,c
 24817  001198  0E04               	movlw	4
 24818  00119A  5850               	subwfb	SlowTick@SwitchPressDuration+1,w,c
 24819  00119C  A0D8               	btfss	status,0,c
 24820  00119E  D001               	goto	i1u915_21
 24821  0011A0  D001               	goto	i1u915_20
 24822  0011A2                     i1u915_21:
 24823  0011A2  D001               	goto	i1l16343
 24824  0011A4                     i1u915_20:
 24825  0011A4  00FF               	reset		;# 
 24826  0011A6                     i1l16343:
 24827                           
 24828                           ;Main.c: 325: if (SwitchPressDuration == 400) {
 24829  0011A6  0450               	decf	SlowTick@SwitchPressDuration+1,w,c
 24830  0011A8  0E90               	movlw	144
 24831  0011AA  B4D8               	btfsc	status,2,c
 24832  0011AC  184F               	xorwf	SlowTick@SwitchPressDuration,w,c
 24833  0011AE  A4D8               	btfss	status,2,c
 24834  0011B0  D001               	goto	i1u916_21
 24835  0011B2  D001               	goto	i1u916_20
 24836  0011B4                     i1u916_21:
 24837  0011B4  D004               	goto	i1l16349
 24838  0011B6                     i1u916_20:
 24839  0011B6                     
 24840                           ;Main.c: 326: PendingUIEvent = 3;
 24841  0011B6  0E03               	movlw	3
 24842  0011B8  6E51               	movwf	SlowTick@PendingUIEvent,c
 24843  0011BA                     
 24844                           ;Main.c: 327: isPendingUIEvent = 1;
 24845  0011BA  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24846  0011BC  8257               	bsf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24847  0011BE                     i1l16349:
 24848                           
 24849                           ;Main.c: 328: }
 24850                           ;Main.c: 329: if (SwitchPressDuration == 200) {
 24851  0011BE  504F               	movf	SlowTick@SwitchPressDuration,w,c
 24852  0011C0  0AC8               	xorlw	200
 24853  0011C2  1050               	iorwf	SlowTick@SwitchPressDuration+1,w,c
 24854  0011C4  A4D8               	btfss	status,2,c
 24855  0011C6  D001               	goto	i1u917_21
 24856  0011C8  D001               	goto	i1u917_20
 24857  0011CA                     i1u917_21:
 24858  0011CA  D004               	goto	i1l16355
 24859  0011CC                     i1u917_20:
 24860  0011CC                     
 24861                           ;Main.c: 330: PendingUIEvent = 2;
 24862  0011CC  0E02               	movlw	2
 24863  0011CE  6E51               	movwf	SlowTick@PendingUIEvent,c
 24864  0011D0                     
 24865                           ;Main.c: 331: isPendingUIEvent = 1;
 24866  0011D0  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24867  0011D2  8257               	bsf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24868  0011D4                     i1l16355:
 24869                           
 24870                           ;Main.c: 332: }
 24871                           ;Main.c: 334: if (ClearUI_Event) {
 24872  0011D4  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
 24873  0011D6  A657               	btfss	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 24874  0011D8  D001               	goto	i1u918_21
 24875  0011DA  D001               	goto	i1u918_20
 24876  0011DC                     i1u918_21:
 24877  0011DC  D009               	goto	i1l849
 24878  0011DE                     i1u918_20:
 24879  0011DE                     
 24880                           ;Main.c: 335: isPendingUIEvent = 0;
 24881  0011DE  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24882  0011E0  9257               	bcf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24883                           
 24884                           ;Main.c: 336: PendingUIEvent = 0;
 24885  0011E2  6A51               	clrf	SlowTick@PendingUIEvent,c
 24886                           
 24887                           ;Main.c: 337: UI_Event = 0;
 24888  0011E4  0100               	movlb	0	; () banked
 24889  0011E6  6BF2               	clrf	_UI_Event& (0+255),b	;volatile
 24890                           
 24891                           ;Main.c: 338: ClearUI_Event = 0;
 24892  0011E8  0100               	movlb	(_ClearUI_Event/(0+8)) shr (0+8)
 24893  0011EA  9657               	bcf	_ClearUI_Event/(0+8),_ClearUI_Event& (0+7),c	;volatile
 24894                           
 24895                           ;Main.c: 339: bLock_UI_Event = 0;
 24896  0011EC  0100               	movlb	(_bLock_UI_Event/(0+8)) shr (0+8)
 24897  0011EE  9859               	bcf	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 24898  0011F0                     i1l849:
 24899                           
 24900                           ;Main.c: 340: }
 24901                           ;Main.c: 342: if (!bLock_UI_Event) {
 24902  0011F0  0100               	movlb	(_bLock_UI_Event/(0+8)) shr (0+8)
 24903  0011F2  B859               	btfsc	_bLock_UI_Event/(0+8),_bLock_UI_Event& (0+7),c	;volatile
 24904  0011F4  D001               	goto	i1u919_21
 24905  0011F6  D001               	goto	i1u919_20
 24906  0011F8                     i1u919_21:
 24907  0011F8  D012               	goto	i1l850
 24908  0011FA                     i1u919_20:
 24909  0011FA                     
 24910                           ;Main.c: 343: if (isPendingUIEvent) {
 24911  0011FA  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24912  0011FC  A257               	btfss	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24913  0011FE  D001               	goto	i1u920_21
 24914  001200  D001               	goto	i1u920_20
 24915  001202                     i1u920_21:
 24916  001202  D004               	goto	i1l851
 24917  001204                     i1u920_20:
 24918  001204                     
 24919                           ;Main.c: 344: UI_Event = PendingUIEvent;
 24920  001204  C051  F0F2         	movff	SlowTick@PendingUIEvent,_UI_Event
 24921                           
 24922                           ;Main.c: 345: isPendingUIEvent = 0;
 24923  001208  0100               	movlb	(SlowTick@isPendingUIEvent/(0+8)) shr (0+8)
 24924  00120A  9257               	bcf	SlowTick@isPendingUIEvent/(0+8),SlowTick@isPendingUIEvent& (0+7),c
 24925  00120C                     i1l851:
 24926                           
 24927                           ;Main.c: 346: }
 24928                           ;Main.c: 348: if (isPendingExternalUIEvent) {
 24929  00120C  0100               	movlb	(_isPendingExternalUIEvent/(0+8)) shr (0+8)
 24930  00120E  AA5A               	btfss	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 24931  001210  D001               	goto	i1u921_21
 24932  001212  D001               	goto	i1u921_20
 24933  001214                     i1u921_21:
 24934  001214  D004               	goto	i1l850
 24935  001216                     i1u921_20:
 24936  001216                     
 24937                           ;Main.c: 349: isPendingExternalUIEvent = 0;
 24938  001216  0100               	movlb	(_isPendingExternalUIEvent/(0+8)) shr (0+8)
 24939  001218  9A5A               	bcf	_isPendingExternalUIEvent/(0+8),_isPendingExternalUIEvent& (0+7),c	;volatile
 24940                           
 24941                           ;Main.c: 350: UI_Event = PendingExternalUIEvent;
 24942  00121A  C056  F0F2         	movff	_PendingExternalUIEvent,_UI_Event	;volatile
 24943  00121E                     i1l850:
 24944                           
 24945                           ;Main.c: 351: }
 24946                           ;Main.c: 352: }
 24947                           ;Main.c: 354: if (!bLock_RotaryDetentIntervals) {
 24948  00121E  0100               	movlb	(_bLock_RotaryDetentIntervals/(0+8)) shr (0+8)
 24949  001220  B459               	btfsc	_bLock_RotaryDetentIntervals/(0+8),_bLock_RotaryDetentIntervals& (0+7),c	;volatile
 24950  001222  D001               	goto	i1u922_21
 24951  001224  D001               	goto	i1u922_20
 24952  001226                     i1u922_21:
 24953  001226  D017               	goto	i1l853
 24954  001228                     i1u922_20:
 24955  001228                     
 24956                           ;Main.c: 355: if (isPendingRotaryTick) {
 24957  001228  0100               	movlb	(SlowTick@isPendingRotaryTick/(0+8)) shr (0+8)
 24958  00122A  A057               	btfss	SlowTick@isPendingRotaryTick/(0+8),SlowTick@isPendingRotaryTick& (0+7),c
 24959  00122C  D001               	goto	i1u923_21
 24960  00122E  D001               	goto	i1u923_20
 24961  001230                     i1u923_21:
 24962  001230  D012               	goto	i1l853
 24963  001232                     i1u923_20:
 24964  001232                     
 24965                           ;Main.c: 356: RotaryDetentIntervals[RotaryDetentIntervalIndex] = PendingRotaryTick;
 24966  001232  0104               	movlb	4	; () banked
 24967  001234  0E00               	movlw	low _RotaryDetentIntervals
 24968  001236  2453               	addwf	SlowTick@RotaryDetentIntervalIndex,w,c
 24969  001238  6ED9               	movwf	fsr2l,c
 24970  00123A  6ADA               	clrf	fsr2h,c
 24971  00123C  0E04               	movlw	high _RotaryDetentIntervals
 24972  00123E  22DA               	addwfc	fsr2h,f,c
 24973  001240  C04D  FFDF         	movff	SlowTick@PendingRotaryTick,indf2
 24974  001244                     
 24975                           ; BSR set to: 4
 24976                           ;Main.c: 357: RotaryDetentIntervalIndex++;
 24977  001244  2A53               	incf	SlowTick@RotaryDetentIntervalIndex,f,c
 24978  001246                     
 24979                           ; BSR set to: 4
 24980                           ;Main.c: 358: if (RotaryDetentIntervalIndex > 15) RotaryDetentIntervalIndex = 0;
 24981  001246  0E0F               	movlw	15
 24982  001248  6453               	cpfsgt	SlowTick@RotaryDetentIntervalIndex,c
 24983  00124A  D001               	goto	i1u924_21
 24984  00124C  D001               	goto	i1u924_20
 24985  00124E                     i1u924_21:
 24986  00124E  D001               	goto	i1l855
 24987  001250                     i1u924_20:
 24988  001250                     
 24989                           ; BSR set to: 4
 24990  001250  6A53               	clrf	SlowTick@RotaryDetentIntervalIndex,c
 24991  001252                     i1l855:
 24992                           
 24993                           ; BSR set to: 4
 24994                           ;Main.c: 359: isPendingRotaryTick = 0;
 24995  001252  0100               	movlb	(SlowTick@isPendingRotaryTick/(0+8)) shr (0+8)
 24996  001254  9057               	bcf	SlowTick@isPendingRotaryTick/(0+8),SlowTick@isPendingRotaryTick& (0+7),c
 24997  001256                     i1l853:
 24998                           
 24999                           ;Main.c: 360: }
 25000                           ;Main.c: 361: }
 25001                           ;Main.c: 366: bLock_Motor_Position = 1;
 25002  001256  0100               	movlb	(_bLock_Motor_Position/(0+8)) shr (0+8)
 25003  001258  8059               	bsf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 25004                           
 25005                           ;Main.c: 367: CurrentMotorPosition = Motor_Position;
 25006  00125A  C1E4  F025         	movff	_Motor_Position,SlowTick@CurrentMotorPosition
 25007  00125E  C1E5  F026         	movff	_Motor_Position+1,SlowTick@CurrentMotorPosition+1
 25008  001262  C1E6  F027         	movff	_Motor_Position+2,SlowTick@CurrentMotorPosition+2
 25009  001266  C1E7  F028         	movff	_Motor_Position+3,SlowTick@CurrentMotorPosition+3
 25010                           
 25011                           ;Main.c: 368: bLock_Motor_Position = 0;
 25012  00126A  0100               	movlb	(_bLock_Motor_Position/(0+8)) shr (0+8)
 25013  00126C  9059               	bcf	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 25014                           
 25015                           ;Main.c: 373: if (bMove_InProgress) {
 25016  00126E  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 25017  001270  AE59               	btfss	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 25018  001272  D001               	goto	i1u925_21
 25019  001274  D001               	goto	i1u925_20
 25020  001276                     i1u925_21:
 25021  001276  D0DC               	goto	i1l856
 25022  001278                     i1u925_20:
 25023  001278                     
 25024                           ;Main.c: 374: bFollowMode = 0;
 25025  001278  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
 25026  00127A  9A58               	bcf	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 25027  00127C                     
 25028                           ;Main.c: 375: if (Move_shifted_position.ul > Move_DecelPosition) {
 25029  00127C  5041               	movf	_Move_shifted_position,w,c
 25030  00127E  0101               	movlb	1	; () banked
 25031  001280  5DE8               	subwf	_Move_DecelPosition& (0+255),w,b
 25032  001282  5042               	movf	_Move_shifted_position+1,w,c
 25033  001284  59E9               	subwfb	(_Move_DecelPosition+1)& (0+255),w,b
 25034  001286  5043               	movf	_Move_shifted_position+2,w,c
 25035  001288  59EA               	subwfb	(_Move_DecelPosition+2)& (0+255),w,b
 25036  00128A  5044               	movf	_Move_shifted_position+3,w,c
 25037  00128C  59EB               	subwfb	(_Move_DecelPosition+3)& (0+255),w,b
 25038  00128E  B0D8               	btfsc	status,0,c
 25039  001290  D001               	goto	i1u926_21
 25040  001292  D001               	goto	i1u926_20
 25041  001294                     i1u926_21:
 25042  001294  D023               	goto	i1l16383
 25043  001296                     i1u926_20:
 25044  001296                     
 25045                           ; BSR set to: 1
 25046                           ;Main.c: 376: Move_speedQ24 -= Move_AccelValueQ24;
 25047  001296  5035               	movf	_Move_AccelValueQ24,w,c
 25048  001298  5FF0               	subwf	_Move_speedQ24& (0+255),f,b
 25049  00129A  5036               	movf	_Move_AccelValueQ24+1,w,c
 25050  00129C  5BF1               	subwfb	(_Move_speedQ24+1)& (0+255),f,b
 25051  00129E  5037               	movf	_Move_AccelValueQ24+2,w,c
 25052  0012A0  5BF2               	subwfb	(_Move_speedQ24+2)& (0+255),f,b
 25053  0012A2  5038               	movf	_Move_AccelValueQ24+3,w,c
 25054  0012A4  5BF3               	subwfb	(_Move_speedQ24+3)& (0+255),f,b
 25055                           
 25056                           ;Main.c: 377: if (Move_speedQ24 < Move_AccelValueQ24) {
 25057  0012A6  5035               	movf	_Move_AccelValueQ24,w,c
 25058  0012A8  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25059  0012AA  5036               	movf	_Move_AccelValueQ24+1,w,c
 25060  0012AC  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25061  0012AE  5037               	movf	_Move_AccelValueQ24+2,w,c
 25062  0012B0  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25063  0012B2  5038               	movf	_Move_AccelValueQ24+3,w,c
 25064  0012B4  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25065  0012B6  B0D8               	btfsc	status,0,c
 25066  0012B8  D001               	goto	i1u927_21
 25067  0012BA  D001               	goto	i1u927_20
 25068  0012BC                     i1u927_21:
 25069  0012BC  D05F               	goto	i1l16395
 25070  0012BE                     i1u927_20:
 25071  0012BE                     
 25072                           ; BSR set to: 1
 25073                           ;Main.c: 378: internal_PID_SetPoint = Move_FinalPosition;
 25074  0012BE  C1EC  F1E0         	movff	_Move_FinalPosition,SlowTick@internal_PID_SetPoint
 25075  0012C2  C1ED  F1E1         	movff	_Move_FinalPosition+1,SlowTick@internal_PID_SetPoint+1
 25076  0012C6  C1EE  F1E2         	movff	_Move_FinalPosition+2,SlowTick@internal_PID_SetPoint+2
 25077  0012CA  C1EF  F1E3         	movff	_Move_FinalPosition+3,SlowTick@internal_PID_SetPoint+3
 25078                           
 25079                           ;Main.c: 379: Move_speedQ24 = 0;
 25080  0012CE  6BF0               	clrf	_Move_speedQ24& (0+255),b
 25081  0012D0  6BF1               	clrf	(_Move_speedQ24+1)& (0+255),b
 25082  0012D2  6BF2               	clrf	(_Move_speedQ24+2)& (0+255),b
 25083  0012D4  6BF3               	clrf	(_Move_speedQ24+3)& (0+255),b
 25084                           
 25085                           ;Main.c: 380: bMove_InProgress = 0;
 25086  0012D6  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 25087  0012D8  9E59               	bcf	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 25088  0012DA  D050               	goto	i1l16395
 25089  0012DC                     i1l16383:
 25090                           
 25091                           ; BSR set to: 1
 25092                           ;Main.c: 383: if (Move_speedQ24 < Move_CoastSpeedQ24) {
 25093  0012DC  5039               	movf	_Move_CoastSpeedQ24,w,c
 25094  0012DE  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25095  0012E0  503A               	movf	_Move_CoastSpeedQ24+1,w,c
 25096  0012E2  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25097  0012E4  503B               	movf	_Move_CoastSpeedQ24+2,w,c
 25098  0012E6  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25099  0012E8  503C               	movf	_Move_CoastSpeedQ24+3,w,c
 25100  0012EA  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25101  0012EC  B0D8               	btfsc	status,0,c
 25102  0012EE  D001               	goto	i1u928_21
 25103  0012F0  D001               	goto	i1u928_20
 25104  0012F2                     i1u928_21:
 25105  0012F2  D01C               	goto	i1l16389
 25106  0012F4                     i1u928_20:
 25107  0012F4                     
 25108                           ; BSR set to: 1
 25109                           ;Main.c: 384: Move_speedQ24 += Move_AccelValueQ24;
 25110  0012F4  5035               	movf	_Move_AccelValueQ24,w,c
 25111  0012F6  27F0               	addwf	_Move_speedQ24& (0+255),f,b
 25112  0012F8  5036               	movf	_Move_AccelValueQ24+1,w,c
 25113  0012FA  23F1               	addwfc	(_Move_speedQ24+1)& (0+255),f,b
 25114  0012FC  5037               	movf	_Move_AccelValueQ24+2,w,c
 25115  0012FE  23F2               	addwfc	(_Move_speedQ24+2)& (0+255),f,b
 25116  001300  5038               	movf	_Move_AccelValueQ24+3,w,c
 25117  001302  23F3               	addwfc	(_Move_speedQ24+3)& (0+255),f,b
 25118                           
 25119                           ;Main.c: 385: if (Move_speedQ24 > Move_CoastSpeedQ24) Move_speedQ24 = Move_CoastSpeedQ24;
 25120  001304  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25121  001306  5C39               	subwf	_Move_CoastSpeedQ24,w,c
 25122  001308  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25123  00130A  583A               	subwfb	_Move_CoastSpeedQ24+1,w,c
 25124  00130C  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25125  00130E  583B               	subwfb	_Move_CoastSpeedQ24+2,w,c
 25126  001310  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25127  001312  583C               	subwfb	_Move_CoastSpeedQ24+3,w,c
 25128  001314  B0D8               	btfsc	status,0,c
 25129  001316  D001               	goto	i1u929_21
 25130  001318  D001               	goto	i1u929_20
 25131  00131A                     i1u929_21:
 25132  00131A  D008               	goto	i1l16389
 25133  00131C                     i1u929_20:
 25134  00131C                     
 25135                           ; BSR set to: 1
 25136  00131C  C039  F1F0         	movff	_Move_CoastSpeedQ24,_Move_speedQ24
 25137  001320  C03A  F1F1         	movff	_Move_CoastSpeedQ24+1,_Move_speedQ24+1
 25138  001324  C03B  F1F2         	movff	_Move_CoastSpeedQ24+2,_Move_speedQ24+2
 25139  001328  C03C  F1F3         	movff	_Move_CoastSpeedQ24+3,_Move_speedQ24+3
 25140  00132C                     i1l16389:
 25141                           
 25142                           ; BSR set to: 1
 25143                           ;Main.c: 386: }
 25144                           ;Main.c: 388: if (Move_speedQ24 > Move_CoastSpeedQ24) {
 25145  00132C  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25146  00132E  5C39               	subwf	_Move_CoastSpeedQ24,w,c
 25147  001330  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25148  001332  583A               	subwfb	_Move_CoastSpeedQ24+1,w,c
 25149  001334  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25150  001336  583B               	subwfb	_Move_CoastSpeedQ24+2,w,c
 25151  001338  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25152  00133A  583C               	subwfb	_Move_CoastSpeedQ24+3,w,c
 25153  00133C  B0D8               	btfsc	status,0,c
 25154  00133E  D001               	goto	i1u930_21
 25155  001340  D001               	goto	i1u930_20
 25156  001342                     i1u930_21:
 25157  001342  D01C               	goto	i1l16395
 25158  001344                     i1u930_20:
 25159  001344                     
 25160                           ; BSR set to: 1
 25161                           ;Main.c: 389: Move_speedQ24 -= Move_AccelValueQ24;
 25162  001344  5035               	movf	_Move_AccelValueQ24,w,c
 25163  001346  5FF0               	subwf	_Move_speedQ24& (0+255),f,b
 25164  001348  5036               	movf	_Move_AccelValueQ24+1,w,c
 25165  00134A  5BF1               	subwfb	(_Move_speedQ24+1)& (0+255),f,b
 25166  00134C  5037               	movf	_Move_AccelValueQ24+2,w,c
 25167  00134E  5BF2               	subwfb	(_Move_speedQ24+2)& (0+255),f,b
 25168  001350  5038               	movf	_Move_AccelValueQ24+3,w,c
 25169  001352  5BF3               	subwfb	(_Move_speedQ24+3)& (0+255),f,b
 25170                           
 25171                           ;Main.c: 390: if (Move_speedQ24 < Move_CoastSpeedQ24) Move_speedQ24 = Move_CoastSpeedQ24;
 25172  001354  5039               	movf	_Move_CoastSpeedQ24,w,c
 25173  001356  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25174  001358  503A               	movf	_Move_CoastSpeedQ24+1,w,c
 25175  00135A  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25176  00135C  503B               	movf	_Move_CoastSpeedQ24+2,w,c
 25177  00135E  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25178  001360  503C               	movf	_Move_CoastSpeedQ24+3,w,c
 25179  001362  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25180  001364  B0D8               	btfsc	status,0,c
 25181  001366  D001               	goto	i1u931_21
 25182  001368  D001               	goto	i1u931_20
 25183  00136A                     i1u931_21:
 25184  00136A  D008               	goto	i1l16395
 25185  00136C                     i1u931_20:
 25186  00136C                     
 25187                           ; BSR set to: 1
 25188  00136C  C039  F1F0         	movff	_Move_CoastSpeedQ24,_Move_speedQ24
 25189  001370  C03A  F1F1         	movff	_Move_CoastSpeedQ24+1,_Move_speedQ24+1
 25190  001374  C03B  F1F2         	movff	_Move_CoastSpeedQ24+2,_Move_speedQ24+2
 25191  001378  C03C  F1F3         	movff	_Move_CoastSpeedQ24+3,_Move_speedQ24+3
 25192  00137C                     i1l16395:
 25193                           
 25194                           ;Main.c: 391: }
 25195                           ;Main.c: 392: }
 25196                           ;Main.c: 394: Move_position[0].ul += Move_speedQ24;
 25197  00137C  0101               	movlb	1	; () banked
 25198  00137E  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25199  001380  0104               	movlb	4	; () banked
 25200  001382  2710               	addwf	_Move_position& (0+255),f,b
 25201  001384  0101               	movlb	1	; () banked
 25202  001386  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25203  001388  0104               	movlb	4	; () banked
 25204  00138A  2311               	addwfc	(_Move_position+1)& (0+255),f,b
 25205  00138C  0101               	movlb	1	; () banked
 25206  00138E  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25207  001390  0104               	movlb	4	; () banked
 25208  001392  2312               	addwfc	(_Move_position+2)& (0+255),f,b
 25209  001394  0101               	movlb	1	; () banked
 25210  001396  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25211  001398  0104               	movlb	4	; () banked
 25212  00139A  2313               	addwfc	(_Move_position+3)& (0+255),f,b
 25213                           
 25214                           ;Main.c: 395: if (Move_position[0].ul < Move_speedQ24) Move_position[1].ul++;
 25215  00139C  0101               	movlb	1	; () banked
 25216  00139E  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25217  0013A0  0104               	movlb	4	; () banked
 25218  0013A2  5D10               	subwf	_Move_position& (0+255),w,b
 25219  0013A4  0101               	movlb	1	; () banked
 25220  0013A6  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25221  0013A8  0104               	movlb	4	; () banked
 25222  0013AA  5911               	subwfb	(_Move_position+1)& (0+255),w,b
 25223  0013AC  0101               	movlb	1	; () banked
 25224  0013AE  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25225  0013B0  0104               	movlb	4	; () banked
 25226  0013B2  5912               	subwfb	(_Move_position+2)& (0+255),w,b
 25227  0013B4  0101               	movlb	1	; () banked
 25228  0013B6  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25229  0013B8  0104               	movlb	4	; () banked
 25230  0013BA  5913               	subwfb	(_Move_position+3)& (0+255),w,b
 25231  0013BC  B0D8               	btfsc	status,0,c
 25232  0013BE  D001               	goto	i1u932_21
 25233  0013C0  D001               	goto	i1u932_20
 25234  0013C2                     i1u932_21:
 25235  0013C2  D008               	goto	i1l16399
 25236  0013C4                     i1u932_20:
 25237  0013C4                     
 25238                           ; BSR set to: 4
 25239  0013C4  0E01               	movlw	1
 25240  0013C6  2714               	addwf	(_Move_position+4)& (0+255),f,b
 25241  0013C8  0E00               	movlw	0
 25242  0013CA  2315               	addwfc	(_Move_position+5)& (0+255),f,b
 25243  0013CC  0E00               	movlw	0
 25244  0013CE  2316               	addwfc	(_Move_position+6)& (0+255),f,b
 25245  0013D0  0E00               	movlw	0
 25246  0013D2  2317               	addwfc	(_Move_position+7)& (0+255),f,b
 25247  0013D4                     i1l16399:
 25248                           
 25249                           ; BSR set to: 4
 25250                           ;Main.c: 397: Move_shifted_position.ub[0] = Move_position[0].ub[3];
 25251  0013D4  C413  F041         	movff	_Move_position+3,_Move_shifted_position
 25252  0013D8                     
 25253                           ; BSR set to: 4
 25254                           ;Main.c: 398: Move_shifted_position.ub[1] = Move_position[1].ub[0];
 25255  0013D8  C414  F042         	movff	_Move_position+4,_Move_shifted_position+1
 25256  0013DC                     
 25257                           ; BSR set to: 4
 25258                           ;Main.c: 399: Move_shifted_position.ub[2] = Move_position[1].ub[1];
 25259  0013DC  C415  F043         	movff	_Move_position+5,_Move_shifted_position+2
 25260  0013E0                     
 25261                           ; BSR set to: 4
 25262                           ;Main.c: 400: Move_shifted_position.ub[3] = Move_position[1].ub[2];
 25263  0013E0  C416  F044         	movff	_Move_position+6,_Move_shifted_position+3
 25264  0013E4                     
 25265                           ; BSR set to: 4
 25266                           ;Main.c: 402: if (bMove_InProgress) {
 25267  0013E4  0100               	movlb	(_bMove_InProgress/(0+8)) shr (0+8)
 25268  0013E6  AE59               	btfss	_bMove_InProgress/(0+8),_bMove_InProgress& (0+7),c	;volatile
 25269  0013E8  D001               	goto	i1u933_21
 25270  0013EA  D001               	goto	i1u933_20
 25271  0013EC                     i1u933_21:
 25272  0013EC  D103               	goto	i1l16461
 25273  0013EE                     i1u933_20:
 25274  0013EE                     
 25275                           ;Main.c: 403: if (bMove_Neg) internal_PID_SetPoint = Move_Origin - Move_shifted_position
      +                          .ul;
 25276  0013EE  0100               	movlb	(_bMove_Neg/(0+8)) shr (0+8)
 25277  0013F0  A05A               	btfss	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
 25278  0013F2  D001               	goto	i1u934_21
 25279  0013F4  D001               	goto	i1u934_20
 25280  0013F6                     i1u934_21:
 25281  0013F6  D00E               	goto	i1l16413
 25282  0013F8                     i1u934_20:
 25283  0013F8                     i1l16411:
 25284  0013F8  5041               	movf	_Move_shifted_position,w,c
 25285  0013FA  5C3D               	subwf	_Move_Origin,w,c
 25286  0013FC  0101               	movlb	1	; () banked
 25287  0013FE  6FE0               	movwf	SlowTick@internal_PID_SetPoint& (0+255),b
 25288  001400  5042               	movf	_Move_shifted_position+1,w,c
 25289  001402  583E               	subwfb	_Move_Origin+1,w,c
 25290  001404  6FE1               	movwf	(SlowTick@internal_PID_SetPoint+1)& (0+255),b
 25291  001406  5043               	movf	_Move_shifted_position+2,w,c
 25292  001408  583F               	subwfb	_Move_Origin+2,w,c
 25293  00140A  6FE2               	movwf	(SlowTick@internal_PID_SetPoint+2)& (0+255),b
 25294  00140C  5044               	movf	_Move_shifted_position+3,w,c
 25295  00140E  5840               	subwfb	_Move_Origin+3,w,c
 25296  001410  6FE3               	movwf	(SlowTick@internal_PID_SetPoint+3)& (0+255),b
 25297  001412  D0F0               	goto	i1l16461
 25298  001414                     i1l16413:
 25299                           
 25300                           ;Main.c: 404: else internal_PID_SetPoint = Move_Origin + Move_shifted_position.ul;
 25301  001414  503D               	movf	_Move_Origin,w,c
 25302  001416  2441               	addwf	_Move_shifted_position,w,c
 25303  001418  0101               	movlb	1	; () banked
 25304  00141A  6FE0               	movwf	SlowTick@internal_PID_SetPoint& (0+255),b
 25305  00141C  503E               	movf	_Move_Origin+1,w,c
 25306  00141E  2042               	addwfc	_Move_shifted_position+1,w,c
 25307  001420  6FE1               	movwf	(SlowTick@internal_PID_SetPoint+1)& (0+255),b
 25308  001422  503F               	movf	_Move_Origin+2,w,c
 25309  001424  2043               	addwfc	_Move_shifted_position+2,w,c
 25310  001426  6FE2               	movwf	(SlowTick@internal_PID_SetPoint+2)& (0+255),b
 25311  001428  5040               	movf	_Move_Origin+3,w,c
 25312  00142A  2044               	addwfc	_Move_shifted_position+3,w,c
 25313  00142C  6FE3               	movwf	(SlowTick@internal_PID_SetPoint+3)& (0+255),b
 25314  00142E  D0E2               	goto	i1l16461
 25315  001430                     i1l856:
 25316  001430  0100               	movlb	(_bFollowMode/(0+8)) shr (0+8)
 25317  001432  AA58               	btfss	_bFollowMode/(0+8),_bFollowMode& (0+7),c	;volatile
 25318  001434  D001               	goto	i1u935_21
 25319  001436  D001               	goto	i1u935_20
 25320  001438                     i1u935_21:
 25321  001438  D02B               	goto	i1l869
 25322  00143A                     i1u935_20:
 25323  00143A                     
 25324                           ;Main.c: 408: PID_Error = internal_PID_SetPoint - CurrentMotorPosition;
 25325  00143A  5025               	movf	SlowTick@CurrentMotorPosition,w,c
 25326  00143C  0101               	movlb	1	; () banked
 25327  00143E  5DE0               	subwf	SlowTick@internal_PID_SetPoint& (0+255),w,b
 25328  001440  6E2B               	movwf	SlowTick@PID_Error,c
 25329  001442  5026               	movf	SlowTick@CurrentMotorPosition+1,w,c
 25330  001444  59E1               	subwfb	(SlowTick@internal_PID_SetPoint+1)& (0+255),w,b
 25331  001446  6E2C               	movwf	SlowTick@PID_Error+1,c
 25332  001448  5027               	movf	SlowTick@CurrentMotorPosition+2,w,c
 25333  00144A  59E2               	subwfb	(SlowTick@internal_PID_SetPoint+2)& (0+255),w,b
 25334  00144C  6E2D               	movwf	SlowTick@PID_Error+2,c
 25335  00144E  5028               	movf	SlowTick@CurrentMotorPosition+3,w,c
 25336  001450  59E3               	subwfb	(SlowTick@internal_PID_SetPoint+3)& (0+255),w,b
 25337  001452  6E2E               	movwf	SlowTick@PID_Error+3,c
 25338  001454                     
 25339                           ; BSR set to: 1
 25340                           ;Main.c: 409: internal_PID_SetPoint = CurrentMotorPosition;
 25341  001454  C025  F1E0         	movff	SlowTick@CurrentMotorPosition,SlowTick@internal_PID_SetPoint
 25342  001458  C026  F1E1         	movff	SlowTick@CurrentMotorPosition+1,SlowTick@internal_PID_SetPoint+1
 25343  00145C  C027  F1E2         	movff	SlowTick@CurrentMotorPosition+2,SlowTick@internal_PID_SetPoint+2
 25344  001460  C028  F1E3         	movff	SlowTick@CurrentMotorPosition+3,SlowTick@internal_PID_SetPoint+3
 25345                           
 25346                           ;Main.c: 410: internal_PID_SetPoint -= (PID_Error >> 1);
 25347  001464  C02B  F008         	movff	SlowTick@PID_Error,??_SlowTick
 25348  001468  C02C  F009         	movff	SlowTick@PID_Error+1,??_SlowTick+1
 25349  00146C  C02D  F00A         	movff	SlowTick@PID_Error+2,??_SlowTick+2
 25350  001470  C02E  F00B         	movff	SlowTick@PID_Error+3,??_SlowTick+3
 25351  001474  340B               	rlcf	??_SlowTick+3,w,c
 25352  001476  320B               	rrcf	??_SlowTick+3,f,c
 25353  001478  320A               	rrcf	??_SlowTick+2,f,c
 25354  00147A  3209               	rrcf	??_SlowTick+1,f,c
 25355  00147C  3208               	rrcf	??_SlowTick,f,c
 25356  00147E  5008               	movf	??_SlowTick,w,c
 25357  001480  5FE0               	subwf	SlowTick@internal_PID_SetPoint& (0+255),f,b
 25358  001482  5009               	movf	??_SlowTick+1,w,c
 25359  001484  5BE1               	subwfb	(SlowTick@internal_PID_SetPoint+1)& (0+255),f,b
 25360  001486  500A               	movf	??_SlowTick+2,w,c
 25361  001488  5BE2               	subwfb	(SlowTick@internal_PID_SetPoint+2)& (0+255),f,b
 25362  00148A  500B               	movf	??_SlowTick+3,w,c
 25363  00148C  5BE3               	subwfb	(SlowTick@internal_PID_SetPoint+3)& (0+255),f,b
 25364                           
 25365                           ;Main.c: 411: } else if (bSpeedMode) {
 25366  00148E  D0B2               	goto	i1l16461
 25367  001490                     i1l869:
 25368  001490  0100               	movlb	(_bSpeedMode/(0+8)) shr (0+8)
 25369  001492  A45A               	btfss	_bSpeedMode/(0+8),_bSpeedMode& (0+7),c	;volatile
 25370  001494  D001               	goto	i1u936_21
 25371  001496  D001               	goto	i1u936_20
 25372  001498                     i1u936_21:
 25373  001498  D0AD               	goto	i1l16461
 25374  00149A                     i1u936_20:
 25375  00149A                     
 25376                           ;Main.c: 412: if (Speed_SetPending) {
 25377  00149A  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
 25378  00149C  A258               	btfss	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
 25379  00149E  D001               	goto	i1u937_21
 25380  0014A0  D001               	goto	i1u937_20
 25381  0014A2                     i1u937_21:
 25382  0014A2  D00A               	goto	i1l16423
 25383  0014A4                     i1u937_20:
 25384  0014A4                     
 25385                           ;Main.c: 413: Speed_SetPending = 0;
 25386  0014A4  0100               	movlb	(_Speed_SetPending/(0+8)) shr (0+8)
 25387  0014A6  9258               	bcf	_Speed_SetPending/(0+8),_Speed_SetPending& (0+7),c	;volatile
 25388                           
 25389                           ;Main.c: 414: Move_CoastSpeedQ24 = Speed_SetToThis;
 25390  0014A8  C1F4  F039         	movff	_Speed_SetToThis,_Move_CoastSpeedQ24
 25391  0014AC  C1F5  F03A         	movff	_Speed_SetToThis+1,_Move_CoastSpeedQ24+1
 25392  0014B0  C1F6  F03B         	movff	_Speed_SetToThis+2,_Move_CoastSpeedQ24+2
 25393  0014B4  C1F7  F03C         	movff	_Speed_SetToThis+3,_Move_CoastSpeedQ24+3
 25394  0014B8                     i1l16423:
 25395                           
 25396                           ;Main.c: 415: }
 25397                           ;Main.c: 417: if (Move_speedQ24 < Move_CoastSpeedQ24) {
 25398  0014B8  5039               	movf	_Move_CoastSpeedQ24,w,c
 25399  0014BA  0101               	movlb	1	; () banked
 25400  0014BC  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25401  0014BE  503A               	movf	_Move_CoastSpeedQ24+1,w,c
 25402  0014C0  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25403  0014C2  503B               	movf	_Move_CoastSpeedQ24+2,w,c
 25404  0014C4  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25405  0014C6  503C               	movf	_Move_CoastSpeedQ24+3,w,c
 25406  0014C8  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25407  0014CA  B0D8               	btfsc	status,0,c
 25408  0014CC  D001               	goto	i1u938_21
 25409  0014CE  D001               	goto	i1u938_20
 25410  0014D0                     i1u938_21:
 25411  0014D0  D020               	goto	i1l16431
 25412  0014D2                     i1u938_20:
 25413  0014D2                     
 25414                           ; BSR set to: 1
 25415                           ;Main.c: 418: Speed_IsAccelerating = 1;
 25416  0014D2  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
 25417  0014D4  8058               	bsf	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
 25418  0014D6                     
 25419                           ;Main.c: 419: Move_speedQ24 += Move_AccelValueQ24;
 25420  0014D6  5035               	movf	_Move_AccelValueQ24,w,c
 25421  0014D8  0101               	movlb	1	; () banked
 25422  0014DA  27F0               	addwf	_Move_speedQ24& (0+255),f,b
 25423  0014DC  5036               	movf	_Move_AccelValueQ24+1,w,c
 25424  0014DE  23F1               	addwfc	(_Move_speedQ24+1)& (0+255),f,b
 25425  0014E0  5037               	movf	_Move_AccelValueQ24+2,w,c
 25426  0014E2  23F2               	addwfc	(_Move_speedQ24+2)& (0+255),f,b
 25427  0014E4  5038               	movf	_Move_AccelValueQ24+3,w,c
 25428  0014E6  23F3               	addwfc	(_Move_speedQ24+3)& (0+255),f,b
 25429                           
 25430                           ;Main.c: 420: if (Move_speedQ24 > Move_CoastSpeedQ24) Move_speedQ24 = Move_CoastSpeedQ24;
 25431  0014E8  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25432  0014EA  5C39               	subwf	_Move_CoastSpeedQ24,w,c
 25433  0014EC  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25434  0014EE  583A               	subwfb	_Move_CoastSpeedQ24+1,w,c
 25435  0014F0  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25436  0014F2  583B               	subwfb	_Move_CoastSpeedQ24+2,w,c
 25437  0014F4  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25438  0014F6  583C               	subwfb	_Move_CoastSpeedQ24+3,w,c
 25439  0014F8  B0D8               	btfsc	status,0,c
 25440  0014FA  D001               	goto	i1u939_21
 25441  0014FC  D001               	goto	i1u939_20
 25442  0014FE                     i1u939_21:
 25443  0014FE  D040               	goto	i1l16443
 25444  001500                     i1u939_20:
 25445  001500                     i1l16429:
 25446                           
 25447                           ; BSR set to: 1
 25448  001500  C039  F1F0         	movff	_Move_CoastSpeedQ24,_Move_speedQ24
 25449  001504  C03A  F1F1         	movff	_Move_CoastSpeedQ24+1,_Move_speedQ24+1
 25450  001508  C03B  F1F2         	movff	_Move_CoastSpeedQ24+2,_Move_speedQ24+2
 25451  00150C  C03C  F1F3         	movff	_Move_CoastSpeedQ24+3,_Move_speedQ24+3
 25452  001510  D037               	goto	i1l16443
 25453  001512                     i1l16431:
 25454                           
 25455                           ; BSR set to: 1
 25456  001512  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25457  001514  5C39               	subwf	_Move_CoastSpeedQ24,w,c
 25458  001516  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25459  001518  583A               	subwfb	_Move_CoastSpeedQ24+1,w,c
 25460  00151A  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25461  00151C  583B               	subwfb	_Move_CoastSpeedQ24+2,w,c
 25462  00151E  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25463  001520  583C               	subwfb	_Move_CoastSpeedQ24+3,w,c
 25464  001522  B0D8               	btfsc	status,0,c
 25465  001524  D001               	goto	i1u940_21
 25466  001526  D001               	goto	i1u940_20
 25467  001528                     i1u940_21:
 25468  001528  D029               	goto	i1l876
 25469  00152A                     i1u940_20:
 25470  00152A                     
 25471                           ; BSR set to: 1
 25472                           ;Main.c: 422: Speed_IsAccelerating = 1;
 25473  00152A  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
 25474  00152C  8058               	bsf	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
 25475  00152E                     
 25476                           ;Main.c: 423: if (Move_speedQ24 < Move_AccelValueQ24) Move_speedQ24 = 0;
 25477  00152E  5035               	movf	_Move_AccelValueQ24,w,c
 25478  001530  0101               	movlb	1	; () banked
 25479  001532  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25480  001534  5036               	movf	_Move_AccelValueQ24+1,w,c
 25481  001536  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25482  001538  5037               	movf	_Move_AccelValueQ24+2,w,c
 25483  00153A  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25484  00153C  5038               	movf	_Move_AccelValueQ24+3,w,c
 25485  00153E  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25486  001540  B0D8               	btfsc	status,0,c
 25487  001542  D001               	goto	i1u941_21
 25488  001544  D001               	goto	i1u941_20
 25489  001546                     i1u941_21:
 25490  001546  D005               	goto	i1l16439
 25491  001548                     i1u941_20:
 25492  001548                     
 25493                           ; BSR set to: 1
 25494  001548  6BF0               	clrf	_Move_speedQ24& (0+255),b
 25495  00154A  6BF1               	clrf	(_Move_speedQ24+1)& (0+255),b
 25496  00154C  6BF2               	clrf	(_Move_speedQ24+2)& (0+255),b
 25497  00154E  6BF3               	clrf	(_Move_speedQ24+3)& (0+255),b
 25498  001550  D008               	goto	i1l878
 25499  001552                     i1l16439:
 25500                           
 25501                           ; BSR set to: 1
 25502                           ;Main.c: 424: else Move_speedQ24 -= Move_AccelValueQ24;
 25503  001552  5035               	movf	_Move_AccelValueQ24,w,c
 25504  001554  5FF0               	subwf	_Move_speedQ24& (0+255),f,b
 25505  001556  5036               	movf	_Move_AccelValueQ24+1,w,c
 25506  001558  5BF1               	subwfb	(_Move_speedQ24+1)& (0+255),f,b
 25507  00155A  5037               	movf	_Move_AccelValueQ24+2,w,c
 25508  00155C  5BF2               	subwfb	(_Move_speedQ24+2)& (0+255),f,b
 25509  00155E  5038               	movf	_Move_AccelValueQ24+3,w,c
 25510  001560  5BF3               	subwfb	(_Move_speedQ24+3)& (0+255),f,b
 25511  001562                     i1l878:
 25512                           
 25513                           ; BSR set to: 1
 25514                           ;Main.c: 425: if (Move_speedQ24 < Move_CoastSpeedQ24) Move_speedQ24 = Move_CoastSpeedQ24;
 25515  001562  5039               	movf	_Move_CoastSpeedQ24,w,c
 25516  001564  5DF0               	subwf	_Move_speedQ24& (0+255),w,b
 25517  001566  503A               	movf	_Move_CoastSpeedQ24+1,w,c
 25518  001568  59F1               	subwfb	(_Move_speedQ24+1)& (0+255),w,b
 25519  00156A  503B               	movf	_Move_CoastSpeedQ24+2,w,c
 25520  00156C  59F2               	subwfb	(_Move_speedQ24+2)& (0+255),w,b
 25521  00156E  503C               	movf	_Move_CoastSpeedQ24+3,w,c
 25522  001570  59F3               	subwfb	(_Move_speedQ24+3)& (0+255),w,b
 25523  001572  B0D8               	btfsc	status,0,c
 25524  001574  D001               	goto	i1u942_21
 25525  001576  D001               	goto	i1u942_20
 25526  001578                     i1u942_21:
 25527  001578  D003               	goto	i1l16443
 25528  00157A                     i1u942_20:
 25529  00157A  D7C2               	goto	i1l16429
 25530  00157C                     i1l876:
 25531                           
 25532                           ; BSR set to: 1
 25533  00157C  0100               	movlb	(_Speed_IsAccelerating/(0+8)) shr (0+8)
 25534  00157E  9058               	bcf	_Speed_IsAccelerating/(0+8),_Speed_IsAccelerating& (0+7),c	;volatile
 25535  001580                     i1l16443:
 25536                           
 25537                           ;Main.c: 428: Move_position[0].ul += Move_speedQ24;
 25538  001580  0101               	movlb	1	; () banked
 25539  001582  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25540  001584  0104               	movlb	4	; () banked
 25541  001586  2710               	addwf	_Move_position& (0+255),f,b
 25542  001588  0101               	movlb	1	; () banked
 25543  00158A  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25544  00158C  0104               	movlb	4	; () banked
 25545  00158E  2311               	addwfc	(_Move_position+1)& (0+255),f,b
 25546  001590  0101               	movlb	1	; () banked
 25547  001592  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25548  001594  0104               	movlb	4	; () banked
 25549  001596  2312               	addwfc	(_Move_position+2)& (0+255),f,b
 25550  001598  0101               	movlb	1	; () banked
 25551  00159A  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25552  00159C  0104               	movlb	4	; () banked
 25553  00159E  2313               	addwfc	(_Move_position+3)& (0+255),f,b
 25554                           
 25555                           ;Main.c: 429: if (Move_position[0].ul < Move_speedQ24) Move_position[1].ul++;
 25556  0015A0  0101               	movlb	1	; () banked
 25557  0015A2  51F0               	movf	_Move_speedQ24& (0+255),w,b
 25558  0015A4  0104               	movlb	4	; () banked
 25559  0015A6  5D10               	subwf	_Move_position& (0+255),w,b
 25560  0015A8  0101               	movlb	1	; () banked
 25561  0015AA  51F1               	movf	(_Move_speedQ24+1)& (0+255),w,b
 25562  0015AC  0104               	movlb	4	; () banked
 25563  0015AE  5911               	subwfb	(_Move_position+1)& (0+255),w,b
 25564  0015B0  0101               	movlb	1	; () banked
 25565  0015B2  51F2               	movf	(_Move_speedQ24+2)& (0+255),w,b
 25566  0015B4  0104               	movlb	4	; () banked
 25567  0015B6  5912               	subwfb	(_Move_position+2)& (0+255),w,b
 25568  0015B8  0101               	movlb	1	; () banked
 25569  0015BA  51F3               	movf	(_Move_speedQ24+3)& (0+255),w,b
 25570  0015BC  0104               	movlb	4	; () banked
 25571  0015BE  5913               	subwfb	(_Move_position+3)& (0+255),w,b
 25572  0015C0  B0D8               	btfsc	status,0,c
 25573  0015C2  D001               	goto	i1u943_21
 25574  0015C4  D001               	goto	i1u943_20
 25575  0015C6                     i1u943_21:
 25576  0015C6  D008               	goto	i1l16447
 25577  0015C8                     i1u943_20:
 25578  0015C8                     
 25579                           ; BSR set to: 4
 25580  0015C8  0E01               	movlw	1
 25581  0015CA  2714               	addwf	(_Move_position+4)& (0+255),f,b
 25582  0015CC  0E00               	movlw	0
 25583  0015CE  2315               	addwfc	(_Move_position+5)& (0+255),f,b
 25584  0015D0  0E00               	movlw	0
 25585  0015D2  2316               	addwfc	(_Move_position+6)& (0+255),f,b
 25586  0015D4  0E00               	movlw	0
 25587  0015D6  2317               	addwfc	(_Move_position+7)& (0+255),f,b
 25588  0015D8                     i1l16447:
 25589                           
 25590                           ; BSR set to: 4
 25591                           ;Main.c: 431: Move_shifted_position.ub[0] = Move_position[0].ub[3];
 25592  0015D8  C413  F041         	movff	_Move_position+3,_Move_shifted_position
 25593  0015DC                     
 25594                           ; BSR set to: 4
 25595                           ;Main.c: 432: Move_shifted_position.ub[1] = Move_position[1].ub[0];
 25596  0015DC  C414  F042         	movff	_Move_position+4,_Move_shifted_position+1
 25597  0015E0                     
 25598                           ; BSR set to: 4
 25599                           ;Main.c: 433: Move_shifted_position.ub[2] = Move_position[1].ub[1];
 25600  0015E0  C415  F043         	movff	_Move_position+5,_Move_shifted_position+2
 25601  0015E4                     
 25602                           ; BSR set to: 4
 25603                           ;Main.c: 434: Move_shifted_position.ub[3] = Move_position[1].ub[2];
 25604  0015E4  C416  F044         	movff	_Move_position+6,_Move_shifted_position+3
 25605  0015E8                     
 25606                           ; BSR set to: 4
 25607                           ;Main.c: 436: if (bMove_Neg) internal_PID_SetPoint = Move_Origin - Move_shifted_position
      +                          .ul;
 25608  0015E8  0100               	movlb	(_bMove_Neg/(0+8)) shr (0+8)
 25609  0015EA  A05A               	btfss	_bMove_Neg/(0+8),_bMove_Neg& (0+7),c	;volatile
 25610  0015EC  D001               	goto	i1u944_21
 25611  0015EE  D001               	goto	i1u944_20
 25612  0015F0                     i1u944_21:
 25613  0015F0  D711               	goto	i1l16413
 25614  0015F2                     i1u944_20:
 25615  0015F2  D702               	goto	i1l16411
 25616  0015F4                     i1l16461:
 25617                           
 25618                           ;Main.c: 438: }
 25619                           ;Main.c: 452: uiTemp = ADRESH;
 25620  0015F4  CFC4 F029          	movff	4036,SlowTick@uiTemp	;volatile
 25621  0015F8  6A2A               	clrf	SlowTick@uiTemp+1,c
 25622  0015FA                     
 25623                           ;Main.c: 453: uiTemp <<= 8;
 25624  0015FA  5029               	movf	SlowTick@uiTemp,w,c
 25625  0015FC  6E2A               	movwf	SlowTick@uiTemp+1,c
 25626  0015FE  6A29               	clrf	SlowTick@uiTemp,c
 25627  001600                     
 25628                           ;Main.c: 454: uiTemp += ADRESL;
 25629  001600  50C3               	movf	4035,w,c	;volatile
 25630  001602  2629               	addwf	SlowTick@uiTemp,f,c
 25631  001604  0E00               	movlw	0
 25632  001606  222A               	addwfc	SlowTick@uiTemp+1,f,c
 25633  001608                     
 25634                           ;Main.c: 455: GO = 1;
 25635  001608  82C2               	bsf	4034,1,c	;volatile
 25636  00160A                     
 25637                           ;Main.c: 456: signed int diff = uiTemp - internal_BatteryVoltage;
 25638  00160A  505B               	movf	SlowTick@internal_BatteryVoltage,w,c
 25639  00160C  5C29               	subwf	SlowTick@uiTemp,w,c
 25640  00160E  6E1C               	movwf	SlowTick@diff,c
 25641  001610  505C               	movf	SlowTick@internal_BatteryVoltage+1,w,c
 25642  001612  582A               	subwfb	SlowTick@uiTemp+1,w,c
 25643  001614  6E1D               	movwf	SlowTick@diff+1,c
 25644  001616                     
 25645                           ;Main.c: 457: diff >>= 4;
 25646  001616  0E04               	movlw	4
 25647  001618  6E08               	movwf	??_SlowTick& (0+255),c
 25648  00161A                     i1u945_25:
 25649  00161A  341D               	rlcf	SlowTick@diff+1,w,c
 25650  00161C  321D               	rrcf	SlowTick@diff+1,f,c
 25651  00161E  321C               	rrcf	SlowTick@diff,f,c
 25652  001620  2E08               	decfsz	??_SlowTick& (0+255),f,c
 25653  001622  D7FB               	goto	i1u945_25
 25654  001624                     
 25655                           ;Main.c: 458: internal_BatteryVoltage += diff;
 25656  001624  501C               	movf	SlowTick@diff,w,c
 25657  001626  265B               	addwf	SlowTick@internal_BatteryVoltage,f,c
 25658  001628  501D               	movf	SlowTick@diff+1,w,c
 25659  00162A  225C               	addwfc	SlowTick@internal_BatteryVoltage+1,f,c
 25660  00162C                     
 25661                           ;Main.c: 459: if (uiTemp > internal_BatteryVoltage) internal_BatteryVoltage++;
 25662  00162C  5029               	movf	SlowTick@uiTemp,w,c
 25663  00162E  5C5B               	subwf	SlowTick@internal_BatteryVoltage,w,c
 25664  001630  502A               	movf	SlowTick@uiTemp+1,w,c
 25665  001632  585C               	subwfb	SlowTick@internal_BatteryVoltage+1,w,c
 25666  001634  B0D8               	btfsc	status,0,c
 25667  001636  D001               	goto	i1u946_21
 25668  001638  D001               	goto	i1u946_20
 25669  00163A                     i1u946_21:
 25670  00163A  D002               	goto	i1l16479
 25671  00163C                     i1u946_20:
 25672  00163C  4A5B               	infsnz	SlowTick@internal_BatteryVoltage,f,c
 25673  00163E  2A5C               	incf	SlowTick@internal_BatteryVoltage+1,f,c
 25674  001640                     i1l16479:
 25675                           
 25676                           ;Main.c: 460: if (uiTemp < internal_BatteryVoltage) internal_BatteryVoltage--;
 25677  001640  505B               	movf	SlowTick@internal_BatteryVoltage,w,c
 25678  001642  5C29               	subwf	SlowTick@uiTemp,w,c
 25679  001644  505C               	movf	SlowTick@internal_BatteryVoltage+1,w,c
 25680  001646  582A               	subwfb	SlowTick@uiTemp+1,w,c
 25681  001648  B0D8               	btfsc	status,0,c
 25682  00164A  D001               	goto	i1u947_21
 25683  00164C  D001               	goto	i1u947_20
 25684  00164E                     i1u947_21:
 25685  00164E  D003               	goto	i1l16483
 25686  001650                     i1u947_20:
 25687  001650  065B               	decf	SlowTick@internal_BatteryVoltage,f,c
 25688  001652  A0D8               	btfss	status,0,c
 25689  001654  065C               	decf	SlowTick@internal_BatteryVoltage+1,f,c
 25690  001656                     i1l16483:
 25691                           
 25692                           ;Main.c: 461: if (!bLock_BatteryVoltage) BatteryVoltage = internal_BatteryVoltage;
 25693  001656  0100               	movlb	(_bLock_BatteryVoltage/(0+8)) shr (0+8)
 25694  001658  BE58               	btfsc	_bLock_BatteryVoltage/(0+8),_bLock_BatteryVoltage& (0+7),c	;volatile
 25695  00165A  D001               	goto	i1u948_21
 25696  00165C  D001               	goto	i1u948_20
 25697  00165E                     i1u948_21:
 25698  00165E  D004               	goto	i1l16487
 25699  001660                     i1u948_20:
 25700  001660  C05B  F1FC         	movff	SlowTick@internal_BatteryVoltage,_BatteryVoltage
 25701  001664  C05C  F1FD         	movff	SlowTick@internal_BatteryVoltage+1,_BatteryVoltage+1
 25702  001668                     i1l16487:
 25703                           
 25704                           ;Main.c: 462: if (internal_BatteryVoltage < Config.BatteryLowVoltageLevel) bLowVoltageTr
      +                          ip = 1;
 25705  001668  0102               	movlb	2	; () banked
 25706  00166A  51D7               	movf	(_Config+1)& (0+255),w,b
 25707  00166C  5C5B               	subwf	SlowTick@internal_BatteryVoltage,w,c
 25708  00166E  51D8               	movf	(_Config+2)& (0+255),w,b
 25709  001670  585C               	subwfb	SlowTick@internal_BatteryVoltage+1,w,c
 25710  001672  B0D8               	btfsc	status,0,c
 25711  001674  D001               	goto	i1u949_21
 25712  001676  D001               	goto	i1u949_20
 25713  001678                     i1u949_21:
 25714  001678  D002               	goto	i1l16491
 25715  00167A                     i1u949_20:
 25716  00167A                     
 25717                           ; BSR set to: 2
 25718  00167A  0100               	movlb	(_bLowVoltageTrip/(0+8)) shr (0+8)
 25719  00167C  8A59               	bsf	_bLowVoltageTrip/(0+8),_bLowVoltageTrip& (0+7),c	;volatile
 25720  00167E                     i1l16491:
 25721                           
 25722                           ;Main.c: 467: MotorSpeed = LastMotorPosition - CurrentMotorPosition;
 25723  00167E  5025               	movf	SlowTick@CurrentMotorPosition,w,c
 25724  001680  0102               	movlb	2	; () banked
 25725  001682  5DD2               	subwf	SlowTick@LastMotorPosition& (0+255),w,b
 25726  001684  6E23               	movwf	SlowTick@MotorSpeed,c
 25727  001686  5026               	movf	SlowTick@CurrentMotorPosition+1,w,c
 25728  001688  59D3               	subwfb	(SlowTick@LastMotorPosition+1)& (0+255),w,b
 25729  00168A  6E24               	movwf	SlowTick@MotorSpeed+1,c
 25730  00168C                     
 25731                           ; BSR set to: 2
 25732                           ;Main.c: 468: LastMotorPosition = CurrentMotorPosition;
 25733  00168C  C025  F2D2         	movff	SlowTick@CurrentMotorPosition,SlowTick@LastMotorPosition
 25734  001690  C026  F2D3         	movff	SlowTick@CurrentMotorPosition+1,SlowTick@LastMotorPosition+1
 25735  001694  C027  F2D4         	movff	SlowTick@CurrentMotorPosition+2,SlowTick@LastMotorPosition+2
 25736  001698  C028  F2D5         	movff	SlowTick@CurrentMotorPosition+3,SlowTick@LastMotorPosition+3
 25737  00169C                     
 25738                           ; BSR set to: 2
 25739                           ;Main.c: 469: if (MotorSpeed < 0) MotorSpeed = -MotorSpeed;
 25740  00169C  AE24               	btfss	SlowTick@MotorSpeed+1,7,c
 25741  00169E  D001               	goto	i1u950_21
 25742  0016A0  D001               	goto	i1u950_20
 25743  0016A2                     i1u950_21:
 25744  0016A2  D004               	goto	i1l16499
 25745  0016A4                     i1u950_20:
 25746  0016A4                     
 25747                           ; BSR set to: 2
 25748  0016A4  6C23               	negf	SlowTick@MotorSpeed,c
 25749  0016A6  1E24               	comf	SlowTick@MotorSpeed+1,f,c
 25750  0016A8  B0D8               	btfsc	status,0,c
 25751  0016AA  2A24               	incf	SlowTick@MotorSpeed+1,f,c
 25752  0016AC                     i1l16499:
 25753                           
 25754                           ; BSR set to: 2
 25755                           ;Main.c: 473: uiTemp = (MotorSpeed * Config.PowerResponseLimiter_Slope);
 25756  0016AC  C2DB  F001         	movff	_Config+5,?i1___wmul
 25757  0016B0  6A02               	clrf	?i1___wmul+1,c
 25758  0016B2  C023  F003         	movff	SlowTick@MotorSpeed,?i1___wmul+2
 25759  0016B6  C024  F004         	movff	SlowTick@MotorSpeed+1,?i1___wmul+3
 25760  0016BA  EC4F  F03B         	call	i1___wmul	;wreg free
 25761  0016BE  C001  F029         	movff	?i1___wmul,SlowTick@uiTemp
 25762  0016C2  C002  F02A         	movff	?i1___wmul+1,SlowTick@uiTemp+1
 25763  0016C6                     
 25764                           ; BSR set to: 2
 25765                           ;Main.c: 474: uiTemp += Config.PowerResponseLimiter_Intercept;
 25766  0016C6  51DC               	movf	(_Config+6)& (0+255),w,b
 25767  0016C8  2629               	addwf	SlowTick@uiTemp,f,c
 25768  0016CA  0E00               	movlw	0
 25769  0016CC  222A               	addwfc	SlowTick@uiTemp+1,f,c
 25770  0016CE                     
 25771                           ; BSR set to: 2
 25772                           ;Main.c: 475: if (uiTemp > 0xFF) uiTemp = 0xFF;
 25773  0016CE  0E00               	movlw	0
 25774  0016D0  5C29               	subwf	SlowTick@uiTemp,w,c
 25775  0016D2  0E01               	movlw	1
 25776  0016D4  582A               	subwfb	SlowTick@uiTemp+1,w,c
 25777  0016D6  A0D8               	btfss	status,0,c
 25778  0016D8  D001               	goto	i1u951_21
 25779  0016DA  D001               	goto	i1u951_20
 25780  0016DC                     i1u951_21:
 25781  0016DC  D004               	goto	i1l16507
 25782  0016DE                     i1u951_20:
 25783  0016DE                     
 25784                           ; BSR set to: 2
 25785  0016DE  0E00               	movlw	0
 25786  0016E0  6E2A               	movwf	SlowTick@uiTemp+1,c
 25787  0016E2  0EFF               	movlw	255
 25788  0016E4  6E29               	movwf	SlowTick@uiTemp,c
 25789  0016E6                     i1l16507:
 25790                           
 25791                           ; BSR set to: 2
 25792                           ;Main.c: 479: unsigned char ucBatt = (internal_BatteryVoltage >> 4);
 25793  0016E6  C05B  F008         	movff	SlowTick@internal_BatteryVoltage,??_SlowTick
 25794  0016EA  C05C  F009         	movff	SlowTick@internal_BatteryVoltage+1,??_SlowTick+1
 25795  0016EE  0E04               	movlw	4
 25796  0016F0  6E0A               	movwf	(??_SlowTick+2)& (0+255),c
 25797  0016F2                     i1u952_25:
 25798  0016F2  90D8               	bcf	status,0,c
 25799  0016F4  3209               	rrcf	??_SlowTick+1,f,c
 25800  0016F6  3208               	rrcf	??_SlowTick,f,c
 25801  0016F8  2E0A               	decfsz	(??_SlowTick+2)& (0+255),f,c
 25802  0016FA  D7FB               	goto	i1u952_25
 25803  0016FC  5008               	movf	??_SlowTick,w,c
 25804  0016FE  6E1E               	movwf	SlowTick@ucBatt,c
 25805  001700                     
 25806                           ; BSR set to: 2
 25807                           ;Main.c: 480: unsigned int BatteryScaleQ8 = Config.Battery12V_Q8 / ucBatt;
 25808  001700  C2D9  F001         	movff	_Config+3,?i1___lwdiv
 25809  001704  C2DA  F002         	movff	_Config+4,?i1___lwdiv+1
 25810  001708  C01E  F003         	movff	SlowTick@ucBatt,?i1___lwdiv+2
 25811  00170C  6A04               	clrf	?i1___lwdiv+3,c
 25812  00170E  ECEF  F038         	call	i1___lwdiv	;wreg free
 25813  001712  C001  F01A         	movff	?i1___lwdiv,SlowTick@BatteryScaleQ8
 25814  001716  C002  F01B         	movff	?i1___lwdiv+1,SlowTick@BatteryScaleQ8+1
 25815  00171A                     
 25816                           ; BSR set to: 2
 25817                           ;Main.c: 481: PID_ResponseLimit = uiTemp*BatteryScaleQ8;
 25818  00171A  C029  F001         	movff	SlowTick@uiTemp,?i1___wmul
 25819  00171E  C02A  F002         	movff	SlowTick@uiTemp+1,?i1___wmul+1
 25820  001722  C01A  F003         	movff	SlowTick@BatteryScaleQ8,?i1___wmul+2
 25821  001726  C01B  F004         	movff	SlowTick@BatteryScaleQ8+1,?i1___wmul+3
 25822  00172A  EC4F  F03B         	call	i1___wmul	;wreg free
 25823  00172E  C001  F01F         	movff	?i1___wmul,SlowTick@PID_ResponseLimit
 25824  001732  C002  F020         	movff	?i1___wmul+1,SlowTick@PID_ResponseLimit+1
 25825  001736  6A21               	clrf	SlowTick@PID_ResponseLimit+2,c
 25826  001738  6A22               	clrf	SlowTick@PID_ResponseLimit+3,c
 25827  00173A                     
 25828                           ; BSR set to: 2
 25829                           ;Main.c: 482: PID_ResponseLimit >>= 6;
 25830  00173A  0E06               	movlw	6
 25831  00173C  6E08               	movwf	??_SlowTick& (0+255),c
 25832  00173E                     i1u953_25:
 25833  00173E  90D8               	bcf	status,0,c
 25834  001740  3222               	rrcf	SlowTick@PID_ResponseLimit+3,f,c
 25835  001742  3221               	rrcf	SlowTick@PID_ResponseLimit+2,f,c
 25836  001744  3220               	rrcf	SlowTick@PID_ResponseLimit+1,f,c
 25837  001746  321F               	rrcf	SlowTick@PID_ResponseLimit,f,c
 25838  001748  2E08               	decfsz	??_SlowTick& (0+255),f,c
 25839  00174A  D7F9               	goto	i1u953_25
 25840  00174C                     
 25841                           ; BSR set to: 2
 25842                           ;Main.c: 488: PID_Error = internal_PID_SetPoint - CurrentMotorPosition;
 25843  00174C  5025               	movf	SlowTick@CurrentMotorPosition,w,c
 25844  00174E  0101               	movlb	1	; () banked
 25845  001750  5DE0               	subwf	SlowTick@internal_PID_SetPoint& (0+255),w,b
 25846  001752  6E2B               	movwf	SlowTick@PID_Error,c
 25847  001754  5026               	movf	SlowTick@CurrentMotorPosition+1,w,c
 25848  001756  59E1               	subwfb	(SlowTick@internal_PID_SetPoint+1)& (0+255),w,b
 25849  001758  6E2C               	movwf	SlowTick@PID_Error+1,c
 25850  00175A  5027               	movf	SlowTick@CurrentMotorPosition+2,w,c
 25851  00175C  59E2               	subwfb	(SlowTick@internal_PID_SetPoint+2)& (0+255),w,b
 25852  00175E  6E2D               	movwf	SlowTick@PID_Error+2,c
 25853  001760  5028               	movf	SlowTick@CurrentMotorPosition+3,w,c
 25854  001762  59E3               	subwfb	(SlowTick@internal_PID_SetPoint+3)& (0+255),w,b
 25855  001764  6E2E               	movwf	SlowTick@PID_Error+3,c
 25856  001766                     
 25857                           ; BSR set to: 1
 25858                           ;Main.c: 489: if (PID_Error > Config.PID_MaxError) {
 25859  001766  0102               	movlb	2	; () banked
 25860  001768  C2EC  F008         	movff	_Config+22,??_SlowTick
 25861  00176C  C2ED  F009         	movff	_Config+23,??_SlowTick+1
 25862  001770  0E00               	movlw	0
 25863  001772  BE09               	btfsc	(??_SlowTick+1)& (0+255),7,c
 25864  001774  0EFF               	movlw	255
 25865  001776  6E0A               	movwf	(??_SlowTick+2)& (0+255),c
 25866  001778  6E0B               	movwf	(??_SlowTick+3)& (0+255),c
 25867  00177A  500B               	movf	??_SlowTick+3,w,c
 25868  00177C  0A80               	xorlw	128
 25869  00177E  6E0C               	movwf	(??_SlowTick+4)& (0+255),c
 25870  001780  502B               	movf	SlowTick@PID_Error,w,c
 25871  001782  5C08               	subwf	??_SlowTick,w,c
 25872  001784  502C               	movf	SlowTick@PID_Error+1,w,c
 25873  001786  5809               	subwfb	??_SlowTick+1,w,c
 25874  001788  502D               	movf	SlowTick@PID_Error+2,w,c
 25875  00178A  580A               	subwfb	??_SlowTick+2,w,c
 25876  00178C  502E               	movf	SlowTick@PID_Error+3,w,c
 25877  00178E  0A80               	xorlw	128
 25878  001790  580C               	subwfb	(??_SlowTick+4)& (0+255),w,c
 25879  001792  B0D8               	btfsc	status,0,c
 25880  001794  D001               	goto	i1u954_21
 25881  001796  D001               	goto	i1u954_20
 25882  001798                     i1u954_21:
 25883  001798  D00E               	goto	i1l16523
 25884  00179A                     i1u954_20:
 25885  00179A                     
 25886                           ; BSR set to: 2
 25887                           ;Main.c: 490: PID_Error = Config.PID_MaxError;
 25888  00179A  EE22  F0EC         	lfsr	2,_Config+22
 25889  00179E  CFDE F02B          	movff	postinc2,SlowTick@PID_Error
 25890  0017A2  CFDD F02C          	movff	postdec2,SlowTick@PID_Error+1
 25891  0017A6  0E00               	movlw	0
 25892  0017A8  BE2C               	btfsc	SlowTick@PID_Error+1,7,c
 25893  0017AA  0EFF               	movlw	-1
 25894  0017AC  6E2D               	movwf	SlowTick@PID_Error+2,c
 25895  0017AE  6E2E               	movwf	SlowTick@PID_Error+3,c
 25896  0017B0                     i1l16521:
 25897                           
 25898                           ; BSR set to: 2
 25899                           ;Main.c: 491: bMotionError = 1;
 25900  0017B0  0100               	movlb	(_bMotionError/(0+8)) shr (0+8)
 25901  0017B2  8C59               	bsf	_bMotionError/(0+8),_bMotionError& (0+7),c	;volatile
 25902                           
 25903                           ;Main.c: 492: } else if (PID_Error<-Config.PID_MaxError) {
 25904  0017B4  D037               	goto	i1l16529
 25905  0017B6                     i1l16523:
 25906                           
 25907                           ; BSR set to: 2
 25908  0017B6  EE22  F0EC         	lfsr	2,_Config+22
 25909  0017BA  CFDE F008          	movff	postinc2,??_SlowTick
 25910  0017BE  CFDD F009          	movff	postdec2,??_SlowTick+1
 25911  0017C2  1E08               	comf	??_SlowTick,f,c
 25912  0017C4  1E09               	comf	??_SlowTick+1,f,c
 25913  0017C6  4A08               	infsnz	??_SlowTick,f,c
 25914  0017C8  2A09               	incf	??_SlowTick+1,f,c
 25915  0017CA  C008  F00A         	movff	??_SlowTick,??_SlowTick+2
 25916  0017CE  C009  F00B         	movff	??_SlowTick+1,??_SlowTick+3
 25917  0017D2  0E00               	movlw	0
 25918  0017D4  BE0B               	btfsc	(??_SlowTick+3)& (0+255),7,c
 25919  0017D6  0EFF               	movlw	255
 25920  0017D8  6E0C               	movwf	(??_SlowTick+4)& (0+255),c
 25921  0017DA  6E0D               	movwf	(??_SlowTick+5)& (0+255),c
 25922  0017DC  502E               	movf	SlowTick@PID_Error+3,w,c
 25923  0017DE  0A80               	xorlw	128
 25924  0017E0  6E0E               	movwf	(??_SlowTick+6)& (0+255),c
 25925  0017E2  500A               	movf	??_SlowTick+2,w,c
 25926  0017E4  5C2B               	subwf	SlowTick@PID_Error,w,c
 25927  0017E6  500B               	movf	??_SlowTick+3,w,c
 25928  0017E8  582C               	subwfb	SlowTick@PID_Error+1,w,c
 25929  0017EA  500C               	movf	??_SlowTick+4,w,c
 25930  0017EC  582D               	subwfb	SlowTick@PID_Error+2,w,c
 25931  0017EE  500D               	movf	??_SlowTick+5,w,c
 25932  0017F0  0A80               	xorlw	128
 25933  0017F2  580E               	subwfb	(??_SlowTick+6)& (0+255),w,c
 25934  0017F4  B0D8               	btfsc	status,0,c
 25935  0017F6  D001               	goto	i1u955_21
 25936  0017F8  D001               	goto	i1u955_20
 25937  0017FA                     i1u955_21:
 25938  0017FA  D014               	goto	i1l16529
 25939  0017FC                     i1u955_20:
 25940  0017FC                     
 25941                           ; BSR set to: 2
 25942                           ;Main.c: 493: PID_Error = -Config.PID_MaxError;
 25943  0017FC  EE22  F0EC         	lfsr	2,_Config+22
 25944  001800  CFDE F008          	movff	postinc2,??_SlowTick
 25945  001804  CFDD F009          	movff	postdec2,??_SlowTick+1
 25946  001808  1E08               	comf	??_SlowTick,f,c
 25947  00180A  1E09               	comf	??_SlowTick+1,f,c
 25948  00180C  4A08               	infsnz	??_SlowTick,f,c
 25949  00180E  2A09               	incf	??_SlowTick+1,f,c
 25950  001810  C008  F02B         	movff	??_SlowTick,SlowTick@PID_Error
 25951  001814  C009  F02C         	movff	??_SlowTick+1,SlowTick@PID_Error+1
 25952  001818  0E00               	movlw	0
 25953  00181A  BE2C               	btfsc	SlowTick@PID_Error+1,7,c
 25954  00181C  0EFF               	movlw	-1
 25955  00181E  6E2D               	movwf	SlowTick@PID_Error+2,c
 25956  001820  6E2E               	movwf	SlowTick@PID_Error+3,c
 25957  001822  D7C6               	goto	i1l16521
 25958  001824                     i1l16529:
 25959                           
 25960                           ;Main.c: 495: }
 25961                           ;Main.c: 500: PID_Error_delta = PID_Error - PID_LastError;
 25962  001824  504B               	movf	SlowTick@PID_LastError,w,c
 25963  001826  5C2B               	subwf	SlowTick@PID_Error,w,c
 25964  001828  6E18               	movwf	SlowTick@PID_Error_delta,c
 25965  00182A  504C               	movf	SlowTick@PID_LastError+1,w,c
 25966  00182C  582C               	subwfb	SlowTick@PID_Error+1,w,c
 25967  00182E  6E19               	movwf	SlowTick@PID_Error_delta+1,c
 25968  001830                     
 25969                           ;Main.c: 501: PID_LastError = PID_Error;
 25970  001830  C02B  F04B         	movff	SlowTick@PID_Error,SlowTick@PID_LastError
 25971  001834  C02C  F04C         	movff	SlowTick@PID_Error+1,SlowTick@PID_LastError+1
 25972  001838                     
 25973                           ;Main.c: 503: ResponseOutput = (long) Config.PID_Kp * (long) PID_Error;
 25974  001838  C2EE  F001         	movff	_Config+24,?i1___wmul
 25975  00183C  C2EF  F002         	movff	_Config+25,?i1___wmul+1
 25976  001840  C02B  F003         	movff	SlowTick@PID_Error,?i1___wmul+2
 25977  001844  C02C  F004         	movff	SlowTick@PID_Error+1,?i1___wmul+3
 25978  001848  EC4F  F03B         	call	i1___wmul	;wreg free
 25979  00184C  C001  F02F         	movff	?i1___wmul,SlowTick@ResponseOutput
 25980  001850  C002  F030         	movff	?i1___wmul+1,SlowTick@ResponseOutput+1
 25981  001854                     
 25982                           ;Main.c: 504: ResponseOutput += (long) Config.PID_Kd * (long) PID_Error_delta;
 25983  001854  C2F0  F001         	movff	_Config+26,?i1___wmul
 25984  001858  C2F1  F002         	movff	_Config+27,?i1___wmul+1
 25985  00185C  C018  F003         	movff	SlowTick@PID_Error_delta,?i1___wmul+2
 25986  001860  C019  F004         	movff	SlowTick@PID_Error_delta+1,?i1___wmul+3
 25987  001864  EC4F  F03B         	call	i1___wmul	;wreg free
 25988  001868  5001               	movf	?i1___wmul,w,c
 25989  00186A  262F               	addwf	SlowTick@ResponseOutput,f,c
 25990  00186C  5002               	movf	?i1___wmul+1,w,c
 25991  00186E  2230               	addwfc	SlowTick@ResponseOutput+1,f,c
 25992  001870                     
 25993                           ;Main.c: 509: if (ResponseOutput < 0) {
 25994  001870  AE30               	btfss	SlowTick@ResponseOutput+1,7,c
 25995  001872  D001               	goto	i1u956_21
 25996  001874  D001               	goto	i1u956_20
 25997  001876                     i1u956_21:
 25998  001876  D007               	goto	i1l893
 25999  001878                     i1u956_20:
 26000  001878                     
 26001                           ;Main.c: 510: LATCbits.LATC0 = 0;
 26002  001878  908B               	bcf	3979,0,c	;volatile
 26003                           
 26004                           ;Main.c: 511: LATBbits.LATB0 = 1;
 26005  00187A  808A               	bsf	3978,0,c	;volatile
 26006  00187C                     
 26007                           ;Main.c: 512: ResponseOutput = -ResponseOutput;
 26008  00187C  6C2F               	negf	SlowTick@ResponseOutput,c
 26009  00187E  1E30               	comf	SlowTick@ResponseOutput+1,f,c
 26010  001880  B0D8               	btfsc	status,0,c
 26011  001882  2A30               	incf	SlowTick@ResponseOutput+1,f,c
 26012                           
 26013                           ;Main.c: 513: } else {
 26014  001884  D002               	goto	i1l16543
 26015  001886                     i1l893:
 26016                           
 26017                           ;Main.c: 514: LATCbits.LATC0 = 1;
 26018  001886  808B               	bsf	3979,0,c	;volatile
 26019                           
 26020                           ;Main.c: 515: LATBbits.LATB0 = 0;
 26021  001888  908A               	bcf	3978,0,c	;volatile
 26022  00188A                     i1l16543:
 26023                           
 26024                           ;Main.c: 516: }
 26025                           ;Main.c: 517: if (ResponseOutput > PID_ResponseLimit) ResponseOutput = PID_ResponseLimit;
 26026  00188A  C02F  F008         	movff	SlowTick@ResponseOutput,??_SlowTick
 26027  00188E  C030  F009         	movff	SlowTick@ResponseOutput+1,??_SlowTick+1
 26028  001892  0E00               	movlw	0
 26029  001894  BE09               	btfsc	(??_SlowTick+1)& (0+255),7,c
 26030  001896  0EFF               	movlw	255
 26031  001898  6E0A               	movwf	(??_SlowTick+2)& (0+255),c
 26032  00189A  6E0B               	movwf	(??_SlowTick+3)& (0+255),c
 26033  00189C  5008               	movf	??_SlowTick,w,c
 26034  00189E  5C1F               	subwf	SlowTick@PID_ResponseLimit,w,c
 26035  0018A0  5009               	movf	??_SlowTick+1,w,c
 26036  0018A2  5820               	subwfb	SlowTick@PID_ResponseLimit+1,w,c
 26037  0018A4  500A               	movf	??_SlowTick+2,w,c
 26038  0018A6  5821               	subwfb	SlowTick@PID_ResponseLimit+2,w,c
 26039  0018A8  500B               	movf	??_SlowTick+3,w,c
 26040  0018AA  5822               	subwfb	SlowTick@PID_ResponseLimit+3,w,c
 26041  0018AC  B0D8               	btfsc	status,0,c
 26042  0018AE  D001               	goto	i1u957_21
 26043  0018B0  D001               	goto	i1u957_20
 26044  0018B2                     i1u957_21:
 26045  0018B2  D004               	goto	i1l895
 26046  0018B4                     i1u957_20:
 26047  0018B4  C01F  F02F         	movff	SlowTick@PID_ResponseLimit,SlowTick@ResponseOutput
 26048  0018B8  C020  F030         	movff	SlowTick@PID_ResponseLimit+1,SlowTick@ResponseOutput+1
 26049  0018BC                     i1l895:
 26050                           
 26051                           ;Main.c: 519: if (bPowerOff) {
 26052  0018BC  0100               	movlb	(_bPowerOff/(0+8)) shr (0+8)
 26053  0018BE  A25A               	btfss	_bPowerOff/(0+8),_bPowerOff& (0+7),c	;volatile
 26054  0018C0  D001               	goto	i1u958_21
 26055  0018C2  D001               	goto	i1u958_20
 26056  0018C4                     i1u958_21:
 26057  0018C4  D00C               	goto	i1l16549
 26058  0018C6                     i1u958_20:
 26059  0018C6                     
 26060                           ;Main.c: 520: LATCbits.LATC0 = 0;
 26061  0018C6  908B               	bcf	3979,0,c	;volatile
 26062                           
 26063                           ;Main.c: 521: LATBbits.LATB0 = 0;
 26064  0018C8  908A               	bcf	3978,0,c	;volatile
 26065                           
 26066                           ;Main.c: 522: ResponseOutput = 0;
 26067  0018CA  6A2F               	clrf	SlowTick@ResponseOutput,c
 26068  0018CC  6A30               	clrf	SlowTick@ResponseOutput+1,c
 26069                           
 26070                           ;Main.c: 523: internal_PID_SetPoint = CurrentMotorPosition;
 26071  0018CE  C025  F1E0         	movff	SlowTick@CurrentMotorPosition,SlowTick@internal_PID_SetPoint
 26072  0018D2  C026  F1E1         	movff	SlowTick@CurrentMotorPosition+1,SlowTick@internal_PID_SetPoint+1
 26073  0018D6  C027  F1E2         	movff	SlowTick@CurrentMotorPosition+2,SlowTick@internal_PID_SetPoint+2
 26074  0018DA  C028  F1E3         	movff	SlowTick@CurrentMotorPosition+3,SlowTick@internal_PID_SetPoint+3
 26075  0018DE                     i1l16549:
 26076                           
 26077                           ;Main.c: 524: }
 26078                           ;Main.c: 529: if (ResponseOutput > 900) ResponseOutput = 0x3FF;
 26079  0018DE  5030               	movf	SlowTick@ResponseOutput+1,w,c
 26080  0018E0  0A80               	xorlw	128
 26081  0018E2  0F7D               	addlw	-131
 26082  0018E4  0E85               	movlw	133
 26083  0018E6  B4D8               	btfsc	status,2,c
 26084  0018E8  5C2F               	subwf	SlowTick@ResponseOutput,w,c
 26085  0018EA  A0D8               	btfss	status,0,c
 26086  0018EC  D001               	goto	i1u959_21
 26087  0018EE  D001               	goto	i1u959_20
 26088  0018F0                     i1u959_21:
 26089  0018F0  D004               	goto	i1l16553
 26090  0018F2                     i1u959_20:
 26091  0018F2  0E03               	movlw	3
 26092  0018F4  6E30               	movwf	SlowTick@ResponseOutput+1,c
 26093  0018F6  0EFF               	movlw	255
 26094  0018F8  6E2F               	movwf	SlowTick@ResponseOutput,c
 26095  0018FA                     i1l16553:
 26096                           
 26097                           ;Main.c: 532: ResponseOutput = 0x3FF - ResponseOutput;
 26098  0018FA  502F               	movf	SlowTick@ResponseOutput,w,c
 26099  0018FC  08FF               	sublw	255
 26100  0018FE  6E2F               	movwf	SlowTick@ResponseOutput,c
 26101  001900  5030               	movf	SlowTick@ResponseOutput+1,w,c
 26102  001902  A0D8               	btfss	status,0,c
 26103  001904  2AE8               	incf	wreg,f,c
 26104  001906  0803               	sublw	3
 26105  001908  6E30               	movwf	SlowTick@ResponseOutput+1,c
 26106  00190A                     
 26107                           ;Main.c: 534: ResponseOutput >>= 2;
 26108  00190A  3430               	rlcf	SlowTick@ResponseOutput+1,w,c
 26109  00190C  3230               	rrcf	SlowTick@ResponseOutput+1,f,c
 26110  00190E  322F               	rrcf	SlowTick@ResponseOutput,f,c
 26111  001910  3430               	rlcf	SlowTick@ResponseOutput+1,w,c
 26112  001912  3230               	rrcf	SlowTick@ResponseOutput+1,f,c
 26113  001914  322F               	rrcf	SlowTick@ResponseOutput,f,c
 26114  001916                     
 26115                           ;Main.c: 537: CCPR1L = (unsigned char) ResponseOutput;
 26116  001916  C02F  FFBC         	movff	SlowTick@ResponseOutput,4028	;volatile
 26117  00191A  C017  FFF5         	movff	??_SlowTick+15,tablat
 26118  00191E  C016  FFF8         	movff	??_SlowTick+14,tblptru
 26119  001922  C015  FFF7         	movff	??_SlowTick+13,tblptrh
 26120  001926  C014  FFF6         	movff	??_SlowTick+12,tblptrl
 26121  00192A  C013  FFDA         	movff	??_SlowTick+11,fsr2h
 26122  00192E  C012  FFD9         	movff	??_SlowTick+10,fsr2l
 26123  001932  C011  FFE0         	movff	??_SlowTick+9,bsr
 26124  001936  C010  FFE8         	movff	??_SlowTick+8,wreg
 26125  00193A  C00F  FFD8         	movff	??_SlowTick+7,status
 26126  00193E  0010               	retfie	
 26127  001940                     __end_of_SlowTick:
 26128                           	opt stack 0
 26129                           tblptru	equ	0xFF8
 26130                           tblptrh	equ	0xFF7
 26131                           tblptrl	equ	0xFF6
 26132                           tablat	equ	0xFF5
 26133                           prodh	equ	0xFF4
 26134                           prodl	equ	0xFF3
 26135                           intcon	equ	0xFF2
 26136                           intcon2	equ	0xFF1
 26137                           postinc0	equ	0xFEE
 26138                           wreg	equ	0xFE8
 26139                           postinc1	equ	0xFE6
 26140                           postdec1	equ	0xFE5
 26141                           fsr1h	equ	0xFE2
 26142                           fsr1l	equ	0xFE1
 26143                           bsr	equ	0xFE0
 26144                           indf2	equ	0xFDF
 26145                           postinc2	equ	0xFDE
 26146                           postdec2	equ	0xFDD
 26147                           fsr2h	equ	0xFDA
 26148                           fsr2l	equ	0xFD9
 26149                           status	equ	0xFD8
 26150                           
 26151 ;; *************** function i1___lwdiv *****************
 26152 ;; Defined at:
 26153 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwdiv.c"
 26154 ;; Parameters:    Size  Location     Type
 26155 ;;  __lwdiv         2    0[COMRAM] unsigned int 
 26156 ;;  __lwdiv         2    2[COMRAM] unsigned int 
 26157 ;; Auto vars:     Size  Location     Type
 26158 ;;  __lwdiv         2    5[COMRAM] unsigned int 
 26159 ;;  __lwdiv         1    4[COMRAM] unsigned char 
 26160 ;; Return value:  Size  Location     Type
 26161 ;;                  2    0[COMRAM] unsigned int 
 26162 ;; Registers used:
 26163 ;;		wreg, status,2, status,0
 26164 ;; Tracked objects:
 26165 ;;		On entry : F/2
 26166 ;;		On exit  : F/2
 26167 ;;		Unchanged: FFFFFFF0/0
 26168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26169 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26170 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26172 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26173 ;;Total ram usage:        7 bytes
 26174 ;; Hardware stack levels used:    1
 26175 ;; Hardware stack levels required when called:    1
 26176 ;; This function calls:
 26177 ;;		Nothing
 26178 ;; This function is called by:
 26179 ;;		_SlowTick
 26180 ;; This function uses a non-reentrant model
 26181 ;;
 26182                           
 26183                           	psect	text84
 26184  0071DE                     __ptext84:
 26185                           	opt stack 0
 26186  0071DE                     i1___lwdiv:
 26187                           	opt stack 20
 26188                           
 26189                           ; BSR set to: 2
 26190  0071DE  6A06               	clrf	i1___lwdiv@quotient,c
 26191  0071E0  6A07               	clrf	i1___lwdiv@quotient+1,c
 26192                           
 26193                           ; BSR set to: 2
 26194  0071E2  5004               	movf	i1___lwdiv@divisor+1,w,c
 26195  0071E4  1003               	iorwf	i1___lwdiv@divisor,w,c
 26196  0071E6  E01B               	bz	i1l3074
 26197                           
 26198                           ; BSR set to: 2
 26199  0071E8  0E01               	movlw	1
 26200  0071EA  6E05               	movwf	i1___lwdiv@counter,c
 26201  0071EC  D004               	goto	i1l16239
 26202  0071EE                     i1l16237:
 26203                           
 26204                           ; BSR set to: 2
 26205  0071EE  90D8               	bcf	status,0,c
 26206  0071F0  3603               	rlcf	i1___lwdiv@divisor,f,c
 26207  0071F2  3604               	rlcf	i1___lwdiv@divisor+1,f,c
 26208  0071F4  2A05               	incf	i1___lwdiv@counter,f,c
 26209  0071F6                     i1l16239:
 26210                           
 26211                           ; BSR set to: 2
 26212  0071F6  AE04               	btfss	i1___lwdiv@divisor+1,7,c
 26213  0071F8  D7FA               	goto	i1l16237
 26214  0071FA                     i1l16241:
 26215                           
 26216                           ; BSR set to: 2
 26217  0071FA  90D8               	bcf	status,0,c
 26218  0071FC  3606               	rlcf	i1___lwdiv@quotient,f,c
 26219  0071FE  3607               	rlcf	i1___lwdiv@quotient+1,f,c
 26220                           
 26221                           ; BSR set to: 2
 26222  007200  5003               	movf	i1___lwdiv@divisor,w,c
 26223  007202  5C01               	subwf	i1___lwdiv@dividend,w,c
 26224  007204  5004               	movf	i1___lwdiv@divisor+1,w,c
 26225  007206  5802               	subwfb	i1___lwdiv@dividend+1,w,c
 26226  007208  E305               	bnc	i1l16249
 26227                           
 26228                           ; BSR set to: 2
 26229  00720A  5003               	movf	i1___lwdiv@divisor,w,c
 26230  00720C  5E01               	subwf	i1___lwdiv@dividend,f,c
 26231  00720E  5004               	movf	i1___lwdiv@divisor+1,w,c
 26232  007210  5A02               	subwfb	i1___lwdiv@dividend+1,f,c
 26233                           
 26234                           ; BSR set to: 2
 26235  007212  8006               	bsf	i1___lwdiv@quotient,0,c
 26236  007214                     i1l16249:
 26237                           
 26238                           ; BSR set to: 2
 26239  007214  90D8               	bcf	status,0,c
 26240  007216  3204               	rrcf	i1___lwdiv@divisor+1,f,c
 26241  007218  3203               	rrcf	i1___lwdiv@divisor,f,c
 26242                           
 26243                           ; BSR set to: 2
 26244  00721A  2E05               	decfsz	i1___lwdiv@counter,f,c
 26245  00721C  D7EE               	goto	i1l16241
 26246  00721E                     i1l3074:
 26247                           
 26248                           ; BSR set to: 2
 26249  00721E  C006  F001         	movff	i1___lwdiv@quotient,?i1___lwdiv
 26250  007222  C007  F002         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
 26251                           
 26252                           ; BSR set to: 2
 26253  007226  0012               	return	
 26254  007228                     __end_ofi1___lwdiv:
 26255                           	opt stack 0
 26256                           tblptru	equ	0xFF8
 26257                           tblptrh	equ	0xFF7
 26258                           tblptrl	equ	0xFF6
 26259                           tablat	equ	0xFF5
 26260                           prodh	equ	0xFF4
 26261                           prodl	equ	0xFF3
 26262                           intcon	equ	0xFF2
 26263                           intcon2	equ	0xFF1
 26264                           postinc0	equ	0xFEE
 26265                           wreg	equ	0xFE8
 26266                           postinc1	equ	0xFE6
 26267                           postdec1	equ	0xFE5
 26268                           fsr1h	equ	0xFE2
 26269                           fsr1l	equ	0xFE1
 26270                           bsr	equ	0xFE0
 26271                           indf2	equ	0xFDF
 26272                           postinc2	equ	0xFDE
 26273                           postdec2	equ	0xFDD
 26274                           fsr2h	equ	0xFDA
 26275                           fsr2l	equ	0xFD9
 26276                           status	equ	0xFD8
 26277                           
 26278 ;; *************** function i1___wmul *****************
 26279 ;; Defined at:
 26280 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\wmul.c"
 26281 ;; Parameters:    Size  Location     Type
 26282 ;;  __wmul          2    0[COMRAM] unsigned int 
 26283 ;;  __wmul          2    2[COMRAM] unsigned int 
 26284 ;; Auto vars:     Size  Location     Type
 26285 ;;  __wmul          2    4[COMRAM] unsigned int 
 26286 ;; Return value:  Size  Location     Type
 26287 ;;                  2    0[COMRAM] unsigned int 
 26288 ;; Registers used:
 26289 ;;		wreg, status,2, status,0
 26290 ;; Tracked objects:
 26291 ;;		On entry : 0/2
 26292 ;;		On exit  : 0/2
 26293 ;;		Unchanged: FFFFFFFF/0
 26294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26299 ;;Total ram usage:        6 bytes
 26300 ;; Hardware stack levels used:    1
 26301 ;; Hardware stack levels required when called:    1
 26302 ;; This function calls:
 26303 ;;		Nothing
 26304 ;; This function is called by:
 26305 ;;		_SlowTick
 26306 ;; This function uses a non-reentrant model
 26307 ;;
 26308                           
 26309                           	psect	text85
 26310  00769E                     __ptext85:
 26311                           	opt stack 0
 26312  00769E                     i1___wmul:
 26313                           	opt stack 20
 26314                           
 26315                           ; BSR set to: 2
 26316  00769E  6A05               	clrf	i1___wmul@product,c
 26317  0076A0  6A06               	clrf	i1___wmul@product+1,c
 26318  0076A2                     i1l3119:
 26319  0076A2  A001               	btfss	i1___wmul@multiplier,0,c
 26320  0076A4  D004               	goto	i1l16257
 26321  0076A6  5003               	movf	i1___wmul@multiplicand,w,c
 26322  0076A8  2605               	addwf	i1___wmul@product,f,c
 26323  0076AA  5004               	movf	i1___wmul@multiplicand+1,w,c
 26324  0076AC  2206               	addwfc	i1___wmul@product+1,f,c
 26325  0076AE                     i1l16257:
 26326  0076AE  90D8               	bcf	status,0,c
 26327  0076B0  3603               	rlcf	i1___wmul@multiplicand,f,c
 26328  0076B2  3604               	rlcf	i1___wmul@multiplicand+1,f,c
 26329  0076B4  90D8               	bcf	status,0,c
 26330  0076B6  3202               	rrcf	i1___wmul@multiplier+1,f,c
 26331  0076B8  3201               	rrcf	i1___wmul@multiplier,f,c
 26332  0076BA  5002               	movf	i1___wmul@multiplier+1,w,c
 26333  0076BC  1001               	iorwf	i1___wmul@multiplier,w,c
 26334  0076BE  E1F1               	bnz	i1l3119
 26335  0076C0  C005  F001         	movff	i1___wmul@product,?i1___wmul
 26336  0076C4  C006  F002         	movff	i1___wmul@product+1,?i1___wmul+1
 26337  0076C8  0012               	return	
 26338  0076CA                     __end_ofi1___wmul:
 26339                           	opt stack 0
 26340                           tblptru	equ	0xFF8
 26341                           tblptrh	equ	0xFF7
 26342                           tblptrl	equ	0xFF6
 26343                           tablat	equ	0xFF5
 26344                           prodh	equ	0xFF4
 26345                           prodl	equ	0xFF3
 26346                           intcon	equ	0xFF2
 26347                           intcon2	equ	0xFF1
 26348                           postinc0	equ	0xFEE
 26349                           wreg	equ	0xFE8
 26350                           postinc1	equ	0xFE6
 26351                           postdec1	equ	0xFE5
 26352                           fsr1h	equ	0xFE2
 26353                           fsr1l	equ	0xFE1
 26354                           bsr	equ	0xFE0
 26355                           indf2	equ	0xFDF
 26356                           postinc2	equ	0xFDE
 26357                           postdec2	equ	0xFDD
 26358                           fsr2h	equ	0xFDA
 26359                           fsr2l	equ	0xFD9
 26360                           status	equ	0xFD8
 26361                           
 26362 ;; *************** function _FastTick *****************
 26363 ;; Defined at:
 26364 ;;		line 138 in file "Z:\CineFlux\Dropbox\Orbit\Main.c"
 26365 ;; Parameters:    Size  Location     Type
 26366 ;;		None
 26367 ;; Auto vars:     Size  Location     Type
 26368 ;;  RXDat           1   10[BANK0 ] unsigned char 
 26369 ;; Return value:  Size  Location     Type
 26370 ;;		None               void
 26371 ;; Registers used:
 26372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 26373 ;; Tracked objects:
 26374 ;;		On entry : 0/0
 26375 ;;		On exit  : 0/0
 26376 ;;		Unchanged: 0/0
 26377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26380 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26381 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26382 ;;Total ram usage:       11 bytes
 26383 ;; Hardware stack levels used:    1
 26384 ;; This function calls:
 26385 ;;		Nothing
 26386 ;; This function is called by:
 26387 ;;		Interrupt level 2
 26388 ;; This function uses a non-reentrant model
 26389 ;;
 26390                           
 26391                           	psect	intcode
 26392  001008                     __pintcode:
 26393                           	opt stack 0
 26394  001008                     _FastTick:
 26395                           	opt stack 20
 26396  001008  CFD9 F064          	movff	fsr2l,??_FastTick+4
 26397  00100C  CFDA F065          	movff	fsr2h,??_FastTick+5
 26398  001010  CFF6 F066          	movff	tblptrl,??_FastTick+6
 26399  001014  EF0D  F02C         	goto	int_func
 26400                           tblptru	equ	0xFF8
 26401                           tblptrh	equ	0xFF7
 26402                           tblptrl	equ	0xFF6
 26403                           tablat	equ	0xFF5
 26404                           prodh	equ	0xFF4
 26405                           prodl	equ	0xFF3
 26406                           intcon	equ	0xFF2
 26407                           intcon2	equ	0xFF1
 26408                           postinc0	equ	0xFEE
 26409                           wreg	equ	0xFE8
 26410                           postinc1	equ	0xFE6
 26411                           postdec1	equ	0xFE5
 26412                           fsr1h	equ	0xFE2
 26413                           fsr1l	equ	0xFE1
 26414                           bsr	equ	0xFE0
 26415                           indf2	equ	0xFDF
 26416                           postinc2	equ	0xFDE
 26417                           postdec2	equ	0xFDD
 26418                           fsr2h	equ	0xFDA
 26419                           fsr2l	equ	0xFD9
 26420                           status	equ	0xFD8
 26421                           
 26422                           	psect	intcode_body
 26423  00581A                     __pintcode_body:
 26424                           	opt stack 20
 26425  00581A                     int_func:
 26426                           	opt stack 20
 26427  00581A  CFF7 F067          	movff	tblptrh,??_FastTick+7
 26428  00581E  CFF8 F068          	movff	tblptru,??_FastTick+8
 26429  005822  CFF5 F069          	movff	tablat,??_FastTick+9
 26430  005826                     
 26431                           ;Main.c: 139: static unsigned char LowTrigger = 80;
 26432                           ;Main.c: 140: static unsigned char Motor_Encoder = 0;
 26433                           ;Main.c: 141: static signed long interal_PID_MeasuredPoint = 10;
 26434                           ;Main.c: 142: static unsigned int TimmingError = 0;
 26435                           ;Main.c: 143: static unsigned char BacklightPWM_PR = 8;
 26436                           ;Main.c: 144: unsigned char RXDat;
 26437                           ;Main.c: 147: TMR0H = 0xFE;
 26438  005826  0EFE               	movlw	254
 26439  005828  6ED7               	movwf	4055,c	;volatile
 26440                           
 26441                           ;Main.c: 148: TMR0L = 0x83;
 26442  00582A  0E83               	movlw	131
 26443  00582C  6ED6               	movwf	4054,c	;volatile
 26444  00582E                     
 26445                           ;Main.c: 149: TMR0IF = 0;
 26446  00582E  94F2               	bcf	intcon,2,c	;volatile
 26447  005830                     
 26448                           ;Main.c: 151: if ((TXSTA1bits.TRMT) && (TX_bCount)) {
 26449  005830  A2AC               	btfss	4012,1,c	;volatile
 26450  005832  D001               	goto	i2u730_41
 26451  005834  D001               	goto	i2u730_40
 26452  005836                     i2u730_41:
 26453  005836  D015               	goto	i2l14969
 26454  005838                     i2u730_40:
 26455  005838  0100               	movlb	0	; () banked
 26456  00583A  51F1               	movf	_TX_bCount& (0+255),w,b	;volatile
 26457  00583C  B4D8               	btfsc	status,2,c
 26458  00583E  D001               	goto	i2u731_41
 26459  005840  D001               	goto	i2u731_40
 26460  005842                     i2u731_41:
 26461  005842  D00F               	goto	i2l14969
 26462  005844                     i2u731_40:
 26463  005844                     
 26464                           ; BSR set to: 0
 26465                           ;Main.c: 152: TXREG = TXBuffer[TX_Idx];
 26466  005844  0106               	movlb	6	; () banked
 26467  005846  0E00               	movlw	low _TXBuffer	;volatile
 26468  005848  0101               	movlb	1	; () banked
 26469  00584A  25FE               	addwf	_TX_Idx& (0+255),w,b
 26470  00584C  6ED9               	movwf	fsr2l,c
 26471  00584E  6ADA               	clrf	fsr2h,c
 26472  005850  0106               	movlb	6	; () banked
 26473  005852  0E06               	movlw	high _TXBuffer	;volatile
 26474  005854  22DA               	addwfc	fsr2h,f,c
 26475  005856  50DF               	movf	indf2,w,c
 26476  005858  6EAD               	movwf	4013,c	;volatile
 26477  00585A                     
 26478                           ; BSR set to: 6
 26479                           ;Main.c: 153: TX_Idx++;
 26480  00585A  0101               	movlb	1	; () banked
 26481  00585C  2BFE               	incf	_TX_Idx& (0+255),f,b	;volatile
 26482  00585E                     
 26483                           ; BSR set to: 1
 26484                           ;Main.c: 154: TX_bCount--;
 26485  00585E  0100               	movlb	0	; () banked
 26486  005860  07F1               	decf	_TX_bCount& (0+255),f,b	;volatile
 26487  005862                     i2l14969:
 26488                           
 26489                           ;Main.c: 155: }
 26490                           ;Main.c: 157: if ((RCSTA1bits.OERR) | (RCSTA1bits.FERR)) {
 26491  005862  30AB               	rrcf	4011,w,c	;volatile
 26492  005864  32E8               	rrcf	wreg,f,c
 26493  005866  0B01               	andlw	1
 26494  005868  0100               	movlb	0	; () banked
 26495  00586A  6F60               	movwf	??_FastTick& (0+255),b
 26496  00586C  30AB               	rrcf	4011,w,c	;volatile
 26497  00586E  0B01               	andlw	1
 26498  005870  1160               	iorwf	??_FastTick& (0+255),w,b
 26499  005872  0900               	iorlw	0
 26500  005874  B4D8               	btfsc	status,2,c
 26501  005876  D001               	goto	i2u732_41
 26502  005878  D001               	goto	i2u732_40
 26503  00587A                     i2u732_41:
 26504  00587A  D00D               	goto	i2l784
 26505  00587C                     i2u732_40:
 26506  00587C                     
 26507                           ; BSR set to: 0
 26508                           ;Main.c: 158: RCSTA1bits.CREN = 0;
 26509  00587C  98AB               	bcf	4011,4,c	;volatile
 26510  00587E  F000               	nop		;# 
 26511                           
 26512                           ;Main.c: 160: RCSTA1bits.CREN = 1;
 26513  005880  88AB               	bsf	4011,4,c	;volatile
 26514                           
 26515                           ;Main.c: 161: RXDat = RCREG;
 26516  005882  CFAE F06A          	movff	4014,FastTick@RXDat	;volatile
 26517                           
 26518                           ;Main.c: 162: RXDat = RCREG;
 26519  005886  CFAE F06A          	movff	4014,FastTick@RXDat	;volatile
 26520                           
 26521                           ;Main.c: 163: RX_Idx = 0;
 26522  00588A  0100               	movlb	0	; () banked
 26523  00588C  6BEF               	clrf	_RX_Idx& (0+255),b	;volatile
 26524                           
 26525                           ;Main.c: 164: RX_MsgComplete = 0;
 26526  00588E  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
 26527  005890  9E57               	bcf	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
 26528                           
 26529                           ;Main.c: 165: RX_InProgress = 0;
 26530  005892  0100               	movlb	(_RX_InProgress/(0+8)) shr (0+8)
 26531  005894  9C57               	bcf	_RX_InProgress/(0+8),_RX_InProgress& (0+7),c	;volatile
 26532  005896                     i2l784:
 26533                           
 26534                           ;Main.c: 166: }
 26535                           ;Main.c: 168: if (RC1IF) {
 26536  005896  AA9E               	btfss	3998,5,c	;volatile
 26537  005898  D001               	goto	i2u733_41
 26538  00589A  D001               	goto	i2u733_40
 26539  00589C                     i2u733_41:
 26540  00589C  D032               	goto	i2l14991
 26541  00589E                     i2u733_40:
 26542  00589E                     
 26543                           ;Main.c: 169: RXDat = RCREG;
 26544  00589E  CFAE F06A          	movff	4014,FastTick@RXDat	;volatile
 26545  0058A2                     
 26546                           ;Main.c: 170: if (RXDat == '@') {
 26547  0058A2  0100               	movlb	0	; () banked
 26548  0058A4  516A               	movf	FastTick@RXDat& (0+255),w,b
 26549  0058A6  0A40               	xorlw	64
 26550  0058A8  A4D8               	btfss	status,2,c
 26551  0058AA  D001               	goto	i2u734_41
 26552  0058AC  D001               	goto	i2u734_40
 26553  0058AE                     i2u734_41:
 26554  0058AE  D005               	goto	i2l14979
 26555  0058B0                     i2u734_40:
 26556  0058B0                     
 26557                           ; BSR set to: 0
 26558                           ;Main.c: 171: RX_Idx = 0;
 26559  0058B0  6BEF               	clrf	_RX_Idx& (0+255),b	;volatile
 26560                           
 26561                           ;Main.c: 172: RX_MsgComplete = 0;
 26562  0058B2  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
 26563  0058B4  9E57               	bcf	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
 26564                           
 26565                           ;Main.c: 173: RX_InProgress = 1;
 26566  0058B6  0100               	movlb	(_RX_InProgress/(0+8)) shr (0+8)
 26567  0058B8  8C57               	bsf	_RX_InProgress/(0+8),_RX_InProgress& (0+7),c	;volatile
 26568  0058BA                     i2l14979:
 26569                           
 26570                           ;Main.c: 174: }
 26571                           ;Main.c: 175: if (RXDat == '#') {
 26572  0058BA  0100               	movlb	0	; () banked
 26573  0058BC  516A               	movf	FastTick@RXDat& (0+255),w,b
 26574  0058BE  0A23               	xorlw	35
 26575  0058C0  A4D8               	btfss	status,2,c
 26576  0058C2  D001               	goto	i2u735_41
 26577  0058C4  D001               	goto	i2u735_40
 26578  0058C6                     i2u735_41:
 26579  0058C6  D004               	goto	i2l14983
 26580  0058C8                     i2u735_40:
 26581  0058C8                     
 26582                           ; BSR set to: 0
 26583                           ;Main.c: 176: RX_MsgComplete = 1;
 26584  0058C8  0100               	movlb	(_RX_MsgComplete/(0+8)) shr (0+8)
 26585  0058CA  8E57               	bsf	_RX_MsgComplete/(0+8),_RX_MsgComplete& (0+7),c	;volatile
 26586                           
 26587                           ;Main.c: 177: RX_InProgress = 0;
 26588  0058CC  0100               	movlb	(_RX_InProgress/(0+8)) shr (0+8)
 26589  0058CE  9C57               	bcf	_RX_InProgress/(0+8),_RX_InProgress& (0+7),c	;volatile
 26590  0058D0                     i2l14983:
 26591                           
 26592                           ;Main.c: 178: }
 26593                           ;Main.c: 179: if (RX_Idx > 254) RX_Idx = 0;
 26594  0058D0  0100               	movlb	0	; () banked
 26595  0058D2  29EF               	incf	_RX_Idx& (0+255),w,b	;volatile
 26596  0058D4  A4D8               	btfss	status,2,c
 26597  0058D6  D001               	goto	i2u736_41
 26598  0058D8  D001               	goto	i2u736_40
 26599  0058DA                     i2u736_41:
 26600  0058DA  D001               	goto	i2l788
 26601  0058DC                     i2u736_40:
 26602  0058DC                     
 26603                           ; BSR set to: 0
 26604  0058DC  6BEF               	clrf	_RX_Idx& (0+255),b	;volatile
 26605  0058DE                     i2l788:
 26606                           
 26607                           ; BSR set to: 0
 26608                           ;Main.c: 180: if (RX_InProgress) {
 26609  0058DE  0100               	movlb	(_RX_InProgress/(0+8)) shr (0+8)
 26610  0058E0  AC57               	btfss	_RX_InProgress/(0+8),_RX_InProgress& (0+7),c	;volatile
 26611  0058E2  D001               	goto	i2u737_41
 26612  0058E4  D001               	goto	i2u737_40
 26613  0058E6                     i2u737_41:
 26614  0058E6  D00D               	goto	i2l14991
 26615  0058E8                     i2u737_40:
 26616  0058E8                     
 26617                           ;Main.c: 181: RXBuffer[RX_Idx] = RXDat;
 26618  0058E8  0107               	movlb	7	; () banked
 26619  0058EA  0E00               	movlw	low _RXBuffer	;volatile
 26620  0058EC  0100               	movlb	0	; () banked
 26621  0058EE  25EF               	addwf	_RX_Idx& (0+255),w,b
 26622  0058F0  6ED9               	movwf	fsr2l,c
 26623  0058F2  6ADA               	clrf	fsr2h,c
 26624  0058F4  0107               	movlb	7	; () banked
 26625  0058F6  0E07               	movlw	high _RXBuffer	;volatile
 26626  0058F8  22DA               	addwfc	fsr2h,f,c
 26627  0058FA  0100               	movlb	0	; () banked
 26628  0058FC  C06A  FFDF         	movff	FastTick@RXDat,indf2
 26629  005900                     
 26630                           ; BSR set to: 0
 26631                           ;Main.c: 182: RX_Idx++;
 26632  005900  2BEF               	incf	_RX_Idx& (0+255),f,b	;volatile
 26633  005902                     i2l14991:
 26634                           
 26635                           ;Main.c: 183: }
 26636                           ;Main.c: 184: }
 26637                           ;Main.c: 186: if (BacklightPWM_PR) BacklightPWM_PR--;
 26638  005902  0100               	movlb	0	; () banked
 26639  005904  51F3               	movf	FastTick@BacklightPWM_PR& (0+255),w,b
 26640  005906  B4D8               	btfsc	status,2,c
 26641  005908  D001               	goto	i2u738_41
 26642  00590A  D001               	goto	i2u738_40
 26643  00590C                     i2u738_41:
 26644  00590C  D002               	goto	i2l14995
 26645  00590E                     i2u738_40:
 26646  00590E                     
 26647                           ; BSR set to: 0
 26648  00590E  07F3               	decf	FastTick@BacklightPWM_PR& (0+255),f,b
 26649  005910  D002               	goto	i2l14997
 26650  005912                     i2l14995:
 26651                           
 26652                           ; BSR set to: 0
 26653                           ;Main.c: 187: else BacklightPWM_PR = 7;
 26654  005912  0E07               	movlw	7
 26655  005914  6FF3               	movwf	FastTick@BacklightPWM_PR& (0+255),b
 26656  005916                     i2l14997:
 26657                           
 26658                           ; BSR set to: 0
 26659                           ;Main.c: 188: if (LCD_BacklightEnabled) {
 26660  005916  0100               	movlb	(_LCD_BacklightEnabled/(0+8)) shr (0+8)
 26661  005918  AA57               	btfss	_LCD_BacklightEnabled/(0+8),_LCD_BacklightEnabled& (0+7),c	;volatile
 26662  00591A  D001               	goto	i2u739_41
 26663  00591C  D001               	goto	i2u739_40
 26664  00591E                     i2u739_41:
 26665  00591E  D009               	goto	i2l793
 26666  005920                     i2u739_40:
 26667  005920                     
 26668                           ;Main.c: 189: if (Config.BacklightPWM_Duty < BacklightPWM_PR) LATBbits.LATB1 = 1;
 26669  005920  0100               	movlb	0	; () banked
 26670  005922  51F3               	movf	FastTick@BacklightPWM_PR& (0+255),w,b
 26671  005924  0102               	movlb	2	; () banked
 26672  005926  61E3               	cpfslt	(_Config+13)& (0+255),b
 26673  005928  D001               	goto	i2u740_41
 26674  00592A  D001               	goto	i2u740_40
 26675  00592C                     i2u740_41:
 26676  00592C  D002               	goto	i2l793
 26677  00592E                     i2u740_40:
 26678  00592E                     
 26679                           ; BSR set to: 2
 26680  00592E  828A               	bsf	3978,1,c	;volatile
 26681  005930  D001               	goto	i2l15003
 26682  005932                     i2l793:
 26683                           
 26684                           ;Main.c: 190: else LATBbits.LATB1 = 0;
 26685  005932  928A               	bcf	3978,1,c	;volatile
 26686  005934                     i2l15003:
 26687                           
 26688                           ;Main.c: 193: LowTrigger--;
 26689  005934  0100               	movlb	0	; () banked
 26690  005936  07F4               	decf	FastTick@LowTrigger& (0+255),f,b
 26691  005938                     
 26692                           ; BSR set to: 0
 26693                           ;Main.c: 194: bTick40Khz = !bTick40Khz;
 26694  005938  0100               	movlb	(_bTick40Khz/(0+8)) shr (0+8)
 26695  00593A  0100               	movlb	(_bTick40Khz/(0+8)) shr (0+8)
 26696  00593C  765A               	btg	_bTick40Khz/(0+8),_bTick40Khz& (0+7),c	;volatile
 26697  00593E                     
 26698                           ;Main.c: 195: if (LowTrigger == 0) {
 26699  00593E  0100               	movlb	0	; () banked
 26700  005940  67F4               	tstfsz	FastTick@LowTrigger& (0+255),b
 26701  005942  D001               	goto	i2u741_41
 26702  005944  D001               	goto	i2u741_40
 26703  005946                     i2u741_41:
 26704  005946  D012               	goto	i2l15021
 26705  005948                     i2u741_40:
 26706  005948                     
 26707                           ; BSR set to: 0
 26708                           ;Main.c: 196: TimmingError++;
 26709  005948  4BEA               	infsnz	FastTick@TimmingError& (0+255),f,b
 26710  00594A  2BEB               	incf	(FastTick@TimmingError+1)& (0+255),f,b
 26711  00594C                     
 26712                           ; BSR set to: 0
 26713                           ;Main.c: 197: if (TimmingError == 401) {
 26714  00594C  05EB               	decf	(FastTick@TimmingError+1)& (0+255),w,b
 26715  00594E  0E91               	movlw	145
 26716  005950  B4D8               	btfsc	status,2,c
 26717  005952  19EA               	xorwf	FastTick@TimmingError& (0+255),w,b
 26718  005954  A4D8               	btfss	status,2,c
 26719  005956  D001               	goto	i2u742_41
 26720  005958  D001               	goto	i2u742_40
 26721  00595A                     i2u742_41:
 26722  00595A  D005               	goto	i2l15017
 26723  00595C                     i2u742_40:
 26724  00595C                     
 26725                           ; BSR set to: 0
 26726                           ;Main.c: 198: LowTrigger = 79;
 26727  00595C  0E4F               	movlw	79
 26728  00595E  6FF4               	movwf	FastTick@LowTrigger& (0+255),b
 26729  005960                     
 26730                           ; BSR set to: 0
 26731                           ;Main.c: 199: TimmingError = 0;
 26732  005960  6BEA               	clrf	FastTick@TimmingError& (0+255),b
 26733  005962  6BEB               	clrf	(FastTick@TimmingError+1)& (0+255),b
 26734                           
 26735                           ;Main.c: 200: } else LowTrigger = 80;
 26736  005964  D002               	goto	i2l15019
 26737  005966                     i2l15017:
 26738                           
 26739                           ; BSR set to: 0
 26740  005966  0E50               	movlw	80
 26741  005968  6FF4               	movwf	FastTick@LowTrigger& (0+255),b
 26742  00596A                     i2l15019:
 26743                           
 26744                           ; BSR set to: 0
 26745                           ;Main.c: 201: TMR1IF = 1;
 26746  00596A  809E               	bsf	3998,0,c	;volatile
 26747  00596C                     i2l15021:
 26748                           
 26749                           ; BSR set to: 0
 26750                           ;Main.c: 202: }
 26751                           ;Main.c: 204: Motor_Encoder <<= 2;
 26752  00596C  90D8               	bcf	status,0,c
 26753  00596E  37EC               	rlcf	FastTick@Motor_Encoder& (0+255),f,b
 26754  005970  90D8               	bcf	status,0,c
 26755  005972  37EC               	rlcf	FastTick@Motor_Encoder& (0+255),f,b
 26756  005974                     
 26757                           ; BSR set to: 0
 26758                           ;Main.c: 205: Motor_Encoder |= (PORTA & 0b00000011);
 26759  005974  5080               	movf	3968,w,c	;volatile
 26760  005976  0B03               	andlw	3
 26761  005978  13EC               	iorwf	FastTick@Motor_Encoder& (0+255),f,b
 26762  00597A                     
 26763                           ; BSR set to: 0
 26764                           ;Main.c: 206: Motor_Encoder &= 0x0F;
 26765  00597A  0E0F               	movlw	15
 26766  00597C  17EC               	andwf	FastTick@Motor_Encoder& (0+255),f,b
 26767  00597E                     
 26768                           ; BSR set to: 0
 26769                           ;Main.c: 207: interal_PID_MeasuredPoint -= enc_states[Motor_Encoder];
 26770  00597E  0ED4               	movlw	low _enc_states
 26771  005980  25EC               	addwf	FastTick@Motor_Encoder& (0+255),w,b
 26772  005982  6EF6               	movwf	tblptrl,c
 26773  005984  6AF7               	clrf	tblptrh,c
 26774  005986  0E19               	movlw	high _enc_states
 26775  005988  22F7               	addwfc	tblptrh,f,c
 26776  00598A  6AF8               	clrf	tblptru,c
 26777  00598C  0E00               	movlw	low (__mediumconst shr (0+16))
 26778  00598E  22F8               	addwfc	tblptru,f,c
 26779  005990  0008               	tblrd		*
 26780  005992  50F5               	movf	tablat,w,c
 26781  005994  6F60               	movwf	??_FastTick& (0+255),b
 26782  005996  0E00               	movlw	0
 26783  005998  BF60               	btfsc	??_FastTick& (0+255),7,b
 26784  00599A  0EFF               	movlw	255
 26785  00599C  6F61               	movwf	(??_FastTick+1)& (0+255),b
 26786  00599E  6F62               	movwf	(??_FastTick+2)& (0+255),b
 26787  0059A0  6F63               	movwf	(??_FastTick+3)& (0+255),b
 26788  0059A2  5160               	movf	??_FastTick& (0+255),w,b
 26789  0059A4  0102               	movlb	2	; () banked
 26790  0059A6  5FF8               	subwf	FastTick@interal_PID_MeasuredPoint& (0+255),f,b
 26791  0059A8  0100               	movlb	0	; () banked
 26792  0059AA  5161               	movf	(??_FastTick+1)& (0+255),w,b
 26793  0059AC  0102               	movlb	2	; () banked
 26794  0059AE  5BF9               	subwfb	(FastTick@interal_PID_MeasuredPoint+1)& (0+255),f,b
 26795  0059B0  0100               	movlb	0	; () banked
 26796  0059B2  5162               	movf	(??_FastTick+2)& (0+255),w,b
 26797  0059B4  0102               	movlb	2	; () banked
 26798  0059B6  5BFA               	subwfb	(FastTick@interal_PID_MeasuredPoint+2)& (0+255),f,b
 26799  0059B8  0100               	movlb	0	; () banked
 26800  0059BA  5163               	movf	(??_FastTick+3)& (0+255),w,b
 26801  0059BC  0102               	movlb	2	; () banked
 26802  0059BE  5BFB               	subwfb	(FastTick@interal_PID_MeasuredPoint+3)& (0+255),f,b
 26803  0059C0                     
 26804                           ; BSR set to: 2
 26805                           ;Main.c: 209: if (bClear_MotorPosition) {
 26806  0059C0  0100               	movlb	(_bClear_MotorPosition/(0+8)) shr (0+8)
 26807  0059C2  A658               	btfss	_bClear_MotorPosition/(0+8),_bClear_MotorPosition& (0+7),c	;volatile
 26808  0059C4  D001               	goto	i2u743_41
 26809  0059C6  D001               	goto	i2u743_40
 26810  0059C8                     i2u743_41:
 26811  0059C8  D007               	goto	i2l799
 26812  0059CA                     i2u743_40:
 26813  0059CA                     
 26814                           ;Main.c: 210: bClear_MotorPosition = 0;
 26815  0059CA  0100               	movlb	(_bClear_MotorPosition/(0+8)) shr (0+8)
 26816  0059CC  9658               	bcf	_bClear_MotorPosition/(0+8),_bClear_MotorPosition& (0+7),c	;volatile
 26817                           
 26818                           ;Main.c: 211: interal_PID_MeasuredPoint = 0;
 26819  0059CE  0102               	movlb	2	; () banked
 26820  0059D0  6BF8               	clrf	FastTick@interal_PID_MeasuredPoint& (0+255),b
 26821  0059D2  6BF9               	clrf	(FastTick@interal_PID_MeasuredPoint+1)& (0+255),b
 26822  0059D4  6BFA               	clrf	(FastTick@interal_PID_MeasuredPoint+2)& (0+255),b
 26823  0059D6  6BFB               	clrf	(FastTick@interal_PID_MeasuredPoint+3)& (0+255),b
 26824  0059D8                     i2l799:
 26825                           
 26826                           ;Main.c: 212: }
 26827                           ;Main.c: 214: if (!bLock_Motor_Position) Motor_Position = interal_PID_MeasuredPoint;
 26828  0059D8  0100               	movlb	(_bLock_Motor_Position/(0+8)) shr (0+8)
 26829  0059DA  B059               	btfsc	_bLock_Motor_Position/(0+8),_bLock_Motor_Position& (0+7),c	;volatile
 26830  0059DC  D001               	goto	i2u744_41
 26831  0059DE  D001               	goto	i2u744_40
 26832  0059E0                     i2u744_41:
 26833  0059E0  D008               	goto	i2l801
 26834  0059E2                     i2u744_40:
 26835  0059E2  C2F8  F1E4         	movff	FastTick@interal_PID_MeasuredPoint,_Motor_Position
 26836  0059E6  C2F9  F1E5         	movff	FastTick@interal_PID_MeasuredPoint+1,_Motor_Position+1
 26837  0059EA  C2FA  F1E6         	movff	FastTick@interal_PID_MeasuredPoint+2,_Motor_Position+2
 26838  0059EE  C2FB  F1E7         	movff	FastTick@interal_PID_MeasuredPoint+3,_Motor_Position+3
 26839  0059F2                     i2l801:
 26840  0059F2  C069  FFF5         	movff	??_FastTick+9,tablat
 26841  0059F6  C068  FFF8         	movff	??_FastTick+8,tblptru
 26842  0059FA  C067  FFF7         	movff	??_FastTick+7,tblptrh
 26843  0059FE  C066  FFF6         	movff	??_FastTick+6,tblptrl
 26844  005A02  C065  FFDA         	movff	??_FastTick+5,fsr2h
 26845  005A06  C064  FFD9         	movff	??_FastTick+4,fsr2l
 26846  005A0A  0011               	retfie		f
 26847  005A0C                     __end_of_FastTick:
 26848                           	opt stack 0
 26849                           tblptru	equ	0xFF8
 26850                           tblptrh	equ	0xFF7
 26851                           tblptrl	equ	0xFF6
 26852                           tablat	equ	0xFF5
 26853                           prodh	equ	0xFF4
 26854                           prodl	equ	0xFF3
 26855                           intcon	equ	0xFF2
 26856                           intcon2	equ	0xFF1
 26857                           postinc0	equ	0xFEE
 26858                           wreg	equ	0xFE8
 26859                           postinc1	equ	0xFE6
 26860                           postdec1	equ	0xFE5
 26861                           fsr1h	equ	0xFE2
 26862                           fsr1l	equ	0xFE1
 26863                           bsr	equ	0xFE0
 26864                           indf2	equ	0xFDF
 26865                           postinc2	equ	0xFDE
 26866                           postdec2	equ	0xFDD
 26867                           fsr2h	equ	0xFDA
 26868                           fsr2l	equ	0xFD9
 26869                           status	equ	0xFD8
 26870                           tblptru	equ	0xFF8
 26871                           tblptrh	equ	0xFF7
 26872                           tblptrl	equ	0xFF6
 26873                           tablat	equ	0xFF5
 26874                           prodh	equ	0xFF4
 26875                           prodl	equ	0xFF3
 26876                           intcon	equ	0xFF2
 26877                           intcon2	equ	0xFF1
 26878                           postinc0	equ	0xFEE
 26879                           wreg	equ	0xFE8
 26880                           postinc1	equ	0xFE6
 26881                           postdec1	equ	0xFE5
 26882                           fsr1h	equ	0xFE2
 26883                           fsr1l	equ	0xFE1
 26884                           bsr	equ	0xFE0
 26885                           indf2	equ	0xFDF
 26886                           postinc2	equ	0xFDE
 26887                           postdec2	equ	0xFDD
 26888                           fsr2h	equ	0xFDA
 26889                           fsr2l	equ	0xFD9
 26890                           status	equ	0xFD8
 26891                           
 26892                           	psect	param0
 26893  0000                     tblptru	equ	0xFF8
 26894                           tblptrh	equ	0xFF7
 26895                           tblptrl	equ	0xFF6
 26896                           tablat	equ	0xFF5
 26897                           prodh	equ	0xFF4
 26898                           prodl	equ	0xFF3
 26899                           intcon	equ	0xFF2
 26900                           intcon2	equ	0xFF1
 26901                           postinc0	equ	0xFEE
 26902                           wreg	equ	0xFE8
 26903                           postinc1	equ	0xFE6
 26904                           postdec1	equ	0xFE5
 26905                           fsr1h	equ	0xFE2
 26906                           fsr1l	equ	0xFE1
 26907                           bsr	equ	0xFE0
 26908                           indf2	equ	0xFDF
 26909                           postinc2	equ	0xFDE
 26910                           postdec2	equ	0xFDD
 26911                           fsr2h	equ	0xFDA
 26912                           fsr2l	equ	0xFD9
 26913                           status	equ	0xFD8
 26914                           tblptru	equ	0xFF8
 26915                           tblptrh	equ	0xFF7
 26916                           tblptrl	equ	0xFF6
 26917                           tablat	equ	0xFF5
 26918                           prodh	equ	0xFF4
 26919                           prodl	equ	0xFF3
 26920                           intcon	equ	0xFF2
 26921                           intcon2	equ	0xFF1
 26922                           postinc0	equ	0xFEE
 26923                           wreg	equ	0xFE8
 26924                           postinc1	equ	0xFE6
 26925                           postdec1	equ	0xFE5
 26926                           fsr1h	equ	0xFE2
 26927                           fsr1l	equ	0xFE1
 26928                           bsr	equ	0xFE0
 26929                           indf2	equ	0xFDF
 26930                           postinc2	equ	0xFDE
 26931                           postdec2	equ	0xFDD
 26932                           fsr2h	equ	0xFDA
 26933                           fsr2l	equ	0xFD9
 26934                           status	equ	0xFD8


Data Sizes:
    Strings     981
    Constant    160
    Data        49
    BSS         825
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      92
    BANK0           160    138     149
    BANK1           256    224     256
    BANK2           256    210     252
    BANK3           256    200     240
    BANK4           256     75     254
    BANK5           256      0      20
    BANK6           256      0     255
    BANK7           256      0     255
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    ?___lbtoft	float  size(1) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 18
		 -> MoveAdvanced@Accel_Deg_Sec_Sec(BANK0[3]), CurrentOrbitProgram(BANK4[18]), 

    ?___awdiv	int  size(1) Largest target is 0

    ?_ConvertTimeFromDiscrete	int  size(1) Largest target is 0

    ?_Now	int  size(1) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 18
		 -> MoveAdvanced@Accel_Deg_Sec_Sec(BANK0[3]), CurrentOrbitProgram(BANK4[18]), 

    ?_GetCurrentAngle	float  size(1) Largest target is 0

    ?_GetCurrentLinearPosition	float  size(1) Largest target is 0

    ?_MinTimeToMove	float  size(1) Largest target is 0

    ?_sqrt	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___asftadd	float  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___lmul	unsigned long  size(1) Largest target is 0

    ?___aldiv	long  size(1) Largest target is 0

    ?___ftsub	float  size(1) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___fttol	long  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___lltoft	float  size(1) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___altoft	float  size(1) Largest target is 0

    ?_SpeedRequiredToMoveInTime	float  size(2) Largest target is 18
		 -> CurrentOrbitProgram(BANK4[18]), 

    ?___lwtoft	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sqrt@x(BANK0[3]), CreateWaypointProgram@MinTravelTime(BANK1[3]), GetTime@Tm(BANK0[3]), ConvertTimeToDiscrete@dat(BANK0[3]), 
		 -> GetFloat@Output(BANK0[3]), RealtimeMode@SetSpeed(BANK0[3]), MoveToAngle@DestinationAngle(BANK1[3]), GetCurrentAngle@MotorPos(BANK0[3]), 
		 -> LCD_PrintFloat@dat(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 4
		 -> sqrt@q(BANK0[3]), sqrt@x(BANK0[3]), ConvertTimeFromDiscrete@dTemp(BANK0[3]), ConvertTimeToDiscrete@holder(BANK0[3]), 
		 -> ConvertTimeToDiscrete@dat(BANK0[3]), ShowVoltage@Batt(BANK0[3]), RunOrbitProgram@DistanceRemaining(BANK1[3]), RunOrbitProgram@CurrentPos(BANK1[3]), 
		 -> GetCurrentAngle@MotorPos(BANK0[3]), GetCurrentLinearPosition@MotorPos(BANK0[3]), Idle@temp(BANK1[4]), LCD_PrintFloat@dat(BANK0[3]), 
		 -> ExtMode@mTemp(BANK2[4]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> ConvertTimeFromDiscrete@ret(BANK0[3]), GetTime@Tm(BANK0[3]), GetFloat@Output(BANK0[3]), RealtimeMode@SetSpeed(BANK0[3]), 
		 -> MoveToAngle@DestinationAngle(BANK1[3]), GetCurrentAngle@MotorPos(BANK0[3]), MinTimeToMove@TotalTime(BANK0[3]), GoToSleep@Expires(BANK0[3]), 

    CreateWaypointProgram@CommandMenu	PTR const unsigned char [2] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateWaypointProgram@COMMAND_1	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_73(CODE[13]), 

    CreateWaypointProgram@COMMAND_0	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_72(CODE[13]), 

    CreateWaypointProgram@DirectionMenu	PTR const unsigned char [2] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateWaypointProgram@DIRECTION_1	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_71(CODE[8]), 

    CreateWaypointProgram@DIRECTION_0	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_70(CODE[9]), 

    GetTime@prompt	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_80(CODE[13]), STR_79(CODE[14]), STR_76(CODE[13]), STR_42(CODE[17]), 
		 -> STR_38(CODE[17]), STR_34(CODE[16]), STR_33(CODE[21]), STR_32(CODE[16]), 

    GetTime@Time	PTR  size(2) Largest target is 18
		 -> CreateWaypointProgram@DwellTime(BANK1[3]), CreateWaypointProgram@TravelTime(BANK1[3]), CurrentOrbitProgram(BANK4[18]), 

    ConvertTimeToDiscrete@Milliseconds	PTR int  size(2) Largest target is 2
		 -> RoundTimeDown@Milliseconds(COMRAM[2]), RoundTimeUp@Milliseconds(COMRAM[2]), PrintTime@Milliseconds(BANK0[2]), GetTime@Milliseconds(BANK0[2]), 

    ConvertTimeToDiscrete@Seconds	PTR unsigned char  size(2) Largest target is 1
		 -> RoundTimeDown@Seconds(COMRAM[1]), RoundTimeUp@Seconds(COMRAM[1]), PrintTime@Seconds(BANK0[1]), GetTime@Seconds(BANK0[1]), 

    ConvertTimeToDiscrete@Minutes	PTR unsigned char  size(2) Largest target is 1
		 -> RoundTimeDown@Minutes(COMRAM[1]), RoundTimeUp@Minutes(COMRAM[1]), PrintTime@Minutes(BANK0[1]), GetTime@Minutes(BANK0[1]), 

    ConvertTimeToDiscrete@Hours	PTR unsigned char  size(2) Largest target is 1
		 -> RoundTimeDown@Hours(COMRAM[1]), RoundTimeUp@Hours(COMRAM[1]), PrintTime@Hours(BANK0[1]), GetTime@Hours(BANK0[1]), 

    DisplayChoices@Menu	PTR PTR const unsigned char  size(2) Largest target is 6
		 -> CreateWaypointProgram@CommandMenu(BANK1[4]), CreateWaypointProgram@DirectionMenu(BANK1[4]), CreateOrbitProgram@CommandMenu(BANK1[4]), CreateOrbitProgram@EndModeMenu(BANK1[6]), 
		 -> CreateOrbitProgram@SpeedModeMenu(BANK1[6]), CreateOrbitProgram@DirectionMenu(BANK1[4]), 

    DisplayChoices@Prompt	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_87(CODE[9]), STR_84(CODE[12]), STR_43(CODE[9]), STR_39(CODE[14]), 
		 -> STR_35(CODE[14]), STR_29(CODE[14]), STR_28(CODE[14]), STR_25(CODE[19]), 
		 -> STR_24(CODE[21]), 

    DisplayMenu@Menu	PTR PTR const unsigned char  size(2) Largest target is 14
		 -> main@CommandMenu(BANK4[14]), 

    GetFloat@unit	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_86(CODE[9]), STR_41(CODE[7]), STR_37(CODE[7]), STR_31(CODE[7]), 
		 -> STR_27(CODE[1]), 

    GetFloat@prompt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_85(CODE[20]), STR_40(CODE[7]), STR_36(CODE[7]), STR_30(CODE[7]), 
		 -> STR_26(CODE[14]), 

    GetFloat@Value	PTR  size(2) Largest target is 18
		 -> CreateWaypointProgram@CycleCount(BANK1[3]), CurrentOrbitProgram(BANK4[18]), 

    GetYesNo@prompt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_81(CODE[19]), 

    LoadPreset@dat	PTR unsigned char  size(2) Largest target is 120
		 -> Idle@tempPset(BANK1[120]), CurrentOrbitProgram(BANK4[18]), CurrentPath(BANK4[117]), 

    SavePreset@dat	PTR unsigned char  size(2) Largest target is 120
		 -> FactoryDefault@Empty(BANK1[120]), Idle@tempPset(BANK1[120]), CurrentOrbitProgram(BANK4[18]), CurrentPath(BANK4[117]), 

    EEprom_read@addr	PTR unsigned int  size(2) Largest target is 2
		 -> LoadPreset@addr(BANK0[2]), GetPresetType@addr(BANK0[2]), LoadSettings@addr(COMRAM[2]), 

    EEprom_read@dat	PTR unsigned char  size(2) Largest target is 120
		 -> GetPresetType@ret(BANK0[1]), Idle@tempPset(BANK1[120]), CurrentOrbitProgram(BANK4[18]), CurrentPath(BANK4[117]), 
		 -> Config(BANK2[34]), 

    EEprom_write@dat	PTR unsigned char  size(2) Largest target is 120
		 -> FactoryDefault@Empty(BANK1[120]), Idle@tempPset(BANK1[120]), CurrentOrbitProgram(BANK4[18]), CurrentPath(BANK4[117]), 
		 -> Config(BANK2[34]), 

    EEprom_write@addr	PTR unsigned int  size(2) Largest target is 2
		 -> SavePreset@addr(BANK0[2]), SaveSettings@addr(COMRAM[2]), 

    CreateOrbitProgram@CommandMenu	PTR const unsigned char [2] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateOrbitProgram@COMMAND_1	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_21(CODE[13]), 

    CreateOrbitProgram@COMMAND_0	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_20(CODE[13]), 

    CreateOrbitProgram@EndModeMenu	PTR const unsigned char [3] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateOrbitProgram@ENDMODE_2	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_19(CODE[14]), 

    CreateOrbitProgram@ENDMODE_1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_18(CODE[15]), 

    CreateOrbitProgram@ENDMODE_0	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_17(CODE[16]), 

    CreateOrbitProgram@SpeedModeMenu	PTR const unsigned char [3] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateOrbitProgram@SpeedMODE_2	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_16(CODE[16]), 

    CreateOrbitProgram@SpeedMODE_1	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_15(CODE[11]), 

    CreateOrbitProgram@SpeedMODE_0	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_14(CODE[8]), 

    CreateOrbitProgram@DirectionMenu	PTR const unsigned char [2] size(2) Largest target is 19
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), STR_70(CODE[9]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), STR_18(CODE[15]), 
		 -> STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), STR_14(CODE[8]), 
		 -> STR_13(CODE[19]), STR_12(CODE[11]), 

    CreateOrbitProgram@DIRECTION_0	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_13(CODE[19]), 

    CreateOrbitProgram@DIRECTION_1	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_12(CODE[11]), 

    main@CommandMenu	PTR const unsigned char [7] size(2) Largest target is 20
		 -> STR_8(CODE[20]), STR_7(CODE[13]), STR_6(CODE[17]), STR_5(CODE[15]), 
		 -> STR_4(CODE[12]), STR_3(CODE[15]), STR_2(CODE[12]), 

    main@COMMAND_6	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_8(CODE[20]), 

    main@COMMAND_5	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_7(CODE[13]), 

    main@COMMAND_4	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), 

    main@COMMAND_2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[15]), 

    main@COMMAND_3	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_4(CODE[12]), 

    main@COMMAND_1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), 

    main@COMMAND_0	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), 

    LCD_PrintString@dat	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_114(CODE[13]), STR_113(CODE[6]), STR_112(CODE[8]), STR_111(CODE[17]), 
		 -> STR_110(CODE[20]), STR_109(CODE[6]), STR_108(CODE[8]), STR_107(CODE[17]), 
		 -> STR_106(CODE[18]), STR_105(CODE[6]), STR_104(CODE[8]), STR_103(CODE[17]), 
		 -> STR_102(CODE[18]), STR_101(CODE[6]), STR_100(CODE[8]), STR_99(CODE[17]), 
		 -> STR_98(CODE[19]), STR_97(CODE[6]), STR_96(CODE[8]), STR_95(CODE[17]), 
		 -> STR_94(CODE[18]), STR_93(CODE[6]), STR_92(CODE[8]), STR_91(CODE[17]), 
		 -> STR_90(CODE[19]), STR_89(CODE[16]), STR_88(CODE[17]), STR_87(CODE[9]), 
		 -> STR_86(CODE[9]), STR_85(CODE[20]), STR_84(CODE[12]), STR_83(CODE[12]), 
		 -> STR_82(CODE[20]), STR_81(CODE[19]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[19]), STR_77(CODE[20]), STR_76(CODE[13]), STR_75(CODE[13]), 
		 -> STR_74(CODE[18]), STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[8]), 
		 -> STR_70(CODE[9]), STR_69(CODE[12]), STR_68(CODE[12]), STR_67(CODE[12]), 
		 -> STR_66(CODE[11]), STR_65(CODE[14]), STR_64(CODE[21]), STR_63(CODE[5]), 
		 -> STR_62(CODE[21]), STR_61(CODE[4]), STR_60(CODE[21]), STR_59(CODE[4]), 
		 -> STR_58(CODE[21]), STR_57(CODE[4]), STR_56(CODE[7]), STR_55(CODE[7]), 
		 -> STR_54(CODE[8]), STR_53(CODE[18]), STR_52(CODE[13]), STR_51(CODE[19]), 
		 -> STR_50(CODE[15]), STR_49(CODE[13]), STR_48(CODE[13]), STR_47(CODE[18]), 
		 -> STR_46(CODE[15]), STR_45(CODE[21]), STR_44(CODE[17]), STR_43(CODE[9]), 
		 -> STR_42(CODE[17]), STR_41(CODE[7]), STR_40(CODE[7]), STR_39(CODE[14]), 
		 -> STR_38(CODE[17]), STR_37(CODE[7]), STR_36(CODE[7]), STR_35(CODE[14]), 
		 -> STR_34(CODE[16]), STR_33(CODE[21]), STR_32(CODE[16]), STR_31(CODE[7]), 
		 -> STR_30(CODE[7]), STR_29(CODE[14]), STR_28(CODE[14]), STR_27(CODE[1]), 
		 -> STR_26(CODE[14]), STR_25(CODE[19]), STR_24(CODE[21]), STR_23(CODE[13]), 
		 -> STR_22(CODE[18]), STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[14]), 
		 -> STR_18(CODE[15]), STR_17(CODE[16]), STR_16(CODE[16]), STR_15(CODE[11]), 
		 -> STR_14(CODE[8]), STR_13(CODE[19]), STR_12(CODE[11]), STR_11(CODE[7]), 
		 -> STR_10(CODE[15]), STR_9(CODE[22]), STR_8(CODE[20]), STR_7(CODE[13]), 
		 -> STR_6(CODE[17]), STR_5(CODE[15]), STR_4(CODE[12]), STR_3(CODE[15]), 
		 -> STR_2(CODE[12]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _FastTick in COMRAM

    _SlowTick->i1___lwdiv

Critical Paths under _main in BANK0

    _main->_RunWaypointProgram
    _ExtMode->_MoveAdvanced
    _LCD_PowerUp->_Wait_ms
    _LCD_FunctionSet->_Wait_us
    _FactoryDefault->_SavePreset
    _DisplayMenu->_GetInput
    _CreateOrbitProgram->_GetTime
    _RealtimeMode->_LCD_PrintFloat
    _CreateWaypointProgram->_GetTime
    _CreateWaypointProgram->_RunWaypointProgram
    _GetPresetNumber->_GetInput
    _Wait_seconds_nonblocking->___wmul
    _SpeedRequiredToMoveInTime->_sqrt
    _Wait_ms->_Idle
    _GetPresetType->_EEprom_read
    _ShowVoltage->_LCD_PrintFloat
    _GetClick->_GetInput
    _GoToSleep->___ftge
    _Now->___ftmul
    _MinTimeToMove->_sqrt
    _sqrt->___asftsub
    _GetCurrentLinearPosition->___asftmul
    _Move->_MoveAdvanced
    _MoveAdvanced->___fttol
    _GetCurrentAngle->___asftsub
    _DisplayChoices->_GetInput
    _GetFloat->_LCD_PrintFloat
    _LCD_PrintFloat->___fttol
    _GetTime->_PrintTime
    _PrintTime->_ConvertTimeToDiscrete
    _LCD_PrintLong->___aldiv
    _GetYesNo->_GetInput
    _LCD_ClearDisplay->_Wait_us
    _LCD_PrintString->_LCD_PrintChar
    _LCD_PrintChar->_Wait_us
    _LCD_DisplayOnOff->_Wait_us
    _LCD_SetPosition->_Wait_us
    _Wait_us->___lwdiv
    _GetInput->_Idle
    _Idle->___asftmul
    _AckCmd->_MessageStream_WriteByte
    _NackCmd->_MessageStream_WriteByte
    _LoadPreset->_EEprom_read
    _MessageStream_WriteMULTI->_MessageStream_WriteByte
    _SavePreset->_EEprom_write
    _EEprom_write->_Write_b_eep
    _EEprom_read->_Read_b_eep
    _ConvertTimeToDiscrete->___fttol
    _ConvertTimeFromDiscrete->___asftadd
    _ConvertTimeFromDiscrete->___asftmul
    ___altoft->___ftpack
    ___awtoft->___ftpack
    ___ftge->___ftmul
    ___fttol->_GetCurrentAngle
    ___lbtoft->___ftpack
    ___lltoft->___ftpack
    ___asftadd->___ftmul
    ___asftmul->___ftmul
    ___asftsub->___ftsub
    ___ftsub->___ftdiv
    ___ftadd->___ftpack
    ___ftdiv->___ftmul
    ___ftmul->___lbtoft
    ___lwtoft->___ftpack

Critical Paths under _FastTick in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_ExtMode
    _ExtMode->_Move
    _CreateOrbitProgram->_RunOrbitProgram
    _RealtimeMode->_Idle
    _CreateWaypointProgram->_RunWaypointProgram
    _RunWaypointProgram->_Idle
    _RunOrbitProgram->_Idle
    _Wait_ms->_Idle
    _MoveToAngle->_Move
    _GetInput->_Idle

Critical Paths under _FastTick in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_ExtMode

Critical Paths under _FastTick in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ExtMode

Critical Paths under _FastTick in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _FastTick in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _FastTick in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _FastTick in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _FastTick in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _FastTick in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _FastTick in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _FastTick in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _FastTick in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _FastTick in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _FastTick in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _FastTick in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _FastTick in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                75    75      0  547635
                                              0 BANK4     75    75      0
                            _SetupIO
                     _FactoryDefault
                      _SetupHardware
                        _LCD_PowerUp
                   _LCD_ClearDisplay
                    _LCD_SetPosition
                      _LCD_PrintChar
                            _Wait_ms
                    _LCD_PrintString
                           _GetClick
                               _Idle
                        _DisplayMenu
                 _CreateOrbitProgram
                       _RealtimeMode
              _CreateWaypointProgram
                    _GetPresetNumber
                         _LoadPreset
                 _RunWaypointProgram
                    _RunOrbitProgram
                      _GetPresetType
                        _ShowVoltage
                          _GoToSleep
                            _ExtMode
 ---------------------------------------------------------------------------------
 (1) _ExtMode                                            629   629      0   26307
                                            136 BANK0      1     1      0
                                              6 BANK1    218   218      0
                                              0 BANK2    210   210      0
                                              0 BANK3    200   200      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
               _GetInput_nonblocking
           _Wait_seconds_nonblocking
                           ___awtoft
                           ___lwtoft
          _SpeedRequiredToMoveInTime
                               _Move
             _MessageStream_ReadByte
                             _AckCmd
                            _NackCmd
                       _MoveAdvanced
            _MessageStream_WriteByte
                           ___altoft
                          ___asftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _LCD_PowerUp                                          0     0      0    7031
                            _Wait_ms
                    _LCD_FunctionSet
                   _LCD_DisplayOnOff
                   _LCD_ClearDisplay
 ---------------------------------------------------------------------------------
 (2) _LCD_FunctionSet                                      4     2      2     612
                                             21 BANK0      4     2      2
                            _Wait_us
 ---------------------------------------------------------------------------------
 (1) _SetupIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FactoryDefault                                     120   120      0     489
                                              0 BANK1    120   120      0
                         _SavePreset
 ---------------------------------------------------------------------------------
 (1) _SetupHardware                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DisplayMenu                                         10     6      4    8983
                                             47 BANK0     10     6      4
                   _LCD_DisplayOnOff
                   _LCD_ClearDisplay
                    _LCD_SetPosition
                    _LCD_PrintString
                      _LCD_PrintChar
                           _GetInput
 ---------------------------------------------------------------------------------
 (1) _CreateOrbitProgram                                  44    44      0  149480
                                            147 BANK1     44    44      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                           _GetClick
                    _GetCurrentAngle
                            ___fttol
                     _DisplayChoices
                             ___ftge
                           _GetFloat
                            _GetTime
                            ___ftdiv
                            ___ftmul
                    _RunOrbitProgram
                    _GetPresetNumber
                         _SavePreset
 ---------------------------------------------------------------------------------
 (1) _RealtimeMode                                        10    10      0   22357
                                            103 BANK0      7     7      0
                            ___ftmul
                            ___fttol
               _GetInput_nonblocking
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                _GetRotaryMultiplier
                           ___lbtoft
                          ___asftadd
                             ___ftge
                          ___asftsub
                     _LCD_PrintFloat
                            ___ftneg
                               _Idle
 ---------------------------------------------------------------------------------
 (1) _CreateWaypointProgram                               45    45      0  171247
                                            145 BANK1     45    45      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                           _GetClick
                    _GetCurrentAngle
                            ___fttol
           _GetCurrentLinearPosition
                            _GetTime
                               _Idle
                            ___ftsub
                      _LCD_PrintLong
                               _Move
                      _MinTimeToMove
                           ___lwtoft
                          ___asftsub
                             ___ftge
                           _GetYesNo
                     _DisplayChoices
                           _GetFloat
                 _RunWaypointProgram
                    _GetPresetNumber
                         _SavePreset
 ---------------------------------------------------------------------------------
 (1) _GetPresetNumber                                      3     3      0    9863
                                             47 BANK0      3     3      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                      _LCD_PrintLong
                      _GetPresetType
                           _GetInput
 ---------------------------------------------------------------------------------
 (1) _RunWaypointProgram                                  20    20      0   48231
                                            136 BANK0      2     2      0
                                            127 BANK1     18    18      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                           ___lwtoft
                        _MoveToAngle
                               _Idle
               _GetInput_nonblocking
           _Wait_seconds_nonblocking
                           ___awtoft
          _SpeedRequiredToMoveInTime
                      _LCD_PrintLong
                    _LCD_SetPosition
                            ___ftneg
                               _Move
                            _Wait_ms
 ---------------------------------------------------------------------------------
 (2) _Wait_seconds_nonblocking                             4     2      2     272
                                             17 BANK0      4     2      2
                             ___wmul
                _Wait_ms_nonblocking
 ---------------------------------------------------------------------------------
 (2) _SpeedRequiredToMoveInTime                           24    18      6    8085
                                             84 BANK0     24    18      6
                            ___ftmul
                             ___ftge
                            ___ftdiv
                            ___ftsub
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _RunOrbitProgram                                     20    20      0   60732
                                            127 BANK1     20    20      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                           ___lwtoft
                        _MoveToAngle
                               _Idle
               _GetInput_nonblocking
                            ___ftmul
                            ___ftneg
                           ___altoft
                          ___asftmul
                            ___ftadd
                    _LCD_SetPosition
                            ___ftdiv
                               _Move
                            ___ftsub
                          _PrintTime
                     _LCD_PrintFloat
                            _Wait_ms
 ---------------------------------------------------------------------------------
 (2) _Wait_ms                                              2     0      2    5201
                                             46 BANK0      2     0      2
                _Wait_ms_nonblocking
                               _Idle
 ---------------------------------------------------------------------------------
 (1) _GetPresetType                                        4     4      0     228
                                             18 BANK0      4     4      0
                        _EEprom_read
 ---------------------------------------------------------------------------------
 (1) _ShowVoltage                                          3     3      0   17789
                                            103 BANK0      3     3      0
                   _LCD_ClearDisplay
                           ___lwtoft
                          ___asftmul
                    _LCD_PrintString
                    _LCD_SetPosition
                     _LCD_PrintFloat
                           _GetClick
 ---------------------------------------------------------------------------------
 (2) _GetClick                                             1     1      0    5266
                                             47 BANK0      1     1      0
                           _GetInput
 ---------------------------------------------------------------------------------
 (1) _GoToSleep                                           10    10      0    5314
                                             49 BANK0     10    10      0
                   _LCD_ClearDisplay
                    _LCD_PrintString
                   _LCD_DisplayOnOff
               _GetInput_nonblocking
                                _Now
                          ___asftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _GetInput_nonblocking                                 1     1      0      68
                                             11 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Now                                                  6     3      3    1248
                                             40 BANK0      6     3      3
                           ___lltoft
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _MinTimeToMove                                       39    36      3   10101
                                             84 BANK0     33    30      3
                            ___ftneg
                            ___ftmul
                            ___ftdiv
                             ___ftge
                               _sqrt
                            ___ftsub
                          ___asftadd
 ---------------------------------------------------------------------------------
 (3) _sqrt                                                19    16      3    4140
                                             68 BANK0     16    13      3
                             ___ftge
                            ___ftmul
                          ___asftmul
                          ___asftsub
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentLinearPosition                             6     3      3    1483
                                             45 BANK0      6     3      3
                           ___altoft
                          ___asftmul
 ---------------------------------------------------------------------------------
 (2) _MoveToAngle                                         30    24      6   18100
                                              6 BANK1     27    21      6
                            ___ftneg
                          ___asftadd
                             ___ftge
                          ___asftsub
                    _GetCurrentAngle
                            ___ftsub
                            ___ftadd
                               _Move
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Move                                                 6     0      6    5111
                                              0 BANK1      6     0      6
                       _MoveAdvanced
 ---------------------------------------------------------------------------------
 (2) _MoveAdvanced                                        53    44      9    5049
                                             89 BANK0     47    38      9
                            ___ftneg
                            ___ftmul
                            ___fttol
                            ___ftdiv
                             ___ftge
                            ___ftsub
 ---------------------------------------------------------------------------------
 (3) _GetCurrentAngle                                      6     3      3    5210
                                             68 BANK0      6     3      3
                           ___altoft
                          ___asftmul
                             ___ftge
                          ___asftsub
                          ___asftadd
 ---------------------------------------------------------------------------------
 (2) _DisplayChoices                                       8     2      6    7984
                                             47 BANK0      8     2      6
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                      _LCD_PrintChar
                           _GetInput
 ---------------------------------------------------------------------------------
 (2) _GetFloat                                            20     5     15   22976
                                            103 BANK0     20     5     15
                   _LCD_DisplayOnOff
                             ___ftge
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                     _LCD_PrintFloat
                _GetRotaryMultiplier
                           ___lbtoft
                            ___ftmul
                          ___asftadd
                          ___asftsub
                           _GetInput
 ---------------------------------------------------------------------------------
 (2) _LCD_PrintFloat                                      14     8      6    9299
                                             89 BANK0     14     8      6
                            ___fttol
                      _LCD_PrintChar
                      _LCD_PrintLong
                           ___altoft
                          ___asftsub
                            ___ftsub
                          ___asftmul
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _GetTime                                             19     8     11   30944
                                            119 BANK0     19     8     11
              _ConvertTimeToDiscrete
            _ConvertTimeFromDiscrete
                             ___ftge
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                          _PrintTime
                          ___asftadd
                          ___asftsub
                           _GetInput
 ---------------------------------------------------------------------------------
 (2) _PrintTime                                           10     5      5    8828
                                            109 BANK0     10     5      5
              _ConvertTimeToDiscrete
                            ___awdiv
                      _LCD_PrintChar
                      _LCD_PrintLong
 ---------------------------------------------------------------------------------
 (3) _LCD_PrintLong                                       10     4      6    2322
                                             25 BANK0     10     4      6
                      _LCD_PrintChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _GetRotaryMultiplier                                  3     3      0     207
                                             11 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _Wait_ms_nonblocking                                  2     0      2      71
                                             11 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GetYesNo                                             5     2      3    7888
                                             47 BANK0      5     2      3
                   _LCD_DisplayOnOff
                   _LCD_ClearDisplay
                    _LCD_PrintString
                    _LCD_SetPosition
                           _GetInput
 ---------------------------------------------------------------------------------
 (2) _LCD_ClearDisplay                                     1     1      0     606
                                             21 BANK0      1     1      0
                            _Wait_us
 ---------------------------------------------------------------------------------
 (2) _LCD_PrintString                                      3     1      2     668
                                             22 BANK0      3     1      2
                      _LCD_PrintChar
 ---------------------------------------------------------------------------------
 (3) _LCD_PrintChar                                        1     1      0     569
                                             21 BANK0      1     1      0
                            _Wait_us
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayOnOff                                     4     2      2     612
                                             21 BANK0      4     2      2
                            _Wait_us
 ---------------------------------------------------------------------------------
 (2) _LCD_SetPosition                                      3     2      1     640
                                             21 BANK0      3     2      1
                            _Wait_us
 ---------------------------------------------------------------------------------
 (4) _Wait_us                                              3     1      2     476
                                             18 BANK0      3     1      2
                            ___lwdiv
                         _Wait_ticks
 ---------------------------------------------------------------------------------
 (5) _Wait_ticks                                           3     3      0      68
                                             11 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _GetInput                                             1     1      0    5167
                                             46 BANK0      1     1      0
                               _Idle
 ---------------------------------------------------------------------------------
 (4) _Idle                                               128   128      0    5099
                                             45 BANK0      1     1      0
                                              0 BANK1    127   127      0
             _MessageStream_ReadByte
            _MessageStream_WriteByte
                             _AckCmd
                           ___altoft
                          ___asftmul
           _MessageStream_WriteMULTI
                           ___lltoft
                           ___lwtoft
                            _NackCmd
                         _LoadPreset
                         _SavePreset
 ---------------------------------------------------------------------------------
 (2) _MessageStream_ReadByte                               2     2      0      40
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AckCmd                                               1     1      0     161
                                             13 BANK0      1     1      0
            _MessageStream_WriteByte
 ---------------------------------------------------------------------------------
 (2) _NackCmd                                              2     1      1     192
                                             13 BANK0      2     1      1
            _MessageStream_WriteByte
 ---------------------------------------------------------------------------------
 (5) _LoadPreset                                           5     3      2     204
                                             18 BANK0      5     3      2
                        _EEprom_read
 ---------------------------------------------------------------------------------
 (5) _MessageStream_WriteMULTI                             6     1      5     331
                                             13 BANK0      6     1      5
            _MessageStream_WriteByte
 ---------------------------------------------------------------------------------
 (2) _MessageStream_WriteByte                              2     2      0     130
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _SavePreset                                           5     3      2     328
                                             19 BANK0      5     3      2
                       _EEprom_write
 ---------------------------------------------------------------------------------
 (6) _EEprom_write                                         5     0      5     223
                                             14 BANK0      5     0      5
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (6) _EEprom_read                                          5     0      5     134
                                             13 BANK0      5     0      5
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (7) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Write_b_eep                                          3     0      3      93
                                             11 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Read_b_eep                                           2     0      2      44
                                             11 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ConvertTimeToDiscrete                               20     9     11    4826
                                             89 BANK0     20     9     11
                            ___ftmul
                            ___fttol
                           ___lbtoft
                          ___asftmul
                          ___asftsub
 ---------------------------------------------------------------------------------
 (3) _ConvertTimeFromDiscrete                             15    11      4    4417
                                             45 BANK0     15    11      4
                             ___lmul
                           ___altoft
                          ___asftadd
                           ___lbtoft
                           ___awtoft
                          ___asftmul
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     300
                                             11 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4     516
                                             19 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     300
                                             11 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3     445
                                             19 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     198
                                             40 BANK0      9     3      6
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      65
                                             11 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     371
                                             74 BANK0     15    11      4
                    _GetCurrentAngle (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3     343
                                             19 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     414
                                             19 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8      92
                                             11 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                             11 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     136
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1630
                                             40 BANK0      5     0      5
                            ___ftadd
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                _GetRotaryMultiplier (ARG)
                           ___altoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     893
                                             40 BANK0      5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___asftsub                                            5     0      5    1695
                                             63 BANK0      5     0      5
                            ___ftsub
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                _GetRotaryMultiplier (ARG)
                           ___lwtoft (ARG)
                           ___altoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1602
                                             57 BANK0      6     0      6
                            ___ftadd
                            ___ftmul (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1537
                                             19 BANK0     14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                             11 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             17    11      6     732
                                             40 BANK0     17    11      6
                           ___ftpack
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             17    11      6     800
                                             23 BANK0     17    11      6
                           ___ftpack
                           ___lbtoft (ARG)
                _GetRotaryMultiplier (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3     343
                                             19 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                             11 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _SlowTick                                            41    41      0    1560
                                              7 COMRAM    41    41      0
                           i1___wmul
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     527
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     300
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) _FastTick                                           11    11      0      69
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetupIO
   _FactoryDefault
     _SavePreset
       _EEprom_write
         _Busy_eep
         _Write_b_eep
   _SetupHardware
   _LCD_PowerUp
     _Wait_ms
       _Wait_ms_nonblocking
       _Idle
         _MessageStream_ReadByte
         _MessageStream_WriteByte
         _AckCmd
           _MessageStream_WriteByte
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         _MessageStream_WriteMULTI
           _MessageStream_WriteByte
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _NackCmd
           _MessageStream_WriteByte
         _LoadPreset
           _EEprom_read
             _Read_b_eep
         _SavePreset
           _EEprom_write
             _Busy_eep
             _Write_b_eep
     _LCD_FunctionSet
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_DisplayOnOff
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_ClearDisplay
       _Wait_us
         ___lwdiv
         _Wait_ticks
   _LCD_ClearDisplay
     _Wait_us
       ___lwdiv
       _Wait_ticks
   _LCD_SetPosition
     _Wait_us
       ___lwdiv
       _Wait_ticks
   _LCD_PrintChar
     _Wait_us
       ___lwdiv
       _Wait_ticks
   _Wait_ms
     _Wait_ms_nonblocking
     _Idle
       _MessageStream_ReadByte
       _MessageStream_WriteByte
       _AckCmd
         _MessageStream_WriteByte
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _MessageStream_WriteMULTI
         _MessageStream_WriteByte
       ___lltoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _NackCmd
         _MessageStream_WriteByte
       _LoadPreset
         _EEprom_read
           _Read_b_eep
       _SavePreset
         _EEprom_write
           _Busy_eep
           _Write_b_eep
   _LCD_PrintString
     _LCD_PrintChar
       _Wait_us
         ___lwdiv
         _Wait_ticks
   _GetClick
     _GetInput
       _Idle
         _MessageStream_ReadByte
         _MessageStream_WriteByte
         _AckCmd
           _MessageStream_WriteByte
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         _MessageStream_WriteMULTI
           _MessageStream_WriteByte
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _NackCmd
           _MessageStream_WriteByte
         _LoadPreset
           _EEprom_read
             _Read_b_eep
         _SavePreset
           _EEprom_write
             _Busy_eep
             _Write_b_eep
   _Idle
     _MessageStream_ReadByte
     _MessageStream_WriteByte
     _AckCmd
       _MessageStream_WriteByte
     ___altoft
       ___ftpack
     ___asftmul
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
     _MessageStream_WriteMULTI
       _MessageStream_WriteByte
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _NackCmd
       _MessageStream_WriteByte
     _LoadPreset
       _EEprom_read
         _Read_b_eep
     _SavePreset
       _EEprom_write
         _Busy_eep
         _Write_b_eep
   _DisplayMenu
     _LCD_DisplayOnOff
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_ClearDisplay
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_SetPosition
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_PrintString
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
     _LCD_PrintChar
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _GetInput
       _Idle
         _MessageStream_ReadByte
         _MessageStream_WriteByte
         _AckCmd
           _MessageStream_WriteByte
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         _MessageStream_WriteMULTI
           _MessageStream_WriteByte
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _NackCmd
           _MessageStream_WriteByte
         _LoadPreset
           _EEprom_read
             _Read_b_eep
         _SavePreset
           _EEprom_write
             _Busy_eep
             _Write_b_eep
   _CreateOrbitProgram
     _LCD_ClearDisplay
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_PrintString
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
     _LCD_SetPosition
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _GetClick
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _GetCurrentAngle
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
     ___fttol
       _GetCurrentAngle (ARG)
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftneg (ARG)
     _DisplayChoices
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
     _GetFloat
       _LCD_DisplayOnOff
         _Wait_us
           ___lwdiv
           _Wait_ticks
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintFloat
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
         ___altoft
           ___ftpack
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___aldiv
       _GetRotaryMultiplier
       ___lbtoft
         ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _GetTime
       _ConvertTimeToDiscrete
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         ___lbtoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
       _ConvertTimeFromDiscrete
         ___lmul
         ___altoft
           ___ftpack
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _PrintTime
         _ConvertTimeToDiscrete
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___fttol
             _GetCurrentAngle (ARG)
               ___altoft
                 ___ftpack
               ___asftmul
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___asftsub
                 ___ftsub
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   ___ftpack
               ___asftadd
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___altoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftneg (ARG)
           ___lbtoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
         ___awdiv
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     ___ftdiv
       ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       _GetRotaryMultiplier (ARG)
       ___ftneg (ARG)
     _RunOrbitProgram
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       ___lwtoft
         ___ftpack
       _MoveToAngle
         ___ftneg
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         _GetCurrentAngle
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
           ___asftadd
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___altoft (ARG)
               ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftadd
           ___ftpack
         _Move
           _MoveAdvanced
             ___ftneg
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___fttol
               _GetCurrentAngle (ARG)
                 ___altoft
                   ___ftpack
                 ___asftmul
                   ___ftmul
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                 ___ftge
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                 ___asftsub
                   ___ftsub
                     ___ftadd
                       ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftmul (ARG)
                         ___ftpack
                         ___lbtoft (ARG)
                           ___ftpack
                         _GetRotaryMultiplier (ARG)
                         ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___altoft (ARG)
                     ___ftpack
                 ___asftadd
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___altoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _Idle
         _MessageStream_ReadByte
         _MessageStream_WriteByte
         _AckCmd
           _MessageStream_WriteByte
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         _MessageStream_WriteMULTI
           _MessageStream_WriteByte
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _NackCmd
           _MessageStream_WriteByte
         _LoadPreset
           _EEprom_read
             _Read_b_eep
         _SavePreset
           _EEprom_write
             _Busy_eep
             _Write_b_eep
       _GetInput_nonblocking
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftneg
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___ftadd
         ___ftpack
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       ___ftdiv
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _Move
         _MoveAdvanced
           ___ftneg
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___fttol
             _GetCurrentAngle (ARG)
               ___altoft
                 ___ftpack
               ___asftmul
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___asftsub
                 ___ftsub
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   ___ftpack
               ___asftadd
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___altoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftneg (ARG)
           ___ftdiv
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
       ___ftsub
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       _PrintTime
         _ConvertTimeToDiscrete
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___fttol
             _GetCurrentAngle (ARG)
               ___altoft
                 ___ftpack
               ___asftmul
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___asftsub
                 ___ftsub
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   ___ftpack
               ___asftadd
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___altoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftneg (ARG)
           ___lbtoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
         ___awdiv
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
       _LCD_PrintFloat
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
         ___altoft
           ___ftpack
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___aldiv
       _Wait_ms
         _Wait_ms_nonblocking
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _GetPresetNumber
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintLong
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         ___aldiv
         ___lmul
       _GetPresetType
         _EEprom_read
           _Read_b_eep
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _SavePreset
       _EEprom_write
         _Busy_eep
         _Write_b_eep
   _RealtimeMode
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       _GetRotaryMultiplier (ARG)
       ___ftneg (ARG)
     ___fttol
       _GetCurrentAngle (ARG)
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftneg (ARG)
     _GetInput_nonblocking
     _LCD_ClearDisplay
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_PrintString
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
     _LCD_SetPosition
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _GetRotaryMultiplier
     ___lbtoft
       ___ftpack
     ___asftadd
       ___ftadd
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _GetRotaryMultiplier (ARG)
       ___altoft (ARG)
         ___ftpack
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _GetRotaryMultiplier (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         ___ftpack
     _LCD_PrintFloat
       ___fttol
         _GetCurrentAngle (ARG)
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
           ___asftadd
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___altoft (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftneg (ARG)
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintLong
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         ___aldiv
         ___lmul
       ___altoft
         ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       ___ftsub
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___aldiv
     ___ftneg
     _Idle
       _MessageStream_ReadByte
       _MessageStream_WriteByte
       _AckCmd
         _MessageStream_WriteByte
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _MessageStream_WriteMULTI
         _MessageStream_WriteByte
       ___lltoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _NackCmd
         _MessageStream_WriteByte
       _LoadPreset
         _EEprom_read
           _Read_b_eep
       _SavePreset
         _EEprom_write
           _Busy_eep
           _Write_b_eep
   _CreateWaypointProgram
     _LCD_ClearDisplay
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _LCD_PrintString
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
     _LCD_SetPosition
       _Wait_us
         ___lwdiv
         _Wait_ticks
     _GetClick
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _GetCurrentAngle
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
     ___fttol
       _GetCurrentAngle (ARG)
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftneg (ARG)
     _GetCurrentLinearPosition
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
     _GetTime
       _ConvertTimeToDiscrete
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         ___lbtoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
       _ConvertTimeFromDiscrete
         ___lmul
         ___altoft
           ___ftpack
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___awtoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _PrintTime
         _ConvertTimeToDiscrete
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___fttol
             _GetCurrentAngle (ARG)
               ___altoft
                 ___ftpack
               ___asftmul
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___asftsub
                 ___ftsub
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   ___ftpack
               ___asftadd
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___altoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftneg (ARG)
           ___lbtoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
         ___awdiv
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _Idle
       _MessageStream_ReadByte
       _MessageStream_WriteByte
       _AckCmd
         _MessageStream_WriteByte
       ___altoft
         ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _MessageStream_WriteMULTI
         _MessageStream_WriteByte
       ___lltoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _NackCmd
         _MessageStream_WriteByte
       _LoadPreset
         _EEprom_read
           _Read_b_eep
       _SavePreset
         _EEprom_write
           _Busy_eep
           _Write_b_eep
     ___ftsub
       ___ftadd
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
     _LCD_PrintLong
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
       ___aldiv
       ___lmul
     _Move
       _MoveAdvanced
         ___ftneg
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         ___ftdiv
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
     _MinTimeToMove
       ___ftneg
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___ftdiv
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _sqrt
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___ftsub
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
     ___lwtoft
       ___ftpack
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _GetRotaryMultiplier (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         ___ftpack
     ___ftge
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
     _GetYesNo
       _LCD_DisplayOnOff
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _DisplayChoices
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintChar
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _GetFloat
       _LCD_DisplayOnOff
         _Wait_us
           ___lwdiv
           _Wait_ticks
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintFloat
         ___fttol
           _GetCurrentAngle (ARG)
             ___altoft
               ___ftpack
             ___asftmul
               ___ftmul
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___asftsub
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___ftdiv (ARG)
                   ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 ___ftpack
             ___asftadd
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___altoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftneg (ARG)
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         _LCD_PrintLong
           _LCD_PrintChar
             _Wait_us
               ___lwdiv
               _Wait_ticks
           ___aldiv
           ___lmul
         ___altoft
           ___ftpack
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___aldiv
       _GetRotaryMultiplier
       ___lbtoft
         ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___ftneg (ARG)
       ___asftadd
         ___ftadd
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___altoft (ARG)
           ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _GetRotaryMultiplier (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           ___ftpack
       _GetInput
         _Idle
           _MessageStream_ReadByte
           _MessageStream_WriteByte
           _AckCmd
             _MessageStream_WriteByte
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           _MessageStream_WriteMULTI
             _MessageStream_WriteByte
           ___lltoft
             ___ftpack
           ___lwtoft
             ___ftpack
           _NackCmd
             _MessageStream_WriteByte
           _LoadPreset
             _EEprom_read
               _Read_b_eep
           _SavePreset
             _EEprom_write
               _Busy_eep
               _Write_b_eep
     _RunWaypointProgram
       _LCD_ClearDisplay
         _Wait_us
           ___lwdiv
           _Wait_ticks
       _LCD_PrintString
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
       ___lwtoft
         ___ftpack
       _MoveToAngle
         ___ftneg
         ___asftadd
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___altoft (ARG)
             ___ftpack
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             ___ftpack
         _GetCurrentAngle
           ___altoft
             ___ftpack
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
           ___asftadd
             ___ftadd
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___altoft (ARG)
               ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         ___ftadd
           ___ftpack
         _Move
           _MoveAdvanced
             ___ftneg
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___fttol
               _GetCurrentAngle (ARG)
                 ___altoft
                   ___ftpack
                 ___asftmul
                   ___ftmul
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                 ___ftge
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                 ___asftsub
                   ___ftsub
                     ___ftadd
                       ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                     ___ftdiv (ARG)
                       ___ftpack
                       ___ftmul (ARG)
                         ___ftpack
                         ___lbtoft (ARG)
                           ___ftpack
                         _GetRotaryMultiplier (ARG)
                         ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___altoft (ARG)
                     ___ftpack
                 ___asftadd
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___altoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftge
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _Idle
         _MessageStream_ReadByte
         _MessageStream_WriteByte
         _AckCmd
           _MessageStream_WriteByte
         ___altoft
           ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         _MessageStream_WriteMULTI
           _MessageStream_WriteByte
         ___lltoft
           ___ftpack
         ___lwtoft
           ___ftpack
         _NackCmd
           _MessageStream_WriteByte
         _LoadPreset
           _EEprom_read
             _Read_b_eep
         _SavePreset
           _EEprom_write
             _Busy_eep
             _Write_b_eep
       _GetInput_nonblocking
       _Wait_seconds_nonblocking
         ___wmul
         _Wait_ms_nonblocking
       ___awtoft
         ___ftpack
       _SpeedRequiredToMoveInTime
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           _GetRotaryMultiplier (ARG)
           ___ftneg (ARG)
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftdiv
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
         ___ftsub
           ___ftadd
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
         _sqrt
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___asftmul
             ___ftmul
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
           ___asftsub
             ___ftsub
               ___ftadd
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               _GetRotaryMultiplier (ARG)
               ___ftneg (ARG)
       _LCD_PrintLong
         _LCD_PrintChar
           _Wait_us
             ___lwdiv
             _Wait_ticks
         ___aldiv
         ___lmul
       _LCD_SetPosition
         _Wait_us
           ___lwdiv
           _Wait_ticks
       ___ftneg
       _Move
         _MoveAdvanced
           ___ftneg
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             _GetRotaryMultiplier (ARG)
             ___ftneg (ARG)
           ___fttol
             _GetCurrentAngle (ARG)
               ___altoft
                 ___ftpack
               ___asftmul
                 ___ftmul
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___ftge
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
               ___asftsub
                 ___ftsub
                   ___ftadd
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___lbtoft (ARG)
                       ___ftpack
                     _GetRotaryMultiplier (ARG)
                     ___ftneg (ARG)
                   ___ftdiv (ARG)
                     ___ftpack
                     ___ftmul (ARG)
                       ___ftpack
                       ___lbtoft (ARG)
                         ___ftpack
                       _GetRotaryMultiplier (ARG)
                       ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                   _GetRotaryMultiplier (ARG)
                   ___ftneg (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _GetRotaryMultiplier (ARG)


HI-TECH Software PICC-18 Macro Assembler V9.80 build 11162 
Symbol Table                                                                                   Wed Jan 08 01:51:56 2014

                    EEprom_read@bCount 0071                           ___asftadd@f2 008A  
                         ___altoft@exp 007B                          ___asftadd@f1p 0088  
               __end_of_FactoryDefault 6702                          ___altoft@sign 007C  
                                   _GO 007E11             ??_GetCurrentLinearPosition 0090  
                         ___awdiv@sign 0070                                     bsr 000FE0  
                  ___wmul@multiplicand 006D                       i1___wmul@product 0005  
                         ___asftmul@f2 008A                   RealtimeMode@SetSpeed 00CB  
                         ___asftsub@f2 00A1                 SlowTick@ResponseOutput 002F  
                         ___ftadd@exp1 0080                           ___ftadd@exp2 007F  
         ConvertTimeToDiscrete@Minutes 00BE           ConvertTimeToDiscrete@Seconds 00C0  
                         ___ftadd@sign 007E                                    l150 2530  
                                  l151 2480                                    l153 2496  
                                  l171 265E                                    l332 564A  
                                  l172 26F0                                    l157 24C0  
                                  l149 2478                                    l166 25E8  
                                  l176 284C                                    l185 2912  
                                  l750 4E74                                    l913 49D2  
                                  l930 4A72                                    l931 4A78  
                                  l940 4B42                                    l932 4A7E  
                                  l924 4A06                                    l933 4A84  
                                  l765 4EF4                                    l934 4A8A  
                                  l766 4EFC                        _LCD_FunctionSet 6E2A  
                                  l935 4A94                                    l767 4F04  
                                  l936 4AC8                                    l937 4AF0  
                                  l946 4BEA                                    l977 6526  
                                  _PR2 000FCB                                    _PSA 007EAB  
   SpeedRequiredToMoveInTime@AccelTime 00BA                                    _Now 70B0  
                         ?_LCD_PowerUp 0001                   __size_of_Write_b_eep 002A  
       CreateWaypointProgram@DwellTime 01B6                                    wreg 000FE8  
     GetCurrentLinearPosition@MotorPos 0090                             _TXSTA1bits 000FAC  
                        ___asftmul@f1p 0088                          ___asftsub@f1p 009F  
                        _LCD_PrintChar 6AD4                FastTick@BacklightPWM_PR 00F3  
                        _LCD_PrintLong 46CC                     LCD_PrintFloat@sign 00BE  
                         ___ftdiv@cntr 0093                                   ?_Now 0088  
                         ___ftdiv@sign 0098                                   l1110 55EC  
                                 l1130 51B6                                   l1132 521C  
                                 l1141 5346                                   l2111 6B7A  
                                 l1152 3D4E                                   l1154 3D8C  
                                 l1402 453A                                   l2043 7686  
                                 l2203 3854                                   l1403 45A2  
                                 l1323 1EE2                                   l1156 3DE0  
                                 l2132 5DB0                                   l1157 3E64  
                                 l1350 20B0                                   l1159 3F6A  
                                 l1319 1E94                                   l2240 6110  
                                 l2048 77C0                                   l2057 696C  
                                 l1097 4F5E                                   l2049 77BE  
                                 l3106 61BE                                   l2138 5DCC  
                                 l2244 613A                                   l2236 60E6  
                                 l2172 360E                                   l2156 6AB0  
                                 l3038 7106                                   l2174 36D0  
                                 l3119 764A                                   l2248 6164  
                                 l2520 305C                                   l1393 4418  
                                 l3074 718A                                   l2610 7714  
                                 l2515 3026                      ??_RunOrbitProgram 00E8  
                                 l1396 4658                                   l2532 31A2  
                                 l2189 3792                                   l2525 306E  
                                 l2453 2AE6                                   l2550 3336  
                                 l2518 34D0                                   l2551 336E  
                                 l2545 32D4                                   l2457 2E9E  
                                 l2562 342A                                   l2538 323A  
                                 l2581 786E                                   l2558 33A6  
                                 l2903 5A86                                   l2568 34A8  
                                 l2914 5B0E                                   l2923 5B20  
                                 l2932 63FE                                   l2924 5B28  
                                 l2861 69CA                                   l2934 6448  
                                 l2956 77EA                                   l2899 5A62  
                                 _ADON 007E10                                   STR_1 1C93  
                                 STR_2 1D38                                   STR_3 1C3E  
                                 STR_4 1D44                                   STR_5 1C2F  
                                 STR_6 1BB1                                   STR_7 1CEF  
                                 STR_8 1A9E                                   STR_9 19E4  
                                 _GIEL 007F96                                   _T0CS 007EAD  
                                 _LATA 000F89                                   _LATB 000F8A  
                   _Move_AccelValueQ24 0035                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 _LATF 000F8E                                   _LATG 000F8F  
                                 _IPEN 007E87                                   _PEIE 007F96  
                                 _RBPU 007F8F                                   u9715 2720  
                                 u9825 53E4                                   u9915 3E40  
                                 u9835 5436                                   u9855 5546  
                                 _TMR2 000FCC                                   u9955 563A  
                                 u9965 56BA                                   u9885 3D2E  
                                 u9895 3D6C                                   _Idle 49BE  
                                 _MyID 01FF                                   _Move 776E  
                    SlowTick@PID_Error 002B                                   _main 4C90  
                         ___ftpack@arg 006B                     _RunWaypointProgram 2FDC  
      __end_of_MessageStream_WriteByte 73C4                           ___ftpack@exp 006E  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                                   _sqrt 619C  
                           ExtMode@idx 01D7                 _PendingExternalUIEvent 0056  
                           ExtMode@ret 00E8                                   prodh 000FF4  
                                 prodl 000FF3                                   start 1940  
                        __CFG_FOSC$EC3 000000                   _bLock_BatteryVoltage 02C7  
                       GetTime@Minutes 00E5                         GetTime@Seconds 00E4  
         CreateWaypointProgram@LastPos 01A2                        __end_of_GetTime 3930  
                        __CFG_MCLRE$ON 000000                        __end_of_NackCmd 73B4  
                         ___ftmul@cntr 0086                           ___ftmul@sign 0087  
                  ?_RunWaypointProgram 0001              _SpeedRequiredToMoveInTime 53D2  
                      __end_of_ExtMode 298E                                  ??_Now 008B  
                       _LCD_PrintFloat 55FA                           ___fttol@exp1 00B8  
                  LCD_PrintFloat@fract 00BD         MessageStream_WriteMULTI@bCount 0072  
                      ?_FactoryDefault 0001                           ___fttol@lval 00B4  
             __end_of_LCD_DisplayOnOff 6F62         __size_of_CreateWaypointProgram 0584  
      __size_of_MessageStream_ReadByte 0020                    LCD_PrintFloat@whole 00BC  
            LCD_DisplayOnOff@DisplayOn 0077          __end_of_CreateWaypointProgram 2FA4  
                      __end_of_Wait_ms 782E                           _BAUDCON1bits 000F65  
                      __end_of_Wait_us 7334                        __end_of_SetupIO 74A6  
                                ?_Idle 0001                                  ?_Move 0100  
                  __end_of_DisplayMenu 5E00                                  l20003 424A  
                                l20103 3666                                  l20015 4288  
                                l20113 368A                                  l20121 36B6  
                                l20033 42C4                                  l20107 3668  
                                l20027 42B8                                  l20019 4298  
                                l20221 38CE                                  l20045 4338  
                                l20053 43A2                                  l20303 736E  
                                l20215 38AA                                  l20207 3888  
                                l20231 391A                                  l20143 3726  
                                l20135 3704                                  l20039 42D0  
                                l20073 35CE                                  l20251 60F8  
                                l20171 37C6                                  l20405 699A  
                                l20333 72C2                                  l20229 38FC  
                                l20149 3748                                  l20157 3774  
                                l20271 6130                                  l20095 3642  
                                l20079 3604                                  l20505 6EB4  
                                l20361 767E                                  l20409 69A6  
                                l20257 6106                                  l20265 6122  
                                l20185 380A                                  l20193 3836  
                                l20531 5A70                                  l20507 6EC0  
                                l20355 76EC                                  l20179 37E8  
                                l20099 3664                                  l20365 7694  
                                l20349 76D4                                  l20285 615A  
                                l20471 69EA                                  l20631 6F9E  
                                l20519 7532                                  l20295 7336  
                                l20359 767A                                  l20279 614C  
                                l20609 6424                                  l20561 5AD4  
                                l20553 5AAE                                  l20537 5A94  
                                l20393 6982                                  l20385 6960  
                                l20475 69F6                                  l20467 69D2  
                                l20571 5AFE                                  l20563 5ADC  
                                l20731 68F2                                  l20723 68CE  
                                l20715 68B6                                  l20627 6F80  
                                l20387 6974                                  l20379 6946  
                                l20645 62D4                                  l20477 6A08  
                                l20469 69D6                                  l20573 5B08  
                                l20565 5AE2                                  l20741 706A  
                                l20725 68DA                                  l20637 6FB6  
                                l20663 6328                                  l20591 63D0  
                                l20479 6A12                                  l20583 5B42  
                                l20559 5ACA                                  l20743 7076  
                                l20727 68DE                                  l20719 68C6  
                                l20399 698E                                  l20673 6348  
                                l20649 6302                                  l20667 6330  
                                l20755 715A                                  l20677 6350  
                                l20757 7162                                  l20767 7180  
                                l20759 7166                                  l20697 6884  
                                l15601 6BC0                                  l20779 7656  
                                l20699 688E                                  l17123 2466  
                                l16181 711A                                  l17133 24A0  
                                l18007 6DD0                                  l17311 28FE  
                                l15625 74E4                                  l15633 7518  
                                l19001 2A94                                  l17225 26D0  
                                l17145 24D2                                  l17155 251A  
                                l18203 4E3A                                  l18131 4D10  
                                l18123 4D08                                  l17413 7574  
                                l17421 77D4                                  l17325 2952  
                                l17165 2554                                  l18213 4E58  
                                l18205 4E3E                                  l15911 6CF8  
                                l18311 49DA                                  l17407 7558  
                                l15583 6B84                                  l15575 6B78  
                                l17431 5400                                  l19111 2C4E  
                                l19103 2C2E                                  l17191 264E  
                                l17183 2614                                  l15921 6D14  
                                l15905 6CE8                                  l18313 49E6  
                                l15569 6B68                                  l19113 2C52  
                                l19105 2C32                                  l17281 283C  
                                l17329 2962                                  l18241 4EC6  
                                l18225 4E8E                                  l18217 4E7E  
                                l18145 4D62                                  l18137 4D36  
                                l15851 6734                                  l18411 4B82  
                                l18307 49C6                                  l15595 6BB4  
                                l17523 3D5A                                  l17451 5556  
                                l17443 54BC                                  l19131 2C94  
                                l19115 2C5C                                  l19043 2B32  
                                l17291 2878                                  l17195 2656  
                                l17179 25FE                                  l18219 4E84  
                                l18147 4D68                                  l18139 4D3C  
                                l15917 6D08                                  l15933 6D38  
                                l15861 675C                                  l15845 671C  
                                l18333 4A1C                                  l17613 577E  
                                l17437 5452                                  l19221 2EAA  
                                l19125 2C82                                  l19117 2C60  
                                l19133 2C9A                                  l19053 2B52  
                                l17285 285C                                  l17277 2830  
                                l18237 4EAA                                  l18261 4F0C  
                                l15919 6D10                                  l18343 4A3C  
                                l17607 5750                                  l17543 3E74  
                                l17527 3D98                                  l19311 684C  
                                l19303 682E                                  l19127 2C86  
                                l19119 2C66                                  l19047 2B34  
                                l18511 5DA8                                  l17295 2890  
                                l18247 4EDE                                  l15937 6D44  
                                l15929 6D2E                                  l15857 674C  
                                l15873 6798                                  l18433 4BC2  
                                l18417 4B92                                  l17713 46F4  
                                l17625 57D6                                  l19305 683A  
                                l19233 2EDE                                  l19129 2C90  
                                l19065 2B7C                                  l18521 5DC8  
                                l18513 5DB4                                  l17289 2868  
                                l18249 4EEE                                  l15859 6758  
                                l17803 495C                                  l17723 4738  
                                l17619 57AA                                  l19323 685C  
                                l19315 6856                                  l19307 6842  
                                l19163 2DCE                                  l19147 2D4A  
                                l19067 2B80                                  l18611 1F70  
                                l18603 1F18                                  l18515 5DBA  
                                l18531 5DF2                                  l18507 5D90  
                                l18099 4CBA                                  l15877 67AC  
                                l15869 678A                                  l18349 4A5A  
                                l17733 477C                                  l17709 46EA  
                                l17581 5644                                  l18293 780C  
                                l19149 2D62                                  l19069 2B8C  
                                l18525 5DD6                                  l18509 5DA0  
                                l18471 4C28                                  l17399 6C2C  
                                l17743 47C4                                  l17583 5660  
                                l18287 7804                                  l18279 77F8  
                                l17823 7822                                  l19511 33DA  
                                l19351 3020                                  l19319 685A  
                                l19263 2F76                                  l19247 2F40  
                                l19095 2C1E                                  l18623 1FBC  
                                l18607 1F42                                  l18449 4BD4  
                                l17753 480C                                  l17593 56E0  
                                l17825 7826                                  l19601 445C  
                                l19425 3204                                  l19345 300E  
                                l19329 685E                                  l19193 2E4E  
                                l18529 5DDA                                  l18459 4BEC  
                                l18395 4AB0                                  l17763 4854  
                                l17587 567C                                  l19427 3226  
                                l19419 31DE                                  l19371 3072  
                                l18723 219A                                  l18707 2178  
                                l18643 201C                                  l18627 1FFA  
                                l18811 22B4                                  l18469 4C1C  
                                l18397 4AD0                                  l17773 4898  
                                l19605 447E                                  l19517 3400  
                                l19437 3246                                  l18813 22C6  
                                l18477 5D00                                  l17695 6B38  
                                l17783 48DC                                  l19703 64A0  
                                l19543 3486                                  l19519 3416  
                                l19455 32A2                                  l19367 3062  
                                l19359 304A                                  l19295 6804  
                                l19199 2E62                                  l18807 22AA  
                                l18735 21B2                                  l18719 2190  
                                l18655 2034                                  l18639 2012  
                                l18591 1EE6                                  l18559 1E5C  
                                l18487 5D34                                  l17793 491C  
                                l19705 64A4                                  l19625 44F0  
                                l19545 3494                                  l19537 3460  
                                l19553 34AE                                  l19457 32C0  
                                l19449 327C                                  l19297 6812  
                                l19289 67E6                                  l18921 3B58  
                                l18905 3AC8                                  l18673 2064  
                                l18649 202A                                  l18489 5D44  
                                l18497 5D62                                  l19731 652C  
                                l19707 64AC                                  l19715 64D8  
                                l19483 335A                                  l19395 3154  
                                l19299 6820                                  l18771 2254  
                                l18739 21BC                                  l18755 21EE  
                                l18659 203E                                  l18587 1EE0  
                                l18579 1EB4                                  l19901 52E6  
                                l19733 6538                                  l19717 64E0  
                                l19653 4640                                  l19661 4654  
                                l19477 3310                                  l19389 312E  
                                l19493 3378                                  l18933 3B80  
                                l18917 3B4C                                  l18941 3B90  
                                l18829 22FE                                  l18757 21F6  
                                l18693 2132                                  l17991 7304  
                                l19823 61FE                                  l19727 6520  
                                l19719 64EA                                  l19399 318E  
                                l18951 3BDE                                  l18927 3B66  
                                l18919 3B50                                  l18791 2278  
                                l18775 225E                                  l18759 223A  
                                l18695 2144                                  l19737 6548  
                                l19593 4412                                  l19497 3392  
                                l18937 3B84                                  l18929 3B6A  
                      __end_of___aldiv 67BE                                  l19931 6A9C  
                                l19915 6A56                                  l19739 6552  
                                l19587 4400                                  l18963 3C18  
                                l18947 3BD2                                  l18939 3B88  
                                l18971 3C26                                  l18875 39EC  
                                l18787 226E                                  l17997 732A  
                                l19909 5372                                  l18981 3C4E  
                                l18957 3BF6                                  l18949 3BD6  
                                l18973 3C2C                                  l19943 6AAC  
                                l19935 6A9E                                  l19927 6A98  
                                l19951 6ABC                                  l19863 65AE  
                                l18983 3C52                                  l18967 3C1C  
                                l18959 3BFA                                  l19961 40EC  
                                l19873 6616                                  l19865 65C4  
                                l19881 51C2                                  l18977 3C3C  
                                l18969 3C20                                  l18897 3A6A  
                                l18889 3A0C                                  l19963 40F0  
                                l19947 6AB8                                  l19939 6AA0  
                                l19867 65E2                                  l19891 5220  
                                l19787 4F6A                                  l18987 3C66  
                                l19973 4164                                  l19869 65EE  
                                l19893 5238                                  l19885 51DC  
                                l19797 5048                                  l19991 41E4  
                                l19975 4168                                  l19967 4128  
                                l19895 5256                                  l19887 51EC  
                                l19969 412C                                  l19995 4206  
                                l19987 41C2                                  l19979 419E  
                                l19999 4228                                  ?_main 0001  
           ??_MessageStream_WriteMULTI 0072                          _MinTimeToMove 4F2A  
                      __end_of___awdiv 6D4E                     DisplayMenu@Initial 0092  
                                _EEADR 000F62                        __end_of___ftadd 5B68  
                                STR_10 1C20                                  STR_11 1CF5  
                                STR_12 1B19                                  STR_20 1CC8  
                                STR_21 1CE2                                  STR_13 1B11  
                                STR_30 1D9B                                  STR_14 1D85  
                                STR_22 1B5A                                  STR_15 1BE7  
                                STR_31 1AF7                                  STR_23 1CBB  
                                STR_40 1D9B                                  STR_16 1A3E  
                                STR_32 1BE2                                  STR_24 1A0F  
                                STR_41 1AF7                                  STR_17 1BF2  
                                STR_25 1AFE                                  STR_33 1A39  
                                STR_42 1B8F                                  STR_50 1C2F  
                                STR_26 1C77                                  STR_18 1C02  
                                STR_34 1BD2                                  STR_27 1A0E  
                                STR_35 1C69                                  STR_43 1D64  
                                STR_19 1C85                                  STR_51 1AEB  
                                STR_60 19FA                                  STR_52 1CAE  
                                STR_36 1D9B                                  STR_28 1C69  
                                STR_44 1BA0                                  STR_29 1C69  
                                STR_37 1AF7                                  STR_61 1DB5  
                                STR_53 1B48                                  STR_45 1A24  
                                STR_62 19FA                                  STR_54 1D7D  
                                STR_70 1D5B                                  STR_46 1C11  
                                STR_38 1B8F                                  STR_39 1C69  
                                STR_63 1DA8                                  STR_55 1D94  
                                STR_71 1D75                                  STR_47 1B6C  
                                STR_64 19FA                                  STR_80 1CA1  
                                STR_72 1CC8                                  STR_56 1D8D  
                                STR_48 1CD5                                  STR_73 1CE2  
                                STR_57 1DAD                                  STR_49 1CAE  
                                STR_65 1C5B                                  STR_81 1AD8  
                                STR_74 1B5A                                  STR_66 1D50  
                                STR_90 1AB2                                  STR_82 1A76  
                                STR_58 19FA                                  STR_75 1CBB  
                                STR_59 1DB1                                  STR_67 1D20  
                                STR_83 1D08                                  STR_91 1B7E  
                                STR_92 1D6D                                  STR_68 1D2C  
                                STR_84 1CFC                                  STR_76 1CA1  
                                STR_93 1DA2                                  STR_69 1D14  
                                STR_77 1A8A                                  STR_85 1A4E  
                                STR_86 1B86                                  STR_94 1B24  
                                STR_78 1AC5                                  STR_87 1D64  
                                STR_95 1B7E                                  STR_79 1C4D  
                                STR_96 1D6D                                  STR_88 1BA0  
                                STR_97 1DA2                                  STR_89 1BC2  
                                STR_98 1AB2                                  STR_99 1B7E  
                      __end_of___ftdiv 647A                        __end_of___ftneg 77F8  
                                ?_sqrt 00A4                        __end_of___ftmul 638A  
                                u11205 3BF0                                  u11125 3B04  
                                u10271 4CEA                                  u10505 4B20  
                                u10281 4CFC                        ___awdiv@divisor 006D  
                                u13110 63BA                                  u12135 5196  
                                u12145 51D6                                  u13210 62EC  
                                u13130 63E8                                  u13115 63B8  
                      __end_of___ftsub 75EA                                  u12075 4F3E  
                      __end_of___fttol 6904                                  u13215 62EA  
                                u13135 63E6                                  u13260 6920  
        CreateOrbitProgram@DIRECTION_0 0198          CreateOrbitProgram@DIRECTION_1 0196  
                                u13190 62BE                                  u13265 6918  
                                u13195 62BC                                  _RC1IE 007CED  
                                u12900 5A24                                  _RC1IF 007CF5  
                                u12910 5A44                                  u12905 5A22  
                                u12915 5A42                                  u11995 4584  
   CreateWaypointProgram@MinTravelTime 01B9                        __end_of___lwdiv 7194  
                         main@lastMenu 04E3                                  i1l850 121E  
                                i1l834 1068                                  i1l851 120C  
                                i1l853 1256                                  i1l837 10A6  
                                i1l838 10AA                                  i1l855 1252  
                                i1l856 1430                                  i2l801 59F2  
                                i1l849 11F0                                  i1l876 157C  
                                i1l893 1886                                  i1l869 1490  
                                i1l878 1562                                  i1l895 18BC  
                                i1l898 191A                                  i2l784 5896  
                                i2l793 5932                                  i2l788 58DE  
                      ___awdiv@counter 006F                                  i2l799 59D8  
                                _RCREG 000FAE           __size_of_Wait_ms_nonblocking 0042  
                                _PLLEN 007CDE                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TX1IE 007CEC  
                                _TMR0L 000FD6                                  _TMR1L 000FCE  
                                _PORTA 000F80                                  _PORTB 000F81  
                      _LCD_SetPosition 6DBE                          _ExtModeActive 02BC  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                                  _TRISF 000F97  
                                _TRISG 000F98                    FactoryDefault@Empty 0100  
                                _TXREG 000FAD                         _RX_MsgComplete 02BF  
                  ___lmul@multiplicand 006F        SlowTick@internal_BatteryVoltage 005B  
        SlowTick@internal_PID_SetPoint 01E0                           ___lltoft@exp 007B  
                       ?_LCD_PrintChar 0001                         ?_LCD_PrintLong 0079  
                 ??_RunWaypointProgram 00E8           SlowTick@CurrentMotorPosition 0025  
                       Read_b_eep@badd 006B     SpeedRequiredToMoveInTime@_Distance 00B4  
          _bLock_RotaryDetentIntervals 02CA                          ___awtoft@sign 0076  
                   Wait_ticks@LastFlop 02BA                          ___ftpack@sign 006F  
                    ??_GetCurrentAngle 00A7                         __pbitbssCOMRAM 02B8  
                       __CFG_BOREN$OFF 000000                          SavePreset@dat 0073  
                                tablat 000FF5                       __end_ofi1___wmul 76CA  
             _Wait_seconds_nonblocking 7746                                  sqrt@i 00AD  
         ExtMode@PrepMove_Acceleration 01D4                                  sqrt@q 00AE  
                                sqrt@x 00B1                                  sqrt@y 00A4  
                                sqrt@z 00AA                                  status 000FD8  
                  i1___wmul@multiplier 0001                DisplayChoices@ItemCount 0091  
                   LCD_SetPosition@Col 0075                     __size_ofi1___lwdiv 004A  
            MoveToAngle@_Speed_Deg_Sec 0109                     LCD_SetPosition@Row 0077  
                   LCD_SetPosition@dat 0076                        main@CommandMenu 04D5  
                       EEprom_read@dat 006F                       __end_of_GetClick 7814  
                     __end_of_GetFloat 43BE                       __end_of_FastTick 5A0C  
                     __end_of_GetInput 769E                       __end_of_GetYesNo 69BE  
                           _LoadPreset 7618                           __end_of_Idle 4C6A  
               __end_of_LCD_PrintFloat 57F8                           __end_of_Move 7796  
                    _RealtimeMode$3898 00C7                           __end_of_main 2444  
   SpeedRequiredToMoveInTime@RootPrime 00C0                __end_of_LCD_FunctionSet 6E92  
                PrintTime@Milliseconds 00D5         _SpeedRequiredToMoveInTime$3892 00BD  
                         __end_of_sqrt 628E    ConvertTimeFromDiscrete@Milliseconds 008F  
                           _Read_b_eep 782E                       __end_of_Busy_eep 7874  
                      _bLowVoltageTrip 02CD                                 ??_Idle 008D  
                       ?_MinTimeToMove 00B4                                 ??_Move 00E8  
                               ??_main 00EA                          ___fttol@sign1 00B3  
                               ??_sqrt 00A7                     __size_of_GoToSleep 00DE  
                MoveAdvanced@AccelDist 00DC                          __activetblptr 000003  
                MoveAdvanced@AccelTime 00D6                         __CFG_PLLCFG$ON 000000  
                      _LCD_PrintString 7556                         __CFG_RETEN$OFF 000000  
                        ??_MoveToAngle 00E8                         MoveAdvanced@DD 00E2  
                       MoveAdvanced@AV 00C5                         MoveAdvanced@DP 00C2  
                       MoveAdvanced@CS 00C8                       __end_of_SlowTick 1940  
                    ?_LCD_ClearDisplay 0001                                 _ADCON0 000FC2  
                               _ADCON2 000FC0                     MinTimeToMove@HalfD 00B7  
                     __end_of___altoft 6EFA                                 STR_100 1D6D  
                               STR_101 1DA2                                 STR_102 1B24  
                               STR_110 1A62                                 STR_111 1B7E  
                               STR_103 1B7E                                 STR_112 1D6D  
                               STR_104 1D6D                                 STR_113 1DA2  
                               STR_105 1DA2                                 STR_114 1CAE  
                               STR_106 1B36                                 _ADRESH 000FC4  
                               STR_107 1B7E                                 STR_108 1D6D  
                               _EEADRH 000F63                                 STR_109 1DA2  
                               _ADRESL 000FC3                                 _EEDATA 000F61  
                               _CCPR1L 000FBC                                 _EECON2 000F7E  
                               _ANCON0 000F25                                 _ANCON1 000F24  
                               _ANCON2 000F23                                 _T08BIT 007EAE  
                     ___awdiv@dividend 006B                       __end_of___awtoft 7556  
                     __end_of___ftpack 6A46                       __end_of___lbtoft 7746  
                   ??_LCD_ClearDisplay 0075                 _MessageStream_ReadByte 7228  
                         ?_EEprom_read 006D                             _SavePreset 75EA  
                     __end_of___lltoft 70B0                                 i1l3119 76A2  
                               i1l3074 721E                         __CFG_WDTEN$OFF 000000  
                  LCD_PrintLong@places 007D                       __end_of___lwtoft 77BC  
                               _OSCCON 000FD3                    GetFloat@WholePlaces 00D6  
                               _TMR0IE 007F95                                 _SPBRG1 000FAF  
                               _TMR0IF 007F92                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR0IP 007F8A  
                               _TMR1IP 007CF8                                 _TMR0ON 007EAF  
                               _TMR2ON 007E52                              ??_GetTime 00E2  
                            ??_NackCmd 006E                                 _AckCmd 726C  
                __end_of_GetPresetType 75BC                                 _RX_Idx 00EF  
                            ??_ExtMode 00E8                                 _TX_Idx 01FE  
                        ?_RealtimeMode 0001                                 _Config 02D6  
                               Now@ret 008B                         __CFG_XINST$OFF 000000  
             ?_ConvertTimeFromDiscrete 008D                     LCD_PrintString@dat 0076  
                            ??_Wait_ms 0090                         GetYesNo@answer 0093  
                            ??_Wait_us 0074                              ??_SetupIO 006B  
                      ?_LCD_PrintFloat 00B9                            _DisplayMenu 5CEE  
                               ___ftge 6F62                                 ___lmul 70FE  
                            ??___aldiv 0073                  _ConvertTimeToDiscrete 5B80  
                               ___wmul 7646                              ??___awdiv 006F  
                            ??___ftadd 0079                              ??___ftdiv 008E  
                            ??___ftneg 006E                     _CreateOrbitProgram 1DBA  
                           _Wait_ticks 76CA                              ??___ftmul 007D  
                            ??___ftsub 009F                              ??___fttol 00AE  
                           _bTick40Khz 02D3                         GetYesNo@prompt 008F  
                            ??___lwdiv 006F                __end_of_LCD_SetPosition 6E2A  
         Wait_seconds_nonblocking@time 0071                                 clear_0 5E64  
                               clear_1 5E78                                 clear_2 5E8A  
                               clear_3 5E96                                 clear_4 5EA2  
                               clear_5 5EAE                                 clear_6 5EBA  
                               clear_7 5ECE                       ___awdiv@quotient 0071  
                _Move_shifted_position 0041                           ExtMode@CmdID 02CD  
                               main@xx 04E8                  ___ftmul@f3_as_product 0083  
                         ExtMode@State 02CC                    ?_CreateOrbitProgram 0001  
              RunOrbitProgram@Distance 018A            RunWaypointProgram@EarlyExit 018B  
                      ??_LCD_PrintChar 0075                           ExtMode@mTemp 02CE  
                       SavePreset@addr 0076                      __end_ofi1___lwdiv 7228  
                         __pdataCOMRAM 005B                          ??_ShowVoltage 00C7  
                      ??_LCD_PrintLong 007F                     __size_of_PrintTime 00FE  
     __size_of_MessageStream_WriteByte 0010                     RunOrbitProgram@ret 0189  
                       SavePreset@pnum 0075            ConvertTimeToDiscrete@holder 00C7  
                         __mediumconst 1944                  __end_of_SetupHardware 6DBE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                  SlowTick@RotaryEncoder 0054  
          __end_of_GetRotaryMultiplier 6BCC                          ?_MoveAdvanced 00B9  
    FastTick@interal_PID_MeasuredPoint 02F8                   __size_of_LCD_PowerUp 004A  
                           _bSpeedMode 02D2            MoveAdvanced@Distance_counts 00D2  
      CreateOrbitProgram@SpeedModeMenu 01B8          __size_of_GetInput_nonblocking 001E  
     CreateWaypointProgram@CommandMenu 019E               __size_of_GetPresetNumber 00B8  
                       _bLock_UI_Event 02CC                     __size_of___asftadd 003C  
                   __size_of___asftmul 003C                     __size_of___asftsub 003C  
                  __end_of_MoveToAngle 53AA                             __accesstop 0060  
                       _Motor_Position 01E4                             ___altoft@c 0073  
                      EEprom_read@addr 006D                             ___ftadd@f1 0073  
                           ___ftadd@f2 0076                             ___ftge@ff1 0088  
                           ___ftge@ff2 008B                   ??_CreateOrbitProgram 00EA  
                       ??_RealtimeMode 00C7     CreateWaypointProgram@intTravelTime 01B4  
             LCD_DisplayOnOff@CursorOn 0075                      __end_of_GoToSleep 6562  
                           ___ftdiv@f1 0088                             ___ftdiv@f2 008B  
                           ___ftdiv@f3 0094                             ___ftneg@f1 006B  
                           ___awtoft@c 0073                             ___lbtoft@c 0076  
                          ?_LoadPreset 0072                             ___ftmul@f1 0077  
                           ___ftmul@f2 007A                 SlowTick@PendingUIEvent 0051  
                           ___ftsub@f1 0099                             ___ftsub@f2 009C  
                           ___fttol@f1 00AA                         __pcstackCOMRAM 0001  
                     GetTime@Precision 00E1                           __pidataBANK0 787A  
                         __pidataBANK1 787C                           __pidataBANK2 7874  
                         __pidataBANK4 7846                           __pidataBANK5 785A  
                FastTick@Motor_Encoder 00EC                       ?_LCD_FunctionSet 0075  
                           ___lltoft@c 0073                            ?_Read_b_eep 006B  
                      ??_MinTimeToMove 00B7                __end_of_LCD_PrintString 758A  
              LCD_PrintFloat@wholepart 00BF                            _CurrentPath 0418  
                           ___lwtoft@c 0073                        _RunOrbitProgram 43D8  
      CreateOrbitProgram@DirectionMenu 01B0                              ?i1___wmul 0001  
                     _Speed_SetPending 02C1     __size_of_SpeedRequiredToMoveInTime 0228  
                       ??_MoveAdvanced 00C2                              ?_GetClick 0001  
                            ?_GetFloat 00C7                              ?_FastTick 0001  
                            ?_GetInput 0001                              ?_GetYesNo 008F  
            SlowTick@PID_ResponseLimit 001F                SlowTick@PID_Error_delta 0018  
          MoveToAngle@DestinationAngle 011E                            ?_SavePreset 0073  
                  __end_of_ShowVoltage 6CD6                             __pbssBANK0 00EA  
                           __pbssBANK1 01E0                             __pbssBANK2 02D2  
                           __pbssBANK3 03C8                             __pbssBANK4 0400  
                           __pbssBANK6 0600                             __pbssBANK7 0700  
                            ?_Busy_eep 0001        __end_of_ConvertTimeFromDiscrete 604A  
                 ExtMode@PathDistances 0200                                ?_AckCmd 0001  
                SlowTick@LCD_IdleTimer 0049                        EEprom_write@dat 0070  
                   _Move_DecelPosition 01E8                    _Wait_ms_nonblocking 72B0  
                     ??_FactoryDefault 0078                      __end_of_PrintTime 618C  
           DisplayChoices@SelectedItem 0096           LCD_FunctionSet@FiveByTenDots 0076  
               ?_ConvertTimeToDiscrete 00B9           MoveToAngle@_DestinationAngle 0106  
                              ?___ftge 0088                                ?___lmul 006B  
                              ?___wmul 006B                              ?_SlowTick 0001  
                          ?_Wait_ticks 0001                       ?_LCD_SetPosition 0075  
                              _CCP1CON 000FBB             MessageStream_ReadByte@temp 006C  
                            ?___altoft 0073                      __end_of___asftadd 74E2  
                 DisplayMenu@ItemCount 0091                         ___lmul@product 0073  
                    __end_of___asftmul 742E                      __end_of___asftsub 746A  
                    ?_LCD_DisplayOnOff 0075                              ?___awtoft 0073  
                            ?___ftpack 006B                              ?___lbtoft 0073  
                        ??_Write_b_eep 006E                              ?___lltoft 0073  
                 PrintTime@EditChevron 00D1                             ??i1___wmul 0005  
                      _GetCurrentAngle 6562                              ?___lwtoft 0073  
                   ??_LCD_DisplayOnOff 0077                   ?_Wait_ms_nonblocking 006B  
                           _enc_states 19D4      ConvertTimeToDiscrete@Milliseconds 00C2  
                              i1l16301 111C                                i1l16311 1138  
                              i1l16303 1122                                i1l16241 71FA  
                              i1l16401 13D8                                i1l16321 1150  
                              i1l16313 113C                                i1l16305 1124  
                              i1l16411 13F8                                i1l16403 13DC  
                              i1l16331 1178                                i1l16315 1144  
                              i1l16323 1152                                i1l16307 1126  
                              i1l16237 71EE                                i1l16501 16C6  
                              i1l16421 14A4                                i1l16413 1414  
                              i1l16405 13E0                                i1l16341 11A4  
                              i1l16333 1188                                i1l16325 115A  
                              i1l16317 1148                                i1l16309 1134  
                              i1l16261 103C                                i1l16239 71F6  
                              i1l16511 171A                                i1l16503 16CE  
                              i1l16431 1512                                i1l16423 14B8  
                              i1l16415 143A                                i1l16407 13E4  
                              i1l16351 11CC                                i1l16343 11A6  
                              i1l16335 118C                                i1l16327 115E  
                              i1l16319 114E                                i1l16271 108A  
                              i1l16263 103E                                i1l16257 76AE  
                              i1l16249 7214                                i1l16521 17B0  
                              i1l16513 173A                                i1l16505 16DE  
                              i1l16433 152A                                i1l16425 14D2  
                              i1l16417 1454                                i1l16409 13EE  
                              i1l16361 1204                                i1l16353 11D0  
                              i1l16345 11B6                                i1l16337 1190  
                              i1l16329 1168                                i1l16281 10B8  
                              i1l16273 108E                                i1l16265 104E  
                              i1l16531 1830                                i1l16523 17B6  
                              i1l16515 174C                                i1l16507 16E6  
                              i1l16451 15E0                                i1l16435 152E  
                              i1l16443 1580                                i1l16427 14D6  
                              i1l16419 149A                                i1l16371 1246  
                              i1l16363 1216                                i1l16355 11D4  
                              i1l16347 11BA                                i1l16339 1194  
                              i1l16291 10FA                                i1l16283 10CE  
                              i1l16275 109A                                i1l16267 1058  
                              i1l16541 187C                                i1l16533 1838  
                              i1l16525 17FC                                i1l16517 1766  
                              i1l16509 1700                                i1l16453 15E4  
                              i1l16445 15C8                                i1l16437 1548  
                              i1l16429 1500                                i1l16461 15F4  
                              i1l16381 12BE                                i1l16373 1250  
                              i1l16365 1228                                i1l16357 11DE  
                              i1l16349 11BE                                i1l16293 1108  
                              i1l16285 10E6                                i1l16277 10A0  
                              i1l16269 1072                                _LCD_Col 00ED  
                              i1l16551 18F2                                i1l16543 188A  
                              i1l16535 1854                                i1l16519 179A  
                              i1l16471 1616                                i1l16463 15FA  
                              i1l16455 15E8                                i1l16447 15D8  
                              i1l16439 1552                                i1l16391 1344  
                              i1l16383 12DC                                i1l16375 1278  
                              i1l16367 1232                                i1l16359 11FA  
                              i1l16295 110C                                i1l16287 10E8  
                              i1l16279 10B4                                i1l16553 18FA  
                              i1l16545 18B4                                i1l16537 1870  
                              i1l16529 1824                                i1l16481 1650  
                              i1l16473 1624                                i1l16465 1600  
                              i1l16449 15DC                                i1l16393 136C  
                              i1l16385 12F4                                i1l16377 127C  
                              i1l16369 1244                                i1l16297 1110  
                              i1l16289 10F2                                i1l16555 190A  
                              i1l16547 18C6                                i1l16539 1878  
                              i1l16491 167E                                i1l16483 1656  
                              i1l16475 162C                                i1l16467 1608  
                              i1l16387 131C                                i1l16395 137C  
                              i1l16379 1296                                i1l16299 1118  
                              i1l16557 1916                                i1l16549 18DE  
                              i1l16493 168C                                i1l16485 1660  
                              i1l16477 163C                                i1l16469 160A  
                              i1l16397 13C4                                i1l16389 132C  
                              i1l16495 169C                                i1l16487 1668  
                              i1l16479 1640                                i1l16399 13D4  
                              i1l16497 16A4                                i1l16489 167A  
                              i1l16499 16AC                                i2l15001 592E  
                              i2l15011 594C                                i2l15003 5934  
                              i2l15013 595C                                i2l15021 596C  
                              i2l15005 5938                          ?_EEprom_write 006E  
                              i2l15031 59CA                                i2l15023 5974  
                              i2l15015 5960                                i2l15007 593E  
                              i2l15033 59E2                                i2l15025 597A  
                              i2l15017 5966                                i2l15009 5948  
                              i2l15027 597E                                i2l15019 596A  
                              i2l15029 59C0                                i2l14961 5838  
                              i2l14971 587C                                i2l14963 5844  
                              i2l14955 5826                                i2l14981 58C8  
                              i2l14973 589E                                i2l14965 585A  
                              i2l14957 582E              CreateWaypointProgram@Done 01A5  
                              _LCD_Row 00EE                                i2l14983 58D0  
                              i2l14975 58A2                                i2l14991 5902  
                              i2l14967 585E                                i2l14959 5830  
                              i2l14993 590E                                i2l14985 58DC  
                              i2l14977 58B0                                i2l14969 5862  
                 GetPresetNumber@ptype 0090                                i2l14995 5912  
                              i2l14987 58E8                                i2l14979 58BA  
                              i2l14997 5916                                i2l14989 5900  
                              i2l14999 5920                          GetFloat@Value 00CB  
           ??_Wait_seconds_nonblocking 0073                            _MoveToAngle 5184  
                           ??_GetClick 008F                                Idle@idx 017E  
                           ??_GetFloat 00D6                             ??_FastTick 0060  
                           ??_GetInput 008E                                _SPBRGH1 000FD4  
                  __size_of_LoadPreset 002E                             ??_GetYesNo 0092  
                   SlowTick@MotorSpeed 0023                            _Move_Origin 003D  
                      GetYesNo@Initial 0091                    Wait_ticks@remaining 006D  
    __size_of_GetCurrentLinearPosition 003C              ?_GetCurrentLinearPosition 008D  
          CreateOrbitProgram@ENDMODE_0 01A0            CreateOrbitProgram@ENDMODE_1 01A2  
          CreateOrbitProgram@ENDMODE_2 01A4                    __size_of_Read_b_eep 0018  
          CreateOrbitProgram@COMMAND_0 01A6            CreateOrbitProgram@COMMAND_1 01A8  
               MoveToAngle@CW_Distance 0112                             ??_Busy_eep 006B  
                              _GetTime 3576                          LoadPreset@dat 0072  
                              _NackCmd 7374                MoveToAngle@CCW_Distance 0115  
                 _bLock_Motor_Position 02C8                   __size_of_EEprom_read 003C  
                      __size_of_AckCmd 0036                            Wait_ms@time 008E  
                      Wait_ticks@Ticks 006C            MessageStream_WriteMULTI@dat 006D  
                              _ReadIdx 00F0                                _ExtMode 2444  
                    ??_GetPresetNumber 008F                            _bFollowMode 02C5  
                 DisplayChoices@Prompt 0092                                __Hparam 0000  
                     _bMove_InProgress 02CF                                __Lparam 0000  
                          Wait_us@time 0072                                _Wait_ms 7814  
                              _Wait_us 72F2                                _SetupIO 746A  
               GetRotaryMultiplier@idx 006D                __size_of_DisplayChoices 0084  
     RunOrbitProgram@DistanceRemaining 0190                __end_of_RunOrbitProgram 468C  
                              ___aldiv 6702                        __size_of___ftge 0058  
                           ??_SlowTick 0008              ConvertTimeToDiscrete@Time 00B9  
                              ___awdiv 6CD6                        __size_of___lmul 004C  
                              ___ftadd 5A0C                                ___ftdiv 63A0  
                              ___ftneg 77DA                        __size_of___wmul 002C  
                              ___ftmul 62A4                                ___ftsub 75BC  
                              ___fttol 6876               ConvertTimeToDiscrete@dat 00CA  
                              ___lwdiv 714A              ConvertTimeToDiscrete@temp 00C4  
                     ?_LCD_PrintString 0076                             ??___altoft 0077  
                __CFG_RTCOSC$INTOSCREF 000000                                __pcinit 5E5C  
                           ??___awtoft 0076                    __size_of_SavePreset 002E  
                           ??___ftpack 0070                             ??___lbtoft 0076  
                              __ramtop 1000                             ??___lltoft 0077  
                              __ptext0 4C90                                __ptext1 2444  
                              __ptext2 7194                                __ptext3 6E2A  
                              __ptext4 746A                                __ptext5 6632  
                              __ptext6 6D4E                                __ptext7 5CEE  
                              __ptext8 1DBA                                __ptext9 3972  
                ??_Wait_ms_nonblocking 006D                             ??___lwtoft 0076  
                       ??_EEprom_write 0073                _MessageStream_WriteByte 73B4  
                _CreateWaypointProgram 2A20                      i1___lwdiv@divisor 0003  
                         __size_of_Now 004E                              _T2CONbits 000FCA  
                 __end_of_RealtimeMode 3C6C                          _ClearUI_Event 02BB  
                    i1___lwdiv@counter 0005                            _ShowVoltage 6C5C  
                     ___aldiv@dividend 006B                ?_MessageStream_ReadByte 0001  
             RunOrbitProgram@EarlyExit 0188                          GoToSleep@Time 0091  
                  __end_of_Write_b_eep 771E                              _LCD_Line1 03C8  
                            _LCD_Line2 03DC            __size_of_RunWaypointProgram 0528  
         ConvertTimeFromDiscrete@Hours 0091                                main@idx 04E5  
                              main@ret 04E9             MessageStream_WriteByte@dat 006B  
                       __pintcode_body 581A           ConvertTimeFromDiscrete@dTemp 0092  
                 end_of_initialization 5F76                    __size_of_Wait_ticks 002A  
   CreateWaypointProgram@DeltaDistance 01A9           RunOrbitProgram@TimeRemaining 0182  
                    GetPresetType@addr 0073      __size_of_MessageStream_WriteMULTI 0056  
                    GetPresetType@pnum 0072              ?_MessageStream_WriteMULTI 006D  
                     ??_LCD_PrintFloat 00BF                                int_func 581A  
                            Idle@CmdID 017D                          FastTick@RXDat 006A  
                CreateOrbitProgram@ret 01BE              __size_of_LCD_ClearDisplay 0080  
                         ?_DisplayMenu 008F                   __end_of_MoveAdvanced 408C  
                     ___aldiv@quotient 0075                              GetTime@Tm 00E7  
              __end_of_GetCurrentAngle 6624                                postdec1 000FE5  
                              postdec2 000FDD                       GoToSleep@Expires 0098  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE             SlowTick@internal_Tick500Hz 0031  
          MessageStream_WriteByte@temp 006C                         PrintTime@Hours 00D2  
                i1___wmul@multiplicand 0003                            AckCmd@CmdID 006D  
                            _PORTBbits 000F81     MoveAdvanced@CurrentPosition_counts 00CE  
                    _MoveAdvanced$3895 00E5                      _MoveAdvanced$3896 00CB  
                     Move@Distance_deg 0100           RunWaypointProgram@CycleIndex 018D  
     __size_of_ConvertTimeFromDiscrete 00CE         __end_of_MessageStream_ReadByte 7248  
                        _RX_InProgress 02BE            SlowTick@SwitchPressDuration 004F  
           MinTimeToMove@CoastDistance 00BD                    RunWaypointProgram@D 0188  
                  RunWaypointProgram@S 0185                    RunWaypointProgram@T 017F  
                            _TRISCbits 000F94                  ExtMode@PrepMove_Ready 01DE  
                ExtMode@PrepMove_Speed 01D1                              i1___lwdiv 71DE  
                      DisplayMenu@Menu 008F              SlowTick@LastMotorPosition 02D2  
                    LCD_PrintFloat@dat 00B9                       ExtMode@PathCount 01DF  
                          ___ftdiv@exp 0097                         __end_of_AckCmd 72A2  
            RunOrbitProgram@CurrentPos 018D                    _BINARY_TO_ASCII_HEX 19C4  
                         ??_LoadPreset 0074                     _bLock_PID_SetPoint 02C9  
                          ___ftmul@exp 0082           __end_of_GetInput_nonblocking 77DA  
                            _GoToSleep 6484               SlowTick@RawRotaryEncoder 0052  
                     ?_RunOrbitProgram 0001                           ??_Read_b_eep 006D  
                       __end_of___ftge 6FBA                         __end_of___lmul 714A  
        MoveAdvanced@Accel_Deg_Sec_Sec 00DF                              _TX_bCount 00F1  
                      _bLock_Tick500Hz 02CB                      LCD_PrintLong@sign 007E  
                    LCD_PrintLong@temp 007F              ??_MessageStream_WriteByte 006B  
                       __end_of___wmul 7672                          __pidataCOMRAM 7878  
               ?_CreateWaypointProgram 0001                          GetTime@prompt 00D7  
                          _Write_b_eep 76F4                 ExtMode@PathTravelTimes 0300  
                        _Move_speedQ24 01F0                          ??_LCD_PowerUp 0090  
               __size_of_GetPresetType 0032                    start_initialization 5E5C  
                        _Move_position 0410                      __size_ofi1___wmul 002C  
                __end_of_LCD_PrintChar 6B58                            __end_of_Now 70FE  
                __end_of_LCD_PrintLong 497E              RunOrbitProgram@SpdConvert 0185  
                           ?i1___lwdiv 0001                              _Tick500Hz 01F8  
                   __end_of_LoadPreset 7646              _ZeroRotaryDetentIntervals 02C2  
             SlowTick@isPendingUIEvent 02B9                      __size_of_GetClick 001C  
                         ??_SavePreset 0075                      __size_of_GetFloat 0318  
                   EEprom_write@bCount 0072          CreateOrbitProgram@EndModeMenu 01AA  
                    __size_of_FastTick 4A04                      __size_of_GetInput 002C  
                    __size_of_GetYesNo 0096             MoveAdvanced@_Speed_Deg_Sec 00BC  
                   __end_of_Read_b_eep 7846                               ??_AckCmd 006D  
         __size_of_GetRotaryMultiplier 0074                ??_ConvertTimeToDiscrete 00C4  
          __size_of_CreateOrbitProgram 0572                   __end_of_EEprom_write 7374  
                    __size_of_Busy_eep 0006                         _DisplayChoices 6A50  
                           ?_GoToSleep 0001                               ??___ftge 008E  
               __size_of_SetupHardware 0070                               ??___lmul 0073  
              MoveToAngle@CurrentAngle 011B                               ??___wmul 006F  
                     ?_GetCurrentAngle 00A4                           ??_Wait_ticks 006B  
               LCD_PrintFloat@fraction 00C3                              _PrintTime 608E  
       Wait_seconds_nonblocking@msWait 0073             GetRotaryMultiplier@uiAccum 006B  
           SpeedRequiredToMoveInTime@D 00C6             SpeedRequiredToMoveInTime@T 00C9  
               SlowTick@BatteryScaleQ8 001A         SpeedRequiredToMoveInTime@Speed 00C3  
       SpeedRequiredToMoveInTime@_Time 00B7                            __pdataBANK0 00F3  
                          __pdataBANK1 01FF                            __pdataBANK2 02F8  
                          __pdataBANK4 04EA                            __pdataBANK5 0500  
                __size_of_RealtimeMode 02FA                              _bMove_Neg 02D0  
                __end_of_MinTimeToMove 5122                      __size_of_SlowTick 0928  
     __end_of_GetCurrentLinearPosition 704C                LCD_DisplayOnOff@BlinkOn 0076  
                   __end_of_SavePreset 7618                              _bPowerOff 02D1  
                    __size_of___altoft 0068                      __size_of___awtoft 0038  
                    __size_of___ftpack 0088                      __size_of___lbtoft 0028  
                            ___asftadd 74A6                _CreateOrbitProgram$3897 0193  
                            ___asftmul 73F2               __size_of_LCD_FunctionSet 0068  
             _isPendingExternalUIEvent 02D5                              ___asftsub 742E  
                    __size_of___lltoft 004E                            __pbssCOMRAM 0031  
                         ?_MoveToAngle 0106                      __size_of___lwtoft 0026  
                        __pcstackBANK0 0060                          __pcstackBANK1 0100  
                        __pcstackBANK2 0200                          __pcstackBANK3 0300  
                        __pcstackBANK4 049F        CreateWaypointProgram@CycleCount 01AE  
                      _GetPresetNumber 67BE             RunWaypointProgram@PingPong 018C  
              _bDecrement_PID_Setpoint 02C4                    __end_of_LCD_PowerUp 71DE  
            __size_of_LCD_DisplayOnOff 0068                       EEprom_write@addr 006E  
                      _Speed_SetToThis 01F4          CreateOrbitProgram@CommandMenu 01B4  
                   __end_of_Wait_ticks 76F4                               ?_GetTime 00D7  
                             ?_NackCmd 006D                  __size_of_MoveAdvanced 0378  
                      RealtimeMode@ret 00CA                               ?_ExtMode 0001  
               __end_of_DisplayChoices 6AD4                       _MoveToAngle$3893 0118  
                     _MoveToAngle$3894 010C     CreateWaypointProgram@DirectionMenu 019A  
             MoveAdvanced@Distance_deg 00B9                          _GetPresetType 758A  
                ExtMode@PathDwellTimes 0106                           _RealtimeMode 3972  
                     ___lwdiv@dividend 006B                       _LCD_ClearDisplay 6BDC  
      CreateWaypointProgram@CurrentPos 01A6                               ?_Wait_ms 008E  
                             ?_SetupIO 0001                               ?_Wait_us 0072  
           ConvertTimeFromDiscrete@ret 0099                              __pintcode 1008  
                        __pmediumconst 1944                               ?___aldiv 006B  
                             ?___awdiv 006B                               ?___ftadd 0073  
                             ?___ftdiv 0088                               ?___ftneg 006B  
                           ?_PrintTime 00CD                               ?___ftmul 0077  
                             ?___ftsub 0099                               ?___fttol 00AA  
                             ?___lwdiv 006B                   __size_of_DisplayMenu 0112  
                  GetPresetNumber@pnum 0091                            __pintcodelo 1018  
     CreateWaypointProgram@DIRECTION_0 0192       CreateWaypointProgram@DIRECTION_1 0194  
                         GetFloat@unit 00C9                _ConvertTimeFromDiscrete 5F7C  
                           ?___asftadd 0088       __end_of_MessageStream_WriteMULTI 7010  
              _RunWaypointProgram$3899 0182                             ?___asftmul 0088  
                           ?___asftsub 009F                           ?_ShowVoltage 0001  
             __size_of_LCD_SetPosition 006C                          NackCmd@Reason 006D  
                        _SetupHardware 6D4E                           _MoveAdvanced 3D14  
                     ___lwdiv@quotient 0070                            ??i1___lwdiv 0005  
           ?_SpeedRequiredToMoveInTime 00B4                     _Move_CoastSpeedQ24 0039  
                   Move@_Speed_Deg_Sec 0103                   _GetInput_nonblocking 77BC  
                        ??_EEprom_read 0072                   FastTick@TimmingError 00EA  
                      ___aldiv@divisor 006F                           GoToSleep@bin 0094  
                      ___aldiv@counter 0073                           GoToSleep@idx 0097  
                         GoToSleep@inp 0096                         ___wmul@product 006F  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _LATEbits 000F8D                  _RotaryDetentIntervals 0400  
                       ?_GetPresetType 0001               MoveToAngle@Speed_Deg_Sec 010F  
                     GetPresetType@ret 0075                         GetFloat@Output 00D8  
                DisplayMenu@SecondLine 0097                        ?_DisplayChoices 008F  
    __size_of_Wait_seconds_nonblocking 0028              ?_Wait_seconds_nonblocking 0071  
               MinTimeToMove@AccelDist 00C3                 MinTimeToMove@AccelTime 00D2  
                             i1u910_20 1108                               i1u910_21 1106  
                             i1u911_20 1134                               i1u911_21 1132  
                             i1u920_20 1204                               i1u912_20 115A  
                             i1u904_20 1058                               i1u920_21 1202  
                             i1u912_21 1158                               i1u904_21 1056  
                             i1u921_20 1216                               i1u913_20 1178  
                             i1u905_20 1072                               i1u921_21 1214  
                             i1u913_21 1176                               i1u905_21 1070  
                             i1u930_20 1344                               i1u922_20 1228  
                             i1u914_20 1188                               i1u906_20 108A  
                             i1u930_21 1342                               i1u922_21 1226  
                             i1u914_21 1186                               i1u906_21 1088  
                             i1u931_20 136C                               i1u923_20 1232  
                             i1u915_20 11A4                               i1u907_20 109A  
                             i1u931_21 136A                               i1u923_21 1230  
                             i1u915_21 11A2                               i1u907_21 1098  
                             i1u940_20 152A                               i1u932_20 13C4  
                             i1u924_20 1250                               i1u916_20 11B6  
                             i1u908_20 10B4                               i1u940_21 1528  
                             i1u932_21 13C2                               i1u924_21 124E  
                             i1u916_21 11B4                               i1u908_21 10B2  
                             i1u941_20 1548                               i1u933_20 13EE  
                             i1u925_20 1278                               i1u917_20 11CC  
                             i1u909_20 10F2                               i1u941_21 1546  
                             i1u933_21 13EC                               i1u925_21 1276  
                             i1u917_21 11CA                               i1u909_21 10F0  
                             i1u950_20 16A4                               i1u942_20 157A  
                             i1u934_20 13F8                               i1u926_20 1296  
                             i1u918_20 11DE                               i1u950_21 16A2  
                             i1u942_21 1578                               i1u934_21 13F6  
                             i1u926_21 1294                               i1u918_21 11DC  
                             i1u951_20 16DE                               i1u943_20 15C8  
                             i1u935_20 143A                               i1u927_20 12BE  
                             i1u919_20 11FA                               i1u951_21 16DC  
                             i1u943_21 15C6                               i1u935_21 1438  
                             i1u927_21 12BC                               i1u919_21 11F8  
                             i1u944_20 15F2                               i1u936_20 149A  
                             i1u928_20 12F4                               i1u944_21 15F0  
                             i1u936_21 1498                               i1u928_21 12F2  
                             i1u952_25 16F2                               i1u937_20 14A4  
                             i1u929_20 131C                               i1u937_21 14A2  
                             i1u929_21 131A                               i1u953_25 173E  
                             i1u945_25 161A                               i1u954_20 179A  
                             i1u946_20 163C                               i1u938_20 14D2  
                             i1u954_21 1798                               i1u946_21 163A  
                             i1u938_21 14D0                               i2u730_40 5838  
                             i2u730_41 5836                               i1u955_20 17FC  
                             i1u947_20 1650                               i1u939_20 1500  
                             i1u955_21 17FA                               i1u947_21 164E  
                             i1u939_21 14FE                               i2u731_40 5844  
                             i2u731_41 5842                               i1u956_20 1878  
                             i1u948_20 1660                               i1u956_21 1876  
                             i1u948_21 165E                               i2u740_40 592E  
                             i2u732_40 587C                               i2u740_41 592C  
                             i2u732_41 587A                               i1u957_20 18B4  
                             i1u949_20 167A                               i1u957_21 18B2  
                             i1u949_21 1678                               i2u741_40 5948  
                             i2u733_40 589E                               i2u741_41 5946  
                             i2u733_41 589C                               i1u958_20 18C6  
                             i1u958_21 18C4                               i2u742_40 595C  
                             i2u734_40 58B0                               i2u742_41 595A  
                             i2u734_41 58AE                               i1u959_20 18F2  
                             i1u959_21 18F0                               i2u743_40 59CA  
                             i2u735_40 58C8                               i2u743_41 59C8  
                             i2u735_41 58C6                               i2u744_40 59E2  
                             i2u736_40 58DC                               i2u744_41 59E0  
                             i2u736_41 58DA                               i2u737_40 58E8  
                             i2u737_41 58E6                               Idle@temp 0179  
                             i2u738_40 590E                               i2u738_41 590C  
                             i2u739_40 5920                               i2u739_41 591E  
                          ??_GoToSleep 0091          MessageStream_WriteMULTI@CmdID 0071  
                            main@F9840 0500                              main@F9838 04EA  
          __end_of_Wait_ms_nonblocking 72F2                         GetFloat@prompt 00C7  
                     LCD_PrintChar@dat 0075                LCD_FunctionSet@EightBit 0077  
                         Idle@tempPset 0101              MoveAdvanced@Speed_Deg_Sec 00D9  
                   _Move_FinalPosition 01EC                     _MinTimeToMove$3890 00C6  
                   _MinTimeToMove$3891 00C9                LCD_FunctionSet@DualLine 0075  
              __size_of_FactoryDefault 00D0                      ___wmul@multiplier 006B  
                             i1___wmul 769E                       __CFG_SOSCSEL$DIG 000000  
              __end_of_GetPresetNumber 6876                       Wait_us@tickcount 0074  
                             _UI_Event 00F2                        Write_b_eep@badd 006B  
                       DisplayMenu@ret 0096                        Write_b_eep@bdat 006D  
MoveAdvanced@_Acceleration_Deg_Sec_Sec 00BF                            _LCD_PowerUp 7194  
           __end_of_RunWaypointProgram 3504         ConvertTimeFromDiscrete@Minutes 008D  
       ConvertTimeFromDiscrete@Seconds 008E                               _RXBuffer 0700  
      CreateWaypointProgram@TravelTime 01B1                               ExtMode@D 02C8  
                             ExtMode@S 01D8                               ExtMode@T 01DB  
             __size_of_LCD_PrintString 0034               _GetCurrentLinearPosition 7010  
                         GetTime@Hours 00E6                               _TXBuffer 0600  
                       ?_SetupHardware 0001                               _GetClick 77F8  
                             _GetFloat 40A6                               _FastTick 1008  
                             _GetInput 7672                         LoadPreset@addr 0075  
                             _GetYesNo 6928                 MinTimeToMove@CoastTime 00C0  
                ?_GetInput_nonblocking 0001            SlowTick@isPendingRotaryTick 02B8  
                     LCD_PrintLong@dat 0079                         LoadPreset@pnum 0074  
                    ___lmul@multiplier 006B                              copy_data0 5EE8  
                            copy_data1 5F08                              copy_data2 5F28  
    __end_of_SpeedRequiredToMoveInTime 55FA                      ??_LCD_FunctionSet 0077  
                    GetFloat@Precision 00D3                  __size_of_EEprom_write 0040  
                DisplayChoices@Initial 0094                         SlowTick@ucBatt 001E  
                             _Busy_eep 786E                         SlowTick@uiTemp 0029  
                     __size_of_GetTime 03BA                    LCD_DisplayOnOff@dat 0078  
                           _EECON1bits 000F7F                       __size_of_NackCmd 0040  
                             __Hparam0 0000                    __end_of_EEprom_read 751E  
                             __Lparam0 0000                       __size_of_ExtMode 054A  
                   PrintTime@precision 00D0                       LCD_PrintString@a 0078  
                RunOrbitProgram@EndPos 017F                 MinTimeToMove@RealSpeed 00BA  
                     __size_of_Wait_ms 001A                       __size_of_Wait_us 0042  
                     __size_of_SetupIO 003C                ??_CreateWaypointProgram 0191  
                             _SlowTick 1018                            ??_PrintTime 00D2  
               MinTimeToMove@_Distance 00B4                               _bWaiting 02D4  
                     __size_of___aldiv 00BC              ??_ConvertTimeFromDiscrete 0091  
                     __size_of___awdiv 0078                       __size_of___ftadd 015C  
           ConvertTimeToDiscrete@Hours 00BC                       __size_of___ftdiv 00DA  
                     __size_of___ftneg 001E                               ___altoft 6E92  
                     __size_of___ftmul 00E6                       __size_of___ftsub 002E  
                     __size_of___fttol 008E                       __size_of___lwdiv 004A  
                SlowTick@PID_LastError 004B      SlowTick@RotaryDetentIntervalIndex 0053  
                             ___awtoft 751E                               ___ftpack 69BE  
                             ___lbtoft 771E                           ?_Write_b_eep 006B  
                             ___lltoft 7062                        ShowVoltage@Batt 00C7  
                  _GetRotaryMultiplier 6B58                               ___lwtoft 7796  
                          GetClick@ret 008F                            ??___asftadd 008D  
                          ??___asftmul 008D                            ??___asftsub 00A4  
                         _EEprom_write 7334                        ___lwdiv@divisor 006D  
                      ___lwdiv@counter 006F       CreateWaypointProgram@intDistance 01AC  
                             __ptext10 2A20                               __ptext11 67BE  
                             __ptext20 6484                               __ptext12 2FDC  
                             __ptext21 77BC                               __ptext13 7746  
                             __ptext30 6A50                               __ptext22 70B0  
                             __ptext14 53D2                               __ptext31 40A6  
                             __ptext23 4F2A                               __ptext15 43D8  
                             __ptext40 7556                               __ptext32 55FA  
                             __ptext24 619C                               __ptext16 7814  
                             __ptext41 6AD4                               __ptext33 3576  
                             __ptext25 7010                               __ptext17 758A  
                             __ptext50 7374                               __ptext42 6EFA  
                             __ptext34 608E                               __ptext26 5184  
                             __ptext18 6C5C                               __ptext51 7618  
                             __ptext43 6DBE                               __ptext35 46CC  
                             __ptext27 776E                               __ptext19 77F8  
                             __ptext60 5B80                               __ptext52 6FBA  
                             __ptext44 72F2                               __ptext36 6B58  
                             __ptext28 3D14                               __ptext61 5F7C  
                             __ptext53 73B4                               __ptext45 76CA  
                             __ptext37 72B0                               __ptext29 6562  
                             __ptext70 7062                               __ptext62 6702  
                             __ptext54 75EA                               __ptext46 7672  
                             __ptext38 6928                               __ptext71 70FE  
                             __ptext63 6E92                               __ptext55 7334  
                             __ptext47 49BE                               __ptext39 6BDC  
                             __ptext80 63A0                               __ptext72 714A  
                             __ptext64 6CD6                               __ptext56 74E2  
                             __ptext48 7228                               __ptext81 62A4  
                             __ptext73 7646                               __ptext65 751E  
                             __ptext57 786E                               __ptext49 726C  
                             __ptext82 7796                               __ptext74 74A6  
                             __ptext66 6F62                               __ptext58 76F4  
                             __ptext75 73F2                               __ptext67 77DA  
                             __ptext59 782E                               __ptext84 71DE  
                             __ptext76 742E                               __ptext68 6876  
                             __ptext85 769E                               __ptext77 75BC  
                             __ptext69 771E                               __ptext78 5A0C  
                             __ptext79 69BE                    _ASCII_HEX_TO_BINARY 1944  
                   GetPresetNumber@inp 008F                   _Speed_IsAccelerating 02C0  
                          GetFloat@Max 00D0                            GetFloat@Min 00CD  
             _MessageStream_WriteMULTI 6FBA                   __size_of_MoveToAngle 0226  
                     _LCD_DisplayOnOff 6EFA                           NackCmd@CmdID 006E  
                   i1___lwdiv@dividend 0001                     DisplayChoices@Menu 008F  
                        __size_of_Idle 02AC                   _LCD_BacklightEnabled 02BD  
                    ??_LCD_SetPosition 0076                        ??_GetPresetType 0072  
                        __size_of_Move 0028                 MinTimeToMove@TotalTime 00CC  
        CreateOrbitProgram@SpeedMODE_0 019A          CreateOrbitProgram@SpeedMODE_1 019C  
        CreateOrbitProgram@SpeedMODE_2 019E                   ?_GetRotaryMultiplier 0001  
                        __size_of_main D7B4                          __size_of_sqrt 00F2  
                  _WaitUntil_Tick500Hz 0045         __size_of_ConvertTimeToDiscrete 0126  
        __end_of_ConvertTimeToDiscrete 5CA6                           PrintTime@dat 00CD  
                          GetInput@ret 008E                               main@MSG1 049F  
                             main@MSG2 04B3                GetCurrentAngle@MotorPos 00A7  
              __size_of_LCD_PrintFloat 01FE                               main@idx1 04E6  
                             main@idx2 04E7                         ExtMode@PathIdx 02CB  
       CreateWaypointProgram@COMMAND_0 0196         CreateWaypointProgram@COMMAND_1 0198  
                             main@pnum 04E4                GetInput_nonblocking@ret 006B  
                          GetTime@Time 00D9                    __CFG_INTOSCSEL$HIGH 000000  
                   FastTick@LowTrigger 00F4                         MinTimeToMove@D 00CF  
             CreateWaypointProgram@idx 01BC                   _bClear_MotorPosition 02C3  
             CreateWaypointProgram@ret 01BD                     i1___lwdiv@quotient 0006  
             GetFloat@FractionalPlaces 00D7                       ?_GetPresetNumber 0001  
             __size_of_RunOrbitProgram 02B4                        ??_SetupHardware 006B  
                  _CurrentOrbitProgram 048D                             _INTCONbits 000FF2  
                        main@COMMAND_0 04C7                          main@COMMAND_1 04C9  
                        main@COMMAND_2 04CD                          main@COMMAND_3 04CB  
                        main@COMMAND_4 04CF                          main@COMMAND_5 04D1  
                        main@COMMAND_6 04D3               __end_of_LCD_ClearDisplay 6C5C  
               ??_GetInput_nonblocking 006B                            GetYesNo@inp 0092  
                 __size_of_ShowVoltage 007A                            _EEprom_read 74E2  
                             intlevel1 0000                               intlevel2 0000  
                     PrintTime@Minutes 00D3                       PrintTime@Seconds 00D4  
           __end_of_CreateOrbitProgram 232C                      ??_LCD_PrintString 0078  
                ??_GetRotaryMultiplier 006B                    LCD_ClearDisplay@idx 0075  
                           _RCSTA1bits 000FAB                      DisplayChoices@ret 0095  
                       _BatteryVoltage 01FC            ConvertTimeFromDiscrete@temp 0095  
                         _bMotionError 02CE                       Idle@PresetNumber 0100  
             ?_MessageStream_WriteByte 0001                 __size_of_LCD_PrintChar 0084  
            SlowTick@PendingRotaryTick 004D                DisplayMenu@SelectedItem 0098  
               __size_of_LCD_PrintLong 02B2                             GetTime@Max 00DE  
                           GetTime@Min 00DB               ??_MessageStream_ReadByte 006B  
                         SlowTick@diff 001C                         _FactoryDefault 6632  
              Wait_ms_nonblocking@time 006B               __size_of_GetCurrentAngle 00C2  
                         ___aldiv@sign 0074       __end_of_Wait_seconds_nonblocking 776E  
          ??_SpeedRequiredToMoveInTime 00BA                       ??_DisplayChoices 0095  
              _bIncrement_PID_Setpoint 02C6                 __size_of_MinTimeToMove 01F8  
                  GetTime@Milliseconds 00E2                     LCD_FunctionSet@dat 0078  
                RunWaypointProgram@idx 0190                  RunWaypointProgram@ret 018F  
                        ??_DisplayMenu 0093               ExtMode@PrepMove_Distance 01CE  
           SlowTick@RotaryTickInterval 0055  
